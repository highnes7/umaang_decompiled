package com.github.mikephil.charting.charts;

import android.annotation.SuppressLint;
import android.annotation.TargetApi;
import android.content.Context;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Matrix;
import android.graphics.Paint;
import android.graphics.Paint.Style;
import android.graphics.PointF;
import android.graphics.RectF;
import android.os.Build.VERSION;
import android.util.AttributeSet;
import android.view.MotionEvent;
import android.view.View.OnTouchListener;
import android.view.ViewGroup;
import com.github.mikephil.charting.animation.ChartAnimator;
import com.github.mikephil.charting.components.AxisBase;
import com.github.mikephil.charting.components.ComponentBase;
import com.github.mikephil.charting.components.Legend;
import com.github.mikephil.charting.components.Legend.LegendPosition;
import com.github.mikephil.charting.components.XAxis;
import com.github.mikephil.charting.components.XAxis.XAxisPosition;
import com.github.mikephil.charting.components.YAxis;
import com.github.mikephil.charting.components.YAxis.AxisDependency;
import com.github.mikephil.charting.data.BarData;
import com.github.mikephil.charting.data.BarEntry;
import com.github.mikephil.charting.data.BarLineScatterCandleBubbleData;
import com.github.mikephil.charting.data.ChartData;
import com.github.mikephil.charting.data.Entry;
import com.github.mikephil.charting.highlight.ChartHighlighter;
import com.github.mikephil.charting.highlight.Highlight;
import com.github.mikephil.charting.highlight.Range;
import com.github.mikephil.charting.interfaces.dataprovider.BarLineScatterCandleBubbleDataProvider;
import com.github.mikephil.charting.interfaces.datasets.IBarLineScatterCandleBubbleDataSet;
import com.github.mikephil.charting.interfaces.datasets.IDataSet;
import com.github.mikephil.charting.jobs.AnimatedMoveViewJob;
import com.github.mikephil.charting.jobs.AnimatedZoomJob;
import com.github.mikephil.charting.jobs.MoveViewJob;
import com.github.mikephil.charting.jobs.ZoomJob;
import com.github.mikephil.charting.listener.BarLineChartTouchListener;
import com.github.mikephil.charting.listener.ChartTouchListener;
import com.github.mikephil.charting.listener.OnDrawListener;
import com.github.mikephil.charting.renderer.AxisRenderer;
import com.github.mikephil.charting.renderer.DataRenderer;
import com.github.mikephil.charting.renderer.LegendRenderer;
import com.github.mikephil.charting.renderer.Renderer;
import com.github.mikephil.charting.renderer.XAxisRenderer;
import com.github.mikephil.charting.renderer.YAxisRenderer;
import com.github.mikephil.charting.utils.PointD;
import com.github.mikephil.charting.utils.Transformer;
import com.github.mikephil.charting.utils.Utils;
import com.github.mikephil.charting.utils.ViewPortHandler;
import f.a.a.a.a;
import java.util.List;

@SuppressLint({"RtlHardcoded"})
public abstract class BarLineChartBase<T extends BarLineScatterCandleBubbleData<? extends IBarLineScatterCandleBubbleDataSet<? extends Entry>>>
  extends Chart<T>
  implements BarLineScatterCandleBubbleDataProvider
{
  public long drawCycles = 0L;
  public Integer mAutoScaleLastHighestVisibleXIndex = null;
  public Integer mAutoScaleLastLowestVisibleXIndex = null;
  public boolean mAutoScaleMinMaxEnabled = false;
  public YAxis mAxisLeft;
  public YAxisRenderer mAxisRendererLeft;
  public YAxisRenderer mAxisRendererRight;
  public YAxis mAxisRight;
  public Paint mBorderPaint;
  public boolean mCustomViewPortEnabled = false;
  public boolean mDoubleTapToZoomEnabled = true;
  public boolean mDragEnabled = true;
  public boolean mDrawBorders = false;
  public boolean mDrawGridBackground = false;
  public OnDrawListener mDrawListener;
  public Paint mGridBackgroundPaint;
  public boolean mHighlightPerDragEnabled = true;
  public boolean mKeepPositionOnRotation = false;
  public Transformer mLeftAxisTransformer;
  public int mMaxVisibleCount = 100;
  public float mMinOffset = 15.0F;
  public boolean mPinchZoomEnabled = false;
  public Transformer mRightAxisTransformer;
  public boolean mScaleXEnabled = true;
  public boolean mScaleYEnabled = true;
  public XAxisRenderer mXAxisRenderer;
  public long totalTime = 0L;
  
  public BarLineChartBase(Context paramContext)
  {
    super(paramContext);
  }
  
  public BarLineChartBase(Context paramContext, AttributeSet paramAttributeSet)
  {
    super(paramContext, paramAttributeSet);
  }
  
  public BarLineChartBase(Context paramContext, AttributeSet paramAttributeSet, int paramInt)
  {
    super(paramContext, paramAttributeSet, paramInt);
  }
  
  public void calcMinMax()
  {
    if (mAutoScaleMinMaxEnabled) {
      ((BarLineScatterCandleBubbleData)mData).calcMinMax(getLowestVisibleXIndex(), getHighestVisibleXIndex());
    }
    mXAxis.mAxisMaximum = (((BarLineScatterCandleBubbleData)mData).getXVals().size() - 1);
    XAxis localXAxis = mXAxis;
    mAxisRange = Math.abs(mAxisMaximum - mAxisMinimum);
    mAxisLeft.calcMinMax(((BarLineScatterCandleBubbleData)mData).getYMin(YAxis.AxisDependency.LEFT), ((BarLineScatterCandleBubbleData)mData).getYMax(YAxis.AxisDependency.LEFT));
    mAxisRight.calcMinMax(((BarLineScatterCandleBubbleData)mData).getYMin(YAxis.AxisDependency.RIGHT), ((BarLineScatterCandleBubbleData)mData).getYMax(YAxis.AxisDependency.RIGHT));
  }
  
  public void calcModulus()
  {
    Object localObject = mXAxis;
    if (localObject != null)
    {
      if (!((ComponentBase)localObject).isEnabled()) {
        return;
      }
      if (!mXAxis.isAxisModulusCustom())
      {
        localObject = new float[9];
        mViewPortHandler.getMatrixTouch().getValues((float[])localObject);
        mXAxis.mAxisLabelModulus = ((int)Math.ceil(((BarLineScatterCandleBubbleData)mData).getXValCount() * mXAxis.mLabelRotatedWidth / (mViewPortHandler.contentWidth() * localObject[0])));
      }
      if (mLogEnabled)
      {
        localObject = a.b("X-Axis modulus: ");
        ((StringBuilder)localObject).append(mXAxis.mAxisLabelModulus);
        ((StringBuilder)localObject).append(", x-axis label width: ");
        ((StringBuilder)localObject).append(mXAxis.mLabelWidth);
        ((StringBuilder)localObject).append(", x-axis label rotated width: ");
        ((StringBuilder)localObject).append(mXAxis.mLabelRotatedWidth);
        ((StringBuilder)localObject).append(", content width: ");
        ((StringBuilder)localObject).append(mViewPortHandler.contentWidth());
        ((StringBuilder)localObject).toString();
      }
      localObject = mXAxis;
      if (mAxisLabelModulus < 1) {
        mAxisLabelModulus = 1;
      }
    }
  }
  
  public void calculateOffsets()
  {
    if (!mCustomViewPortEnabled)
    {
      Object localObject = mLegend;
      float f5 = 0.0F;
      float f2 = 0.0F;
      float f4 = 0.0F;
      float f3 = 0.0F;
      float f1 = f3;
      if (localObject != null)
      {
        f1 = f3;
        if (((ComponentBase)localObject).isEnabled()) {
          if ((mLegend.getPosition() != Legend.LegendPosition.RIGHT_OF_CHART) && (mLegend.getPosition() != Legend.LegendPosition.RIGHT_OF_CHART_CENTER))
          {
            if ((mLegend.getPosition() != Legend.LegendPosition.LEFT_OF_CHART) && (mLegend.getPosition() != Legend.LegendPosition.LEFT_OF_CHART_CENTER))
            {
              if ((mLegend.getPosition() != Legend.LegendPosition.BELOW_CHART_LEFT) && (mLegend.getPosition() != Legend.LegendPosition.BELOW_CHART_RIGHT) && (mLegend.getPosition() != Legend.LegendPosition.BELOW_CHART_CENTER))
              {
                if ((mLegend.getPosition() != Legend.LegendPosition.ABOVE_CHART_LEFT) && (mLegend.getPosition() != Legend.LegendPosition.ABOVE_CHART_RIGHT))
                {
                  f1 = f3;
                  if (mLegend.getPosition() != Legend.LegendPosition.ABOVE_CHART_CENTER) {}
                }
                else
                {
                  localObject = mLegend;
                  f1 = mTextHeightMax;
                  f2 = mNeededHeight;
                  f3 = mViewPortHandler.getChartHeight();
                  f2 = Math.min(f2 + f1, mLegend.getMaxSizePercent() * f3) + 0.0F;
                  f3 = 0.0F;
                  f1 = 0.0F;
                  break label393;
                }
              }
              else
              {
                localObject = mLegend;
                f1 = mTextHeightMax;
                f3 = mNeededHeight;
                f4 = mViewPortHandler.getChartHeight();
                f1 = Math.min(f3 + f1, mLegend.getMaxSizePercent() * f4) + 0.0F;
                f3 = 0.0F;
                f4 = f2;
                break label391;
              }
            }
            else
            {
              f1 = mLegend.mNeededWidth;
              f2 = mViewPortHandler.getChartWidth();
              f1 = Math.min(f1, mLegend.getMaxSizePercent() * f2);
              f1 = mLegend.getXOffset() * 2.0F + f1 + 0.0F;
            }
          }
          else
          {
            f1 = mLegend.mNeededWidth;
            f2 = mViewPortHandler.getChartWidth();
            f1 = Math.min(f1, mLegend.getMaxSizePercent() * f2);
            f3 = mLegend.getXOffset() * 2.0F + f1 + 0.0F;
            f4 = f5;
            break label389;
          }
        }
      }
      f3 = 0.0F;
      f4 = f1;
      label389:
      f1 = 0.0F;
      label391:
      f2 = 0.0F;
      label393:
      f5 = f4;
      if (mAxisLeft.needsOffset()) {
        f5 = f4 + mAxisLeft.getRequiredWidthSpace(mAxisRendererLeft.getPaintAxisLabels());
      }
      f4 = f3;
      if (mAxisRight.needsOffset()) {
        f4 = f3 + mAxisRight.getRequiredWidthSpace(mAxisRendererRight.getPaintAxisLabels());
      }
      f3 = f1;
      float f6 = f2;
      if (mXAxis.isEnabled())
      {
        f3 = f1;
        f6 = f2;
        if (mXAxis.isDrawLabelsEnabled())
        {
          localObject = mXAxis;
          f3 = mLabelRotatedHeight;
          float f7 = ((ComponentBase)localObject).getYOffset() + f3;
          if (mXAxis.getPosition() == XAxis.XAxisPosition.BOTTOM)
          {
            f3 = f1 + f7;
            f6 = f2;
          }
          else
          {
            if (mXAxis.getPosition() == XAxis.XAxisPosition.TOP) {}
            for (;;)
            {
              f6 = f2 + f7;
              f3 = f1;
              break;
              f3 = f1;
              f6 = f2;
              if (mXAxis.getPosition() != XAxis.XAxisPosition.BOTH_SIDED) {
                break;
              }
              f1 += f7;
            }
          }
        }
      }
      f1 = getExtraTopOffset() + f6;
      f2 = getExtraRightOffset() + f4;
      f3 = getExtraBottomOffset() + f3;
      f4 = getExtraLeftOffset() + f5;
      f5 = Utils.convertDpToPixel(mMinOffset);
      mViewPortHandler.restrainViewPort(Math.max(f5, f4), Math.max(f5, f1), Math.max(f5, f2), Math.max(f5, f3));
      if (mLogEnabled)
      {
        localObject = new StringBuilder();
        ((StringBuilder)localObject).append("offsetLeft: ");
        ((StringBuilder)localObject).append(f4);
        ((StringBuilder)localObject).append(", offsetTop: ");
        ((StringBuilder)localObject).append(f1);
        ((StringBuilder)localObject).append(", offsetRight: ");
        ((StringBuilder)localObject).append(f2);
        ((StringBuilder)localObject).append(", offsetBottom: ");
        ((StringBuilder)localObject).append(f3);
        ((StringBuilder)localObject).toString();
        localObject = new StringBuilder();
        ((StringBuilder)localObject).append("Content: ");
        ((StringBuilder)localObject).append(mViewPortHandler.getContentRect().toString());
        ((StringBuilder)localObject).toString();
      }
    }
    prepareOffsetMatrix();
    prepareValuePxMatrix();
  }
  
  public void centerViewTo(float paramFloat1, float paramFloat2, YAxis.AxisDependency paramAxisDependency)
  {
    float f1 = getDeltaY(paramAxisDependency) / mViewPortHandler.getScaleY();
    float f2 = getXAxis().getValues().size() / mViewPortHandler.getScaleX();
    addViewportJob(new MoveViewJob(mViewPortHandler, paramFloat1 - f2 / 2.0F, f1 / 2.0F + paramFloat2, getTransformer(paramAxisDependency), this));
  }
  
  @TargetApi(11)
  public void centerViewToAnimated(float paramFloat1, float paramFloat2, YAxis.AxisDependency paramAxisDependency, long paramLong)
  {
    int i = Build.VERSION.SDK_INT;
    PointD localPointD = getValuesByTouchPoint(mViewPortHandler.contentLeft(), mViewPortHandler.contentTop(), paramAxisDependency);
    float f1 = getDeltaY(paramAxisDependency) / mViewPortHandler.getScaleY();
    float f2 = getXAxis().getValues().size() / mViewPortHandler.getScaleX();
    addViewportJob(new AnimatedMoveViewJob(mViewPortHandler, paramFloat1 - f2 / 2.0F, f1 / 2.0F + paramFloat2, getTransformer(paramAxisDependency), this, (float)x, (float)y, paramLong));
  }
  
  public void computeScroll()
  {
    ChartTouchListener localChartTouchListener = mChartTouchListener;
    if ((localChartTouchListener instanceof BarLineChartTouchListener)) {
      ((BarLineChartTouchListener)localChartTouchListener).computeScroll();
    }
  }
  
  public void drawGridBackground(Canvas paramCanvas)
  {
    if (mDrawGridBackground) {
      paramCanvas.drawRect(mViewPortHandler.getContentRect(), mGridBackgroundPaint);
    }
    if (mDrawBorders) {
      paramCanvas.drawRect(mViewPortHandler.getContentRect(), mBorderPaint);
    }
  }
  
  public void fitScreen()
  {
    Matrix localMatrix = mViewPortHandler.fitScreen();
    mViewPortHandler.refresh(localMatrix, this, false);
    calculateOffsets();
    postInvalidate();
  }
  
  public YAxis getAxis(YAxis.AxisDependency paramAxisDependency)
  {
    if (paramAxisDependency == YAxis.AxisDependency.LEFT) {
      return mAxisLeft;
    }
    return mAxisRight;
  }
  
  public YAxis getAxisLeft()
  {
    return mAxisLeft;
  }
  
  public YAxis getAxisRight()
  {
    return mAxisRight;
  }
  
  public BarLineScatterCandleBubbleData getData()
  {
    return (BarLineScatterCandleBubbleData)mData;
  }
  
  public IBarLineScatterCandleBubbleDataSet getDataSetByTouchPoint(float paramFloat1, float paramFloat2)
  {
    Highlight localHighlight = getHighlightByTouchPoint(paramFloat1, paramFloat2);
    if (localHighlight != null) {
      return (IBarLineScatterCandleBubbleDataSet)((BarLineScatterCandleBubbleData)mData).getDataSetByIndex(localHighlight.getDataSetIndex());
    }
    return null;
  }
  
  public float getDeltaY(YAxis.AxisDependency paramAxisDependency)
  {
    if (paramAxisDependency == YAxis.AxisDependency.LEFT) {
      return mAxisLeft.mAxisRange;
    }
    return mAxisRight.mAxisRange;
  }
  
  public OnDrawListener getDrawListener()
  {
    return mDrawListener;
  }
  
  public Entry getEntryByTouchPoint(float paramFloat1, float paramFloat2)
  {
    Highlight localHighlight = getHighlightByTouchPoint(paramFloat1, paramFloat2);
    if (localHighlight != null) {
      return ((BarLineScatterCandleBubbleData)mData).getEntryForHighlight(localHighlight);
    }
    return null;
  }
  
  public int getHighestVisibleXIndex()
  {
    float[] arrayOfFloat = new float[2];
    arrayOfFloat[0] = mViewPortHandler.contentRight();
    arrayOfFloat[1] = mViewPortHandler.contentBottom();
    getTransformer(YAxis.AxisDependency.LEFT).pixelsToValue(arrayOfFloat);
    if (arrayOfFloat[0] >= ((BarLineScatterCandleBubbleData)mData).getXValCount()) {
      return ((BarLineScatterCandleBubbleData)mData).getXValCount() - 1;
    }
    return (int)arrayOfFloat[0];
  }
  
  public Highlight getHighlightByTouchPoint(float paramFloat1, float paramFloat2)
  {
    if (mData == null) {
      return null;
    }
    return getHighlighter().getHighlight(paramFloat1, paramFloat2);
  }
  
  public int getLowestVisibleXIndex()
  {
    float[] arrayOfFloat = new float[2];
    arrayOfFloat[0] = mViewPortHandler.contentLeft();
    arrayOfFloat[1] = mViewPortHandler.contentBottom();
    getTransformer(YAxis.AxisDependency.LEFT).pixelsToValue(arrayOfFloat);
    if (arrayOfFloat[0] <= 0.0F) {
      return 0;
    }
    return (int)(arrayOfFloat[0] + 1.0F);
  }
  
  public float[] getMarkerPosition(Entry paramEntry, Highlight paramHighlight)
  {
    int i = paramHighlight.getDataSetIndex();
    float f1 = paramEntry.getXIndex();
    float f2 = paramEntry.getVal();
    if ((this instanceof BarChart))
    {
      f2 = ((BarData)mData).getGroupSpace();
      int j = ((BarLineScatterCandleBubbleData)mData).getDataSetCount();
      int k = paramEntry.getXIndex();
      float f3;
      if ((this instanceof HorizontalBarChart))
      {
        f3 = (j - 1) * k + k + i;
        float f4 = k;
        float f5 = f2 / 2.0F;
        if (((BarEntry)paramEntry).getVals() != null) {
          f1 = getRangeto;
        } else {
          f1 = paramEntry.getVal();
        }
        float f6 = mAnimator.getPhaseY();
        f2 = f5 + (f4 * f2 + f3);
        f1 = f6 * f1;
      }
      else
      {
        f1 = (j - 1) * k + k + i;
        f3 = k;
        f2 = f2 / 2.0F + (f3 * f2 + f1);
        if (((BarEntry)paramEntry).getVals() != null) {
          f1 = getRangeto;
        } else {
          f1 = paramEntry.getVal();
        }
        f3 = f1 * mAnimator.getPhaseY();
        f1 = f2;
        f2 = f3;
      }
    }
    else
    {
      f2 = mAnimator.getPhaseY() * f2;
    }
    paramEntry = new float[2];
    paramEntry[0] = f1;
    paramEntry[1] = f2;
    getTransformer(((IBarLineScatterCandleBubbleDataSet)((BarLineScatterCandleBubbleData)mData).getDataSetByIndex(i)).getAxisDependency()).pointValuesToPixel(paramEntry);
    return paramEntry;
  }
  
  public int getMaxVisibleCount()
  {
    return mMaxVisibleCount;
  }
  
  public float getMinOffset()
  {
    return mMinOffset;
  }
  
  public Paint getPaint(int paramInt)
  {
    Paint localPaint = super.getPaint(paramInt);
    if (localPaint != null) {
      return localPaint;
    }
    if (paramInt != 4) {
      return null;
    }
    return mGridBackgroundPaint;
  }
  
  public PointD getPixelsForValues(float paramFloat1, float paramFloat2, YAxis.AxisDependency paramAxisDependency)
  {
    float[] arrayOfFloat = new float[2];
    arrayOfFloat[0] = paramFloat1;
    arrayOfFloat[1] = paramFloat2;
    getTransformer(paramAxisDependency).pointValuesToPixel(arrayOfFloat);
    return new PointD(arrayOfFloat[0], arrayOfFloat[1]);
  }
  
  public PointF getPosition(Entry paramEntry, YAxis.AxisDependency paramAxisDependency)
  {
    if (paramEntry == null) {
      return null;
    }
    float[] arrayOfFloat = new float[2];
    arrayOfFloat[0] = paramEntry.getXIndex();
    arrayOfFloat[1] = paramEntry.getVal();
    getTransformer(paramAxisDependency).pointValuesToPixel(arrayOfFloat);
    return new PointF(arrayOfFloat[0], arrayOfFloat[1]);
  }
  
  public YAxisRenderer getRendererLeftYAxis()
  {
    return mAxisRendererLeft;
  }
  
  public YAxisRenderer getRendererRightYAxis()
  {
    return mAxisRendererRight;
  }
  
  public XAxisRenderer getRendererXAxis()
  {
    return mXAxisRenderer;
  }
  
  public float getScaleX()
  {
    ViewPortHandler localViewPortHandler = mViewPortHandler;
    if (localViewPortHandler == null) {
      return 1.0F;
    }
    return localViewPortHandler.getScaleX();
  }
  
  public float getScaleY()
  {
    ViewPortHandler localViewPortHandler = mViewPortHandler;
    if (localViewPortHandler == null) {
      return 1.0F;
    }
    return localViewPortHandler.getScaleY();
  }
  
  public Transformer getTransformer(YAxis.AxisDependency paramAxisDependency)
  {
    if (paramAxisDependency == YAxis.AxisDependency.LEFT) {
      return mLeftAxisTransformer;
    }
    return mRightAxisTransformer;
  }
  
  public PointD getValuesByTouchPoint(float paramFloat1, float paramFloat2, YAxis.AxisDependency paramAxisDependency)
  {
    float[] arrayOfFloat = new float[2];
    arrayOfFloat[0] = paramFloat1;
    arrayOfFloat[1] = paramFloat2;
    getTransformer(paramAxisDependency).pixelsToValue(arrayOfFloat);
    return new PointD(arrayOfFloat[0], arrayOfFloat[1]);
  }
  
  public float getYChartMax()
  {
    return Math.max(mAxisLeft.mAxisMaximum, mAxisRight.mAxisMaximum);
  }
  
  public float getYChartMin()
  {
    return Math.min(mAxisLeft.mAxisMinimum, mAxisRight.mAxisMinimum);
  }
  
  public float getYValueByTouchPoint(float paramFloat1, float paramFloat2, YAxis.AxisDependency paramAxisDependency)
  {
    return (float)getValuesByTouchPointy;
  }
  
  public boolean hasNoDragOffset()
  {
    return mViewPortHandler.hasNoDragOffset();
  }
  
  public void init()
  {
    super.init();
    mAxisLeft = new YAxis(YAxis.AxisDependency.LEFT);
    mAxisRight = new YAxis(YAxis.AxisDependency.RIGHT);
    mLeftAxisTransformer = new Transformer(mViewPortHandler);
    mRightAxisTransformer = new Transformer(mViewPortHandler);
    mAxisRendererLeft = new YAxisRenderer(mViewPortHandler, mAxisLeft, mLeftAxisTransformer);
    mAxisRendererRight = new YAxisRenderer(mViewPortHandler, mAxisRight, mRightAxisTransformer);
    mXAxisRenderer = new XAxisRenderer(mViewPortHandler, mXAxis, mLeftAxisTransformer);
    setHighlighter(new ChartHighlighter(this));
    mChartTouchListener = new BarLineChartTouchListener(this, mViewPortHandler.getMatrixTouch());
    mGridBackgroundPaint = new Paint();
    mGridBackgroundPaint.setStyle(Paint.Style.FILL);
    mGridBackgroundPaint.setColor(Color.rgb(240, 240, 240));
    mBorderPaint = new Paint();
    mBorderPaint.setStyle(Paint.Style.STROKE);
    mBorderPaint.setColor(-16777216);
    mBorderPaint.setStrokeWidth(Utils.convertDpToPixel(1.0F));
  }
  
  public boolean isAnyAxisInverted()
  {
    if (mAxisLeft.isInverted()) {
      return true;
    }
    return mAxisRight.isInverted();
  }
  
  public boolean isAutoScaleMinMaxEnabled()
  {
    return mAutoScaleMinMaxEnabled;
  }
  
  public boolean isDoubleTapToZoomEnabled()
  {
    return mDoubleTapToZoomEnabled;
  }
  
  public boolean isDragEnabled()
  {
    return mDragEnabled;
  }
  
  public boolean isFullyZoomedOut()
  {
    return mViewPortHandler.isFullyZoomedOut();
  }
  
  public boolean isHighlightPerDragEnabled()
  {
    return mHighlightPerDragEnabled;
  }
  
  public boolean isInverted(YAxis.AxisDependency paramAxisDependency)
  {
    return getAxis(paramAxisDependency).isInverted();
  }
  
  public boolean isKeepPositionOnRotation()
  {
    return mKeepPositionOnRotation;
  }
  
  public boolean isPinchZoomEnabled()
  {
    return mPinchZoomEnabled;
  }
  
  public boolean isScaleXEnabled()
  {
    return mScaleXEnabled;
  }
  
  public boolean isScaleYEnabled()
  {
    return mScaleYEnabled;
  }
  
  public void moveViewTo(float paramFloat1, float paramFloat2, YAxis.AxisDependency paramAxisDependency)
  {
    float f = getDeltaY(paramAxisDependency) / mViewPortHandler.getScaleY();
    addViewportJob(new MoveViewJob(mViewPortHandler, paramFloat1, f / 2.0F + paramFloat2, getTransformer(paramAxisDependency), this));
  }
  
  @TargetApi(11)
  public void moveViewToAnimated(float paramFloat1, float paramFloat2, YAxis.AxisDependency paramAxisDependency, long paramLong)
  {
    int i = Build.VERSION.SDK_INT;
    PointD localPointD = getValuesByTouchPoint(mViewPortHandler.contentLeft(), mViewPortHandler.contentTop(), paramAxisDependency);
    float f = getDeltaY(paramAxisDependency) / mViewPortHandler.getScaleY();
    addViewportJob(new AnimatedMoveViewJob(mViewPortHandler, paramFloat1, f / 2.0F + paramFloat2, getTransformer(paramAxisDependency), this, (float)x, (float)y, paramLong));
  }
  
  public void moveViewToX(float paramFloat)
  {
    addViewportJob(new MoveViewJob(mViewPortHandler, paramFloat, 0.0F, getTransformer(YAxis.AxisDependency.LEFT), this));
  }
  
  public void moveViewToY(float paramFloat, YAxis.AxisDependency paramAxisDependency)
  {
    float f = getDeltaY(paramAxisDependency) / mViewPortHandler.getScaleY();
    addViewportJob(new MoveViewJob(mViewPortHandler, 0.0F, f / 2.0F + paramFloat, getTransformer(paramAxisDependency), this));
  }
  
  public void notifyDataSetChanged()
  {
    if (mData == null)
    {
      bool = mLogEnabled;
      return;
    }
    boolean bool = mLogEnabled;
    Object localObject = mRenderer;
    if (localObject != null) {
      ((DataRenderer)localObject).initBuffers();
    }
    calcMinMax();
    localObject = mAxisRendererLeft;
    YAxis localYAxis = mAxisLeft;
    ((YAxisRenderer)localObject).computeAxis(mAxisMinimum, mAxisMaximum);
    localObject = mAxisRendererRight;
    localYAxis = mAxisRight;
    ((YAxisRenderer)localObject).computeAxis(mAxisMinimum, mAxisMaximum);
    mXAxisRenderer.computeAxis(((BarLineScatterCandleBubbleData)mData).getXValMaximumLength(), ((BarLineScatterCandleBubbleData)mData).getXVals());
    if (mLegend != null) {
      mLegendRenderer.computeLegend(mData);
    }
    calculateOffsets();
  }
  
  public void onDraw(Canvas paramCanvas)
  {
    super.onDraw(paramCanvas);
    if (mData == null) {
      return;
    }
    long l1 = System.currentTimeMillis();
    calcModulus();
    mXAxisRenderer.calcXBounds(this, mXAxis.mAxisLabelModulus);
    mRenderer.calcXBounds(this, mXAxis.mAxisLabelModulus);
    drawGridBackground(paramCanvas);
    Object localObject;
    YAxis localYAxis;
    if (mAxisLeft.isEnabled())
    {
      localObject = mAxisRendererLeft;
      localYAxis = mAxisLeft;
      ((YAxisRenderer)localObject).computeAxis(mAxisMinimum, mAxisMaximum);
    }
    if (mAxisRight.isEnabled())
    {
      localObject = mAxisRendererRight;
      localYAxis = mAxisRight;
      ((YAxisRenderer)localObject).computeAxis(mAxisMinimum, mAxisMaximum);
    }
    mXAxisRenderer.renderAxisLine(paramCanvas);
    mAxisRendererLeft.renderAxisLine(paramCanvas);
    mAxisRendererRight.renderAxisLine(paramCanvas);
    if (mAutoScaleMinMaxEnabled)
    {
      i = getLowestVisibleXIndex();
      int j = getHighestVisibleXIndex();
      localObject = mAutoScaleLastLowestVisibleXIndex;
      if ((localObject != null) && (((Integer)localObject).intValue() == i))
      {
        localObject = mAutoScaleLastHighestVisibleXIndex;
        if ((localObject != null) && (((Integer)localObject).intValue() == j)) {}
      }
      else
      {
        calcMinMax();
        calculateOffsets();
        mAutoScaleLastLowestVisibleXIndex = Integer.valueOf(i);
        mAutoScaleLastHighestVisibleXIndex = Integer.valueOf(j);
      }
    }
    int i = paramCanvas.save();
    paramCanvas.clipRect(mViewPortHandler.getContentRect());
    mXAxisRenderer.renderGridLines(paramCanvas);
    mAxisRendererLeft.renderGridLines(paramCanvas);
    mAxisRendererRight.renderGridLines(paramCanvas);
    if (mXAxis.isDrawLimitLinesBehindDataEnabled()) {
      mXAxisRenderer.renderLimitLines(paramCanvas);
    }
    if (mAxisLeft.isDrawLimitLinesBehindDataEnabled()) {
      mAxisRendererLeft.renderLimitLines(paramCanvas);
    }
    if (mAxisRight.isDrawLimitLinesBehindDataEnabled()) {
      mAxisRendererRight.renderLimitLines(paramCanvas);
    }
    mRenderer.drawData(paramCanvas);
    if (valuesToHighlight()) {
      mRenderer.drawHighlighted(paramCanvas, mIndicesToHighlight);
    }
    paramCanvas.restoreToCount(i);
    mRenderer.drawExtras(paramCanvas);
    if (!mXAxis.isDrawLimitLinesBehindDataEnabled()) {
      mXAxisRenderer.renderLimitLines(paramCanvas);
    }
    if (!mAxisLeft.isDrawLimitLinesBehindDataEnabled()) {
      mAxisRendererLeft.renderLimitLines(paramCanvas);
    }
    if (!mAxisRight.isDrawLimitLinesBehindDataEnabled()) {
      mAxisRendererRight.renderLimitLines(paramCanvas);
    }
    mXAxisRenderer.renderAxisLabels(paramCanvas);
    mAxisRendererLeft.renderAxisLabels(paramCanvas);
    mAxisRendererRight.renderAxisLabels(paramCanvas);
    mRenderer.drawValues(paramCanvas);
    mLegendRenderer.renderLegend(paramCanvas);
    drawMarkers(paramCanvas);
    drawDescription(paramCanvas);
    if (mLogEnabled)
    {
      l1 = System.currentTimeMillis() - l1;
      totalTime += l1;
      drawCycles += 1L;
      long l2 = totalTime / drawCycles;
      paramCanvas = new StringBuilder();
      paramCanvas.append("Drawtime: ");
      paramCanvas.append(l1);
      paramCanvas.append(" ms, average: ");
      paramCanvas.append(l2);
      paramCanvas.append(" ms, cycles: ");
      paramCanvas.append(drawCycles);
      paramCanvas.toString();
    }
  }
  
  public void onSizeChanged(int paramInt1, int paramInt2, int paramInt3, int paramInt4)
  {
    Object localObject = new float[2];
    if (mKeepPositionOnRotation)
    {
      localObject[0] = mViewPortHandler.contentLeft();
      localObject[1] = mViewPortHandler.contentTop();
      getTransformer(YAxis.AxisDependency.LEFT).pixelsToValue((float[])localObject);
    }
    super.onSizeChanged(paramInt1, paramInt2, paramInt3, paramInt4);
    if (mKeepPositionOnRotation)
    {
      getTransformer(YAxis.AxisDependency.LEFT).pointValuesToPixel((float[])localObject);
      mViewPortHandler.centerViewPort((float[])localObject, this);
      return;
    }
    localObject = mViewPortHandler;
    ((ViewPortHandler)localObject).refresh(((ViewPortHandler)localObject).getMatrixTouch(), this, true);
  }
  
  public boolean onTouchEvent(MotionEvent paramMotionEvent)
  {
    super.onTouchEvent(paramMotionEvent);
    ChartTouchListener localChartTouchListener = mChartTouchListener;
    if (localChartTouchListener != null)
    {
      if (mData == null) {
        return false;
      }
      if (!mTouchEnabled) {
        return false;
      }
      return localChartTouchListener.onTouch(this, paramMotionEvent);
    }
    return false;
  }
  
  public void prepareOffsetMatrix()
  {
    mRightAxisTransformer.prepareMatrixOffset(mAxisRight.isInverted());
    mLeftAxisTransformer.prepareMatrixOffset(mAxisLeft.isInverted());
  }
  
  public void prepareValuePxMatrix()
  {
    if (mLogEnabled)
    {
      localObject1 = a.b("Preparing Value-Px Matrix, xmin: ");
      ((StringBuilder)localObject1).append(mXAxis.mAxisMinimum);
      ((StringBuilder)localObject1).append(", xmax: ");
      ((StringBuilder)localObject1).append(mXAxis.mAxisMaximum);
      ((StringBuilder)localObject1).append(", xdelta: ");
      ((StringBuilder)localObject1).append(mXAxis.mAxisRange);
      ((StringBuilder)localObject1).toString();
    }
    Object localObject1 = mRightAxisTransformer;
    Object localObject2 = mXAxis;
    float f1 = mAxisMinimum;
    float f2 = mAxisRange;
    localObject2 = mAxisRight;
    ((Transformer)localObject1).prepareMatrixValuePx(f1, f2, mAxisRange, mAxisMinimum);
    localObject1 = mLeftAxisTransformer;
    localObject2 = mXAxis;
    f1 = mAxisMinimum;
    f2 = mAxisRange;
    localObject2 = mAxisLeft;
    ((Transformer)localObject1).prepareMatrixValuePx(f1, f2, mAxisRange, mAxisMinimum);
  }
  
  public void resetTracking()
  {
    totalTime = 0L;
    drawCycles = 0L;
  }
  
  public void resetViewPortOffsets()
  {
    mCustomViewPortEnabled = false;
    calculateOffsets();
  }
  
  public void setAutoScaleMinMaxEnabled(boolean paramBoolean)
  {
    mAutoScaleMinMaxEnabled = paramBoolean;
  }
  
  public void setBorderColor(int paramInt)
  {
    mBorderPaint.setColor(paramInt);
  }
  
  public void setBorderWidth(float paramFloat)
  {
    mBorderPaint.setStrokeWidth(Utils.convertDpToPixel(paramFloat));
  }
  
  public void setDoubleTapToZoomEnabled(boolean paramBoolean)
  {
    mDoubleTapToZoomEnabled = paramBoolean;
  }
  
  public void setDragEnabled(boolean paramBoolean)
  {
    mDragEnabled = paramBoolean;
  }
  
  public void setDragOffsetX(float paramFloat)
  {
    mViewPortHandler.setDragOffsetX(paramFloat);
  }
  
  public void setDragOffsetY(float paramFloat)
  {
    mViewPortHandler.setDragOffsetY(paramFloat);
  }
  
  public void setDrawBorders(boolean paramBoolean)
  {
    mDrawBorders = paramBoolean;
  }
  
  public void setDrawGridBackground(boolean paramBoolean)
  {
    mDrawGridBackground = paramBoolean;
  }
  
  public void setGridBackgroundColor(int paramInt)
  {
    mGridBackgroundPaint.setColor(paramInt);
  }
  
  public void setHighlightPerDragEnabled(boolean paramBoolean)
  {
    mHighlightPerDragEnabled = paramBoolean;
  }
  
  public void setKeepPositionOnRotation(boolean paramBoolean)
  {
    mKeepPositionOnRotation = paramBoolean;
  }
  
  public void setMaxVisibleValueCount(int paramInt)
  {
    mMaxVisibleCount = paramInt;
  }
  
  public void setMinOffset(float paramFloat)
  {
    mMinOffset = paramFloat;
  }
  
  public void setOnDrawListener(OnDrawListener paramOnDrawListener)
  {
    mDrawListener = paramOnDrawListener;
  }
  
  public void setPaint(Paint paramPaint, int paramInt)
  {
    super.setPaint(paramPaint, paramInt);
    if (paramInt != 4) {
      return;
    }
    mGridBackgroundPaint = paramPaint;
  }
  
  public void setPinchZoom(boolean paramBoolean)
  {
    mPinchZoomEnabled = paramBoolean;
  }
  
  public void setRendererLeftYAxis(YAxisRenderer paramYAxisRenderer)
  {
    mAxisRendererLeft = paramYAxisRenderer;
  }
  
  public void setRendererRightYAxis(YAxisRenderer paramYAxisRenderer)
  {
    mAxisRendererRight = paramYAxisRenderer;
  }
  
  public void setScaleEnabled(boolean paramBoolean)
  {
    mScaleXEnabled = paramBoolean;
    mScaleYEnabled = paramBoolean;
  }
  
  public void setScaleMinima(float paramFloat1, float paramFloat2)
  {
    mViewPortHandler.setMinimumScaleX(paramFloat1);
    mViewPortHandler.setMinimumScaleY(paramFloat2);
  }
  
  public void setScaleXEnabled(boolean paramBoolean)
  {
    mScaleXEnabled = paramBoolean;
  }
  
  public void setScaleYEnabled(boolean paramBoolean)
  {
    mScaleYEnabled = paramBoolean;
  }
  
  public void setViewPortOffsets(final float paramFloat1, final float paramFloat2, final float paramFloat3, final float paramFloat4)
  {
    mCustomViewPortEnabled = true;
    post(new Runnable()
    {
      public void run()
      {
        mViewPortHandler.restrainViewPort(paramFloat1, paramFloat2, paramFloat3, paramFloat4);
        prepareOffsetMatrix();
        prepareValuePxMatrix();
      }
    });
  }
  
  public void setVisibleXRange(float paramFloat1, float paramFloat2)
  {
    float f = mXAxis.mAxisRange;
    paramFloat1 = f / paramFloat1;
    paramFloat2 = f / paramFloat2;
    mViewPortHandler.setMinMaxScaleX(paramFloat2, paramFloat1);
  }
  
  public void setVisibleXRangeMaximum(float paramFloat)
  {
    paramFloat = mXAxis.mAxisRange / paramFloat;
    mViewPortHandler.setMinimumScaleX(paramFloat);
  }
  
  public void setVisibleXRangeMinimum(float paramFloat)
  {
    paramFloat = mXAxis.mAxisRange / paramFloat;
    mViewPortHandler.setMaximumScaleX(paramFloat);
  }
  
  public void setVisibleYRangeMaximum(float paramFloat, YAxis.AxisDependency paramAxisDependency)
  {
    paramFloat = getDeltaY(paramAxisDependency) / paramFloat;
    mViewPortHandler.setMinimumScaleY(paramFloat);
  }
  
  public void setXAxisRenderer(XAxisRenderer paramXAxisRenderer)
  {
    mXAxisRenderer = paramXAxisRenderer;
  }
  
  public void zoom(float paramFloat1, float paramFloat2, float paramFloat3, float paramFloat4)
  {
    Matrix localMatrix = mViewPortHandler.zoom(paramFloat1, paramFloat2, paramFloat3, paramFloat4);
    mViewPortHandler.refresh(localMatrix, this, false);
    calculateOffsets();
    postInvalidate();
  }
  
  public void zoom(float paramFloat1, float paramFloat2, float paramFloat3, float paramFloat4, YAxis.AxisDependency paramAxisDependency)
  {
    addViewportJob(new ZoomJob(mViewPortHandler, paramFloat1, paramFloat2, paramFloat3, paramFloat4, getTransformer(paramAxisDependency), paramAxisDependency, this));
  }
  
  @TargetApi(11)
  public void zoomAndCenterAnimated(float paramFloat1, float paramFloat2, float paramFloat3, float paramFloat4, YAxis.AxisDependency paramAxisDependency, long paramLong)
  {
    int i = Build.VERSION.SDK_INT;
    PointD localPointD = getValuesByTouchPoint(mViewPortHandler.contentLeft(), mViewPortHandler.contentTop(), paramAxisDependency);
    addViewportJob(new AnimatedZoomJob(mViewPortHandler, this, getTransformer(paramAxisDependency), getAxis(paramAxisDependency), mXAxis.getValues().size(), paramFloat1, paramFloat2, mViewPortHandler.getScaleX(), mViewPortHandler.getScaleY(), paramFloat3, paramFloat4, (float)x, (float)y, paramLong));
  }
  
  public void zoomIn()
  {
    Object localObject = mViewPortHandler.getContentCenter();
    localObject = mViewPortHandler.zoomIn(x, -y);
    mViewPortHandler.refresh((Matrix)localObject, this, false);
    calculateOffsets();
    postInvalidate();
  }
  
  public void zoomOut()
  {
    Object localObject = mViewPortHandler.getContentCenter();
    localObject = mViewPortHandler.zoomOut(x, -y);
    mViewPortHandler.refresh((Matrix)localObject, this, false);
    calculateOffsets();
    postInvalidate();
  }
}
