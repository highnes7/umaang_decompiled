package com.github.mikephil.charting.highlight;

import com.github.mikephil.charting.components.YAxis.AxisDependency;
import com.github.mikephil.charting.data.BarData;
import com.github.mikephil.charting.data.ChartData;
import com.github.mikephil.charting.interfaces.dataprovider.BarDataProvider;
import com.github.mikephil.charting.interfaces.dataprovider.BarLineScatterCandleBubbleDataProvider;
import com.github.mikephil.charting.interfaces.datasets.IBarDataSet;
import com.github.mikephil.charting.interfaces.datasets.IDataSet;
import com.github.mikephil.charting.utils.Transformer;

public class HorizontalBarHighlighter
  extends BarHighlighter
{
  public HorizontalBarHighlighter(BarDataProvider paramBarDataProvider)
  {
    super(paramBarDataProvider);
  }
  
  public float getBase(float paramFloat)
  {
    float[] arrayOfFloat = new float[2];
    arrayOfFloat[1] = paramFloat;
    ((BarDataProvider)mChart).getTransformer(YAxis.AxisDependency.LEFT).pixelsToValue(arrayOfFloat);
    paramFloat = arrayOfFloat[1];
    float f = ((BarDataProvider)mChart).getBarData().getDataSetCount();
    int i = (int)(paramFloat / (((BarDataProvider)mChart).getBarData().getGroupSpace() + f));
    return paramFloat - ((BarDataProvider)mChart).getBarData().getGroupSpace() * i;
  }
  
  public Highlight getHighlight(float paramFloat1, float paramFloat2)
  {
    Highlight localHighlight = super.getHighlight(paramFloat1, paramFloat2);
    if (localHighlight == null) {
      return localHighlight;
    }
    IBarDataSet localIBarDataSet = (IBarDataSet)((BarDataProvider)mChart).getBarData().getDataSetByIndex(localHighlight.getDataSetIndex());
    if (localIBarDataSet.isStacked())
    {
      float[] arrayOfFloat = new float[2];
      arrayOfFloat[0] = paramFloat2;
      ((BarDataProvider)mChart).getTransformer(localIBarDataSet.getAxisDependency()).pixelsToValue(arrayOfFloat);
      return getStackedHighlight(localHighlight, localIBarDataSet, localHighlight.getXIndex(), localHighlight.getDataSetIndex(), arrayOfFloat[0]);
    }
    return localHighlight;
  }
  
  public int getXIndex(float paramFloat)
  {
    if (!((BarDataProvider)mChart).getBarData().isGrouped())
    {
      float[] arrayOfFloat = new float[2];
      arrayOfFloat[1] = paramFloat;
      ((BarDataProvider)mChart).getTransformer(YAxis.AxisDependency.LEFT).pixelsToValue(arrayOfFloat);
      return Math.round(arrayOfFloat[1]);
    }
    paramFloat = getBase(paramFloat);
    int i = ((BarDataProvider)mChart).getBarData().getDataSetCount();
    int j = (int)paramFloat / i;
    int k = ((BarDataProvider)mChart).getData().getXValCount();
    if (j < 0) {
      return 0;
    }
    i = j;
    if (j >= k) {
      i = k - 1;
    }
    return i;
  }
}
