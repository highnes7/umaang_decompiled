package com.github.mikephil.charting.data.realm.base;

import android.graphics.Color;
import android.graphics.drawable.Drawable;
import com.github.mikephil.charting.data.Entry;
import com.github.mikephil.charting.interfaces.datasets.ILineRadarDataSet;
import com.github.mikephil.charting.utils.Utils;
import io.realm.DynamicRealmObject;
import io.realm.RealmObject;
import io.realm.RealmResults;
import java.util.Iterator;
import java.util.List;

public abstract class RealmLineRadarDataSet<T extends RealmObject>
  extends RealmLineScatterCandleRadarDataSet<T, Entry>
  implements ILineRadarDataSet<Entry>
{
  public boolean mDrawFilled = false;
  public int mFillAlpha = 85;
  public int mFillColor = Color.rgb(140, 234, 255);
  public Drawable mFillDrawable;
  public float mLineWidth = 2.5F;
  
  public RealmLineRadarDataSet(RealmResults<T> paramRealmResults, String paramString)
  {
    super(paramRealmResults, paramString);
  }
  
  public RealmLineRadarDataSet(RealmResults<T> paramRealmResults, String paramString1, String paramString2)
  {
    super(paramRealmResults, paramString1, paramString2);
  }
  
  public void build(RealmResults<T> paramRealmResults)
  {
    DynamicRealmObject localDynamicRealmObject;
    if (mIndexField == null)
    {
      int i = 0;
      paramRealmResults = paramRealmResults.iterator();
      while (paramRealmResults.hasNext())
      {
        localDynamicRealmObject = new DynamicRealmObject((RealmObject)paramRealmResults.next());
        mValues.add(new Entry(localDynamicRealmObject.getFloat(mValuesField), i));
        i += 1;
      }
    }
    paramRealmResults = paramRealmResults.iterator();
    while (paramRealmResults.hasNext())
    {
      localDynamicRealmObject = new DynamicRealmObject((RealmObject)paramRealmResults.next());
      mValues.add(new Entry(localDynamicRealmObject.getFloat(mValuesField), localDynamicRealmObject.getInt(mIndexField)));
    }
  }
  
  public int getFillAlpha()
  {
    return mFillAlpha;
  }
  
  public int getFillColor()
  {
    return mFillColor;
  }
  
  public Drawable getFillDrawable()
  {
    return mFillDrawable;
  }
  
  public float getLineWidth()
  {
    return mLineWidth;
  }
  
  public boolean isDrawFilledEnabled()
  {
    return mDrawFilled;
  }
  
  public void setDrawFilled(boolean paramBoolean)
  {
    mDrawFilled = paramBoolean;
  }
  
  public void setFillAlpha(int paramInt)
  {
    mFillAlpha = paramInt;
  }
  
  public void setFillColor(int paramInt)
  {
    mFillColor = paramInt;
    mFillDrawable = null;
  }
  
  public void setFillDrawable(Drawable paramDrawable)
  {
    mFillDrawable = paramDrawable;
  }
  
  public void setLineWidth(float paramFloat)
  {
    float f = paramFloat;
    if (paramFloat < 0.2F) {
      f = 0.2F;
    }
    paramFloat = f;
    if (f > 10.0F) {
      paramFloat = 10.0F;
    }
    mLineWidth = Utils.convertDpToPixel(paramFloat);
  }
}
