package com.facebook;

import com.facebook.internal.FacebookRequestErrorClassification;
import com.facebook.internal.Utility;
import com.facebook.internal.Utility.FetchedAppSettings;
import java.net.HttpURLConnection;
import org.json.JSONException;
import org.json.JSONObject;

public final class FacebookRequestError
{
  public static final String BODY_KEY = "body";
  public static final String CODE_KEY = "code";
  public static final String ERROR_CODE_FIELD_KEY = "code";
  public static final String ERROR_CODE_KEY = "error_code";
  public static final String ERROR_IS_TRANSIENT_KEY = "is_transient";
  public static final String ERROR_KEY = "error";
  public static final String ERROR_MESSAGE_FIELD_KEY = "message";
  public static final String ERROR_MSG_KEY = "error_msg";
  public static final String ERROR_REASON_KEY = "error_reason";
  public static final String ERROR_SUB_CODE_KEY = "error_subcode";
  public static final String ERROR_TYPE_FIELD_KEY = "type";
  public static final String ERROR_USER_MSG_KEY = "error_user_msg";
  public static final String ERROR_USER_TITLE_KEY = "error_user_title";
  public static final Range HTTP_RANGE_SUCCESS = new Range(200, 299, null);
  public static final int INVALID_ERROR_CODE = -1;
  public static final int INVALID_HTTP_STATUS_CODE = -1;
  public final Object batchRequestResult;
  public final Category category;
  public final HttpURLConnection connection;
  public final int errorCode;
  public final String errorMessage;
  public final String errorRecoveryMessage;
  public final String errorType;
  public final String errorUserMessage;
  public final String errorUserTitle;
  public final FacebookException exception;
  public final JSONObject requestResult;
  public final JSONObject requestResultBody;
  public final int requestStatusCode;
  public final int subErrorCode;
  
  public FacebookRequestError(int paramInt1, int paramInt2, int paramInt3, String paramString1, String paramString2, String paramString3, String paramString4, boolean paramBoolean, JSONObject paramJSONObject1, JSONObject paramJSONObject2, Object paramObject, HttpURLConnection paramHttpURLConnection, FacebookException paramFacebookException)
  {
    requestStatusCode = paramInt1;
    errorCode = paramInt2;
    subErrorCode = paramInt3;
    errorType = paramString1;
    errorMessage = paramString2;
    requestResultBody = paramJSONObject1;
    requestResult = paramJSONObject2;
    batchRequestResult = paramObject;
    connection = paramHttpURLConnection;
    errorUserTitle = paramString3;
    errorUserMessage = paramString4;
    if (paramFacebookException != null)
    {
      exception = paramFacebookException;
      paramInt1 = 1;
    }
    else
    {
      exception = new FacebookServiceException(this, paramString2);
      paramInt1 = 0;
    }
    paramString2 = getErrorClassification();
    if (paramInt1 != 0) {
      paramString1 = Category.OTHER;
    } else {
      paramString1 = paramString2.classify(paramInt2, paramInt3, paramBoolean);
    }
    category = paramString1;
    errorRecoveryMessage = paramString2.getRecoveryMessage(category);
  }
  
  public FacebookRequestError(int paramInt, String paramString1, String paramString2)
  {
    this(-1, paramInt, -1, paramString1, paramString2, null, null, false, null, null, null, null, null);
  }
  
  public FacebookRequestError(HttpURLConnection paramHttpURLConnection, Exception paramException)
  {
    this(-1, -1, -1, null, null, null, null, false, null, null, null, paramHttpURLConnection, paramException);
  }
  
  public static FacebookRequestError checkResponseAndCreateError(JSONObject paramJSONObject, Object paramObject, HttpURLConnection paramHttpURLConnection)
  {
    for (;;)
    {
      try
      {
        if (paramJSONObject.has("code"))
        {
          int m = paramJSONObject.getInt("code");
          localObject1 = Utility.getStringPropertyAsJSON(paramJSONObject, "body", "FACEBOOK_NON_JSON_RESULT");
          if ((localObject1 != null) && ((localObject1 instanceof JSONObject)))
          {
            JSONObject localJSONObject1 = (JSONObject)localObject1;
            bool = localJSONObject1.has("error");
            k = 1;
            if (bool)
            {
              JSONObject localJSONObject2 = (JSONObject)Utility.getStringPropertyAsJSON(localJSONObject1, "error", null);
              localObject1 = localJSONObject2.optString("type", null);
              localObject2 = localJSONObject2.optString("message", null);
              i = localJSONObject2.optInt("code", -1);
              j = localJSONObject2.optInt("error_subcode", -1);
              localObject3 = localJSONObject2.optString("error_user_msg", null);
              localObject4 = localJSONObject2.optString("error_user_title", null);
              bool = localJSONObject2.optBoolean("is_transient", false);
            }
            else
            {
              bool = localJSONObject1.has("error_code");
              if ((!bool) && (!localJSONObject1.has("error_msg"))) {
                if (!localJSONObject1.has("error_reason")) {
                  break label335;
                }
              }
              localObject1 = localJSONObject1.optString("error_reason", null);
              localObject2 = localJSONObject1.optString("error_msg", null);
              i = localJSONObject1.optInt("error_code", -1);
              j = localJSONObject1.optInt("error_subcode", -1);
              localObject3 = null;
              localObject4 = localObject3;
              bool = false;
            }
            if (k != 0) {
              return new FacebookRequestError(m, i, j, (String)localObject1, (String)localObject2, (String)localObject4, (String)localObject3, bool, localJSONObject1, paramJSONObject, paramObject, paramHttpURLConnection, null);
            }
          }
          if (!HTTP_RANGE_SUCCESS.contains(m))
          {
            if (!paramJSONObject.has("body")) {
              break label364;
            }
            localObject1 = (JSONObject)Utility.getStringPropertyAsJSON(paramJSONObject, "body", "FACEBOOK_NON_JSON_RESULT");
            paramJSONObject = new FacebookRequestError(m, -1, -1, null, null, null, null, false, (JSONObject)localObject1, paramJSONObject, paramObject, paramHttpURLConnection, null);
            return paramJSONObject;
          }
        }
        return null;
      }
      catch (JSONException paramJSONObject)
      {
        return null;
      }
      label335:
      Object localObject1 = null;
      Object localObject2 = localObject1;
      Object localObject3 = localObject2;
      Object localObject4 = localObject3;
      int i = -1;
      int j = -1;
      int k = 0;
      boolean bool = false;
      continue;
      label364:
      localObject1 = null;
    }
  }
  
  public static FacebookRequestErrorClassification getErrorClassification()
  {
    try
    {
      Object localObject1 = Utility.getAppSettingsWithoutQuery(FacebookSdk.getApplicationId());
      if (localObject1 == null)
      {
        localObject1 = FacebookRequestErrorClassification.getDefaultErrorClassification();
        return localObject1;
      }
      localObject1 = ((Utility.FetchedAppSettings)localObject1).getErrorClassification();
      return localObject1;
    }
    finally {}
  }
  
  public Object getBatchRequestResult()
  {
    return batchRequestResult;
  }
  
  public Category getCategory()
  {
    return category;
  }
  
  public HttpURLConnection getConnection()
  {
    return connection;
  }
  
  public int getErrorCode()
  {
    return errorCode;
  }
  
  public String getErrorMessage()
  {
    String str = errorMessage;
    if (str != null) {
      return str;
    }
    return exception.getLocalizedMessage();
  }
  
  public String getErrorRecoveryMessage()
  {
    return errorRecoveryMessage;
  }
  
  public String getErrorType()
  {
    return errorType;
  }
  
  public String getErrorUserMessage()
  {
    return errorUserMessage;
  }
  
  public String getErrorUserTitle()
  {
    return errorUserTitle;
  }
  
  public FacebookException getException()
  {
    return exception;
  }
  
  public JSONObject getRequestResult()
  {
    return requestResult;
  }
  
  public JSONObject getRequestResultBody()
  {
    return requestResultBody;
  }
  
  public int getRequestStatusCode()
  {
    return requestStatusCode;
  }
  
  public int getSubErrorCode()
  {
    return subErrorCode;
  }
  
  public String toString()
  {
    StringBuilder localStringBuilder = new StringBuilder("{HttpStatus: ");
    localStringBuilder.append(requestStatusCode);
    localStringBuilder.append(", errorCode: ");
    localStringBuilder.append(errorCode);
    localStringBuilder.append(", errorType: ");
    localStringBuilder.append(errorType);
    localStringBuilder.append(", errorMessage: ");
    localStringBuilder.append(getErrorMessage());
    localStringBuilder.append("}");
    return localStringBuilder.toString();
  }
  
  public static enum Category
  {
    LOGIN_RECOVERABLE,  OTHER,  TRANSIENT;
    
    public Category() {}
  }
  
  private static class Range
  {
    public final int end;
    public final int start;
    
    public Range(int paramInt1, int paramInt2)
    {
      start = paramInt1;
      end = paramInt2;
    }
    
    public boolean contains(int paramInt)
    {
      return (start <= paramInt) && (paramInt <= end);
    }
  }
}
