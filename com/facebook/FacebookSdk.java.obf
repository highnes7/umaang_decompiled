package com.facebook;

import android.content.Context;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.content.pm.PackageManager.NameNotFoundException;
import android.content.pm.Signature;
import android.os.AsyncTask;
import android.os.Bundle;
import android.util.Base64;
import com.facebook.appevents.AppEventsLogger;
import com.facebook.internal.AppEventsLoggerUtility;
import com.facebook.internal.AppEventsLoggerUtility.GraphAPIActivityType;
import com.facebook.internal.AttributionIdentifiers;
import com.facebook.internal.BoltsMeasurementEventListener;
import com.facebook.internal.LockOnGetVariable;
import com.facebook.internal.NativeProtocol;
import com.facebook.internal.Utility;
import com.facebook.internal.Validate;
import f.a.a.a.a;
import java.io.File;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.Callable;
import java.util.concurrent.Executor;
import java.util.concurrent.FutureTask;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;
import org.json.JSONException;
import org.json.JSONObject;

public final class FacebookSdk
{
  public static final String APPLICATION_ID_PROPERTY = "com.facebook.sdk.ApplicationId";
  public static final String APPLICATION_NAME_PROPERTY = "com.facebook.sdk.ApplicationName";
  public static final String ATTRIBUTION_PREFERENCES = "com.facebook.sdk.attributionTracking";
  public static final String CALLBACK_OFFSET_CHANGED_AFTER_INIT = "The callback request code offset can't be updated once the SDK is initialized.";
  public static final String CALLBACK_OFFSET_NEGATIVE = "The callback request code offset can't be negative.";
  public static final String CLIENT_TOKEN_PROPERTY = "com.facebook.sdk.ClientToken";
  public static final int DEFAULT_CORE_POOL_SIZE = 5;
  public static final int DEFAULT_KEEP_ALIVE = 1;
  public static final int DEFAULT_MAXIMUM_POOL_SIZE = 128;
  public static final ThreadFactory DEFAULT_THREAD_FACTORY = new ThreadFactory()
  {
    public final AtomicInteger counter = new AtomicInteger(0);
    
    public Thread newThread(Runnable paramAnonymousRunnable)
    {
      StringBuilder localStringBuilder = a.b("FacebookSdk #");
      localStringBuilder.append(counter.incrementAndGet());
      return new Thread(paramAnonymousRunnable, localStringBuilder.toString());
    }
  };
  public static final BlockingQueue<Runnable> DEFAULT_WORK_QUEUE;
  public static final String FACEBOOK_COM = "facebook.com";
  public static final Object LOCK;
  public static final int MAX_REQUEST_CODE_RANGE = 100;
  public static final String PUBLISH_ACTIVITY_PATH = "%s/activities";
  public static final String TAG = "com.facebook.FacebookSdk";
  public static final String WEB_DIALOG_THEME = "com.facebook.sdk.WebDialogTheme";
  public static volatile String appClientToken;
  public static Context applicationContext;
  public static volatile String applicationId;
  public static volatile String applicationName;
  public static LockOnGetVariable<File> cacheDir;
  public static int callbackRequestCodeOffset;
  public static volatile Executor executor;
  public static volatile String facebookDomain;
  public static volatile boolean isDebugEnabled;
  public static boolean isLegacyTokenUpgradeSupported;
  public static final HashSet<LoggingBehavior> loggingBehaviors = new HashSet(Arrays.asList(new LoggingBehavior[] { LoggingBehavior.DEVELOPER_ERRORS }));
  public static AtomicLong onProgressThreshold;
  public static Boolean sdkInitialized = Boolean.valueOf(false);
  public static volatile int webDialogTheme;
  
  static
  {
    facebookDomain = "facebook.com";
    onProgressThreshold = new AtomicLong(65536L);
    isDebugEnabled = false;
    isLegacyTokenUpgradeSupported = false;
    callbackRequestCodeOffset = 64206;
    LOCK = new Object();
    DEFAULT_WORK_QUEUE = new LinkedBlockingQueue(10);
  }
  
  public FacebookSdk() {}
  
  public static void addLoggingBehavior(LoggingBehavior paramLoggingBehavior)
  {
    synchronized (loggingBehaviors)
    {
      loggingBehaviors.add(paramLoggingBehavior);
      updateGraphDebugBehavior();
      return;
    }
  }
  
  public static void clearLoggingBehaviors()
  {
    synchronized (loggingBehaviors)
    {
      loggingBehaviors.clear();
      return;
    }
  }
  
  public static Context getApplicationContext()
  {
    Validate.sdkInitialized();
    return applicationContext;
  }
  
  public static String getApplicationId()
  {
    Validate.sdkInitialized();
    return applicationId;
  }
  
  public static String getApplicationName()
  {
    Validate.sdkInitialized();
    return applicationName;
  }
  
  public static String getApplicationSignature(Context paramContext)
  {
    
    if (paramContext == null) {
      return null;
    }
    Object localObject = paramContext.getPackageManager();
    if (localObject == null) {
      return null;
    }
    paramContext = paramContext.getPackageName();
    try
    {
      paramContext = ((PackageManager)localObject).getPackageInfo(paramContext, 64);
      localObject = signatures;
      if (localObject != null)
      {
        if (localObject.length == 0) {
          return null;
        }
        localObject = MessageDigest.getInstance("SHA-1");
        ((MessageDigest)localObject).update(signatures[0].toByteArray());
        return Base64.encodeToString(((MessageDigest)localObject).digest(), 9);
      }
      return null;
    }
    catch (PackageManager.NameNotFoundException|NoSuchAlgorithmException paramContext) {}
    return null;
  }
  
  public static File getCacheDir()
  {
    Validate.sdkInitialized();
    return (File)cacheDir.getValue();
  }
  
  public static int getCallbackRequestCodeOffset()
  {
    Validate.sdkInitialized();
    return callbackRequestCodeOffset;
  }
  
  public static String getClientToken()
  {
    Validate.sdkInitialized();
    return appClientToken;
  }
  
  public static Executor getExecutor()
  {
    synchronized (LOCK)
    {
      if (executor == null) {
        executor = AsyncTask.THREAD_POOL_EXECUTOR;
      }
      return executor;
    }
  }
  
  public static String getFacebookDomain()
  {
    return facebookDomain;
  }
  
  public static boolean getLimitEventAndDataUsage(Context paramContext)
  {
    Validate.sdkInitialized();
    return paramContext.getSharedPreferences("com.facebook.sdk.appEventPreferences", 0).getBoolean("limitEventUsage", false);
  }
  
  public static Set<LoggingBehavior> getLoggingBehaviors()
  {
    synchronized (loggingBehaviors)
    {
      Set localSet = Collections.unmodifiableSet(new HashSet(loggingBehaviors));
      return localSet;
    }
  }
  
  public static long getOnProgressThreshold()
  {
    Validate.sdkInitialized();
    return onProgressThreshold.get();
  }
  
  public static String getSdkVersion()
  {
    return "4.6.0";
  }
  
  public static int getWebDialogTheme()
  {
    Validate.sdkInitialized();
    return webDialogTheme;
  }
  
  public static boolean isDebugEnabled()
  {
    return isDebugEnabled;
  }
  
  public static boolean isFacebookRequestCode(int paramInt)
  {
    int i = callbackRequestCodeOffset;
    return (paramInt >= i) && (paramInt < i + 100);
  }
  
  public static boolean isInitialized()
  {
    try
    {
      boolean bool = sdkInitialized.booleanValue();
      return bool;
    }
    finally
    {
      localObject = finally;
      throw localObject;
    }
  }
  
  public static boolean isLegacyTokenUpgradeSupported()
  {
    return isLegacyTokenUpgradeSupported;
  }
  
  public static boolean isLoggingBehaviorEnabled(LoggingBehavior paramLoggingBehavior)
  {
    boolean bool;
    synchronized (loggingBehaviors)
    {
      if ((isDebugEnabled) && (loggingBehaviors.contains(paramLoggingBehavior)))
      {
        bool = true;
        return bool;
        throw paramLoggingBehavior;
      }
    }
  }
  
  public static void loadDefaultsFromMetadata(Context paramContext)
  {
    if (paramContext == null) {
      return;
    }
    try
    {
      paramContext = paramContext.getPackageManager().getApplicationInfo(paramContext.getPackageName(), 128);
      if (paramContext != null)
      {
        if (metaData == null) {
          return;
        }
        if (applicationId == null)
        {
          Object localObject = metaData.get("com.facebook.sdk.ApplicationId");
          if ((localObject instanceof String))
          {
            localObject = (String)localObject;
            if (((String)localObject).toLowerCase(Locale.ROOT).startsWith("fb")) {
              applicationId = ((String)localObject).substring(2);
            } else {
              applicationId = (String)localObject;
            }
          }
          else if ((localObject instanceof Integer))
          {
            throw new FacebookException("App Ids cannot be directly placed in the manifest.They must be prefixed by 'fb' or be placed in the string resource file.");
          }
        }
        if (applicationName == null) {
          applicationName = metaData.getString("com.facebook.sdk.ApplicationName");
        }
        if (appClientToken == null) {
          appClientToken = metaData.getString("com.facebook.sdk.ClientToken");
        }
        if (webDialogTheme == 0) {
          webDialogTheme = metaData.getInt("com.facebook.sdk.WebDialogTheme");
        }
      }
      return;
    }
    catch (PackageManager.NameNotFoundException paramContext) {}
  }
  
  public static GraphResponse publishInstallAndWaitForResponse(Context paramContext, String paramString)
  {
    if ((paramContext != null) && (paramString != null)) {}
    for (;;)
    {
      try
      {
        AttributionIdentifiers localAttributionIdentifiers = AttributionIdentifiers.getAttributionIdentifiers(paramContext);
        SharedPreferences localSharedPreferences = paramContext.getSharedPreferences("com.facebook.sdk.attributionTracking", 0);
        Object localObject1 = new StringBuilder();
        ((StringBuilder)localObject1).append(paramString);
        ((StringBuilder)localObject1).append("ping");
        localObject1 = ((StringBuilder)localObject1).toString();
        Object localObject2 = new StringBuilder();
        ((StringBuilder)localObject2).append(paramString);
        ((StringBuilder)localObject2).append("json");
        localObject2 = ((StringBuilder)localObject2).toString();
        long l = localSharedPreferences.getLong((String)localObject1, 0L);
        String str = localSharedPreferences.getString((String)localObject2, null);
        try
        {
          paramContext = AppEventsLoggerUtility.getJSONObjectForGraphAPICall(AppEventsLoggerUtility.GraphAPIActivityType.MOBILE_INSTALL_EVENT, localAttributionIdentifiers, AppEventsLogger.getAnonymousAppDeviceGUID(paramContext), getLimitEventAndDataUsage(paramContext), paramContext);
          paramString = GraphRequest.newPostRequest(null, String.format("%s/activities", new Object[] { paramString }), paramContext, null);
          if (l != 0L) {
            if (str == null) {}
          }
        }
        catch (JSONException paramContext)
        {
          throw new FacebookException("An error occurred while publishing install.", paramContext);
        }
      }
      catch (Exception paramContext)
      {
        Utility.logd("Facebook-publish", paramContext);
        return new GraphResponse(null, null, new FacebookRequestError(null, paramContext));
      }
      try
      {
        paramContext = new JSONObject(str);
      }
      catch (JSONException paramContext) {}
    }
    paramContext = null;
    if (paramContext == null) {
      return (GraphResponse)GraphResponse.createResponsesFromString("true", null, new GraphRequestBatch(new GraphRequest[] { paramString })).get(0);
    }
    return new GraphResponse(null, null, null, paramContext);
    paramContext = paramString.executeAndWait();
    paramString = localSharedPreferences.edit();
    paramString.putLong((String)localObject1, System.currentTimeMillis());
    if (paramContext.getJSONObject() != null) {
      paramString.putString((String)localObject2, paramContext.getJSONObject().toString());
    }
    paramString.apply();
    return paramContext;
    throw new IllegalArgumentException("Both context and applicationId must be non-null");
  }
  
  public static void publishInstallAsync(Context paramContext, final String paramString)
  {
    paramContext = paramContext.getApplicationContext();
    getExecutor().execute(new Runnable()
    {
      public void run()
      {
        FacebookSdk.publishInstallAndWaitForResponse(val$applicationContext, paramString);
      }
    });
  }
  
  public static void removeLoggingBehavior(LoggingBehavior paramLoggingBehavior)
  {
    synchronized (loggingBehaviors)
    {
      loggingBehaviors.remove(paramLoggingBehavior);
      return;
    }
  }
  
  public static void sdkInitialize(Context paramContext)
  {
    try
    {
      sdkInitialize(paramContext, null);
      return;
    }
    finally
    {
      paramContext = finally;
      throw paramContext;
    }
  }
  
  public static void sdkInitialize(Context paramContext, int paramInt)
  {
    try
    {
      sdkInitialize(paramContext, paramInt, null);
      return;
    }
    finally
    {
      paramContext = finally;
      throw paramContext;
    }
  }
  
  public static void sdkInitialize(Context paramContext, int paramInt, InitializeCallback paramInitializeCallback)
  {
    try
    {
      if ((sdkInitialized.booleanValue()) && (paramInt != callbackRequestCodeOffset)) {
        throw new FacebookException("The callback request code offset can't be updated once the SDK is initialized.");
      }
      if (paramInt >= 0)
      {
        callbackRequestCodeOffset = paramInt;
        sdkInitialize(paramContext);
        return;
      }
      throw new FacebookException("The callback request code offset can't be negative.");
    }
    finally {}
  }
  
  public static void sdkInitialize(Context paramContext, InitializeCallback paramInitializeCallback)
  {
    try
    {
      if (sdkInitialized.booleanValue())
      {
        if (paramInitializeCallback != null) {
          paramInitializeCallback.onInitialized();
        }
        return;
      }
      Validate.notNull(paramContext, "applicationContext");
      Validate.hasFacebookActivity(paramContext, false);
      Validate.hasInternetPermissions(paramContext, false);
      applicationContext = paramContext.getApplicationContext();
      loadDefaultsFromMetadata(applicationContext);
      Utility.loadAppSettingsAsync(applicationContext, applicationId);
      NativeProtocol.updateAllAvailableProtocolVersionsAsync();
      BoltsMeasurementEventListener.getInstance(applicationContext);
      cacheDir = new LockOnGetVariable(new Callable()
      {
        public File call()
          throws Exception
        {
          return FacebookSdk.applicationContext.getCacheDir();
        }
      });
      paramContext = new FutureTask(new Callable()
      {
        public Void call()
          throws Exception
        {
          AccessTokenManager.getInstance().loadCurrentAccessToken();
          ProfileManager.getInstance().loadCurrentProfile();
          if ((AccessToken.getCurrentAccessToken() != null) && (Profile.getCurrentProfile() == null)) {
            Profile.fetchProfileForCurrentAccessToken();
          }
          FacebookSdk.InitializeCallback localInitializeCallback = val$callback;
          if (localInitializeCallback != null) {
            localInitializeCallback.onInitialized();
          }
          return null;
        }
      });
      getExecutor().execute(paramContext);
      sdkInitialized = Boolean.valueOf(true);
      return;
    }
    finally {}
  }
  
  public static void setApplicationId(String paramString)
  {
    applicationId = paramString;
  }
  
  public static void setApplicationName(String paramString)
  {
    applicationName = paramString;
  }
  
  public static void setCacheDir(File paramFile)
  {
    cacheDir = new LockOnGetVariable(paramFile);
  }
  
  public static void setClientToken(String paramString)
  {
    appClientToken = paramString;
  }
  
  public static void setExecutor(Executor paramExecutor)
  {
    Validate.notNull(paramExecutor, "executor");
    synchronized (LOCK)
    {
      executor = paramExecutor;
      return;
    }
  }
  
  public static void setFacebookDomain(String paramString)
  {
    String str = TAG;
    facebookDomain = paramString;
  }
  
  public static void setIsDebugEnabled(boolean paramBoolean)
  {
    isDebugEnabled = paramBoolean;
  }
  
  public static void setLegacyTokenUpgradeSupported(boolean paramBoolean)
  {
    isLegacyTokenUpgradeSupported = paramBoolean;
  }
  
  public static void setLimitEventAndDataUsage(Context paramContext, boolean paramBoolean)
  {
    paramContext.getSharedPreferences("com.facebook.sdk.appEventPreferences", 0).edit().putBoolean("limitEventUsage", paramBoolean).apply();
  }
  
  public static void setOnProgressThreshold(long paramLong)
  {
    onProgressThreshold.set(paramLong);
  }
  
  public static void setWebDialogTheme(int paramInt)
  {
    webDialogTheme = paramInt;
  }
  
  public static void updateGraphDebugBehavior()
  {
    if ((loggingBehaviors.contains(LoggingBehavior.GRAPH_API_DEBUG_INFO)) && (!loggingBehaviors.contains(LoggingBehavior.GRAPH_API_DEBUG_WARNING))) {
      loggingBehaviors.add(LoggingBehavior.GRAPH_API_DEBUG_WARNING);
    }
  }
  
  public static abstract interface InitializeCallback
  {
    public abstract void onInitialized();
  }
}
