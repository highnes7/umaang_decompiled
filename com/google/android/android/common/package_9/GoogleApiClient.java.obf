package com.google.android.gms.common.api;

import android.accounts.Account;
import android.content.Context;
import android.os.Bundle;
import android.os.Handler;
import android.os.Looper;
import android.support.v4.app.FragmentActivity;
import android.view.View;
import b.b.a.F;
import b.b.a.G;
import b.b.x.n.b;
import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.GoogleApiAvailability;
import com.google.android.gms.common.api.internal.zzbd;
import com.google.android.gms.common.api.internal.zzcf;
import com.google.android.gms.common.api.internal.zzcj;
import com.google.android.gms.common.api.internal.zzcv;
import com.google.android.gms.common.api.internal.zzdg;
import com.google.android.gms.common.api.internal.zzi;
import com.google.android.gms.common.api.internal.zzm;
import com.google.android.gms.common.api.internal.zzw;
import com.google.android.gms.common.internal.zzbp;
import com.google.android.gms.common.internal.zzq;
import com.google.android.gms.common.internal.zzs;
import com.google.android.gms.internal.zzcpp;
import com.google.android.gms.internal.zzcps;
import com.google.android.gms.internal.zzcpt;
import f.a.a.a.a;
import java.io.FileDescriptor;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;
import java.util.WeakHashMap;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.locks.ReentrantLock;

public abstract class GoogleApiClient
{
  public static final int SIGN_IN_MODE_OPTIONAL = 2;
  public static final int SIGN_IN_MODE_REQUIRED = 1;
  public static final Set<GoogleApiClient> zzfha = Collections.newSetFromMap(new WeakHashMap());
  
  public GoogleApiClient() {}
  
  public static void dumpAll(String paramString, FileDescriptor paramFileDescriptor, PrintWriter paramPrintWriter, String[] paramArrayOfString)
  {
    Set localSet = zzfha;
    int i = 0;
    try
    {
      String str = String.valueOf(paramString).concat("  ");
      Iterator localIterator = zzfha.iterator();
      while (localIterator.hasNext())
      {
        GoogleApiClient localGoogleApiClient = (GoogleApiClient)localIterator.next();
        paramPrintWriter.append(paramString).append("GoogleApiClient#").println(i);
        localGoogleApiClient.dump(str, paramFileDescriptor, paramPrintWriter, paramArrayOfString);
        i += 1;
      }
      return;
    }
    finally {}
    for (;;)
    {
      throw paramString;
    }
  }
  
  public static Set<GoogleApiClient> zzafo()
  {
    synchronized (zzfha)
    {
      Set localSet2 = zzfha;
      return localSet2;
    }
  }
  
  public abstract ConnectionResult blockingConnect();
  
  public abstract ConnectionResult blockingConnect(long paramLong, @F TimeUnit paramTimeUnit);
  
  public abstract PendingResult<Status> clearDefaultAccountAndReconnect();
  
  public abstract void connect();
  
  public void connect(int paramInt)
  {
    throw new UnsupportedOperationException();
  }
  
  public abstract void disconnect();
  
  public abstract void dump(String paramString, FileDescriptor paramFileDescriptor, PrintWriter paramPrintWriter, String[] paramArrayOfString);
  
  @F
  public abstract ConnectionResult getConnectionResult(@F Api<?> paramApi);
  
  public Context getContext()
  {
    throw new UnsupportedOperationException();
  }
  
  public Looper getLooper()
  {
    throw new UnsupportedOperationException();
  }
  
  public abstract boolean hasConnectedApi(@F Api<?> paramApi);
  
  public abstract boolean isConnected();
  
  public abstract boolean isConnecting();
  
  public abstract boolean isConnectionCallbacksRegistered(@F ConnectionCallbacks paramConnectionCallbacks);
  
  public abstract boolean isConnectionFailedListenerRegistered(@F OnConnectionFailedListener paramOnConnectionFailedListener);
  
  public abstract void reconnect();
  
  public abstract void registerConnectionCallbacks(@F ConnectionCallbacks paramConnectionCallbacks);
  
  public abstract void registerConnectionFailedListener(@F OnConnectionFailedListener paramOnConnectionFailedListener);
  
  public abstract void stopAutoManage(@F FragmentActivity paramFragmentActivity);
  
  public abstract void unregisterConnectionCallbacks(@F ConnectionCallbacks paramConnectionCallbacks);
  
  public abstract void unregisterConnectionFailedListener(@F OnConnectionFailedListener paramOnConnectionFailedListener);
  
  @F
  public <C extends Api.zze> C zza(@F Api.zzc<C> paramZzc)
  {
    throw new UnsupportedOperationException();
  }
  
  public void zza(zzdg paramZzdg)
  {
    throw new UnsupportedOperationException();
  }
  
  public boolean zza(@F Api<?> paramApi)
  {
    throw new UnsupportedOperationException();
  }
  
  public boolean zza(zzcv paramZzcv)
  {
    throw new UnsupportedOperationException();
  }
  
  public void zzafp()
  {
    throw new UnsupportedOperationException();
  }
  
  public void zzb(zzdg paramZzdg)
  {
    throw new UnsupportedOperationException();
  }
  
  public <A extends Api.zzb, R extends Result, T extends zzm<R, A>> T zzd(@F T paramT)
  {
    throw new UnsupportedOperationException();
  }
  
  public <A extends Api.zzb, T extends zzm<? extends Result, A>> T zze(@F T paramT)
  {
    throw new UnsupportedOperationException();
  }
  
  public <L> zzcj<L> zzp(@F L paramL)
  {
    throw new UnsupportedOperationException();
  }
  
  public static final class Builder
  {
    public final Context mContext;
    public Looper zzakg;
    public Account zzduz;
    public String zzdxc;
    public final Set<Scope> zzfhb = new HashSet();
    public final Set<Scope> zzfhc = new HashSet();
    public int zzfhd;
    public View zzfhe;
    public String zzfhf;
    public final Map<Api<?>, zzs> zzfhg = new b();
    public final Map<Api<?>, Api.ApiOptions> zzfhh = new b();
    public zzcf zzfhi;
    public int zzfhj = -1;
    public GoogleApiClient.OnConnectionFailedListener zzfhk;
    public GoogleApiAvailability zzfhl = GoogleApiAvailability.zzffi;
    public Api.zza<? extends zzcps, zzcpt> zzfhm = zzcpp.zzdwq;
    public final ArrayList<GoogleApiClient.ConnectionCallbacks> zzfhn = new ArrayList();
    public final ArrayList<GoogleApiClient.OnConnectionFailedListener> zzfho = new ArrayList();
    public boolean zzfhp = false;
    
    public Builder(@F Context paramContext)
    {
      mContext = paramContext;
      zzakg = paramContext.getMainLooper();
      zzdxc = paramContext.getPackageName();
      zzfhf = paramContext.getClass().getName();
    }
    
    public Builder(@F Context paramContext, @F GoogleApiClient.ConnectionCallbacks paramConnectionCallbacks, @F GoogleApiClient.OnConnectionFailedListener paramOnConnectionFailedListener)
    {
      this(paramContext);
      zzbp.zzb(paramConnectionCallbacks, "Must provide a connected listener");
      zzfhn.add(paramConnectionCallbacks);
      zzbp.zzb(paramOnConnectionFailedListener, "Must provide a connection failed listener");
      zzfho.add(paramOnConnectionFailedListener);
    }
    
    private final <O extends Api.ApiOptions> void zza(Api<O> paramApi, O paramO, Scope... paramVarArgs)
    {
      paramO = new HashSet(paramApi.zzafc().zzn(paramO));
      int j = paramVarArgs.length;
      int i = 0;
      while (i < j)
      {
        paramO.add(paramVarArgs[i]);
        i += 1;
      }
      zzfhg.put(paramApi, new zzs(paramO));
    }
    
    public final Builder addApi(@F Api<? extends Api.ApiOptions.NotRequiredOptions> paramApi)
    {
      zzbp.zzb(paramApi, "Api must not be null");
      zzfhh.put(paramApi, null);
      paramApi = paramApi.zzafc().zzn(null);
      zzfhc.addAll(paramApi);
      zzfhb.addAll(paramApi);
      return this;
    }
    
    public final <O extends Api.ApiOptions.HasOptions> Builder addApi(@F Api<O> paramApi, @F O paramO)
    {
      zzbp.zzb(paramApi, "Api must not be null");
      zzbp.zzb(paramO, "Null options are not permitted for this Api");
      zzfhh.put(paramApi, paramO);
      paramApi = paramApi.zzafc().zzn(paramO);
      zzfhc.addAll(paramApi);
      zzfhb.addAll(paramApi);
      return this;
    }
    
    public final <O extends Api.ApiOptions.HasOptions> Builder addApiIfAvailable(@F Api<O> paramApi, @F O paramO, Scope... paramVarArgs)
    {
      zzbp.zzb(paramApi, "Api must not be null");
      zzbp.zzb(paramO, "Null options are not permitted for this Api");
      zzfhh.put(paramApi, paramO);
      zza(paramApi, paramO, paramVarArgs);
      return this;
    }
    
    public final Builder addApiIfAvailable(@F Api<? extends Api.ApiOptions.NotRequiredOptions> paramApi, Scope... paramVarArgs)
    {
      zzbp.zzb(paramApi, "Api must not be null");
      zzfhh.put(paramApi, null);
      zza(paramApi, null, paramVarArgs);
      return this;
    }
    
    public final Builder addConnectionCallbacks(@F GoogleApiClient.ConnectionCallbacks paramConnectionCallbacks)
    {
      zzbp.zzb(paramConnectionCallbacks, "Listener must not be null");
      zzfhn.add(paramConnectionCallbacks);
      return this;
    }
    
    public final Builder addOnConnectionFailedListener(@F GoogleApiClient.OnConnectionFailedListener paramOnConnectionFailedListener)
    {
      zzbp.zzb(paramOnConnectionFailedListener, "Listener must not be null");
      zzfho.add(paramOnConnectionFailedListener);
      return this;
    }
    
    public final Builder addScope(@F Scope paramScope)
    {
      zzbp.zzb(paramScope, "Scope must not be null");
      zzfhb.add(paramScope);
      return this;
    }
    
    public final GoogleApiClient build()
    {
      zzbp.zzb(zzfhh.isEmpty() ^ true, "must call addApi() to add at least one API");
      zzq localZzq = zzafr();
      ??? = null;
      Map localMap = localZzq.zzajt();
      b localB1 = new b();
      b localB2 = new b();
      ArrayList localArrayList = new ArrayList();
      Iterator localIterator = zzfhh.keySet().iterator();
      int i = 0;
      boolean bool;
      while (localIterator.hasNext())
      {
        localObject2 = (Api)localIterator.next();
        Object localObject4 = zzfhh.get(localObject2);
        if (localMap.get(localObject2) != null) {
          bool = true;
        } else {
          bool = false;
        }
        localB1.put(localObject2, Boolean.valueOf(bool));
        Object localObject5 = new zzw((Api)localObject2, bool);
        localArrayList.add(localObject5);
        Api.zza localZza = ((Api)localObject2).zzafd();
        localObject5 = localZza.zza(mContext, zzakg, localZzq, localObject4, (GoogleApiClient.ConnectionCallbacks)localObject5, (GoogleApiClient.OnConnectionFailedListener)localObject5);
        localB2.put(((Api)localObject2).zzafe(), localObject5);
        int j = i;
        if (localZza.getPriority() == 1)
        {
          if (localObject4 != null) {
            i = 1;
          } else {
            i = 0;
          }
          j = i;
        }
        i = j;
        if (((Api.zze)localObject5).zzaal()) {
          if (??? == null)
          {
            ??? = localObject2;
            i = j;
          }
          else
          {
            localObject2 = ((Api)localObject2).getName();
            ??? = ((Api)???).getName();
            throw new IllegalStateException(a.a(a.a(???, a.a(localObject2, 21)), (String)localObject2, " cannot be used with ", (String)???));
          }
        }
      }
      if (??? != null) {
        if (i == 0)
        {
          if (zzduz == null) {
            bool = true;
          } else {
            bool = false;
          }
          zzbp.zza(bool, "Must not set an account in GoogleApiClient.Builder when using %s. Set account in GoogleSignInOptions.Builder instead", new Object[] { ((Api)???).getName() });
          zzbp.zza(zzfhb.equals(zzfhc), "Must not set scopes in GoogleApiClient.Builder when using %s. Set account in GoogleSignInOptions.Builder instead.", new Object[] { ((Api)???).getName() });
        }
        else
        {
          ??? = ((Api)???).getName();
          throw new IllegalStateException(a.a(a.a(???, 82), "With using ", (String)???, ", GamesOptions can only be specified within GoogleSignInOptions.Builder"));
        }
      }
      i = zzbd.zza(localB2.values(), true);
      Object localObject2 = new zzbd(mContext, new ReentrantLock(), zzakg, localZzq, zzfhl, zzfhm, localB1, zzfhn, zzfho, localB2, zzfhj, i, localArrayList, false);
      synchronized (GoogleApiClient.zzfha)
      {
        GoogleApiClient.zzfha.add(localObject2);
        if (zzfhj >= 0) {
          zzi.zza(zzfhi).zza(zzfhj, (GoogleApiClient)localObject2, zzfhk);
        }
        return localObject2;
      }
      for (;;)
      {
        throw localObject3;
      }
    }
    
    public final Builder enableAutoManage(@F FragmentActivity paramFragmentActivity, int paramInt, @G GoogleApiClient.OnConnectionFailedListener paramOnConnectionFailedListener)
    {
      paramFragmentActivity = new zzcf(paramFragmentActivity);
      boolean bool;
      if (paramInt >= 0) {
        bool = true;
      } else {
        bool = false;
      }
      zzbp.zzb(bool, "clientId must be non-negative");
      zzfhj = paramInt;
      zzfhk = paramOnConnectionFailedListener;
      zzfhi = paramFragmentActivity;
      return this;
    }
    
    public final Builder enableAutoManage(@F FragmentActivity paramFragmentActivity, @G GoogleApiClient.OnConnectionFailedListener paramOnConnectionFailedListener)
    {
      return enableAutoManage(paramFragmentActivity, 0, paramOnConnectionFailedListener);
    }
    
    public final Builder setAccountName(String paramString)
    {
      if (paramString == null) {
        paramString = null;
      } else {
        paramString = new Account(paramString, "com.google");
      }
      zzduz = paramString;
      return this;
    }
    
    public final Builder setGravityForPopups(int paramInt)
    {
      zzfhd = paramInt;
      return this;
    }
    
    public final Builder setHandler(@F Handler paramHandler)
    {
      zzbp.zzb(paramHandler, "Handler must not be null");
      zzakg = paramHandler.getLooper();
      return this;
    }
    
    public final Builder setViewForPopups(@F View paramView)
    {
      zzbp.zzb(paramView, "View must not be null");
      zzfhe = paramView;
      return this;
    }
    
    public final Builder useDefaultAccount()
    {
      return setAccountName("<<default account>>");
    }
    
    public final zzq zzafr()
    {
      zzcpt localZzcpt = zzcpt.zzjno;
      if (zzfhh.containsKey(zzcpp.API)) {
        localZzcpt = (zzcpt)zzfhh.get(zzcpp.API);
      }
      return new zzq(zzduz, zzfhb, zzfhg, zzfhd, zzfhe, zzdxc, zzfhf, localZzcpt);
    }
  }
  
  public static abstract interface ConnectionCallbacks
  {
    public static final int CAUSE_NETWORK_LOST = 2;
    public static final int CAUSE_SERVICE_DISCONNECTED = 1;
    
    public abstract void onConnected(@G Bundle paramBundle);
    
    public abstract void onConnectionSuspended(int paramInt);
  }
  
  public static abstract interface OnConnectionFailedListener
  {
    public abstract void onConnectionFailed(@F ConnectionResult paramConnectionResult);
  }
}
