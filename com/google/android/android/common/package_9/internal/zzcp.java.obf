package com.google.android.gms.common.api.internal;

import b.b.a.F;
import com.google.android.gms.common.api.OptionalPendingResult;
import com.google.android.gms.common.api.PendingResult;
import com.google.android.gms.common.api.PendingResult.zza;
import com.google.android.gms.common.api.Result;
import com.google.android.gms.common.api.ResultCallback;
import com.google.android.gms.common.api.ResultTransform;
import com.google.android.gms.common.api.TransformedResult;
import java.util.concurrent.TimeUnit;

public final class zzcp<R extends Result>
  extends OptionalPendingResult<R>
{
  public final zzs<R> zzfoy;
  
  public zzcp(PendingResult<R> paramPendingResult)
  {
    if ((paramPendingResult instanceof zzs))
    {
      zzfoy = ((zzs)paramPendingResult);
      return;
    }
    throw new IllegalArgumentException("OptionalPendingResult can only wrap PendingResults generated by an API call.");
  }
  
  public final R await()
  {
    return zzfoy.await();
  }
  
  public final R await(long paramLong, TimeUnit paramTimeUnit)
  {
    return zzfoy.await(paramLong, paramTimeUnit);
  }
  
  public final void cancel()
  {
    zzfoy.cancel();
  }
  
  public final R get()
  {
    if (isDone()) {
      return await(0L, TimeUnit.MILLISECONDS);
    }
    throw new IllegalStateException("Result is not available. Check that isDone() returns true before calling get().");
  }
  
  public final boolean isCanceled()
  {
    return zzfoy.isCanceled();
  }
  
  public final boolean isDone()
  {
    return zzfoy.isReady();
  }
  
  public final void setResultCallback(ResultCallback<? super R> paramResultCallback)
  {
    zzfoy.setResultCallback(paramResultCallback);
  }
  
  public final void setResultCallback(ResultCallback<? super R> paramResultCallback, long paramLong, TimeUnit paramTimeUnit)
  {
    zzfoy.setResultCallback(paramResultCallback, paramLong, paramTimeUnit);
  }
  
  @F
  public final <S extends Result> TransformedResult<S> then(@F ResultTransform<? super R, ? extends S> paramResultTransform)
  {
    return zzfoy.then(paramResultTransform);
  }
  
  public final void zza(PendingResult.zza paramZza)
  {
    zzfoy.zza(paramZza);
  }
  
  public final Integer zzafs()
  {
    return zzfoy.zzafs();
  }
}
