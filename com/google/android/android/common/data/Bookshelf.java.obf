package com.google.android.gms.common.data;

import java.util.ArrayList;

public abstract class zzg<T>
  extends AbstractDataBuffer<T>
{
  public boolean zzfqy = false;
  public ArrayList<Integer> zzfqz;
  
  public zzg(DataHolder paramDataHolder)
  {
    super(paramDataHolder);
  }
  
  private final void zzaix()
  {
    try
    {
      if (zzfqy) {
        break label223;
      }
      j = zzflf.zzfqq;
      zzfqz = new ArrayList();
      if (j <= 0) {
        break label218;
      }
      zzfqz.add(Integer.valueOf(0));
      str2 = zzaiw();
      i = zzflf.zzbx(0);
      localObject1 = zzflf.zzd(str2, 0, i);
      i = 1;
    }
    finally
    {
      for (;;)
      {
        int j;
        String str2;
        int i;
        Object localObject1;
        int k;
        String str1;
        Object localObject4;
        for (;;)
        {
          label218:
          label223:
          throw localObject2;
        }
        i += 1;
        Object localObject3 = localObject4;
      }
    }
    if (i < j)
    {
      k = zzflf.zzbx(i);
      str1 = zzflf.zzd(str2, i, k);
      if (str1 != null)
      {
        localObject4 = localObject1;
        if (!str1.equals(localObject1))
        {
          zzfqz.add(Integer.valueOf(i));
          localObject4 = str1;
        }
      }
      else
      {
        localObject1 = new StringBuilder(String.valueOf(str2).length() + 78);
        ((StringBuilder)localObject1).append("Missing value for markerColumn: ");
        ((StringBuilder)localObject1).append(str2);
        ((StringBuilder)localObject1).append(", at row: ");
        ((StringBuilder)localObject1).append(i);
        ((StringBuilder)localObject1).append(", for window: ");
        ((StringBuilder)localObject1).append(k);
        throw new NullPointerException(((StringBuilder)localObject1).toString());
      }
    }
    else
    {
      zzfqy = true;
      return;
    }
  }
  
  private final int zzca(int paramInt)
  {
    if ((paramInt >= 0) && (paramInt < zzfqz.size())) {
      return ((Integer)zzfqz.get(paramInt)).intValue();
    }
    StringBuilder localStringBuilder = new StringBuilder(53);
    localStringBuilder.append("Position ");
    localStringBuilder.append(paramInt);
    localStringBuilder.append(" is out of bounds for this buffer");
    throw new IllegalArgumentException(localStringBuilder.toString());
  }
  
  public final T get(int paramInt)
  {
    zzaix();
    int k = zzca(paramInt);
    int i;
    if ((paramInt >= 0) && (paramInt != zzfqz.size()))
    {
      if (paramInt == zzfqz.size() - 1) {
        i = zzflf.zzfqq;
      } else {
        i = ((Integer)zzfqz.get(paramInt + 1)).intValue();
      }
      int j = i - ((Integer)zzfqz.get(paramInt)).intValue();
      i = j;
      if (j == 1)
      {
        paramInt = zzca(paramInt);
        zzflf.zzbx(paramInt);
        i = j;
      }
    }
    else
    {
      i = 0;
    }
    return zzk(k, i);
  }
  
  public int getCount()
  {
    zzaix();
    return zzfqz.size();
  }
  
  public abstract String zzaiw();
  
  public abstract T zzk(int paramInt1, int paramInt2);
}
