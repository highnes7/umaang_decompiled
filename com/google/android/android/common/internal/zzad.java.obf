package com.google.android.gms.common.internal;

import android.os.Bundle;
import android.os.Handler;
import android.os.Handler.Callback;
import android.os.Looper;
import android.os.Message;
import android.util.Log;
import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.api.GoogleApiClient.ConnectionCallbacks;
import com.google.android.gms.common.api.GoogleApiClient.OnConnectionFailedListener;
import f.a.a.a.a;
import java.util.ArrayList;
import java.util.concurrent.atomic.AtomicInteger;

public final class zzad
  implements Handler.Callback
{
  public final Handler mHandler;
  public final Object mLock = new Object();
  public final zzae zzfum;
  public final ArrayList<GoogleApiClient.ConnectionCallbacks> zzfun = new ArrayList();
  public ArrayList<GoogleApiClient.ConnectionCallbacks> zzfuo = new ArrayList();
  public final ArrayList<GoogleApiClient.OnConnectionFailedListener> zzfup = new ArrayList();
  public volatile boolean zzfuq = false;
  public final AtomicInteger zzfur = new AtomicInteger(0);
  public boolean zzfus = false;
  
  public zzad(Looper paramLooper, zzae paramZzae)
  {
    zzfum = paramZzae;
    mHandler = new Handler(paramLooper, this);
  }
  
  public final boolean handleMessage(Message arg1)
  {
    int i = what;
    if (i == 1)
    {
      GoogleApiClient.ConnectionCallbacks localConnectionCallbacks = (GoogleApiClient.ConnectionCallbacks)obj;
      synchronized (mLock)
      {
        if ((zzfuq) && (zzfum.isConnected()) && (zzfun.contains(localConnectionCallbacks))) {
          localConnectionCallbacks.onConnected(zzfum.zzaeh());
        }
        return true;
      }
    }
    Log.wtf("GmsClientEvents", a.a(45, "Don't know how to handle message: ", i), new Exception());
    return false;
  }
  
  public final boolean isConnectionCallbacksRegistered(GoogleApiClient.ConnectionCallbacks paramConnectionCallbacks)
  {
    zzbp.zzu(paramConnectionCallbacks);
    synchronized (mLock)
    {
      boolean bool = zzfun.contains(paramConnectionCallbacks);
      return bool;
    }
  }
  
  public final boolean isConnectionFailedListenerRegistered(GoogleApiClient.OnConnectionFailedListener paramOnConnectionFailedListener)
  {
    zzbp.zzu(paramOnConnectionFailedListener);
    synchronized (mLock)
    {
      boolean bool = zzfup.contains(paramOnConnectionFailedListener);
      return bool;
    }
  }
  
  public final void registerConnectionCallbacks(GoogleApiClient.ConnectionCallbacks paramConnectionCallbacks)
  {
    zzbp.zzu(paramConnectionCallbacks);
    synchronized (mLock)
    {
      if (zzfun.contains(paramConnectionCallbacks))
      {
        String str = String.valueOf(paramConnectionCallbacks);
        StringBuilder localStringBuilder = new StringBuilder(str.length() + 62);
        localStringBuilder.append("registerConnectionCallbacks(): listener ");
        localStringBuilder.append(str);
        localStringBuilder.append(" is already registered");
        localStringBuilder.toString();
      }
      else
      {
        zzfun.add(paramConnectionCallbacks);
      }
      if (zzfum.isConnected())
      {
        ??? = mHandler;
        ((Handler)???).sendMessage(((Handler)???).obtainMessage(1, paramConnectionCallbacks));
      }
      return;
    }
  }
  
  public final void registerConnectionFailedListener(GoogleApiClient.OnConnectionFailedListener paramOnConnectionFailedListener)
  {
    zzbp.zzu(paramOnConnectionFailedListener);
    synchronized (mLock)
    {
      if (zzfup.contains(paramOnConnectionFailedListener))
      {
        paramOnConnectionFailedListener = String.valueOf(paramOnConnectionFailedListener);
        StringBuilder localStringBuilder = new StringBuilder(paramOnConnectionFailedListener.length() + 67);
        localStringBuilder.append("registerConnectionFailedListener(): listener ");
        localStringBuilder.append(paramOnConnectionFailedListener);
        localStringBuilder.append(" is already registered");
        localStringBuilder.toString();
      }
      else
      {
        zzfup.add(paramOnConnectionFailedListener);
      }
      return;
    }
  }
  
  public final void unregisterConnectionCallbacks(GoogleApiClient.ConnectionCallbacks paramConnectionCallbacks)
  {
    zzbp.zzu(paramConnectionCallbacks);
    synchronized (mLock)
    {
      if (!zzfun.remove(paramConnectionCallbacks))
      {
        paramConnectionCallbacks = String.valueOf(paramConnectionCallbacks);
        StringBuilder localStringBuilder = new StringBuilder(paramConnectionCallbacks.length() + 52);
        localStringBuilder.append("unregisterConnectionCallbacks(): listener ");
        localStringBuilder.append(paramConnectionCallbacks);
        localStringBuilder.append(" not found");
        localStringBuilder.toString();
      }
      else if (zzfus)
      {
        zzfuo.add(paramConnectionCallbacks);
      }
      return;
    }
  }
  
  public final void unregisterConnectionFailedListener(GoogleApiClient.OnConnectionFailedListener paramOnConnectionFailedListener)
  {
    zzbp.zzu(paramOnConnectionFailedListener);
    synchronized (mLock)
    {
      if (!zzfup.remove(paramOnConnectionFailedListener))
      {
        paramOnConnectionFailedListener = String.valueOf(paramOnConnectionFailedListener);
        StringBuilder localStringBuilder = new StringBuilder(paramOnConnectionFailedListener.length() + 57);
        localStringBuilder.append("unregisterConnectionFailedListener(): listener ");
        localStringBuilder.append(paramOnConnectionFailedListener);
        localStringBuilder.append(" not found");
        localStringBuilder.toString();
      }
      return;
    }
  }
  
  public final void zzake()
  {
    zzfuq = false;
    zzfur.incrementAndGet();
  }
  
  public final void zzakf()
  {
    zzfuq = true;
  }
  
  public final void zzce(int paramInt)
  {
    boolean bool;
    if (Looper.myLooper() == mHandler.getLooper()) {
      bool = true;
    } else {
      bool = false;
    }
    zzbp.zza(bool, "onUnintentionalDisconnection must only be called on the Handler thread");
    mHandler.removeMessages(1);
    synchronized (mLock)
    {
      zzfus = true;
      ArrayList localArrayList = new ArrayList(zzfun);
      int k = zzfur.get();
      int m = localArrayList.size();
      int i = 0;
      while (i < m)
      {
        Object localObject3 = localArrayList.get(i);
        int j = i + 1;
        localObject3 = (GoogleApiClient.ConnectionCallbacks)localObject3;
        if ((!zzfuq) || (zzfur.get() != k)) {
          break;
        }
        i = j;
        if (zzfun.contains(localObject3))
        {
          ((GoogleApiClient.ConnectionCallbacks)localObject3).onConnectionSuspended(paramInt);
          i = j;
        }
      }
      zzfuo.clear();
      zzfus = false;
      return;
    }
    for (;;)
    {
      throw localObject2;
    }
  }
  
  public final void zzk(Bundle paramBundle)
  {
    ??? = Looper.myLooper();
    Object localObject2 = mHandler.getLooper();
    boolean bool2 = true;
    boolean bool1;
    if (??? == localObject2) {
      bool1 = true;
    } else {
      bool1 = false;
    }
    zzbp.zza(bool1, "onConnectionSuccess must only be called on the Handler thread");
    label250:
    synchronized (mLock)
    {
      if (!zzfus)
      {
        bool1 = true;
        zzbp.zzbg(bool1);
        mHandler.removeMessages(1);
        zzfus = true;
        if (zzfuo.size() != 0) {
          break label250;
        }
        bool1 = bool2;
        zzbp.zzbg(bool1);
        localObject2 = new ArrayList(zzfun);
        int k = zzfur.get();
        int m = ((ArrayList)localObject2).size();
        int i = 0;
        while (i < m)
        {
          Object localObject3 = ((ArrayList)localObject2).get(i);
          int j = i + 1;
          localObject3 = (GoogleApiClient.ConnectionCallbacks)localObject3;
          if ((!zzfuq) || (!zzfum.isConnected()) || (zzfur.get() != k)) {
            break;
          }
          i = j;
          if (!zzfuo.contains(localObject3))
          {
            ((GoogleApiClient.ConnectionCallbacks)localObject3).onConnected(paramBundle);
            i = j;
          }
        }
        zzfuo.clear();
        zzfus = false;
      }
    }
  }
  
  public final void zzk(ConnectionResult paramConnectionResult)
  {
    ??? = Looper.myLooper();
    Object localObject2 = mHandler.getLooper();
    int i = 0;
    boolean bool;
    if (??? == localObject2) {
      bool = true;
    } else {
      bool = false;
    }
    zzbp.zza(bool, "onConnectionFailure must only be called on the Handler thread");
    mHandler.removeMessages(1);
    synchronized (mLock)
    {
      localObject2 = new ArrayList(zzfup);
      int k = zzfur.get();
      int m = ((ArrayList)localObject2).size();
      while (i < m)
      {
        Object localObject3 = ((ArrayList)localObject2).get(i);
        int j = i + 1;
        localObject3 = (GoogleApiClient.OnConnectionFailedListener)localObject3;
        if ((zzfuq) && (zzfur.get() == k))
        {
          i = j;
          if (zzfup.contains(localObject3))
          {
            ((GoogleApiClient.OnConnectionFailedListener)localObject3).onConnectionFailed(paramConnectionResult);
            i = j;
          }
        }
        else
        {
          return;
        }
      }
      return;
    }
    for (;;)
    {
      throw paramConnectionResult;
    }
  }
}
