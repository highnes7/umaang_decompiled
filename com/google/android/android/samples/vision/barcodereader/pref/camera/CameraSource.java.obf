package com.google.android.gms.samples.vision.barcodereader.ui.camera;

import android.annotation.SuppressLint;
import android.annotation.TargetApi;
import android.content.Context;
import android.graphics.ImageFormat;
import android.graphics.SurfaceTexture;
import android.hardware.Camera;
import android.hardware.Camera.AutoFocusCallback;
import android.hardware.Camera.AutoFocusMoveCallback;
import android.hardware.Camera.CameraInfo;
import android.hardware.Camera.Parameters;
import android.hardware.Camera.PictureCallback;
import android.hardware.Camera.PreviewCallback;
import android.hardware.Camera.ShutterCallback;
import android.hardware.Camera.Size;
import android.os.Build.VERSION;
import android.os.SystemClock;
import android.view.Display;
import android.view.SurfaceHolder;
import android.view.SurfaceView;
import android.view.WindowManager;
import b.b.a.G;
import b.b.a.M;
import com.google.android.gms.common.images.Size;
import com.google.android.gms.vision.Detector;
import f.a.a.a.a;
import java.io.IOException;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

public class CameraSource
{
  public static final float ASPECT_RATIO_TOLERANCE = 0.01F;
  @SuppressLint({"InlinedApi"})
  public static final int CAMERA_FACING_BACK = 0;
  @SuppressLint({"InlinedApi"})
  public static final int CAMERA_FACING_FRONT = 1;
  public static final int DUMMY_TEXTURE_NAME = 100;
  public static final String TAG = "OpenCameraSource";
  public Map<byte[], ByteBuffer> mBytesToByteBuffer = new HashMap();
  public Camera mCamera;
  public final Object mCameraLock = new Object();
  public Context mContext;
  public SurfaceTexture mDummySurfaceTexture;
  public SurfaceView mDummySurfaceView;
  public int mFacing = 0;
  public String mFlashMode = null;
  public String mFocusMode = null;
  public FrameProcessingRunnable mFrameProcessor;
  public Size mPreviewSize;
  public Thread mProcessingThread;
  public float mRequestedFps = 30.0F;
  public int mRequestedPreviewHeight = 768;
  public int mRequestedPreviewWidth = 1024;
  public int mRotation;
  
  public CameraSource() {}
  
  @SuppressLint({"InlinedApi"})
  private Camera createCamera()
  {
    int i = getIdForRequestedCamera(mFacing);
    if (i != -1)
    {
      Camera localCamera = Camera.open(i);
      Object localObject1 = selectSizePair(localCamera, mRequestedPreviewWidth, mRequestedPreviewHeight);
      if (localObject1 != null)
      {
        Object localObject2 = ((SizePair)localObject1).pictureSize();
        mPreviewSize = ((SizePair)localObject1).previewSize();
        int[] arrayOfInt = selectPreviewFpsRange(localCamera, mRequestedFps);
        if (arrayOfInt != null)
        {
          localObject1 = localCamera.getParameters();
          if (localObject2 != null) {
            ((Camera.Parameters)localObject1).setPictureSize(((Size)localObject2).getWidth(), ((Size)localObject2).getHeight());
          }
          ((Camera.Parameters)localObject1).setPreviewSize(mPreviewSize.getWidth(), mPreviewSize.getHeight());
          ((Camera.Parameters)localObject1).setPreviewFpsRange(arrayOfInt[0], arrayOfInt[1]);
          ((Camera.Parameters)localObject1).setPreviewFormat(17);
          setRotation(localCamera, (Camera.Parameters)localObject1, i);
          if (mFocusMode != null) {
            if (((Camera.Parameters)localObject1).getSupportedFocusModes().contains(mFocusMode))
            {
              ((Camera.Parameters)localObject1).setFocusMode(mFocusMode);
            }
            else
            {
              localObject2 = a.b("Camera focus mode: ");
              ((StringBuilder)localObject2).append(mFocusMode);
              ((StringBuilder)localObject2).append(" is not supported on this device.");
              ((StringBuilder)localObject2).toString();
            }
          }
          mFocusMode = ((Camera.Parameters)localObject1).getFocusMode();
          if ((mFlashMode != null) && (((Camera.Parameters)localObject1).getSupportedFlashModes() != null)) {
            if (((Camera.Parameters)localObject1).getSupportedFlashModes().contains(mFlashMode))
            {
              ((Camera.Parameters)localObject1).setFlashMode(mFlashMode);
            }
            else
            {
              localObject2 = a.b("Camera flash mode: ");
              ((StringBuilder)localObject2).append(mFlashMode);
              ((StringBuilder)localObject2).append(" is not supported on this device.");
              ((StringBuilder)localObject2).toString();
            }
          }
          mFlashMode = ((Camera.Parameters)localObject1).getFlashMode();
          localCamera.setParameters((Camera.Parameters)localObject1);
          localCamera.setPreviewCallbackWithBuffer(new CameraPreviewCallback(null));
          localCamera.addCallbackBuffer(createPreviewBuffer(mPreviewSize));
          localCamera.addCallbackBuffer(createPreviewBuffer(mPreviewSize));
          localCamera.addCallbackBuffer(createPreviewBuffer(mPreviewSize));
          localCamera.addCallbackBuffer(createPreviewBuffer(mPreviewSize));
          return localCamera;
        }
        throw new RuntimeException("Could not find suitable preview frames per second range.");
      }
      throw new RuntimeException("Could not find suitable preview size.");
    }
    throw new RuntimeException("Could not find requested camera.");
  }
  
  private byte[] createPreviewBuffer(Size paramSize)
  {
    int i = ImageFormat.getBitsPerPixel(17);
    int j = paramSize.getHeight();
    double d = paramSize.getWidth() * j * i;
    Double.isNaN(d);
    paramSize = new byte[(int)Math.ceil(d / 8.0D) + 1];
    ByteBuffer localByteBuffer = ByteBuffer.wrap(paramSize);
    if ((localByteBuffer.hasArray()) && (localByteBuffer.array() == paramSize))
    {
      mBytesToByteBuffer.put(paramSize, localByteBuffer);
      return paramSize;
    }
    throw new IllegalStateException("Failed to create valid buffer for camera source.");
  }
  
  public static List<SizePair> generateValidPreviewSizeList(Camera paramCamera)
  {
    Object localObject = paramCamera.getParameters();
    paramCamera = ((Camera.Parameters)localObject).getSupportedPreviewSizes();
    List localList = ((Camera.Parameters)localObject).getSupportedPictureSizes();
    localObject = new ArrayList();
    Iterator localIterator1 = paramCamera.iterator();
    for (;;)
    {
      if (!localIterator1.hasNext()) {
        break label142;
      }
      Camera.Size localSize1 = (Camera.Size)localIterator1.next();
      float f = width / height;
      Iterator localIterator2 = localList.iterator();
      if (localIterator2.hasNext())
      {
        Camera.Size localSize2 = (Camera.Size)localIterator2.next();
        if (Math.abs(f - width / height) >= 0.01F) {
          break;
        }
        ((List)localObject).add(new SizePair(localSize1, localSize2));
      }
    }
    label142:
    if (((List)localObject).size() == 0)
    {
      paramCamera = paramCamera.iterator();
      while (paramCamera.hasNext()) {
        ((List)localObject).add(new SizePair((Camera.Size)paramCamera.next(), null));
      }
    }
    return localObject;
  }
  
  public static int getIdForRequestedCamera(int paramInt)
  {
    Camera.CameraInfo localCameraInfo = new Camera.CameraInfo();
    int i = 0;
    while (i < Camera.getNumberOfCameras())
    {
      Camera.getCameraInfo(i, localCameraInfo);
      if (facing == paramInt) {
        return i;
      }
      i += 1;
    }
    return -1;
  }
  
  private int[] selectPreviewFpsRange(Camera paramCamera, float paramFloat)
  {
    int k = (int)(paramFloat * 1000.0F);
    Iterator localIterator = paramCamera.getParameters().getSupportedPreviewFpsRange().iterator();
    paramCamera = null;
    int i = Integer.MAX_VALUE;
    while (localIterator.hasNext())
    {
      int[] arrayOfInt = (int[])localIterator.next();
      int m = arrayOfInt[0];
      int j = arrayOfInt[1];
      m = Math.abs(k - m);
      j = Math.abs(k - j) + m;
      if (j < i)
      {
        paramCamera = arrayOfInt;
        i = j;
      }
    }
    return paramCamera;
  }
  
  public static SizePair selectSizePair(Camera paramCamera, int paramInt1, int paramInt2)
  {
    Iterator localIterator = generateValidPreviewSizeList(paramCamera).iterator();
    paramCamera = null;
    int i = Integer.MAX_VALUE;
    while (localIterator.hasNext())
    {
      SizePair localSizePair = (SizePair)localIterator.next();
      Size localSize = localSizePair.previewSize();
      int j = Math.abs(localSize.getWidth() - paramInt1);
      j = Math.abs(localSize.getHeight() - paramInt2) + j;
      if (j < i)
      {
        paramCamera = localSizePair;
        i = j;
      }
    }
    return paramCamera;
  }
  
  private void setRotation(Camera paramCamera, Camera.Parameters paramParameters, int paramInt)
  {
    int k = ((WindowManager)mContext.getSystemService("window")).getDefaultDisplay().getRotation();
    int j = 0;
    int i = j;
    if (k != 0) {
      if (k != 1)
      {
        if (k != 2)
        {
          if (k != 3)
          {
            a.b("Bad rotation value: ", k);
            i = j;
          }
          else
          {
            i = 270;
          }
        }
        else {
          i = 180;
        }
      }
      else {
        i = 90;
      }
    }
    Camera.CameraInfo localCameraInfo = new Camera.CameraInfo();
    Camera.getCameraInfo(paramInt, localCameraInfo);
    if (facing == 1)
    {
      i = (orientation + i) % 360;
      paramInt = (360 - i) % 360;
    }
    else
    {
      i = (orientation - i + 360) % 360;
      paramInt = i;
    }
    mRotation = (i / 90);
    paramCamera.setDisplayOrientation(paramInt);
    paramParameters.setRotation(i);
  }
  
  public void autoFocus(@G AutoFocusCallback paramAutoFocusCallback)
  {
    synchronized (mCameraLock)
    {
      if (mCamera != null)
      {
        CameraAutoFocusCallback localCameraAutoFocusCallback = null;
        if (paramAutoFocusCallback != null)
        {
          localCameraAutoFocusCallback = new CameraAutoFocusCallback(null);
          CameraAutoFocusCallback.access$1402(localCameraAutoFocusCallback, paramAutoFocusCallback);
        }
        mCamera.autoFocus(localCameraAutoFocusCallback);
      }
      return;
    }
  }
  
  public void cancelAutoFocus()
  {
    synchronized (mCameraLock)
    {
      if (mCamera != null) {
        mCamera.cancelAutoFocus();
      }
      return;
    }
  }
  
  public int doZoom(float paramFloat)
  {
    for (;;)
    {
      int j;
      int k;
      synchronized (mCameraLock)
      {
        if (mCamera == null) {
          return 0;
        }
        Camera.Parameters localParameters = mCamera.getParameters();
        if (!localParameters.isZoomSupported()) {
          return 0;
        }
        j = localParameters.getMaxZoom();
        i = localParameters.getZoom() + 1;
        if (paramFloat > 1.0F)
        {
          float f = i;
          paramFloat = paramFloat * (j / 10) + f;
          k = Math.round(paramFloat) - 1;
          if (k >= 0) {
            break label135;
          }
          i = 0;
          localParameters.setZoom(i);
          mCamera.setParameters(localParameters);
          return i;
        }
      }
      paramFloat *= i;
      continue;
      label135:
      int i = k;
      if (k > j) {
        i = j;
      }
    }
  }
  
  public Camera getCamera()
  {
    return mCamera;
  }
  
  public int getCameraFacing()
  {
    return mFacing;
  }
  
  @G
  public String getFlashMode()
  {
    return mFlashMode;
  }
  
  @G
  public String getFocusMode()
  {
    return mFocusMode;
  }
  
  public Size getPreviewSize()
  {
    return mPreviewSize;
  }
  
  public void release()
  {
    synchronized (mCameraLock)
    {
      stop();
      mFrameProcessor.release();
      return;
    }
  }
  
  @TargetApi(16)
  public boolean setAutoFocusMoveCallback(@G AutoFocusMoveCallback paramAutoFocusMoveCallback)
  {
    int i = Build.VERSION.SDK_INT;
    synchronized (mCameraLock)
    {
      if (mCamera != null)
      {
        CameraAutoFocusMoveCallback localCameraAutoFocusMoveCallback = null;
        if (paramAutoFocusMoveCallback != null)
        {
          localCameraAutoFocusMoveCallback = new CameraAutoFocusMoveCallback(null);
          CameraAutoFocusMoveCallback.access$1602(localCameraAutoFocusMoveCallback, paramAutoFocusMoveCallback);
        }
        mCamera.setAutoFocusMoveCallback(localCameraAutoFocusMoveCallback);
      }
      return true;
    }
  }
  
  public boolean setCameraFacing(int paramInt)
  {
    synchronized (mCameraLock)
    {
      if (mCamera != null) {
        mFacing = paramInt;
      }
      return false;
    }
  }
  
  public boolean setFlashMode(String paramString)
  {
    synchronized (mCameraLock)
    {
      if ((mCamera != null) && (paramString != null))
      {
        Camera.Parameters localParameters = mCamera.getParameters();
        localParameters.setFlashMode(paramString);
        mCamera.setParameters(localParameters);
        mFlashMode = paramString;
        return true;
      }
      return false;
    }
  }
  
  public boolean setFocusMode(String paramString)
  {
    synchronized (mCameraLock)
    {
      if ((mCamera != null) && (paramString != null))
      {
        Camera.Parameters localParameters = mCamera.getParameters();
        if (localParameters.getSupportedFocusModes().contains(paramString))
        {
          localParameters.setFocusMode(paramString);
          mCamera.setParameters(localParameters);
          mFocusMode = paramString;
          return true;
        }
      }
      return false;
    }
  }
  
  @M("android.permission.CAMERA")
  public CameraSource start()
    throws IOException
  {
    synchronized (mCameraLock)
    {
      if (mCamera != null) {
        return this;
      }
      mCamera = createCamera();
      int i = Build.VERSION.SDK_INT;
      mDummySurfaceTexture = new SurfaceTexture(100);
      mCamera.setPreviewTexture(mDummySurfaceTexture);
      mCamera.startPreview();
      mProcessingThread = new Thread(mFrameProcessor);
      mFrameProcessor.setActive(true);
      mProcessingThread.start();
      return this;
    }
  }
  
  @M("android.permission.CAMERA")
  public CameraSource start(SurfaceHolder paramSurfaceHolder)
    throws IOException
  {
    synchronized (mCameraLock)
    {
      if (mCamera != null) {
        return this;
      }
      mCamera = createCamera();
      mCamera.setPreviewDisplay(paramSurfaceHolder);
      mCamera.startPreview();
      mProcessingThread = new Thread(mFrameProcessor);
      mFrameProcessor.setActive(true);
      mProcessingThread.start();
      return this;
    }
  }
  
  public void stop()
  {
    synchronized (mCameraLock)
    {
      mFrameProcessor.setActive(false);
      Thread localThread = mProcessingThread;
      if (localThread == null) {}
    }
    try
    {
      mProcessingThread.join();
      mProcessingThread = null;
      mBytesToByteBuffer.clear();
      if (mCamera != null)
      {
        mCamera.stopPreview();
        mCamera.setPreviewCallbackWithBuffer(null);
        try
        {
          int i = Build.VERSION.SDK_INT;
          mCamera.setPreviewTexture(null);
        }
        catch (Exception localException)
        {
          StringBuilder localStringBuilder = new StringBuilder();
          localStringBuilder.append("Failed to clear camera preview: ");
          localStringBuilder.append(localException);
          localStringBuilder.toString();
        }
        mCamera.release();
        mCamera = null;
      }
      return;
      localObject2 = finally;
      throw localObject2;
    }
    catch (InterruptedException localInterruptedException)
    {
      for (;;) {}
    }
  }
  
  public void takePicture(ShutterCallback paramShutterCallback, PictureCallback paramPictureCallback)
  {
    synchronized (mCameraLock)
    {
      if (mCamera != null)
      {
        PictureStartCallback localPictureStartCallback = new PictureStartCallback(null);
        PictureStartCallback.access$1002(localPictureStartCallback, paramShutterCallback);
        paramShutterCallback = new PictureDoneCallback(null);
        PictureDoneCallback.access$1202(paramShutterCallback, paramPictureCallback);
        mCamera.takePicture(localPictureStartCallback, null, null, paramShutterCallback);
      }
      return;
    }
  }
  
  public static abstract interface AutoFocusCallback
  {
    public abstract void onAutoFocus(boolean paramBoolean);
  }
  
  public static abstract interface AutoFocusMoveCallback
  {
    public abstract void onAutoFocusMoving(boolean paramBoolean);
  }
  
  public static class Builder
  {
    public CameraSource mCameraSource = new CameraSource();
    public final Detector<?> mDetector;
    
    public Builder(Context paramContext, Detector<?> paramDetector)
    {
      if (paramContext != null)
      {
        if (paramDetector != null)
        {
          mDetector = paramDetector;
          CameraSource.access$102(mCameraSource, paramContext);
          return;
        }
        throw new IllegalArgumentException("No detector supplied.");
      }
      throw new IllegalArgumentException("No context supplied.");
    }
    
    public CameraSource build()
    {
      CameraSource localCameraSource = mCameraSource;
      localCameraSource.getClass();
      CameraSource.access$802(localCameraSource, new CameraSource.FrameProcessingRunnable(localCameraSource, mDetector));
      return mCameraSource;
    }
    
    public Builder setFacing(int paramInt)
    {
      if ((paramInt != 0) && (paramInt != 1)) {
        throw new IllegalArgumentException(a.a("Invalid camera: ", paramInt));
      }
      CameraSource.access$702(mCameraSource, paramInt);
      return this;
    }
    
    public Builder setFlashMode(String paramString)
    {
      CameraSource.access$402(mCameraSource, paramString);
      return this;
    }
    
    public Builder setFocusMode(String paramString)
    {
      CameraSource.access$302(mCameraSource, paramString);
      return this;
    }
    
    public Builder setRequestedFps(float paramFloat)
    {
      if (paramFloat > 0.0F)
      {
        CameraSource.access$202(mCameraSource, paramFloat);
        return this;
      }
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append("Invalid fps: ");
      localStringBuilder.append(paramFloat);
      throw new IllegalArgumentException(localStringBuilder.toString());
    }
    
    public Builder setRequestedPreviewSize(int paramInt1, int paramInt2)
    {
      if ((paramInt1 > 0) && (paramInt1 <= 1000000) && (paramInt2 > 0) && (paramInt2 <= 1000000))
      {
        CameraSource.access$502(mCameraSource, paramInt1);
        CameraSource.access$602(mCameraSource, paramInt2);
        return this;
      }
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append("Invalid preview size: ");
      localStringBuilder.append(paramInt1);
      localStringBuilder.append("x");
      localStringBuilder.append(paramInt2);
      throw new IllegalArgumentException(localStringBuilder.toString());
    }
  }
  
  private class CameraAutoFocusCallback
    implements Camera.AutoFocusCallback
  {
    public CameraSource.AutoFocusCallback mDelegate;
    
    public CameraAutoFocusCallback() {}
    
    public void onAutoFocus(boolean paramBoolean, Camera paramCamera)
    {
      paramCamera = mDelegate;
      if (paramCamera != null) {
        paramCamera.onAutoFocus(paramBoolean);
      }
    }
  }
  
  @TargetApi(16)
  private class CameraAutoFocusMoveCallback
    implements Camera.AutoFocusMoveCallback
  {
    public CameraSource.AutoFocusMoveCallback mDelegate;
    
    public CameraAutoFocusMoveCallback() {}
    
    public void onAutoFocusMoving(boolean paramBoolean, Camera paramCamera)
    {
      paramCamera = mDelegate;
      if (paramCamera != null) {
        paramCamera.onAutoFocusMoving(paramBoolean);
      }
    }
  }
  
  private class CameraPreviewCallback
    implements Camera.PreviewCallback
  {
    public CameraPreviewCallback() {}
    
    public void onPreviewFrame(byte[] paramArrayOfByte, Camera paramCamera)
    {
      CameraSource.access$800(CameraSource.this).setNextFrame(paramArrayOfByte, paramCamera);
    }
  }
  
  private class FrameProcessingRunnable
    implements Runnable
  {
    public boolean mActive = true;
    public Detector<?> mDetector;
    public final Object mLock = new Object();
    public ByteBuffer mPendingFrameData;
    public int mPendingFrameId = 0;
    public long mPendingTimeMillis;
    public long mStartTimeMillis = SystemClock.elapsedRealtime();
    
    public FrameProcessingRunnable()
    {
      Object localObject;
      mDetector = localObject;
    }
    
    @SuppressLint({"Assert"})
    public void release()
    {
      mDetector.release();
      mDetector = null;
    }
    
    /* Error */
    public void run()
    {
      // Byte code:
      //   0: aload_0
      //   1: getfield 46	com/google/android/gms/samples/vision/barcodereader/ui/camera/CameraSource$FrameProcessingRunnable:mLock	Ljava/lang/Object;
      //   4: astore_1
      //   5: aload_1
      //   6: monitorenter
      //   7: aload_0
      //   8: getfield 48	com/google/android/gms/samples/vision/barcodereader/ui/camera/CameraSource$FrameProcessingRunnable:mActive	Z
      //   11: ifeq +25 -> 36
      //   14: aload_0
      //   15: getfield 70	com/google/android/gms/samples/vision/barcodereader/ui/camera/CameraSource$FrameProcessingRunnable:mPendingFrameData	Ljava/nio/ByteBuffer;
      //   18: astore_2
      //   19: aload_2
      //   20: ifnonnull +16 -> 36
      //   23: aload_0
      //   24: getfield 46	com/google/android/gms/samples/vision/barcodereader/ui/camera/CameraSource$FrameProcessingRunnable:mLock	Ljava/lang/Object;
      //   27: invokevirtual 73	java/lang/Object:wait	()V
      //   30: goto -23 -> 7
      //   33: aload_1
      //   34: monitorexit
      //   35: return
      //   36: aload_0
      //   37: getfield 48	com/google/android/gms/samples/vision/barcodereader/ui/camera/CameraSource$FrameProcessingRunnable:mActive	Z
      //   40: ifne +6 -> 46
      //   43: aload_1
      //   44: monitorexit
      //   45: return
      //   46: new 75	com/google/android/gms/vision/Frame$Builder
      //   49: dup
      //   50: invokespecial 76	com/google/android/gms/vision/Frame$Builder:<init>	()V
      //   53: aload_0
      //   54: getfield 70	com/google/android/gms/samples/vision/barcodereader/ui/camera/CameraSource$FrameProcessingRunnable:mPendingFrameData	Ljava/nio/ByteBuffer;
      //   57: aload_0
      //   58: getfield 34	com/google/android/gms/samples/vision/barcodereader/ui/camera/CameraSource$FrameProcessingRunnable:this$0	Lcom/google/android/gms/samples/vision/barcodereader/ui/camera/CameraSource;
      //   61: invokestatic 80	com/google/android/gms/samples/vision/barcodereader/ui/camera/CameraSource:access$2300	(Lcom/google/android/gms/samples/vision/barcodereader/ui/camera/CameraSource;)Lcom/google/android/gms/common/images/Size;
      //   64: invokevirtual 86	com/google/android/gms/common/images/Size:getWidth	()I
      //   67: aload_0
      //   68: getfield 34	com/google/android/gms/samples/vision/barcodereader/ui/camera/CameraSource$FrameProcessingRunnable:this$0	Lcom/google/android/gms/samples/vision/barcodereader/ui/camera/CameraSource;
      //   71: invokestatic 80	com/google/android/gms/samples/vision/barcodereader/ui/camera/CameraSource:access$2300	(Lcom/google/android/gms/samples/vision/barcodereader/ui/camera/CameraSource;)Lcom/google/android/gms/common/images/Size;
      //   74: invokevirtual 89	com/google/android/gms/common/images/Size:getHeight	()I
      //   77: bipush 17
      //   79: invokevirtual 93	com/google/android/gms/vision/Frame$Builder:setImageData	(Ljava/nio/ByteBuffer;III)Lcom/google/android/gms/vision/Frame$Builder;
      //   82: aload_0
      //   83: getfield 50	com/google/android/gms/samples/vision/barcodereader/ui/camera/CameraSource$FrameProcessingRunnable:mPendingFrameId	I
      //   86: invokevirtual 97	com/google/android/gms/vision/Frame$Builder:setId	(I)Lcom/google/android/gms/vision/Frame$Builder;
      //   89: aload_0
      //   90: getfield 99	com/google/android/gms/samples/vision/barcodereader/ui/camera/CameraSource$FrameProcessingRunnable:mPendingTimeMillis	J
      //   93: invokevirtual 103	com/google/android/gms/vision/Frame$Builder:setTimestampMillis	(J)Lcom/google/android/gms/vision/Frame$Builder;
      //   96: aload_0
      //   97: getfield 34	com/google/android/gms/samples/vision/barcodereader/ui/camera/CameraSource$FrameProcessingRunnable:this$0	Lcom/google/android/gms/samples/vision/barcodereader/ui/camera/CameraSource;
      //   100: invokestatic 107	com/google/android/gms/samples/vision/barcodereader/ui/camera/CameraSource:access$2200	(Lcom/google/android/gms/samples/vision/barcodereader/ui/camera/CameraSource;)I
      //   103: invokevirtual 110	com/google/android/gms/vision/Frame$Builder:setRotation	(I)Lcom/google/android/gms/vision/Frame$Builder;
      //   106: invokevirtual 114	com/google/android/gms/vision/Frame$Builder:build	()Lcom/google/android/gms/vision/Frame;
      //   109: astore_3
      //   110: aload_0
      //   111: getfield 70	com/google/android/gms/samples/vision/barcodereader/ui/camera/CameraSource$FrameProcessingRunnable:mPendingFrameData	Ljava/nio/ByteBuffer;
      //   114: astore_2
      //   115: aload_0
      //   116: aconst_null
      //   117: putfield 70	com/google/android/gms/samples/vision/barcodereader/ui/camera/CameraSource$FrameProcessingRunnable:mPendingFrameData	Ljava/nio/ByteBuffer;
      //   120: aload_1
      //   121: monitorexit
      //   122: aload_0
      //   123: getfield 52	com/google/android/gms/samples/vision/barcodereader/ui/camera/CameraSource$FrameProcessingRunnable:mDetector	Lcom/google/android/gms/vision/Detector;
      //   126: aload_3
      //   127: invokevirtual 118	com/google/android/gms/vision/Detector:receiveFrame	(Lcom/google/android/gms/vision/Frame;)V
      //   130: aload_0
      //   131: getfield 34	com/google/android/gms/samples/vision/barcodereader/ui/camera/CameraSource$FrameProcessingRunnable:this$0	Lcom/google/android/gms/samples/vision/barcodereader/ui/camera/CameraSource;
      //   134: invokestatic 122	com/google/android/gms/samples/vision/barcodereader/ui/camera/CameraSource:access$1800	(Lcom/google/android/gms/samples/vision/barcodereader/ui/camera/CameraSource;)Landroid/hardware/Camera;
      //   137: aload_2
      //   138: invokevirtual 128	java/nio/ByteBuffer:array	()[B
      //   141: invokevirtual 134	android/hardware/Camera:addCallbackBuffer	([B)V
      //   144: goto -144 -> 0
      //   147: astore_1
      //   148: aload_0
      //   149: getfield 34	com/google/android/gms/samples/vision/barcodereader/ui/camera/CameraSource$FrameProcessingRunnable:this$0	Lcom/google/android/gms/samples/vision/barcodereader/ui/camera/CameraSource;
      //   152: invokestatic 122	com/google/android/gms/samples/vision/barcodereader/ui/camera/CameraSource:access$1800	(Lcom/google/android/gms/samples/vision/barcodereader/ui/camera/CameraSource;)Landroid/hardware/Camera;
      //   155: aload_2
      //   156: invokevirtual 128	java/nio/ByteBuffer:array	()[B
      //   159: invokevirtual 134	android/hardware/Camera:addCallbackBuffer	([B)V
      //   162: aload_1
      //   163: athrow
      //   164: aload_0
      //   165: getfield 34	com/google/android/gms/samples/vision/barcodereader/ui/camera/CameraSource$FrameProcessingRunnable:this$0	Lcom/google/android/gms/samples/vision/barcodereader/ui/camera/CameraSource;
      //   168: invokestatic 122	com/google/android/gms/samples/vision/barcodereader/ui/camera/CameraSource:access$1800	(Lcom/google/android/gms/samples/vision/barcodereader/ui/camera/CameraSource;)Landroid/hardware/Camera;
      //   171: aload_2
      //   172: invokevirtual 128	java/nio/ByteBuffer:array	()[B
      //   175: invokevirtual 134	android/hardware/Camera:addCallbackBuffer	([B)V
      //   178: goto -178 -> 0
      //   181: astore_2
      //   182: aload_1
      //   183: monitorexit
      //   184: goto +5 -> 189
      //   187: aload_2
      //   188: athrow
      //   189: goto -2 -> 187
      //   192: astore_2
      //   193: goto -160 -> 33
      //   196: astore_1
      //   197: goto -33 -> 164
      // Local variable table:
      //   start	length	slot	name	signature
      //   0	200	0	this	FrameProcessingRunnable
      //   4	117	1	localObject1	Object
      //   147	36	1	localObject2	Object
      //   196	1	1	localThrowable	Throwable
      //   18	154	2	localByteBuffer	ByteBuffer
      //   181	7	2	localObject3	Object
      //   192	1	2	localInterruptedException	InterruptedException
      //   109	18	3	localFrame	com.google.android.gms.vision.Frame
      // Exception table:
      //   from	to	target	type
      //   122	130	147	finally
      //   7	19	181	finally
      //   23	30	181	finally
      //   33	35	181	finally
      //   36	45	181	finally
      //   46	122	181	finally
      //   182	184	181	finally
      //   23	30	192	java/lang/InterruptedException
      //   122	130	196	java/lang/Throwable
    }
    
    public void setActive(boolean paramBoolean)
    {
      synchronized (mLock)
      {
        mActive = paramBoolean;
        mLock.notifyAll();
        return;
      }
    }
    
    public void setNextFrame(byte[] paramArrayOfByte, Camera paramCamera)
    {
      synchronized (mLock)
      {
        if (mPendingFrameData != null)
        {
          paramCamera.addCallbackBuffer(mPendingFrameData.array());
          mPendingFrameData = null;
        }
        if (!CameraSource.access$2100(CameraSource.this).containsKey(paramArrayOfByte)) {
          return;
        }
        mPendingTimeMillis = (SystemClock.elapsedRealtime() - mStartTimeMillis);
        mPendingFrameId += 1;
        mPendingFrameData = ((ByteBuffer)CameraSource.access$2100(CameraSource.this).get(paramArrayOfByte));
        mLock.notifyAll();
        return;
      }
    }
  }
  
  public static abstract interface PictureCallback
  {
    public abstract void onPictureTaken(byte[] paramArrayOfByte);
  }
  
  private class PictureDoneCallback
    implements Camera.PictureCallback
  {
    public CameraSource.PictureCallback mDelegate;
    
    public PictureDoneCallback() {}
    
    public void onPictureTaken(byte[] arg1, Camera paramCamera)
    {
      paramCamera = mDelegate;
      if (paramCamera != null) {
        paramCamera.onPictureTaken(???);
      }
      synchronized (CameraSource.access$1700(CameraSource.this))
      {
        if (CameraSource.access$1800(CameraSource.this) != null) {
          CameraSource.access$1800(CameraSource.this).startPreview();
        }
        return;
      }
    }
  }
  
  private class PictureStartCallback
    implements Camera.ShutterCallback
  {
    public CameraSource.ShutterCallback mDelegate;
    
    public PictureStartCallback() {}
    
    public void onShutter()
    {
      CameraSource.ShutterCallback localShutterCallback = mDelegate;
      if (localShutterCallback != null) {
        localShutterCallback.onShutter();
      }
    }
  }
  
  public static abstract interface ShutterCallback
  {
    public abstract void onShutter();
  }
  
  private static class SizePair
  {
    public Size mPicture;
    public Size mPreview;
    
    public SizePair(Camera.Size paramSize1, Camera.Size paramSize2)
    {
      mPreview = new Size(width, height);
      if (paramSize2 != null) {
        mPicture = new Size(width, height);
      }
    }
    
    public Size pictureSize()
    {
      return mPicture;
    }
    
    public Size previewSize()
    {
      return mPreview;
    }
  }
}
