package com.google.android.gms.auth;

import android.accounts.Account;
import android.accounts.AccountManager;
import android.annotation.SuppressLint;
import android.annotation.TargetApi;
import android.content.ComponentName;
import android.content.Context;
import android.content.pm.ApplicationInfo;
import android.os.Bundle;
import android.os.SystemClock;
import android.text.TextUtils;
import b.b.a.M;
import com.google.android.gms.common.GooglePlayServicesNotAvailableException;
import com.google.android.gms.common.GooglePlayServicesRepairableException;
import com.google.android.gms.common.UserRecoverableException;
import com.google.android.gms.common.internal.zzbp;
import com.google.android.gms.common.zzo;
import com.google.android.gms.internal.zzbde;
import java.io.IOException;
import java.util.List;

public class zzd
{
  public static final int CHANGE_TYPE_ACCOUNT_ADDED = 1;
  public static final int CHANGE_TYPE_ACCOUNT_REMOVED = 2;
  public static final int CHANGE_TYPE_ACCOUNT_RENAMED_FROM = 3;
  public static final int CHANGE_TYPE_ACCOUNT_RENAMED_TO = 4;
  public static final String GOOGLE_ACCOUNT_TYPE = "com.google";
  @SuppressLint({"InlinedApi"})
  public static final String KEY_ANDROID_PACKAGE_NAME = "androidPackageName";
  @SuppressLint({"InlinedApi"})
  public static final String KEY_CALLER_UID;
  public static final String KEY_SUPPRESS_PROGRESS_SCREEN = "suppressProgressScreen";
  public static final String WORK_ACCOUNT_TYPE = "com.google.work";
  public static final String[] zzdxj = { "com.google", "com.google.work", "cn.google" };
  public static final ComponentName zzdxk = new ComponentName("com.google.android.gms", "com.google.android.gms.auth.GetToken");
  public static final zzbde zzdxl = new zzbde("Auth", new String[] { "GoogleAuthUtil" });
  
  static
  {
    KEY_CALLER_UID = "callerUid";
  }
  
  public zzd() {}
  
  public static void clearToken(Context paramContext, String paramString)
    throws GooglePlayServicesAvailabilityException, GoogleAuthException, IOException
  {
    zzbp.zzgh("Calling this from your main thread can lead to deadlock");
    zzbj(paramContext);
    Bundle localBundle = new Bundle();
    String str = getApplicationInfopackageName;
    localBundle.putString("clientPackageName", str);
    if (!localBundle.containsKey(KEY_ANDROID_PACKAGE_NAME)) {
      localBundle.putString(KEY_ANDROID_PACKAGE_NAME, str);
    }
    paramString = new zzf(paramString, localBundle);
    zza(paramContext, zzdxk, paramString);
  }
  
  public static List<AccountChangeEvent> getAccountChangeEvents(Context paramContext, int paramInt, String paramString)
    throws GoogleAuthException, IOException
  {
    zzbp.zzh(paramString, "accountName must be provided");
    zzbp.zzgh("Calling this from your main thread can lead to deadlock");
    zzbj(paramContext);
    paramString = new zzg(paramString, paramInt);
    return (List)zza(paramContext, zzdxk, paramString);
  }
  
  public static String getAccountId(Context paramContext, String paramString)
    throws GoogleAuthException, IOException
  {
    zzbp.zzh(paramString, "accountName must be provided");
    zzbp.zzgh("Calling this from your main thread can lead to deadlock");
    zzbj(paramContext);
    return getToken(paramContext, paramString, "^^_account_id_^^", new Bundle());
  }
  
  public static String getToken(Context paramContext, Account paramAccount, String paramString)
    throws IOException, UserRecoverableAuthException, GoogleAuthException
  {
    return getToken(paramContext, paramAccount, paramString, new Bundle());
  }
  
  public static String getToken(Context paramContext, Account paramAccount, String paramString, Bundle paramBundle)
    throws IOException, UserRecoverableAuthException, GoogleAuthException
  {
    zzc(paramAccount);
    return zzb(paramContext, paramAccount, paramString, paramBundle).getToken();
  }
  
  @Deprecated
  public static String getToken(Context paramContext, String paramString1, String paramString2)
    throws IOException, UserRecoverableAuthException, GoogleAuthException
  {
    return getToken(paramContext, new Account(paramString1, "com.google"), paramString2);
  }
  
  @Deprecated
  public static String getToken(Context paramContext, String paramString1, String paramString2, Bundle paramBundle)
    throws IOException, UserRecoverableAuthException, GoogleAuthException
  {
    return getToken(paramContext, new Account(paramString1, "com.google"), paramString2, paramBundle);
  }
  
  @Deprecated
  @M("android.permission.MANAGE_ACCOUNTS")
  public static void invalidateToken(Context paramContext, String paramString)
  {
    AccountManager.get(paramContext).invalidateAuthToken("com.google", paramString);
  }
  
  @TargetApi(23)
  public static Bundle removeAccount(Context paramContext, Account paramAccount)
    throws GoogleAuthException, IOException
  {
    zzbp.zzu(paramContext);
    zzc(paramAccount);
    zzbj(paramContext);
    paramAccount = new zzh(paramAccount);
    return (Bundle)zza(paramContext, zzdxk, paramAccount);
  }
  
  /* Error */
  public static <T> T zza(Context paramContext, ComponentName paramComponentName, zzi<T> paramZzi)
    throws IOException, GoogleAuthException
  {
    // Byte code:
    //   0: new 212	com/google/android/gms/common/zza
    //   3: dup
    //   4: invokespecial 213	com/google/android/gms/common/zza:<init>	()V
    //   7: astore_3
    //   8: aload_0
    //   9: invokestatic 219	com/google/android/gms/common/internal/zzaf:zzce	(Landroid/content/Context;)Lcom/google/android/gms/common/internal/zzaf;
    //   12: astore 4
    //   14: aload 4
    //   16: aload_1
    //   17: aload_3
    //   18: ldc 68
    //   20: invokevirtual 222	com/google/android/gms/common/internal/zzaf:zza	(Landroid/content/ComponentName;Landroid/content/ServiceConnection;Ljava/lang/String;)Z
    //   23: ifeq +77 -> 100
    //   26: aload_2
    //   27: aload_3
    //   28: invokevirtual 226	com/google/android/gms/common/zza:zzaew	()Landroid/os/IBinder;
    //   31: invokeinterface 232 2 0
    //   36: astore_0
    //   37: aload 4
    //   39: aload_1
    //   40: aload_3
    //   41: ldc 68
    //   43: invokevirtual 235	com/google/android/gms/common/internal/zzaf:zzb	(Landroid/content/ComponentName;Landroid/content/ServiceConnection;Ljava/lang/String;)V
    //   46: aload_0
    //   47: areturn
    //   48: astore_0
    //   49: goto +40 -> 89
    //   52: astore_0
    //   53: goto +4 -> 57
    //   56: astore_0
    //   57: getstatic 73	com/google/android/gms/auth/zzd:zzdxl	Lcom/google/android/gms/internal/zzbde;
    //   60: ldc 68
    //   62: iconst_2
    //   63: anewarray 4	java/lang/Object
    //   66: dup
    //   67: iconst_0
    //   68: ldc -19
    //   70: aastore
    //   71: dup
    //   72: iconst_1
    //   73: aload_0
    //   74: aastore
    //   75: invokevirtual 241	com/google/android/gms/internal/zzbde:zze	(Ljava/lang/String;[Ljava/lang/Object;)V
    //   78: new 84	java/io/IOException
    //   81: dup
    //   82: ldc -19
    //   84: aload_0
    //   85: invokespecial 244	java/io/IOException:<init>	(Ljava/lang/String;Ljava/lang/Throwable;)V
    //   88: athrow
    //   89: aload 4
    //   91: aload_1
    //   92: aload_3
    //   93: ldc 68
    //   95: invokevirtual 235	com/google/android/gms/common/internal/zzaf:zzb	(Landroid/content/ComponentName;Landroid/content/ServiceConnection;Ljava/lang/String;)V
    //   98: aload_0
    //   99: athrow
    //   100: new 84	java/io/IOException
    //   103: dup
    //   104: ldc -10
    //   106: invokespecial 248	java/io/IOException:<init>	(Ljava/lang/String;)V
    //   109: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	110	0	paramContext	Context
    //   0	110	1	paramComponentName	ComponentName
    //   0	110	2	paramZzi	zzi<T>
    //   7	86	3	localZza	com.google.android.gms.common.zza
    //   12	78	4	localZzaf	com.google.android.gms.common.internal.zzaf
    // Exception table:
    //   from	to	target	type
    //   26	37	48	finally
    //   57	89	48	finally
    //   26	37	52	java/lang/InterruptedException
    //   26	37	56	android/os/RemoteException
  }
  
  public static TokenData zzb(Context paramContext, Account paramAccount, String paramString, Bundle paramBundle)
    throws IOException, UserRecoverableAuthException, GoogleAuthException
  {
    zzbp.zzgh("Calling this from your main thread can lead to deadlock");
    zzbp.zzh(paramString, "Scope cannot be empty or null.");
    zzc(paramAccount);
    zzbj(paramContext);
    if (paramBundle == null) {
      paramBundle = new Bundle();
    } else {
      paramBundle = new Bundle(paramBundle);
    }
    String str = getApplicationInfopackageName;
    paramBundle.putString("clientPackageName", str);
    if (TextUtils.isEmpty(paramBundle.getString(KEY_ANDROID_PACKAGE_NAME))) {
      paramBundle.putString(KEY_ANDROID_PACKAGE_NAME, str);
    }
    paramBundle.putLong("service_connection_start_time_millis", SystemClock.elapsedRealtime());
    paramAccount = new zze(paramAccount, paramString, paramBundle);
    return (TokenData)zza(paramContext, zzdxk, paramAccount);
  }
  
  public static void zzbj(Context paramContext)
    throws GoogleAuthException
  {
    try
    {
      zzo.zzbj(paramContext.getApplicationContext());
      return;
    }
    catch (GooglePlayServicesNotAvailableException paramContext)
    {
      throw new GoogleAuthException(paramContext.getMessage());
    }
    catch (GooglePlayServicesRepairableException paramContext)
    {
      throw new GooglePlayServicesAvailabilityException(paramContext.getConnectionStatusCode(), paramContext.getMessage(), paramContext.getIntent());
    }
  }
  
  public static void zzc(Account paramAccount)
  {
    if (paramAccount != null)
    {
      if (!TextUtils.isEmpty(name))
      {
        String[] arrayOfString = zzdxj;
        int j = arrayOfString.length;
        int i = 0;
        while (i < j)
        {
          if (arrayOfString[i].equals(type)) {
            return;
          }
          i += 1;
        }
        throw new IllegalArgumentException("Account type not supported");
      }
      throw new IllegalArgumentException("Account name cannot be empty!");
    }
    paramAccount = new IllegalArgumentException("Account cannot be null");
    for (;;)
    {
      throw paramAccount;
    }
  }
  
  public static <T> T zzl(T paramT)
    throws IOException
  {
    if (paramT != null) {
      return paramT;
    }
    zzdxl.zzf("GoogleAuthUtil", new Object[] { "Binder call returned null." });
    throw new IOException("Service unavailable.");
  }
}
