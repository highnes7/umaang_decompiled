package com.google.android.gms.internal;

import android.content.Context;
import android.content.res.Resources;
import android.content.res.Resources.NotFoundException;
import android.content.res.XmlResourceParser;
import android.text.TextUtils;
import java.io.IOException;
import org.xmlpull.v1.XmlPullParserException;

public class zzant<T extends zzans>
  extends zzamr
{
  public zzanu<T> zzdqn;
  
  public zzant(zzamu paramZzamu, zzanu<T> paramZzanu)
  {
    super(paramZzamu);
    zzdqn = paramZzanu;
  }
  
  private final T zza(XmlResourceParser paramXmlResourceParser)
  {
    try
    {
      paramXmlResourceParser.next();
      int i = paramXmlResourceParser.getEventType();
      while (i != 1)
      {
        if (paramXmlResourceParser.getEventType() == 2)
        {
          String str1 = paramXmlResourceParser.getName().toLowerCase();
          boolean bool = str1.equals("screenname");
          String str3;
          if (bool)
          {
            str1 = paramXmlResourceParser.getAttributeValue(null, "name");
            str3 = paramXmlResourceParser.nextText().trim();
            if ((!TextUtils.isEmpty(str1)) && (!TextUtils.isEmpty(str3))) {
              zzdqn.zzj(str1, str3);
            }
          }
          else if (str1.equals("string"))
          {
            str1 = paramXmlResourceParser.getAttributeValue(null, "name");
            str3 = paramXmlResourceParser.nextText().trim();
            if ((!TextUtils.isEmpty(str1)) && (str3 != null)) {
              zzdqn.zzk(str1, str3);
            }
          }
          else
          {
            String str4;
            if (str1.equals("bool"))
            {
              str1 = paramXmlResourceParser.getAttributeValue(null, "name");
              str3 = paramXmlResourceParser.nextText().trim();
              if (!TextUtils.isEmpty(str1))
              {
                bool = TextUtils.isEmpty(str3);
                if (!bool) {
                  try
                  {
                    bool = Boolean.parseBoolean(str3);
                    zzdqn.zzc(str1, bool);
                  }
                  catch (NumberFormatException localNumberFormatException1)
                  {
                    str4 = "Error parsing bool configuration value";
                  }
                }
              }
            }
            else
            {
              for (;;)
              {
                zzc(str4, str3, localNumberFormatException1);
                break;
                if (!localNumberFormatException1.equals("integer")) {
                  break;
                }
                String str2 = paramXmlResourceParser.getAttributeValue(null, "name");
                str3 = paramXmlResourceParser.nextText().trim();
                if (TextUtils.isEmpty(str2)) {
                  break;
                }
                bool = TextUtils.isEmpty(str3);
                if (bool) {
                  break;
                }
                try
                {
                  i = Integer.parseInt(str3);
                  zzdqn.zzd(str2, i);
                }
                catch (NumberFormatException localNumberFormatException2)
                {
                  str4 = "Error parsing int configuration value";
                }
              }
            }
          }
        }
        i = paramXmlResourceParser.next();
        continue;
        zze("Error parsing tracker configuration file", paramXmlResourceParser);
      }
    }
    catch (IOException paramXmlResourceParser) {}catch (XmlPullParserException paramXmlResourceParser) {}
    return zzdqn.zzxt();
  }
  
  public final T zzat(int paramInt)
  {
    try
    {
      zzans localZzans = zza(zzvw().zzwl().getResources().getXml(paramInt));
      return localZzans;
    }
    catch (Resources.NotFoundException localNotFoundException)
    {
      zzd("inflate() called with unknown resourceId", localNotFoundException);
    }
    return null;
  }
}
