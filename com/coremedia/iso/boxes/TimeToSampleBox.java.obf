package com.coremedia.iso.boxes;

import f.a.a.a.a;
import f.b.a.h;
import f.h.a.j;
import java.lang.ref.SoftReference;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.WeakHashMap;
import org.aspectj.lang.JoinPoint;
import org.aspectj.runtime.reflect.Factory;

public class TimeToSampleBox
  extends f.h.a.c
{
  public static final String TYPE = "stts";
  public static Map<List<Entry>, SoftReference<long[]>> cache = new WeakHashMap();
  public List<Entry> entries = Collections.emptyList();
  
  static {}
  
  public TimeToSampleBox()
  {
    super("stts");
  }
  
  public static long[] blowupTimeToSamples(List<Entry> paramList)
  {
    try
    {
      Object localObject = (SoftReference)cache.get(paramList);
      if (localObject != null)
      {
        localObject = (long[])((SoftReference)localObject).get();
        if (localObject != null) {
          return localObject;
        }
      }
      long l1 = 0L;
      localObject = paramList.iterator();
      for (;;)
      {
        if (!((Iterator)localObject).hasNext())
        {
          localObject = new long[(int)l1];
          Iterator localIterator = paramList.iterator();
          int i = 0;
          for (;;)
          {
            if (!localIterator.hasNext())
            {
              cache.put(paramList, new SoftReference(localObject));
              return localObject;
            }
            Entry localEntry = (Entry)localIterator.next();
            int j = 0;
            while (j < localEntry.getCount())
            {
              localObject[i] = localEntry.getDelta();
              j += 1;
              i += 1;
            }
          }
        }
        long l2 = ((Entry)((Iterator)localObject).next()).getCount();
        l1 += l2;
      }
      throw paramList;
    }
    finally {}
    for (;;) {}
  }
  
  public void _parseDetails(ByteBuffer paramByteBuffer)
  {
    parseVersionAndFlags(paramByteBuffer);
    int j = f.h.a.g.c.a(h.j(paramByteBuffer));
    entries = new ArrayList(j);
    int i = 0;
    for (;;)
    {
      if (i >= j) {
        return;
      }
      entries.add(new Entry(h.j(paramByteBuffer), h.j(paramByteBuffer)));
      i += 1;
    }
  }
  
  public void getContent(ByteBuffer paramByteBuffer)
  {
    writeVersionAndFlags(paramByteBuffer);
    paramByteBuffer.putInt((int)entries.size());
    Iterator localIterator = entries.iterator();
    for (;;)
    {
      if (!localIterator.hasNext()) {
        return;
      }
      Entry localEntry = (Entry)localIterator.next();
      paramByteBuffer.putInt((int)localEntry.getCount());
      paramByteBuffer.putInt((int)localEntry.getDelta());
    }
  }
  
  public long getContentSize()
  {
    return entries.size() * 8 + 8;
  }
  
  public List<Entry> getEntries()
  {
    JoinPoint localJoinPoint = Factory.makeJP(ajc$tjp_0, this, this);
    j.b().a(localJoinPoint);
    return entries;
  }
  
  public void setEntries(List<Entry> paramList)
  {
    JoinPoint localJoinPoint = Factory.makeJP(ajc$tjp_1, this, this, paramList);
    j.b().a(localJoinPoint);
    entries = paramList;
  }
  
  public String toString()
  {
    StringBuilder localStringBuilder = a.a(Factory.makeJP(ajc$tjp_2, this, this), "TimeToSampleBox[entryCount=");
    localStringBuilder.append(entries.size());
    localStringBuilder.append("]");
    return localStringBuilder.toString();
  }
  
  public static class Entry
  {
    public long count;
    public long delta;
    
    public Entry(long paramLong1, long paramLong2)
    {
      count = paramLong1;
      delta = paramLong2;
    }
    
    public long getCount()
    {
      return count;
    }
    
    public long getDelta()
    {
      return delta;
    }
    
    public void setCount(long paramLong)
    {
      count = paramLong;
    }
    
    public void setDelta(long paramLong)
    {
      delta = paramLong;
    }
    
    public String toString()
    {
      StringBuilder localStringBuilder = new StringBuilder("Entry{count=");
      localStringBuilder.append(count);
      localStringBuilder.append(", delta=");
      localStringBuilder.append(delta);
      localStringBuilder.append('}');
      return localStringBuilder.toString();
    }
  }
}
