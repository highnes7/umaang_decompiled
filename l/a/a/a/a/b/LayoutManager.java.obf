package l.a.a.a.a.b;

import f.a.a.a.a;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicLong;
import l.a.a.a.a.c.a.b;
import l.a.a.a.a.c.a.f;
import l.a.a.a.a.c.a.h;

public final class u
{
  public static final long a = 2L;
  
  public u() {}
  
  public static ExecutorService a(String paramString)
  {
    ExecutorService localExecutorService = Executors.newSingleThreadExecutor(c(paramString));
    a(paramString, localExecutorService);
    return localExecutorService;
  }
  
  public static h a(String paramString, int paramInt, f paramF, b paramB)
  {
    paramF = new h(paramInt, c(paramString), paramF, paramB);
    a(paramString, paramF);
    return paramF;
  }
  
  public static final void a(String paramString, ExecutorService paramExecutorService)
  {
    a(paramString, paramExecutorService, 2L, TimeUnit.SECONDS);
  }
  
  public static final void a(String paramString, ExecutorService paramExecutorService, long paramLong, TimeUnit paramTimeUnit)
  {
    Runtime.getRuntime().addShutdownHook(new Thread(new t(paramString, paramExecutorService, paramLong, paramTimeUnit), a.c("Crashlytics Shutdown Hook for ", paramString)));
  }
  
  public static ScheduledExecutorService b(String paramString)
  {
    ScheduledExecutorService localScheduledExecutorService = Executors.newSingleThreadScheduledExecutor(c(paramString));
    a(paramString, localScheduledExecutorService);
    return localScheduledExecutorService;
  }
  
  public static final ThreadFactory c(String paramString)
  {
    return new s(paramString, new AtomicLong(1L));
  }
}
