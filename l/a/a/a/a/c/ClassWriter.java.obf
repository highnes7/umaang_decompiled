package l.a.a.a.a.c;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.atomic.AtomicReference;

public class r
  implements h<t>, p, t
{
  public final List<t> a = new ArrayList();
  public final AtomicBoolean b = new AtomicBoolean(false);
  public final AtomicReference<Throwable> c = new AtomicReference(null);
  
  public r() {}
  
  public static boolean b(Object paramObject)
  {
    boolean bool2 = false;
    try
    {
      h localH = (h)paramObject;
      t localT = (t)paramObject;
      paramObject = (p)paramObject;
      boolean bool1 = bool2;
      if (localH != null)
      {
        bool1 = bool2;
        if (localT != null)
        {
          bool1 = bool2;
          if (paramObject != null) {
            bool1 = true;
          }
        }
      }
      return bool1;
    }
    catch (ClassCastException paramObject) {}
    return false;
  }
  
  public void a(Throwable paramThrowable)
  {
    c.set(paramThrowable);
  }
  
  public void a(t paramT)
  {
    try
    {
      a.add(paramT);
      return;
    }
    finally
    {
      paramT = finally;
      throw paramT;
    }
  }
  
  public void a(boolean paramBoolean)
  {
    try
    {
      b.set(paramBoolean);
      return;
    }
    finally
    {
      localObject = finally;
      throw localObject;
    }
  }
  
  public boolean a()
  {
    return b.get();
  }
  
  public boolean b()
  {
    Iterator localIterator = c().iterator();
    while (localIterator.hasNext()) {
      if (!((t)localIterator.next()).a()) {
        return false;
      }
    }
    return true;
  }
  
  public Collection<t> c()
  {
    try
    {
      Collection localCollection = Collections.unmodifiableCollection(a);
      return localCollection;
    }
    finally
    {
      localObject = finally;
      throw localObject;
    }
  }
  
  public int compareTo(Object paramObject)
  {
    return k.a(this, paramObject);
  }
  
  public Throwable getError()
  {
    return (Throwable)c.get();
  }
  
  public k getPriority()
  {
    return k.b;
  }
}
