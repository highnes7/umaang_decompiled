package l.a.a.a.a.c;

import android.annotation.TargetApi;
import java.util.concurrent.Callable;
import java.util.concurrent.RunnableFuture;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

public class s
  extends ThreadPoolExecutor
{
  public static final int a = Runtime.getRuntime().availableProcessors();
  public static final int b;
  public static final int c;
  public static final long d = 1L;
  
  static
  {
    int i = a;
    b = i + 1;
    c = i * 2 + 1;
  }
  
  public <T extends Runnable,  extends h,  extends t,  extends p> s(int paramInt1, int paramInt2, long paramLong, TimeUnit paramTimeUnit, i<T> paramI, ThreadFactory paramThreadFactory)
  {
    super(paramInt1, paramInt2, paramLong, paramTimeUnit, paramI, paramThreadFactory);
    prestartAllCoreThreads();
  }
  
  public static s a()
  {
    return a(b, c);
  }
  
  public static s a(int paramInt)
  {
    return a(paramInt, paramInt);
  }
  
  public static <T extends Runnable,  extends h,  extends t,  extends p> s a(int paramInt1, int paramInt2)
  {
    return new s(paramInt1, paramInt2, 1L, TimeUnit.SECONDS, new i(), new s.a(10));
  }
  
  public void afterExecute(Runnable paramRunnable, Throwable paramThrowable)
  {
    t localT = (t)paramRunnable;
    localT.a(true);
    localT.a(paramThrowable);
    getQueue().a();
    super.afterExecute(paramRunnable, paramThrowable);
  }
  
  @TargetApi(9)
  public void execute(Runnable paramRunnable)
  {
    if (r.b(paramRunnable))
    {
      super.execute(paramRunnable);
      return;
    }
    super.execute(newTaskFor(paramRunnable, null));
  }
  
  public i getQueue()
  {
    return (i)super.getQueue();
  }
  
  public <T> RunnableFuture<T> newTaskFor(Runnable paramRunnable, T paramT)
  {
    return new o(paramRunnable, paramT);
  }
  
  public <T> RunnableFuture<T> newTaskFor(Callable<T> paramCallable)
  {
    return new o(paramCallable);
  }
}
