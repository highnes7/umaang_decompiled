package l.a.a.a.a.c.a;

import java.util.concurrent.Callable;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadFactory;

public class h
  extends ScheduledThreadPoolExecutor
{
  public final f a;
  public final b b;
  
  public h(int paramInt, ThreadFactory paramThreadFactory, f paramF, b paramB)
  {
    super(paramInt, paramThreadFactory);
    if (paramF != null)
    {
      if (paramB != null)
      {
        a = paramF;
        b = paramB;
        return;
      }
      throw new NullPointerException("backoff must not be null");
    }
    throw new NullPointerException("retry policy must not be null");
  }
  
  public h(int paramInt, f paramF, b paramB)
  {
    this(paramInt, Executors.defaultThreadFactory(), paramF, paramB);
  }
  
  private <T> Future<T> b(Callable<T> paramCallable)
  {
    if (paramCallable != null)
    {
      paramCallable = new e(paramCallable, new g(0, b, a), this);
      execute(paramCallable);
      return paramCallable;
    }
    throw new NullPointerException();
  }
  
  public Future<?> a(Runnable paramRunnable)
  {
    return b(Executors.callable(paramRunnable));
  }
  
  public <T> Future<T> a(Runnable paramRunnable, T paramT)
  {
    return b(Executors.callable(paramRunnable, paramT));
  }
  
  public <T> Future<T> a(Callable<T> paramCallable)
  {
    return b(paramCallable);
  }
  
  public b a()
  {
    return b;
  }
  
  public f b()
  {
    return a;
  }
}
