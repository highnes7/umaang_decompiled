package l.a.a.a.a.f;

import android.annotation.TargetApi;
import android.content.Context;
import android.os.Build.VERSION;
import android.os.Environment;
import java.io.File;
import l.a.a.a.g;
import l.a.a.a.n;
import l.a.a.a.q;

public class b
  implements a
{
  public final Context a;
  public final String b;
  public final String c;
  
  public b(n paramN)
  {
    if (paramN.d() != null)
    {
      a = paramN.d();
      b = paramN.i();
      paramN = f.a.a.a.a.b("Android/");
      paramN.append(a.getPackageName());
      c = paramN.toString();
      return;
    }
    throw new IllegalStateException("Cannot get directory before context has been set. Call Fabric.with() first");
  }
  
  @TargetApi(8)
  public File a()
  {
    boolean bool = e();
    File localFile = null;
    if (bool)
    {
      int i = Build.VERSION.SDK_INT;
      localFile = a.getExternalFilesDir(null);
    }
    return a(localFile);
  }
  
  public File a(File paramFile)
  {
    if (paramFile != null)
    {
      if (!paramFile.exists())
      {
        if (paramFile.mkdirs()) {
          return paramFile;
        }
        g.h().a("Fabric", "Couldn't create file");
      }
      else
      {
        return paramFile;
      }
    }
    else {
      g.h().d("Fabric", "Null File");
    }
    return null;
  }
  
  public File b()
  {
    return a(a.getFilesDir());
  }
  
  public File c()
  {
    File localFile;
    if (e())
    {
      int i = Build.VERSION.SDK_INT;
      localFile = a.getExternalCacheDir();
    }
    else
    {
      localFile = null;
    }
    return a(localFile);
  }
  
  public File d()
  {
    return a(a.getCacheDir());
  }
  
  public boolean e()
  {
    if (!"mounted".equals(Environment.getExternalStorageState()))
    {
      g.h().a("Fabric", "External Storage is not mounted and/or writable\nHave you declared android.permission.WRITE_EXTERNAL_STORAGE in the manifest?");
      return false;
    }
    return true;
  }
}
