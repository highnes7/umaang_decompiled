package d;

import android.annotation.SuppressLint;
import android.os.Build.VERSION;
import android.os.Handler;
import android.os.Looper;
import java.util.concurrent.Executor;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

public final class c
{
  public static final c a = new c();
  public static final int b = Runtime.getRuntime().availableProcessors();
  public static final int c;
  public static final int d;
  public static final long e = 1L;
  public final Executor f = new a(null);
  
  static
  {
    int i = b;
    c = i + 1;
    d = i * 2 + 1;
  }
  
  public c() {}
  
  public static ExecutorService a()
  {
    ThreadPoolExecutor localThreadPoolExecutor = new ThreadPoolExecutor(c, d, 1L, TimeUnit.SECONDS, new LinkedBlockingQueue());
    int i = Build.VERSION.SDK_INT;
    localThreadPoolExecutor.allowCoreThreadTimeOut(true);
    return localThreadPoolExecutor;
  }
  
  public static ExecutorService a(ThreadFactory paramThreadFactory)
  {
    paramThreadFactory = new ThreadPoolExecutor(c, d, 1L, TimeUnit.SECONDS, new LinkedBlockingQueue(), paramThreadFactory);
    int i = Build.VERSION.SDK_INT;
    paramThreadFactory.allowCoreThreadTimeOut(true);
    return paramThreadFactory;
  }
  
  @SuppressLint({"NewApi"})
  public static void a(ThreadPoolExecutor paramThreadPoolExecutor, boolean paramBoolean)
  {
    int i = Build.VERSION.SDK_INT;
    paramThreadPoolExecutor.allowCoreThreadTimeOut(paramBoolean);
  }
  
  public static Executor b()
  {
    return af;
  }
  
  private static class a
    implements Executor
  {
    public a() {}
    
    public void execute(Runnable paramRunnable)
    {
      new Handler(Looper.getMainLooper()).post(paramRunnable);
    }
  }
}
