package b.b.v;

import android.animation.Animator;
import android.graphics.Matrix;
import android.os.Build.VERSION;
import android.widget.ImageView;
import android.widget.ImageView.ScaleType;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

public class G
{
  public static final String a = "ImageViewUtils";
  public static Method b;
  public static boolean c;
  
  public G() {}
  
  public static void a()
  {
    if (!c) {}
    try
    {
      b = ImageView.class.getDeclaredMethod("animateTransform", new Class[] { Matrix.class });
      b.setAccessible(true);
      c = true;
      return;
    }
    catch (NoSuchMethodException localNoSuchMethodException)
    {
      for (;;) {}
    }
  }
  
  public static void a(ImageView paramImageView)
  {
    if (Build.VERSION.SDK_INT < 21)
    {
      ImageView.ScaleType localScaleType1 = paramImageView.getScaleType();
      paramImageView.setTag(M.e.save_scale_type, localScaleType1);
      ImageView.ScaleType localScaleType2 = ImageView.ScaleType.MATRIX;
      if (localScaleType1 == localScaleType2) {
        paramImageView.setTag(M.e.save_image_matrix, paramImageView.getImageMatrix());
      } else {
        paramImageView.setScaleType(localScaleType2);
      }
      paramImageView.setImageMatrix(I.a);
    }
  }
  
  public static void a(ImageView paramImageView, Animator paramAnimator)
  {
    if (Build.VERSION.SDK_INT < 21) {
      paramAnimator.addListener(new F(paramImageView));
    }
  }
  
  public static void a(ImageView paramImageView, Matrix paramMatrix)
  {
    if (Build.VERSION.SDK_INT < 21)
    {
      paramImageView.setImageMatrix(paramMatrix);
      return;
    }
    a();
    Method localMethod = b;
    if (localMethod != null) {}
    try
    {
      localMethod.invoke(paramImageView, new Object[] { paramMatrix });
      return;
    }
    catch (InvocationTargetException paramImageView)
    {
      throw new RuntimeException(paramImageView.getCause());
      return;
    }
    catch (IllegalAccessException paramImageView) {}
  }
}
