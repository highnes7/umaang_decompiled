package b.b.d.a;

public final class f
{
  public static final boolean a = false;
  
  public f() {}
  
  public static abstract interface a<T>
  {
    public abstract T a();
    
    public abstract void a(T[] paramArrayOfT, int paramInt);
    
    public abstract boolean a(T paramT);
  }
  
  public static class b<T>
    implements f.a<T>
  {
    public final Object[] a;
    public int b;
    
    public b(int paramInt)
    {
      if (paramInt > 0)
      {
        a = new Object[paramInt];
        return;
      }
      throw new IllegalArgumentException("The max pool size must be > 0");
    }
    
    private boolean b(T paramT)
    {
      int i = 0;
      while (i < b)
      {
        if (a[i] == paramT) {
          return true;
        }
        i += 1;
      }
      return false;
    }
    
    public T a()
    {
      int i = b;
      if (i > 0)
      {
        int j = i - 1;
        Object[] arrayOfObject = a;
        Object localObject = arrayOfObject[j];
        arrayOfObject[j] = null;
        b = (i - 1);
        return localObject;
      }
      return null;
    }
    
    public void a(T[] paramArrayOfT, int paramInt)
    {
      int i = paramInt;
      if (paramInt > paramArrayOfT.length) {
        i = paramArrayOfT.length;
      }
      paramInt = 0;
      while (paramInt < i)
      {
        T ? = paramArrayOfT[paramInt];
        int j = b;
        Object[] arrayOfObject = a;
        if (j < arrayOfObject.length)
        {
          arrayOfObject[j] = ?;
          b = (j + 1);
        }
        paramInt += 1;
      }
    }
    
    public boolean a(T paramT)
    {
      int i = b;
      Object[] arrayOfObject = a;
      if (i < arrayOfObject.length)
      {
        arrayOfObject[i] = paramT;
        b = (i + 1);
        return true;
      }
      return false;
    }
  }
}
