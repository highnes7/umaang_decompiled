package b.b.d;

import android.content.Context;
import android.content.res.Resources;
import android.content.res.TypedArray;
import android.content.res.XmlResourceParser;
import android.os.Build.VERSION;
import android.support.constraint.ConstraintLayout;
import android.support.constraint.ConstraintLayout.LayoutParams;
import android.support.constraint.Guideline;
import android.util.AttributeSet;
import android.util.SparseIntArray;
import android.util.Xml;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.view.ViewGroup.LayoutParams;
import android.view.ViewGroup.MarginLayoutParams;
import f.a.a.a.a;
import java.io.IOException;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;
import org.xmlpull.v1.XmlPullParser;
import org.xmlpull.v1.XmlPullParserException;

public class c
{
  public static SparseIntArray A;
  public static final int Aa = 52;
  public static final int B = 1;
  public static final int Ba = 53;
  public static final int C = 2;
  public static final int Ca = 54;
  public static final int D = 3;
  public static final int Da = 55;
  public static final int E = 4;
  public static final int Ea = 56;
  public static final int F = 5;
  public static final int Fa = 57;
  public static final int G = 6;
  public static final int Ga = 58;
  public static final int H = 7;
  public static final int Ha = 59;
  public static final int I = 8;
  public static final int Ia = 60;
  public static final int J = 9;
  public static final int K = 10;
  public static final int L = 11;
  public static final int M = 12;
  public static final int N = 13;
  public static final int O = 14;
  public static final int P = 15;
  public static final int Q = 16;
  public static final int R = 17;
  public static final int S = 18;
  public static final int T = 19;
  public static final int U = 20;
  public static final int V = 21;
  public static final int W = 22;
  public static final int X = 23;
  public static final int Y = 24;
  public static final int Z = 25;
  public static final String a = "ConstraintSet";
  public static final int aa = 26;
  public static final int b = -1;
  public static final int ba = 27;
  public static final int c = 0;
  public static final int ca = 28;
  public static final int d = -2;
  public static final int da = 29;
  public static final int e = 1;
  public static final int ea = 30;
  public static final int f = 0;
  public static final int fa = 31;
  public static final int g = 0;
  public static final int ga = 32;
  public static final int h = 0;
  public static final int ha = 33;
  public static final int i = 1;
  public static final int ia = 34;
  public static final int j = 0;
  public static final int ja = 35;
  public static final int k = 1;
  public static final int ka = 36;
  public static final int l = 0;
  public static final int la = 37;
  public static final int m = 4;
  public static final int ma = 38;
  public static final int n = 8;
  public static final int na = 39;
  public static final int o = 1;
  public static final int oa = 40;
  public static final int p = 2;
  public static final int pa = 41;
  public static final int q = 3;
  public static final int qa = 42;
  public static final int r = 4;
  public static final int ra = 43;
  public static final int s = 5;
  public static final int sa = 44;
  public static final int t = 6;
  public static final int ta = 45;
  public static final int u = 7;
  public static final int ua = 46;
  public static final int v = 0;
  public static final int va = 47;
  public static final int w = 1;
  public static final int wa = 48;
  public static final int x = 2;
  public static final int xa = 49;
  public static final boolean y = false;
  public static final int ya = 50;
  public static final int[] z = { 0, 4, 8 };
  public static final int za = 51;
  public HashMap<Integer, a> Ja = new HashMap();
  
  static
  {
    A = new SparseIntArray();
    A.append(d.c.ConstraintSet_layout_constraintLeft_toLeftOf, 25);
    A.append(d.c.ConstraintSet_layout_constraintLeft_toRightOf, 26);
    A.append(d.c.ConstraintSet_layout_constraintRight_toLeftOf, 29);
    A.append(d.c.ConstraintSet_layout_constraintRight_toRightOf, 30);
    A.append(d.c.ConstraintSet_layout_constraintTop_toTopOf, 36);
    A.append(d.c.ConstraintSet_layout_constraintTop_toBottomOf, 35);
    A.append(d.c.ConstraintSet_layout_constraintBottom_toTopOf, 4);
    A.append(d.c.ConstraintSet_layout_constraintBottom_toBottomOf, 3);
    A.append(d.c.ConstraintSet_layout_constraintBaseline_toBaselineOf, 1);
    A.append(d.c.ConstraintSet_layout_editor_absoluteX, 6);
    A.append(d.c.ConstraintSet_layout_editor_absoluteY, 7);
    A.append(d.c.ConstraintSet_layout_constraintGuide_begin, 17);
    A.append(d.c.ConstraintSet_layout_constraintGuide_end, 18);
    A.append(d.c.ConstraintSet_layout_constraintGuide_percent, 19);
    A.append(d.c.ConstraintSet_android_orientation, 27);
    A.append(d.c.ConstraintSet_layout_constraintStart_toEndOf, 32);
    A.append(d.c.ConstraintSet_layout_constraintStart_toStartOf, 33);
    A.append(d.c.ConstraintSet_layout_constraintEnd_toStartOf, 10);
    A.append(d.c.ConstraintSet_layout_constraintEnd_toEndOf, 9);
    A.append(d.c.ConstraintSet_layout_goneMarginLeft, 13);
    A.append(d.c.ConstraintSet_layout_goneMarginTop, 16);
    A.append(d.c.ConstraintSet_layout_goneMarginRight, 14);
    A.append(d.c.ConstraintSet_layout_goneMarginBottom, 11);
    A.append(d.c.ConstraintSet_layout_goneMarginStart, 15);
    A.append(d.c.ConstraintSet_layout_goneMarginEnd, 12);
    A.append(d.c.ConstraintSet_layout_constraintVertical_weight, 40);
    A.append(d.c.ConstraintSet_layout_constraintHorizontal_weight, 39);
    A.append(d.c.ConstraintSet_layout_constraintHorizontal_chainStyle, 41);
    A.append(d.c.ConstraintSet_layout_constraintVertical_chainStyle, 42);
    A.append(d.c.ConstraintSet_layout_constraintHorizontal_bias, 20);
    A.append(d.c.ConstraintSet_layout_constraintVertical_bias, 37);
    A.append(d.c.ConstraintSet_layout_constraintDimensionRatio, 5);
    A.append(d.c.ConstraintSet_layout_constraintLeft_creator, 60);
    A.append(d.c.ConstraintSet_layout_constraintTop_creator, 60);
    A.append(d.c.ConstraintSet_layout_constraintRight_creator, 60);
    A.append(d.c.ConstraintSet_layout_constraintBottom_creator, 60);
    A.append(d.c.ConstraintSet_layout_constraintBaseline_creator, 60);
    A.append(d.c.ConstraintSet_android_layout_marginLeft, 24);
    A.append(d.c.ConstraintSet_android_layout_marginRight, 28);
    A.append(d.c.ConstraintSet_android_layout_marginStart, 31);
    A.append(d.c.ConstraintSet_android_layout_marginEnd, 8);
    A.append(d.c.ConstraintSet_android_layout_marginTop, 34);
    A.append(d.c.ConstraintSet_android_layout_marginBottom, 2);
    A.append(d.c.ConstraintSet_android_layout_width, 23);
    A.append(d.c.ConstraintSet_android_layout_height, 21);
    A.append(d.c.ConstraintSet_android_visibility, 22);
    A.append(d.c.ConstraintSet_android_alpha, 43);
    A.append(d.c.ConstraintSet_android_elevation, 44);
    A.append(d.c.ConstraintSet_android_rotationX, 45);
    A.append(d.c.ConstraintSet_android_rotationY, 46);
    A.append(d.c.ConstraintSet_android_scaleX, 47);
    A.append(d.c.ConstraintSet_android_scaleY, 48);
    A.append(d.c.ConstraintSet_android_transformPivotX, 49);
    A.append(d.c.ConstraintSet_android_transformPivotY, 50);
    A.append(d.c.ConstraintSet_android_translationX, 51);
    A.append(d.c.ConstraintSet_android_translationY, 52);
    A.append(d.c.ConstraintSet_android_translationZ, 53);
    A.append(d.c.ConstraintSet_layout_constraintWidth_default, 54);
    A.append(d.c.ConstraintSet_layout_constraintHeight_default, 55);
    A.append(d.c.ConstraintSet_layout_constraintWidth_max, 56);
    A.append(d.c.ConstraintSet_layout_constraintHeight_max, 57);
    A.append(d.c.ConstraintSet_layout_constraintWidth_min, 58);
    A.append(d.c.ConstraintSet_layout_constraintHeight_min, 59);
    A.append(d.c.ConstraintSet_android_id, 38);
  }
  
  public c() {}
  
  public static int a(TypedArray paramTypedArray, int paramInt1, int paramInt2)
  {
    int i1 = paramTypedArray.getResourceId(paramInt1, paramInt2);
    paramInt2 = i1;
    if (i1 == -1) {
      paramInt2 = paramTypedArray.getInt(paramInt1, -1);
    }
    return paramInt2;
  }
  
  private a a(Context paramContext, AttributeSet paramAttributeSet)
  {
    a localA = new a();
    paramContext = paramContext.obtainStyledAttributes(paramAttributeSet, d.c.ConstraintSet);
    a(localA, paramContext);
    paramContext.recycle();
    return localA;
  }
  
  private void a(int paramInt1, int paramInt2, int paramInt3, int paramInt4, int[] paramArrayOfInt, float[] paramArrayOfFloat, int paramInt5, int paramInt6, int paramInt7)
  {
    if (paramArrayOfInt.length >= 2)
    {
      if ((paramArrayOfFloat != null) && (paramArrayOfFloat.length != paramArrayOfInt.length)) {
        throw new IllegalArgumentException("must have 2 or more widgets in a chain");
      }
      if (paramArrayOfFloat != null) {
        e0O = paramArrayOfFloat[0];
      }
      e0Q = paramInt5;
      a(paramArrayOfInt[0], paramInt6, paramInt1, paramInt2, -1);
      paramInt1 = 1;
      while (paramInt1 < paramArrayOfInt.length)
      {
        paramInt2 = paramArrayOfInt[paramInt1];
        paramInt2 = paramArrayOfInt[paramInt1];
        paramInt5 = paramInt1 - 1;
        a(paramInt2, paramInt6, paramArrayOfInt[paramInt5], paramInt7, -1);
        a(paramArrayOfInt[paramInt5], paramInt7, paramArrayOfInt[paramInt1], paramInt6, -1);
        if (paramArrayOfFloat != null) {
          eP = paramArrayOfFloat[paramInt1];
        }
        paramInt1 += 1;
      }
      a(paramArrayOfInt[(paramArrayOfInt.length - 1)], paramInt7, paramInt3, paramInt4, -1);
      return;
    }
    paramArrayOfInt = new IllegalArgumentException("must have 2 or more widgets in a chain");
    for (;;)
    {
      throw paramArrayOfInt;
    }
  }
  
  private void a(a paramA, TypedArray paramTypedArray)
  {
    int i4 = paramTypedArray.getIndexCount();
    int i1 = 0;
    while (i1 < i4)
    {
      int i5 = paramTypedArray.getIndex(i1);
      int i2 = A.get(i5);
      StringBuilder localStringBuilder;
      if (i2 != 60)
      {
        int i3;
        switch (i2)
        {
        default: 
          localStringBuilder = a.b("Unknown attribute 0x");
          localStringBuilder.append(Integer.toHexString(i5));
          localStringBuilder.append("   ");
          localStringBuilder.append(A.get(i5));
          localStringBuilder.toString();
          break;
        case 53: 
          da = paramTypedArray.getFloat(i5, da);
          break;
        case 52: 
          ca = paramTypedArray.getFloat(i5, ca);
          break;
        case 51: 
          ba = paramTypedArray.getFloat(i5, ba);
          break;
        case 50: 
          aa = paramTypedArray.getFloat(i5, aa);
          break;
        case 49: 
          Z = paramTypedArray.getFloat(i5, Z);
          break;
        case 48: 
          Y = paramTypedArray.getFloat(i5, Y);
          break;
        case 47: 
          X = paramTypedArray.getFloat(i5, X);
          break;
        case 46: 
          W = paramTypedArray.getFloat(i5, W);
          break;
        case 45: 
          V = paramTypedArray.getFloat(i5, V);
          break;
        case 44: 
          T = true;
          U = paramTypedArray.getFloat(i5, U);
          break;
        case 43: 
          S = paramTypedArray.getFloat(i5, S);
          break;
        case 42: 
          R = paramTypedArray.getInt(i5, R);
          break;
        case 41: 
          Q = paramTypedArray.getInt(i5, Q);
          break;
        case 40: 
          O = paramTypedArray.getFloat(i5, O);
          break;
        case 39: 
          P = paramTypedArray.getFloat(i5, P);
          break;
        case 38: 
          e = paramTypedArray.getResourceId(i5, e);
          break;
        case 37: 
          w = paramTypedArray.getFloat(i5, w);
          break;
        case 36: 
          i3 = paramTypedArray.getResourceId(i5, m);
          i2 = i3;
          if (i3 == -1) {
            i2 = paramTypedArray.getInt(i5, -1);
          }
          m = i2;
          break;
        case 35: 
          i3 = paramTypedArray.getResourceId(i5, n);
          i2 = i3;
          if (i3 == -1) {
            i2 = paramTypedArray.getInt(i5, -1);
          }
          n = i2;
          break;
        case 34: 
          D = paramTypedArray.getDimensionPixelSize(i5, D);
          break;
        case 33: 
          i3 = paramTypedArray.getResourceId(i5, s);
          i2 = i3;
          if (i3 == -1) {
            i2 = paramTypedArray.getInt(i5, -1);
          }
          s = i2;
          break;
        case 32: 
          i3 = paramTypedArray.getResourceId(i5, r);
          i2 = i3;
          if (i3 == -1) {
            i2 = paramTypedArray.getInt(i5, -1);
          }
          r = i2;
          break;
        case 31: 
          G = paramTypedArray.getDimensionPixelSize(i5, G);
          break;
        case 30: 
          i3 = paramTypedArray.getResourceId(i5, l);
          i2 = i3;
          if (i3 == -1) {
            i2 = paramTypedArray.getInt(i5, -1);
          }
          l = i2;
          break;
        case 29: 
          i3 = paramTypedArray.getResourceId(i5, k);
          i2 = i3;
          if (i3 == -1) {
            i2 = paramTypedArray.getInt(i5, -1);
          }
          k = i2;
          break;
        case 28: 
          C = paramTypedArray.getDimensionPixelSize(i5, C);
          break;
        case 27: 
          A = paramTypedArray.getInt(i5, A);
          break;
        case 26: 
          i3 = paramTypedArray.getResourceId(i5, j);
          i2 = i3;
          if (i3 == -1) {
            i2 = paramTypedArray.getInt(i5, -1);
          }
          j = i2;
          break;
        case 25: 
          i3 = paramTypedArray.getResourceId(i5, i);
          i2 = i3;
          if (i3 == -1) {
            i2 = paramTypedArray.getInt(i5, -1);
          }
          i = i2;
          break;
        case 24: 
          B = paramTypedArray.getDimensionPixelSize(i5, B);
          break;
        case 23: 
          c = paramTypedArray.getLayoutDimension(i5, c);
          break;
        case 22: 
          H = paramTypedArray.getInt(i5, H);
          H = z[H];
          break;
        case 21: 
          d = paramTypedArray.getLayoutDimension(i5, d);
          break;
        case 20: 
          v = paramTypedArray.getFloat(i5, v);
          break;
        case 19: 
          h = paramTypedArray.getFloat(i5, h);
          break;
        case 18: 
          g = paramTypedArray.getDimensionPixelOffset(i5, g);
          break;
        case 17: 
          f = paramTypedArray.getDimensionPixelOffset(i5, f);
          break;
        case 16: 
          J = paramTypedArray.getDimensionPixelSize(i5, J);
          break;
        case 15: 
          N = paramTypedArray.getDimensionPixelSize(i5, N);
          break;
        case 14: 
          K = paramTypedArray.getDimensionPixelSize(i5, K);
          break;
        case 13: 
          I = paramTypedArray.getDimensionPixelSize(i5, I);
          break;
        case 12: 
          M = paramTypedArray.getDimensionPixelSize(i5, M);
          break;
        case 11: 
          L = paramTypedArray.getDimensionPixelSize(i5, L);
          break;
        case 10: 
          i3 = paramTypedArray.getResourceId(i5, t);
          i2 = i3;
          if (i3 == -1) {
            i2 = paramTypedArray.getInt(i5, -1);
          }
          t = i2;
          break;
        case 9: 
          i3 = paramTypedArray.getResourceId(i5, u);
          i2 = i3;
          if (i3 == -1) {
            i2 = paramTypedArray.getInt(i5, -1);
          }
          o = i2;
          break;
        case 8: 
          F = paramTypedArray.getDimensionPixelSize(i5, F);
          break;
        case 7: 
          z = paramTypedArray.getDimensionPixelOffset(i5, z);
          break;
        case 6: 
          y = paramTypedArray.getDimensionPixelOffset(i5, y);
          break;
        case 5: 
          x = paramTypedArray.getString(i5);
          break;
        case 4: 
          i3 = paramTypedArray.getResourceId(i5, o);
          i2 = i3;
          if (i3 == -1) {
            i2 = paramTypedArray.getInt(i5, -1);
          }
          o = i2;
          break;
        case 3: 
          i3 = paramTypedArray.getResourceId(i5, p);
          i2 = i3;
          if (i3 == -1) {
            i2 = paramTypedArray.getInt(i5, -1);
          }
          p = i2;
          break;
        case 2: 
          E = paramTypedArray.getDimensionPixelSize(i5, E);
          break;
        case 1: 
          i3 = paramTypedArray.getResourceId(i5, q);
          i2 = i3;
          if (i3 == -1) {
            i2 = paramTypedArray.getInt(i5, -1);
          }
          q = i2;
          break;
        }
      }
      else
      {
        localStringBuilder = a.b("unused attribute 0x");
        localStringBuilder.append(Integer.toHexString(i5));
        localStringBuilder.append("   ");
        localStringBuilder.append(A.get(i5));
        localStringBuilder.toString();
      }
      i1 += 1;
    }
  }
  
  private a e(int paramInt)
  {
    if (!Ja.containsKey(Integer.valueOf(paramInt))) {
      Ja.put(Integer.valueOf(paramInt), new a());
    }
    return (a)Ja.get(Integer.valueOf(paramInt));
  }
  
  private String f(int paramInt)
  {
    switch (paramInt)
    {
    default: 
      return "undefined";
    case 7: 
      return "end";
    case 6: 
      return "start";
    case 5: 
      return "baseline";
    case 4: 
      return "bottom";
    case 3: 
      return "top";
    case 2: 
      return "right";
    }
    return "left";
  }
  
  public void a(int paramInt)
  {
    Ja.remove(Integer.valueOf(paramInt));
  }
  
  public void a(int paramInt, float paramFloat)
  {
    eS = paramFloat;
  }
  
  public void a(int paramInt, float paramFloat1, float paramFloat2)
  {
    a localA = e(paramInt);
    aa = paramFloat2;
    Z = paramFloat1;
  }
  
  public void a(int paramInt1, int paramInt2)
  {
    if (paramInt2 == 0)
    {
      a(paramInt1, 0, 1, 0, 0, 2, 0, 0.5F);
      return;
    }
    a(paramInt1, paramInt2, 2, 0, paramInt2, 1, 0, 0.5F);
  }
  
  public void a(int paramInt1, int paramInt2, int paramInt3)
  {
    int i1;
    if (paramInt2 == 0) {
      i1 = 1;
    } else {
      i1 = 2;
    }
    a(paramInt1, 1, paramInt2, i1, 0);
    if (paramInt3 == 0) {
      i1 = 2;
    } else {
      i1 = 1;
    }
    a(paramInt1, 2, paramInt3, i1, 0);
    if (paramInt2 != 0) {
      a(paramInt2, 2, paramInt1, 1, 0);
    }
    if (paramInt3 != 0) {
      a(paramInt3, 1, paramInt1, 2, 0);
    }
  }
  
  public void a(int paramInt1, int paramInt2, int paramInt3, int paramInt4)
  {
    if (!Ja.containsKey(Integer.valueOf(paramInt1))) {
      Ja.put(Integer.valueOf(paramInt1), new a());
    }
    Object localObject = (a)Ja.get(Integer.valueOf(paramInt1));
    switch (paramInt2)
    {
    default: 
      localObject = new StringBuilder();
      ((StringBuilder)localObject).append(f(paramInt2));
      ((StringBuilder)localObject).append(" to ");
      throw new IllegalArgumentException(a.a((StringBuilder)localObject, f(paramInt4), " unknown"));
    case 7: 
      if (paramInt4 == 7)
      {
        u = paramInt3;
        t = -1;
        return;
      }
      if (paramInt4 == 6)
      {
        t = paramInt3;
        u = -1;
        return;
      }
      throw new IllegalArgumentException(a.a(a.b("right to "), f(paramInt4), " undefined"));
    case 6: 
      if (paramInt4 == 6)
      {
        s = paramInt3;
        r = -1;
        return;
      }
      if (paramInt4 == 7)
      {
        r = paramInt3;
        s = -1;
        return;
      }
      throw new IllegalArgumentException(a.a(a.b("right to "), f(paramInt4), " undefined"));
    case 5: 
      if (paramInt4 == 5)
      {
        q = paramInt3;
        p = -1;
        o = -1;
        m = -1;
        n = -1;
        return;
      }
      throw new IllegalArgumentException(a.a(a.b("right to "), f(paramInt4), " undefined"));
    case 4: 
      if (paramInt4 == 4)
      {
        p = paramInt3;
        o = -1;
        q = -1;
        return;
      }
      if (paramInt4 == 3)
      {
        o = paramInt3;
        p = -1;
        q = -1;
        return;
      }
      throw new IllegalArgumentException(a.a(a.b("right to "), f(paramInt4), " undefined"));
    case 3: 
      if (paramInt4 == 3)
      {
        m = paramInt3;
        n = -1;
        q = -1;
        return;
      }
      if (paramInt4 == 4)
      {
        n = paramInt3;
        m = -1;
        q = -1;
        return;
      }
      throw new IllegalArgumentException(a.a(a.b("right to "), f(paramInt4), " undefined"));
    case 2: 
      if (paramInt4 == 1)
      {
        k = paramInt3;
        l = -1;
        return;
      }
      if (paramInt4 == 2)
      {
        l = paramInt3;
        k = -1;
        return;
      }
      throw new IllegalArgumentException(a.a(a.b("right to "), f(paramInt4), " undefined"));
    }
    if (paramInt4 == 1)
    {
      i = paramInt3;
      j = -1;
      return;
    }
    if (paramInt4 == 2)
    {
      j = paramInt3;
      i = -1;
      return;
    }
    throw new IllegalArgumentException(a.a(a.b("left to "), f(paramInt4), " undefined"));
  }
  
  public void a(int paramInt1, int paramInt2, int paramInt3, int paramInt4, int paramInt5)
  {
    if (!Ja.containsKey(Integer.valueOf(paramInt1))) {
      Ja.put(Integer.valueOf(paramInt1), new a());
    }
    Object localObject = (a)Ja.get(Integer.valueOf(paramInt1));
    switch (paramInt2)
    {
    default: 
      localObject = new StringBuilder();
      ((StringBuilder)localObject).append(f(paramInt2));
      ((StringBuilder)localObject).append(" to ");
      throw new IllegalArgumentException(a.a((StringBuilder)localObject, f(paramInt4), " unknown"));
    case 7: 
      if (paramInt4 == 7)
      {
        u = paramInt3;
        t = -1;
      }
      else
      {
        if (paramInt4 != 6) {
          break label192;
        }
        t = paramInt3;
        u = -1;
      }
      F = paramInt5;
      return;
      throw new IllegalArgumentException(a.a(a.b("right to "), f(paramInt4), " undefined"));
    case 6: 
      if (paramInt4 == 6)
      {
        s = paramInt3;
        r = -1;
      }
      else
      {
        if (paramInt4 != 7) {
          break label267;
        }
        r = paramInt3;
        s = -1;
      }
      G = paramInt5;
      return;
      throw new IllegalArgumentException(a.a(a.b("right to "), f(paramInt4), " undefined"));
    case 5: 
      if (paramInt4 == 5)
      {
        q = paramInt3;
        p = -1;
        o = -1;
        m = -1;
        n = -1;
        return;
      }
      throw new IllegalArgumentException(a.a(a.b("right to "), f(paramInt4), " undefined"));
    case 4: 
      if (paramInt4 == 4)
      {
        p = paramInt3;
        o = -1;
        q = -1;
      }
      else
      {
        if (paramInt4 != 3) {
          break label415;
        }
        o = paramInt3;
        p = -1;
        q = -1;
      }
      E = paramInt5;
      return;
      throw new IllegalArgumentException(a.a(a.b("right to "), f(paramInt4), " undefined"));
    case 3: 
      if (paramInt4 == 3)
      {
        m = paramInt3;
        n = -1;
        q = -1;
      }
      else
      {
        if (paramInt4 != 4) {
          break label500;
        }
        n = paramInt3;
        m = -1;
        q = -1;
      }
      D = paramInt5;
      return;
      throw new IllegalArgumentException(a.a(a.b("right to "), f(paramInt4), " undefined"));
    case 2: 
      label192:
      label267:
      label415:
      label500:
      if (paramInt4 == 1)
      {
        k = paramInt3;
        l = -1;
      }
      else
      {
        if (paramInt4 != 2) {
          break label573;
        }
        l = paramInt3;
        k = -1;
      }
      C = paramInt5;
      return;
      label573:
      throw new IllegalArgumentException(a.a(a.b("right to "), f(paramInt4), " undefined"));
    }
    if (paramInt4 == 1)
    {
      i = paramInt3;
      j = -1;
    }
    else
    {
      if (paramInt4 != 2) {
        break label646;
      }
      j = paramInt3;
      i = -1;
    }
    B = paramInt5;
    return;
    label646:
    throw new IllegalArgumentException(a.a(a.b("Left to "), f(paramInt4), " undefined"));
  }
  
  public void a(int paramInt1, int paramInt2, int paramInt3, int paramInt4, int paramInt5, int paramInt6, int paramInt7, float paramFloat)
  {
    if (paramInt4 >= 0)
    {
      if (paramInt7 >= 0)
      {
        if ((paramFloat > 0.0F) && (paramFloat <= 1.0F))
        {
          if ((paramInt3 != 1) && (paramInt3 != 2))
          {
            if ((paramInt3 != 6) && (paramInt3 != 7))
            {
              a(paramInt1, 3, paramInt2, paramInt3, paramInt4);
              a(paramInt1, 4, paramInt5, paramInt6, paramInt7);
              Ja.get(Integer.valueOf(paramInt1))).w = paramFloat;
              return;
            }
            a(paramInt1, 6, paramInt2, paramInt3, paramInt4);
            a(paramInt1, 7, paramInt5, paramInt6, paramInt7);
            Ja.get(Integer.valueOf(paramInt1))).v = paramFloat;
            return;
          }
          a(paramInt1, 1, paramInt2, paramInt3, paramInt4);
          a(paramInt1, 2, paramInt5, paramInt6, paramInt7);
          Ja.get(Integer.valueOf(paramInt1))).v = paramFloat;
          return;
        }
        throw new IllegalArgumentException("bias must be between 0 and 1 inclusive");
      }
      throw new IllegalArgumentException("margin must be > 0");
    }
    throw new IllegalArgumentException("margin must be > 0");
  }
  
  public void a(int paramInt1, int paramInt2, int paramInt3, int paramInt4, int[] paramArrayOfInt, float[] paramArrayOfFloat, int paramInt5)
  {
    a(paramInt1, paramInt2, paramInt3, paramInt4, paramArrayOfInt, paramArrayOfFloat, paramInt5, 1, 2);
  }
  
  public void a(int paramInt, String paramString)
  {
    ex = paramString;
  }
  
  public void a(int paramInt, boolean paramBoolean)
  {
    eT = paramBoolean;
  }
  
  public void a(Context paramContext, int paramInt)
  {
    c((ConstraintLayout)LayoutInflater.from(paramContext).inflate(paramInt, null));
  }
  
  public void a(ConstraintLayout paramConstraintLayout)
  {
    b(paramConstraintLayout);
    paramConstraintLayout.setConstraintSet(null);
  }
  
  public void a(c paramC)
  {
    Ja.clear();
    Iterator localIterator = Ja.keySet().iterator();
    while (localIterator.hasNext())
    {
      Integer localInteger = (Integer)localIterator.next();
      Ja.put(localInteger, ((a)Ja.get(localInteger)).clone());
    }
  }
  
  public void b(int paramInt, float paramFloat)
  {
    eU = paramFloat;
    eT = true;
  }
  
  public void b(int paramInt, float paramFloat1, float paramFloat2)
  {
    a localA = e(paramInt);
    ba = paramFloat1;
    ca = paramFloat2;
  }
  
  public void b(int paramInt1, int paramInt2)
  {
    if (paramInt2 == 0)
    {
      a(paramInt1, 0, 6, 0, 0, 7, 0, 0.5F);
      return;
    }
    a(paramInt1, paramInt2, 7, 0, paramInt2, 6, 0, 0.5F);
  }
  
  public void b(int paramInt1, int paramInt2, int paramInt3)
  {
    int i1;
    if (paramInt2 == 0) {
      i1 = 6;
    } else {
      i1 = 7;
    }
    a(paramInt1, 6, paramInt2, i1, 0);
    if (paramInt3 == 0) {
      i1 = 7;
    } else {
      i1 = 6;
    }
    a(paramInt1, 7, paramInt3, i1, 0);
    if (paramInt2 != 0) {
      a(paramInt2, 7, paramInt1, 6, 0);
    }
    if (paramInt3 != 0) {
      a(paramInt3, 6, paramInt1, 7, 0);
    }
  }
  
  public void b(int paramInt1, int paramInt2, int paramInt3, int paramInt4, int paramInt5, int paramInt6, int paramInt7, float paramFloat)
  {
    a(paramInt1, 1, paramInt2, paramInt3, paramInt4);
    a(paramInt1, 2, paramInt5, paramInt6, paramInt7);
    Ja.get(Integer.valueOf(paramInt1))).v = paramFloat;
  }
  
  public void b(int paramInt1, int paramInt2, int paramInt3, int paramInt4, int[] paramArrayOfInt, float[] paramArrayOfFloat, int paramInt5)
  {
    a(paramInt1, paramInt2, paramInt3, paramInt4, paramArrayOfInt, paramArrayOfFloat, paramInt5, 6, 7);
  }
  
  public void b(Context paramContext, int paramInt)
  {
    XmlResourceParser localXmlResourceParser = paramContext.getResources().getXml(paramInt);
    try
    {
      paramInt = localXmlResourceParser.getEventType();
    }
    catch (IOException paramContext)
    {
      String str;
      a localA;
      paramContext.printStackTrace();
      return;
    }
    catch (XmlPullParserException paramContext)
    {
      paramContext.printStackTrace();
    }
    str = localXmlResourceParser.getName();
    localA = a(paramContext, Xml.asAttributeSet(localXmlResourceParser));
    if (str.equalsIgnoreCase("Guideline")) {
      b = true;
    }
    Ja.put(Integer.valueOf(e), localA);
    break label83;
    label76:
    localXmlResourceParser.getName();
    for (;;)
    {
      label83:
      paramInt = localXmlResourceParser.next();
      while (paramInt == 1) {
        return;
      }
      if (paramInt == 0) {
        break label76;
      }
      if (paramInt == 2) {
        break;
      }
    }
  }
  
  public void b(ConstraintLayout paramConstraintLayout)
  {
    int i2 = paramConstraintLayout.getChildCount();
    Object localObject1 = new HashSet(Ja.keySet());
    int i1 = 0;
    Object localObject2;
    Object localObject3;
    Object localObject4;
    while (i1 < i2)
    {
      localObject2 = paramConstraintLayout.getChildAt(i1);
      int i3 = ((View)localObject2).getId();
      if (Ja.containsKey(Integer.valueOf(i3)))
      {
        ((HashSet)localObject1).remove(Integer.valueOf(i3));
        localObject3 = (a)Ja.get(Integer.valueOf(i3));
        localObject4 = (ConstraintLayout.LayoutParams)((View)localObject2).getLayoutParams();
        ((a)localObject3).a((ConstraintLayout.LayoutParams)localObject4);
        ((View)localObject2).setLayoutParams((ViewGroup.LayoutParams)localObject4);
        ((View)localObject2).setVisibility(H);
        i3 = Build.VERSION.SDK_INT;
        ((View)localObject2).setAlpha(S);
        ((View)localObject2).setRotationX(V);
        ((View)localObject2).setRotationY(W);
        ((View)localObject2).setScaleX(X);
        ((View)localObject2).setScaleY(Y);
        ((View)localObject2).setPivotX(Z);
        ((View)localObject2).setPivotY(aa);
        ((View)localObject2).setTranslationX(ba);
        ((View)localObject2).setTranslationY(ca);
        if (Build.VERSION.SDK_INT >= 21)
        {
          ((View)localObject2).setTranslationZ(da);
          if (T) {
            ((View)localObject2).setElevation(U);
          }
        }
      }
      i1 += 1;
    }
    localObject1 = ((HashSet)localObject1).iterator();
    while (((Iterator)localObject1).hasNext())
    {
      localObject4 = (Integer)((Iterator)localObject1).next();
      localObject2 = (a)Ja.get(localObject4);
      if (b)
      {
        localObject3 = new Guideline(paramConstraintLayout.getContext());
        ((View)localObject3).setId(((Integer)localObject4).intValue());
        localObject4 = paramConstraintLayout.generateDefaultLayoutParams();
        ((a)localObject2).a((ConstraintLayout.LayoutParams)localObject4);
        paramConstraintLayout.addView((View)localObject3, (ViewGroup.LayoutParams)localObject4);
      }
    }
  }
  
  public boolean b(int paramInt)
  {
    return eT;
  }
  
  public void c(int paramInt)
  {
    if (Ja.containsKey(Integer.valueOf(paramInt)))
    {
      a localA = (a)Ja.get(Integer.valueOf(paramInt));
      int i1 = j;
      int i2 = k;
      int i3;
      if ((i1 == -1) && (i2 == -1))
      {
        i3 = r;
        i2 = t;
        if ((i3 != -1) || (i2 != -1)) {
          if ((i3 != -1) && (i2 != -1))
          {
            a(i3, 7, i2, 6, 0);
            a(i2, 6, i1, 7, 0);
          }
          else if ((i1 != -1) || (i2 != -1))
          {
            i3 = l;
            if (i3 != -1)
            {
              a(i1, 7, i3, 7, 0);
            }
            else
            {
              i1 = i;
              if (i1 != -1) {
                a(i2, 6, i1, 6, 0);
              }
            }
          }
        }
        d(paramInt, 6);
        d(paramInt, 7);
        return;
      }
      if ((i1 != -1) && (i2 != -1))
      {
        a(i1, 2, i2, 1, 0);
        a(i2, 1, i1, 2, 0);
      }
      else if ((i1 != -1) || (i2 != -1))
      {
        i3 = l;
        if (i3 != -1)
        {
          a(i1, 2, i3, 2, 0);
        }
        else
        {
          i1 = i;
          if (i1 != -1) {
            a(i2, 1, i1, 1, 0);
          }
        }
      }
      d(paramInt, 1);
      d(paramInt, 2);
    }
  }
  
  public void c(int paramInt, float paramFloat)
  {
    eh = paramFloat;
    eg = -1;
    ef = -1;
  }
  
  public void c(int paramInt1, int paramInt2)
  {
    if (paramInt2 == 0)
    {
      a(paramInt1, 0, 3, 0, 0, 4, 0, 0.5F);
      return;
    }
    a(paramInt1, paramInt2, 4, 0, paramInt2, 3, 0, 0.5F);
  }
  
  public void c(int paramInt1, int paramInt2, int paramInt3)
  {
    int i1;
    if (paramInt2 == 0) {
      i1 = 3;
    } else {
      i1 = 4;
    }
    a(paramInt1, 3, paramInt2, i1, 0);
    if (paramInt3 == 0) {
      i1 = 4;
    } else {
      i1 = 3;
    }
    a(paramInt1, 4, paramInt3, i1, 0);
    if (paramInt2 != 0) {
      a(paramInt2, 4, paramInt1, 3, 0);
    }
    if (paramInt2 != 0) {
      a(paramInt3, 3, paramInt1, 4, 0);
    }
  }
  
  public void c(int paramInt1, int paramInt2, int paramInt3, int paramInt4, int paramInt5, int paramInt6, int paramInt7, float paramFloat)
  {
    a(paramInt1, 6, paramInt2, paramInt3, paramInt4);
    a(paramInt1, 7, paramInt5, paramInt6, paramInt7);
    Ja.get(Integer.valueOf(paramInt1))).v = paramFloat;
  }
  
  public void c(int paramInt1, int paramInt2, int paramInt3, int paramInt4, int[] paramArrayOfInt, float[] paramArrayOfFloat, int paramInt5)
  {
    if (paramArrayOfInt.length >= 2)
    {
      if ((paramArrayOfFloat != null) && (paramArrayOfFloat.length != paramArrayOfInt.length)) {
        throw new IllegalArgumentException("must have 2 or more widgets in a chain");
      }
      if (paramArrayOfFloat != null) {
        e0O = paramArrayOfFloat[0];
      }
      e0R = paramInt5;
      a(paramArrayOfInt[0], 3, paramInt1, paramInt2, 0);
      paramInt1 = 1;
      while (paramInt1 < paramArrayOfInt.length)
      {
        paramInt2 = paramArrayOfInt[paramInt1];
        paramInt2 = paramArrayOfInt[paramInt1];
        paramInt5 = paramInt1 - 1;
        a(paramInt2, 3, paramArrayOfInt[paramInt5], 4, 0);
        a(paramArrayOfInt[paramInt5], 4, paramArrayOfInt[paramInt1], 3, 0);
        if (paramArrayOfFloat != null) {
          eO = paramArrayOfFloat[paramInt1];
        }
        paramInt1 += 1;
      }
      a(paramArrayOfInt[(paramArrayOfInt.length - 1)], 4, paramInt3, paramInt4, 0);
      return;
    }
    paramArrayOfInt = new IllegalArgumentException("must have 2 or more widgets in a chain");
    for (;;)
    {
      throw paramArrayOfInt;
    }
  }
  
  public void c(ConstraintLayout paramConstraintLayout)
  {
    int i2 = paramConstraintLayout.getChildCount();
    Ja.clear();
    int i1 = 0;
    while (i1 < i2)
    {
      View localView = paramConstraintLayout.getChildAt(i1);
      ConstraintLayout.LayoutParams localLayoutParams = (ConstraintLayout.LayoutParams)localView.getLayoutParams();
      int i3 = localView.getId();
      if (!Ja.containsKey(Integer.valueOf(i3))) {
        Ja.put(Integer.valueOf(i3), new a());
      }
      a localA = (a)Ja.get(Integer.valueOf(i3));
      a.a(localA, i3, localLayoutParams);
      H = localView.getVisibility();
      i3 = Build.VERSION.SDK_INT;
      S = localView.getAlpha();
      V = localView.getRotationX();
      W = localView.getRotationY();
      X = localView.getScaleX();
      Y = localView.getScaleY();
      Z = localView.getPivotX();
      aa = localView.getPivotY();
      ba = localView.getTranslationX();
      ca = localView.getTranslationY();
      if (Build.VERSION.SDK_INT >= 21)
      {
        da = localView.getTranslationZ();
        if (T) {
          U = localView.getElevation();
        }
      }
      i1 += 1;
    }
  }
  
  public void d(int paramInt)
  {
    if (Ja.containsKey(Integer.valueOf(paramInt)))
    {
      a localA = (a)Ja.get(Integer.valueOf(paramInt));
      int i2 = n;
      int i1 = o;
      if ((i2 != -1) || (i1 != -1)) {
        if ((i2 != -1) && (i1 != -1))
        {
          a(i2, 4, i1, 3, 0);
          a(i1, 3, i2, 4, 0);
        }
        else if ((i2 != -1) || (i1 != -1))
        {
          int i3 = p;
          if (i3 != -1)
          {
            a(i2, 4, i3, 4, 0);
          }
          else
          {
            i2 = m;
            if (i2 != -1) {
              a(i1, 3, i2, 3, 0);
            }
          }
        }
      }
    }
    d(paramInt, 3);
    d(paramInt, 4);
  }
  
  public void d(int paramInt, float paramFloat)
  {
    ev = paramFloat;
  }
  
  public void d(int paramInt1, int paramInt2)
  {
    if (Ja.containsKey(Integer.valueOf(paramInt1)))
    {
      a localA = (a)Ja.get(Integer.valueOf(paramInt1));
      switch (paramInt2)
      {
      default: 
        throw new IllegalArgumentException("unknown constraint");
      case 7: 
        t = -1;
        u = -1;
        F = -1;
        M = -1;
        return;
      case 6: 
        r = -1;
        s = -1;
        G = -1;
        N = -1;
        return;
      case 5: 
        q = -1;
        return;
      case 4: 
        o = -1;
        p = -1;
        E = -1;
        L = -1;
        return;
      case 3: 
        n = -1;
        m = -1;
        D = -1;
        J = -1;
        return;
      case 2: 
        l = -1;
        k = -1;
        C = -1;
        K = -1;
        return;
      }
      j = -1;
      i = -1;
      B = -1;
      I = -1;
    }
  }
  
  public void d(int paramInt1, int paramInt2, int paramInt3)
  {
    a localA = e(paramInt1);
    switch (paramInt2)
    {
    default: 
      throw new IllegalArgumentException("unknown constraint");
    case 7: 
      M = paramInt3;
      return;
    case 6: 
      N = paramInt3;
      return;
    case 5: 
      throw new IllegalArgumentException("baseline does not support margins");
    case 4: 
      L = paramInt3;
      return;
    case 3: 
      J = paramInt3;
      return;
    case 2: 
      K = paramInt3;
      return;
    }
    I = paramInt3;
  }
  
  public void d(int paramInt1, int paramInt2, int paramInt3, int paramInt4, int paramInt5, int paramInt6, int paramInt7, float paramFloat)
  {
    a(paramInt1, 3, paramInt2, paramInt3, paramInt4);
    a(paramInt1, 4, paramInt5, paramInt6, paramInt7);
    Ja.get(Integer.valueOf(paramInt1))).w = paramFloat;
  }
  
  public void e(int paramInt, float paramFloat)
  {
    eP = paramFloat;
  }
  
  public void e(int paramInt1, int paramInt2)
  {
    efa = paramInt2;
  }
  
  public void e(int paramInt1, int paramInt2, int paramInt3)
  {
    a localA = e(paramInt1);
    switch (paramInt2)
    {
    default: 
      throw new IllegalArgumentException("unknown constraint");
    case 7: 
      F = paramInt3;
      return;
    case 6: 
      G = paramInt3;
      return;
    case 5: 
      throw new IllegalArgumentException("baseline does not support margins");
    case 4: 
      E = paramInt3;
      return;
    case 3: 
      D = paramInt3;
      return;
    case 2: 
      C = paramInt3;
      return;
    }
    B = paramInt3;
  }
  
  public void f(int paramInt, float paramFloat)
  {
    eV = paramFloat;
  }
  
  public void f(int paramInt1, int paramInt2)
  {
    eea = paramInt2;
  }
  
  public void g(int paramInt, float paramFloat)
  {
    eW = paramFloat;
  }
  
  public void g(int paramInt1, int paramInt2)
  {
    ed = paramInt2;
  }
  
  public void h(int paramInt, float paramFloat)
  {
    eX = paramFloat;
  }
  
  public void h(int paramInt1, int paramInt2)
  {
    eha = paramInt2;
  }
  
  public void i(int paramInt, float paramFloat)
  {
    eY = paramFloat;
  }
  
  public void i(int paramInt1, int paramInt2)
  {
    ega = paramInt2;
  }
  
  public void j(int paramInt, float paramFloat)
  {
    eZ = paramFloat;
  }
  
  public void j(int paramInt1, int paramInt2)
  {
    eja = paramInt2;
  }
  
  public void k(int paramInt, float paramFloat)
  {
    eaa = paramFloat;
  }
  
  public void k(int paramInt1, int paramInt2)
  {
    eia = paramInt2;
  }
  
  public void l(int paramInt, float paramFloat)
  {
    eba = paramFloat;
  }
  
  public void l(int paramInt1, int paramInt2)
  {
    ec = paramInt2;
  }
  
  public void m(int paramInt, float paramFloat)
  {
    eca = paramFloat;
  }
  
  public void m(int paramInt1, int paramInt2)
  {
    a localA = e(paramInt1);
    b = true;
    A = paramInt2;
  }
  
  public void n(int paramInt, float paramFloat)
  {
    eda = paramFloat;
  }
  
  public void n(int paramInt1, int paramInt2)
  {
    ef = paramInt2;
    eg = -1;
    eh = -1.0F;
  }
  
  public void o(int paramInt, float paramFloat)
  {
    ew = paramFloat;
  }
  
  public void o(int paramInt1, int paramInt2)
  {
    eg = paramInt2;
    ef = -1;
    eh = -1.0F;
  }
  
  public void p(int paramInt, float paramFloat)
  {
    eO = paramFloat;
  }
  
  public void p(int paramInt1, int paramInt2)
  {
    eQ = paramInt2;
  }
  
  public void q(int paramInt1, int paramInt2)
  {
    eR = paramInt2;
  }
  
  public void r(int paramInt1, int paramInt2)
  {
    eH = paramInt2;
  }
  
  private static class a
  {
    public static final int a = -1;
    public int A = -1;
    public int B = -1;
    public int C = -1;
    public int D = -1;
    public int E = -1;
    public int F = -1;
    public int G = -1;
    public int H = 0;
    public int I = -1;
    public int J = -1;
    public int K = -1;
    public int L = -1;
    public int M = -1;
    public int N = -1;
    public float O = 0.0F;
    public float P = 0.0F;
    public int Q = 0;
    public int R = 0;
    public float S = 1.0F;
    public boolean T = false;
    public float U = 0.0F;
    public float V = 0.0F;
    public float W = 0.0F;
    public float X = 1.0F;
    public float Y = 1.0F;
    public float Z = 0.0F;
    public float aa = 0.0F;
    public boolean b = false;
    public float ba = 0.0F;
    public int c;
    public float ca = 0.0F;
    public int d;
    public float da = 0.0F;
    public int e;
    public int ea = -1;
    public int f = -1;
    public int fa = -1;
    public int g = -1;
    public int ga = -1;
    public float h = -1.0F;
    public int ha = -1;
    public int i = -1;
    public int ia = -1;
    public int j = -1;
    public int ja = -1;
    public int k = -1;
    public int l = -1;
    public int m = -1;
    public int n = -1;
    public int o = -1;
    public int p = -1;
    public int q = -1;
    public int r = -1;
    public int s = -1;
    public int t = -1;
    public int u = -1;
    public float v = 0.5F;
    public float w = 0.5F;
    public String x = null;
    public int y = -1;
    public int z = -1;
    
    public a() {}
    
    private void a(int paramInt, ConstraintLayout.LayoutParams paramLayoutParams)
    {
      e = paramInt;
      i = u;
      j = v;
      k = w;
      l = x;
      m = y;
      n = z;
      o = A;
      p = B;
      q = C;
      r = D;
      s = E;
      t = F;
      u = G;
      v = N;
      w = O;
      x = P;
      y = ca;
      z = da;
      A = ea;
      h = t;
      f = r;
      g = s;
      c = width;
      d = height;
      B = leftMargin;
      C = rightMargin;
      D = topMargin;
      E = bottomMargin;
      O = T;
      P = S;
      R = V;
      Q = U;
      ea = W;
      fa = X;
      ga = aa;
      ha = ba;
      ia = Y;
      ja = Z;
      paramInt = Build.VERSION.SDK_INT;
      F = paramLayoutParams.getMarginEnd();
      G = paramLayoutParams.getMarginStart();
    }
    
    public void a(ConstraintLayout.LayoutParams paramLayoutParams)
    {
      u = i;
      v = j;
      w = k;
      x = l;
      y = m;
      z = n;
      A = o;
      B = p;
      C = q;
      D = r;
      E = s;
      F = t;
      G = u;
      leftMargin = B;
      rightMargin = C;
      topMargin = D;
      bottomMargin = E;
      L = N;
      M = M;
      N = v;
      O = w;
      P = x;
      ca = y;
      da = z;
      T = O;
      S = P;
      V = R;
      U = Q;
      W = ea;
      X = fa;
      aa = ga;
      ba = ha;
      Y = ia;
      Z = ja;
      ea = A;
      t = h;
      r = f;
      s = g;
      width = c;
      height = d;
      int i1 = Build.VERSION.SDK_INT;
      paramLayoutParams.setMarginStart(G);
      paramLayoutParams.setMarginEnd(F);
      paramLayoutParams.a();
    }
    
    public a clone()
    {
      a localA = new a();
      b = b;
      c = c;
      d = d;
      f = f;
      g = g;
      h = h;
      i = i;
      j = j;
      k = k;
      l = l;
      m = m;
      n = n;
      o = o;
      p = p;
      q = q;
      r = r;
      s = s;
      t = t;
      u = u;
      v = v;
      w = w;
      x = x;
      y = y;
      z = z;
      v = v;
      v = v;
      v = v;
      v = v;
      v = v;
      A = A;
      B = B;
      C = C;
      D = D;
      E = E;
      F = F;
      G = G;
      H = H;
      I = I;
      J = J;
      K = K;
      L = L;
      M = M;
      N = N;
      O = O;
      P = P;
      Q = Q;
      R = R;
      S = S;
      T = T;
      U = U;
      V = V;
      W = W;
      X = X;
      Y = Y;
      Z = Z;
      aa = aa;
      ba = ba;
      ca = ca;
      da = da;
      ea = ea;
      fa = fa;
      ga = ga;
      ha = ha;
      ia = ia;
      ja = ja;
      return localA;
    }
  }
}
