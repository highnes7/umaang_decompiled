package b.b.x.o;

import android.annotation.SuppressLint;
import android.content.ClipData;
import android.content.res.ColorStateList;
import android.graphics.Matrix;
import android.graphics.Paint;
import android.graphics.PorterDuff.Mode;
import android.graphics.Rect;
import android.graphics.drawable.Drawable;
import android.os.Build.VERSION;
import android.os.Bundle;
import android.util.SparseArray;
import android.view.Display;
import android.view.KeyEvent;
import android.view.PointerIcon;
import android.view.View;
import android.view.View.DragShadowBuilder;
import android.view.View.OnUnhandledKeyEventListener;
import android.view.ViewGroup;
import android.view.ViewParent;
import android.view.WindowInsets;
import android.view.accessibility.AccessibilityEvent;
import b.b.a.F;
import b.b.a.I;
import b.b.a.K;
import b.b.a.N;
import b.b.a.V;
import b.b.a.q;
import b.b.a.v;
import b.b.c.a.e;
import b.b.x.o.a.c;
import b.b.x.o.a.d;
import java.lang.annotation.Annotation;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.ref.WeakReference;
import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.Map;
import java.util.WeakHashMap;
import java.util.concurrent.atomic.AtomicInteger;

public class H
{
  public static final int A = 1;
  public static final int B = 1;
  public static final int C = 2;
  public static final int D = 4;
  public static final int E = 8;
  public static final int F = 16;
  public static final int G = 32;
  public static final AtomicInteger H = new AtomicInteger(1);
  public static Field I;
  public static boolean J = false;
  public static Field K;
  public static boolean L = false;
  public static Method M;
  public static Method N;
  public static boolean O = false;
  public static WeakHashMap<View, String> P;
  public static WeakHashMap<View, T> Q = null;
  public static Method R;
  public static Field S;
  public static boolean T = false;
  public static ThreadLocal<Rect> U;
  public static final String a = "ViewCompat";
  @Deprecated
  public static final int b = 0;
  @Deprecated
  public static final int c = 1;
  @Deprecated
  public static final int d = 2;
  public static final int e = 0;
  public static final int f = 1;
  public static final int g = 2;
  public static final int h = 4;
  public static final int i = 0;
  public static final int j = 1;
  public static final int k = 2;
  @Deprecated
  public static final int l = 0;
  @Deprecated
  public static final int m = 1;
  @Deprecated
  public static final int n = 2;
  public static final int o = 0;
  public static final int p = 1;
  public static final int q = 2;
  public static final int r = 3;
  @Deprecated
  public static final int s = 16777215;
  @Deprecated
  public static final int t = -16777216;
  @Deprecated
  public static final int u = 16;
  @Deprecated
  public static final int v = 16777216;
  public static final int w = 0;
  public static final int x = 1;
  public static final int y = 2;
  public static final int z = 0;
  
  public H() {}
  
  @I
  public static int A(@F View paramView)
  {
    int i1 = Build.VERSION.SDK_INT;
    return paramView.getPaddingEnd();
  }
  
  @I
  public static int B(@F View paramView)
  {
    int i1 = Build.VERSION.SDK_INT;
    return paramView.getPaddingStart();
  }
  
  public static ViewParent C(@F View paramView)
  {
    int i1 = Build.VERSION.SDK_INT;
    return paramView.getParentForAccessibility();
  }
  
  @Deprecated
  public static float D(View paramView)
  {
    return paramView.getPivotX();
  }
  
  @Deprecated
  public static float E(View paramView)
  {
    return paramView.getPivotY();
  }
  
  @Deprecated
  public static float F(View paramView)
  {
    return paramView.getRotation();
  }
  
  @Deprecated
  public static float G(View paramView)
  {
    return paramView.getRotationX();
  }
  
  @Deprecated
  public static float H(View paramView)
  {
    return paramView.getRotationY();
  }
  
  @Deprecated
  public static float I(View paramView)
  {
    return paramView.getScaleX();
  }
  
  @Deprecated
  public static float J(View paramView)
  {
    return paramView.getScaleY();
  }
  
  public static int K(@F View paramView)
  {
    if (Build.VERSION.SDK_INT >= 23) {
      return paramView.getScrollIndicators();
    }
    return 0;
  }
  
  @b.b.a.G
  public static String L(@F View paramView)
  {
    if (Build.VERSION.SDK_INT >= 21) {
      return paramView.getTransitionName();
    }
    WeakHashMap localWeakHashMap = P;
    if (localWeakHashMap == null) {
      return null;
    }
    return (String)localWeakHashMap.get(paramView);
  }
  
  @Deprecated
  public static float M(View paramView)
  {
    return paramView.getTranslationX();
  }
  
  @Deprecated
  public static float N(View paramView)
  {
    return paramView.getTranslationY();
  }
  
  public static float O(@F View paramView)
  {
    if (Build.VERSION.SDK_INT >= 21) {
      return paramView.getTranslationZ();
    }
    return 0.0F;
  }
  
  public static int P(@F View paramView)
  {
    int i1 = Build.VERSION.SDK_INT;
    return paramView.getWindowSystemUiVisibility();
  }
  
  @Deprecated
  public static float Q(View paramView)
  {
    return paramView.getX();
  }
  
  @Deprecated
  public static float R(View paramView)
  {
    return paramView.getY();
  }
  
  public static float S(@F View paramView)
  {
    if (Build.VERSION.SDK_INT >= 21) {
      return paramView.getZ();
    }
    return 0.0F;
  }
  
  public static boolean T(@F View paramView)
  {
    boolean bool2 = T;
    boolean bool1 = false;
    if (bool2) {
      return false;
    }
    if (S == null) {}
    try
    {
      S = View.class.getDeclaredField("mAccessibilityDelegate");
      S.setAccessible(true);
    }
    catch (Throwable paramView)
    {
      for (;;) {}
    }
    T = true;
    return false;
    try
    {
      paramView = S.get(paramView);
      if (paramView != null) {
        bool1 = true;
      }
      return bool1;
    }
    catch (Throwable paramView)
    {
      for (;;) {}
    }
    T = true;
    return false;
  }
  
  public static boolean U(@F View paramView)
  {
    if (Build.VERSION.SDK_INT >= 26) {
      return paramView.hasExplicitFocusable();
    }
    return paramView.hasFocusable();
  }
  
  public static boolean V(@F View paramView)
  {
    if (Build.VERSION.SDK_INT >= 21) {
      return paramView.hasNestedScrollingParent();
    }
    if ((paramView instanceof s)) {
      return ((s)paramView).hasNestedScrollingParent();
    }
    return false;
  }
  
  public static boolean W(@F View paramView)
  {
    int i1 = Build.VERSION.SDK_INT;
    return paramView.hasOnClickListeners();
  }
  
  public static boolean X(@F View paramView)
  {
    int i1 = Build.VERSION.SDK_INT;
    return paramView.hasOverlappingRendering();
  }
  
  public static boolean Y(@F View paramView)
  {
    int i1 = Build.VERSION.SDK_INT;
    return paramView.hasTransientState();
  }
  
  public static boolean Z(@F View paramView)
  {
    int i1 = Build.VERSION.SDK_INT;
    return paramView.isAttachedToWindow();
  }
  
  @Deprecated
  public static int a(int paramInt1, int paramInt2)
  {
    return View.combineMeasuredStates(paramInt1, paramInt2);
  }
  
  @Deprecated
  public static int a(int paramInt1, int paramInt2, int paramInt3)
  {
    return View.resolveSizeAndState(paramInt1, paramInt2, paramInt3);
  }
  
  public static View a(@F View paramView1, View paramView2, int paramInt)
  {
    if (Build.VERSION.SDK_INT >= 26) {
      return paramView1.keyboardNavigationClusterSearch(paramView2, paramInt);
    }
    return null;
  }
  
  @F
  public static T a(@F View paramView)
  {
    if (Q == null) {
      Q = new WeakHashMap();
    }
    T localT2 = (T)Q.get(paramView);
    T localT1 = localT2;
    if (localT2 == null)
    {
      localT1 = new T(paramView);
      Q.put(paramView, localT1);
    }
    return localT1;
  }
  
  public static Y a(@F View paramView, Y paramY)
  {
    if (Build.VERSION.SDK_INT >= 21)
    {
      paramY = (WindowInsets)Y.a(paramY);
      WindowInsets localWindowInsets = paramView.dispatchApplyWindowInsets(paramY);
      paramView = paramY;
      if (localWindowInsets != paramY) {
        paramView = new WindowInsets(localWindowInsets);
      }
      return Y.a(paramView);
    }
    return paramY;
  }
  
  public static void a()
  {
    try
    {
      M = View.class.getDeclaredMethod("dispatchStartTemporaryDetach", new Class[0]);
      N = View.class.getDeclaredMethod("dispatchFinishTemporaryDetach", new Class[0]);
    }
    catch (NoSuchMethodException localNoSuchMethodException)
    {
      for (;;) {}
    }
    O = true;
  }
  
  @Deprecated
  public static void a(View paramView, @q(from=0.0D, to=1.0D) float paramFloat)
  {
    paramView.setAlpha(paramFloat);
  }
  
  public static void a(@F View paramView, int paramInt1, int paramInt2)
  {
    if (Build.VERSION.SDK_INT >= 23) {
      paramView.setScrollIndicators(paramInt1, paramInt2);
    }
  }
  
  public static void a(@F View paramView, int paramInt1, int paramInt2, int paramInt3, int paramInt4)
  {
    int i1 = Build.VERSION.SDK_INT;
    paramView.postInvalidateOnAnimation(paramInt1, paramInt2, paramInt3, paramInt4);
  }
  
  @Deprecated
  public static void a(View paramView, int paramInt, Paint paramPaint)
  {
    paramView.setLayerType(paramInt, paramPaint);
  }
  
  public static void a(@F View paramView, ColorStateList paramColorStateList)
  {
    if (Build.VERSION.SDK_INT >= 21)
    {
      paramView.setBackgroundTintList(paramColorStateList);
      if (Build.VERSION.SDK_INT == 21)
      {
        paramColorStateList = paramView.getBackground();
        int i1;
        if ((paramView.getBackgroundTintList() == null) && (paramView.getBackgroundTintMode() == null)) {
          i1 = 0;
        } else {
          i1 = 1;
        }
        if ((paramColorStateList != null) && (i1 != 0))
        {
          if (paramColorStateList.isStateful()) {
            paramColorStateList.setState(paramView.getDrawableState());
          }
          paramView.setBackground(paramColorStateList);
        }
      }
    }
    else if ((paramView instanceof E))
    {
      ((E)paramView).setSupportBackgroundTintList(paramColorStateList);
    }
  }
  
  public static void a(@F View paramView, Paint paramPaint)
  {
    int i1 = Build.VERSION.SDK_INT;
    paramView.setLayerPaint(paramPaint);
  }
  
  public static void a(@F View paramView, PorterDuff.Mode paramMode)
  {
    if (Build.VERSION.SDK_INT >= 21)
    {
      paramView.setBackgroundTintMode(paramMode);
      if (Build.VERSION.SDK_INT == 21)
      {
        paramMode = paramView.getBackground();
        int i1;
        if ((paramView.getBackgroundTintList() == null) && (paramView.getBackgroundTintMode() == null)) {
          i1 = 0;
        } else {
          i1 = 1;
        }
        if ((paramMode != null) && (i1 != 0))
        {
          if (paramMode.isStateful()) {
            paramMode.setState(paramView.getDrawableState());
          }
          paramView.setBackground(paramMode);
        }
      }
    }
    else if ((paramView instanceof E))
    {
      ((E)paramView).setSupportBackgroundTintMode(paramMode);
    }
  }
  
  public static void a(@F View paramView, Rect paramRect)
  {
    int i1 = Build.VERSION.SDK_INT;
    paramView.setClipBounds(paramRect);
  }
  
  public static void a(@F View paramView, @b.b.a.G Drawable paramDrawable)
  {
    int i1 = Build.VERSION.SDK_INT;
    paramView.setBackground(paramDrawable);
  }
  
  public static void a(@F View paramView, View.DragShadowBuilder paramDragShadowBuilder)
  {
    if (Build.VERSION.SDK_INT >= 24) {
      paramView.updateDragShadow(paramDragShadowBuilder);
    }
  }
  
  @Deprecated
  public static void a(View paramView, AccessibilityEvent paramAccessibilityEvent)
  {
    paramView.onInitializeAccessibilityEvent(paramAccessibilityEvent);
  }
  
  public static void a(@F View paramView, B paramB)
  {
    if (Build.VERSION.SDK_INT >= 24)
    {
      if (paramB != null) {
        paramB = paramB.a();
      } else {
        paramB = null;
      }
      paramView.setPointerIcon((PointerIcon)paramB);
    }
  }
  
  public static void a(@F View paramView, @F e paramE)
  {
    if (Build.VERSION.SDK_INT >= 28)
    {
      localObject2 = (Map)paramView.getTag(a.e.tag_unhandled_key_listeners);
      localObject1 = localObject2;
      if (localObject2 == null)
      {
        localObject1 = new b.b.x.n.b();
        paramView.setTag(a.e.tag_unhandled_key_listeners, localObject1);
      }
      localObject2 = new f(paramE);
      ((Map)localObject1).put(paramE, localObject2);
      paramView.addOnUnhandledKeyEventListener((View.OnUnhandledKeyEventListener)localObject2);
      return;
    }
    Object localObject2 = (ArrayList)paramView.getTag(a.e.tag_unhandled_key_listeners);
    Object localObject1 = localObject2;
    if (localObject2 == null)
    {
      localObject1 = new ArrayList();
      paramView.setTag(a.e.tag_unhandled_key_listeners, localObject1);
    }
    ((ArrayList)localObject1).add(paramE);
    if (((ArrayList)localObject1).size() == 1) {
      i.b(paramView);
    }
  }
  
  public static void a(@F View paramView, c paramC)
  {
    paramView.onInitializeAccessibilityNodeInfo(paramC.fa());
  }
  
  public static void a(@F View paramView, b paramB)
  {
    if (paramB == null) {
      paramB = null;
    } else {
      paramB = paramB.getBridge();
    }
    paramView.setAccessibilityDelegate(paramB);
  }
  
  public static void a(@F View paramView, x paramX)
  {
    if (Build.VERSION.SDK_INT >= 21)
    {
      if (paramX == null)
      {
        paramView.setOnApplyWindowInsetsListener(null);
        return;
      }
      paramView.setOnApplyWindowInsetsListener(new G(paramX));
    }
  }
  
  public static void a(@F View paramView, @b.b.a.G CharSequence paramCharSequence)
  {
    if (Build.VERSION.SDK_INT >= 26) {
      paramView.setTooltipText(paramCharSequence);
    }
  }
  
  public static void a(@F View paramView, Runnable paramRunnable)
  {
    int i1 = Build.VERSION.SDK_INT;
    paramView.postOnAnimation(paramRunnable);
  }
  
  public static void a(@F View paramView, Runnable paramRunnable, long paramLong)
  {
    int i1 = Build.VERSION.SDK_INT;
    paramView.postOnAnimationDelayed(paramRunnable, paramLong);
  }
  
  public static void a(@F View paramView, String paramString)
  {
    if (Build.VERSION.SDK_INT >= 21)
    {
      paramView.setTransitionName(paramString);
      return;
    }
    if (P == null) {
      P = new WeakHashMap();
    }
    P.put(paramView, paramString);
  }
  
  public static void a(@F View paramView, @F Collection<View> paramCollection, int paramInt)
  {
    if (Build.VERSION.SDK_INT >= 26) {
      paramView.addKeyboardNavigationClusters(paramCollection, paramInt);
    }
  }
  
  @Deprecated
  public static void a(View paramView, boolean paramBoolean)
  {
    paramView.setActivated(paramBoolean);
  }
  
  public static void a(@F View paramView, @b.b.a.G String... paramVarArgs)
  {
    if (Build.VERSION.SDK_INT >= 26) {
      paramView.setAutofillHints(paramVarArgs);
    }
  }
  
  @Deprecated
  public static void a(ViewGroup paramViewGroup, boolean paramBoolean)
  {
    if (R == null) {}
    try
    {
      Class localClass = Boolean.TYPE;
      R = ViewGroup.class.getDeclaredMethod("setChildrenDrawingOrderEnabled", new Class[] { localClass });
    }
    catch (NoSuchMethodException localNoSuchMethodException)
    {
      for (;;)
      {
        try
        {
          R.invoke(paramViewGroup, new Object[] { Boolean.valueOf(paramBoolean) });
          return;
        }
        catch (IllegalAccessException|IllegalArgumentException|InvocationTargetException paramViewGroup) {}
        localNoSuchMethodException = localNoSuchMethodException;
      }
    }
    R.setAccessible(true);
  }
  
  public static boolean a(@F View paramView, float paramFloat1, float paramFloat2)
  {
    if (Build.VERSION.SDK_INT >= 21) {
      return paramView.dispatchNestedPreFling(paramFloat1, paramFloat2);
    }
    if ((paramView instanceof s)) {
      return ((s)paramView).dispatchNestedPreFling(paramFloat1, paramFloat2);
    }
    return false;
  }
  
  public static boolean a(@F View paramView, float paramFloat1, float paramFloat2, boolean paramBoolean)
  {
    if (Build.VERSION.SDK_INT >= 21) {
      return paramView.dispatchNestedFling(paramFloat1, paramFloat2, paramBoolean);
    }
    if ((paramView instanceof s)) {
      return ((s)paramView).dispatchNestedFling(paramFloat1, paramFloat2, paramBoolean);
    }
    return false;
  }
  
  @Deprecated
  public static boolean a(View paramView, int paramInt)
  {
    return paramView.canScrollHorizontally(paramInt);
  }
  
  public static boolean a(@F View paramView, int paramInt1, int paramInt2, int paramInt3, int paramInt4, @b.b.a.G int[] paramArrayOfInt)
  {
    if (Build.VERSION.SDK_INT >= 21) {
      return paramView.dispatchNestedScroll(paramInt1, paramInt2, paramInt3, paramInt4, paramArrayOfInt);
    }
    if ((paramView instanceof s)) {
      return ((s)paramView).dispatchNestedScroll(paramInt1, paramInt2, paramInt3, paramInt4, paramArrayOfInt);
    }
    return false;
  }
  
  public static boolean a(@F View paramView, int paramInt1, int paramInt2, int paramInt3, int paramInt4, @b.b.a.G int[] paramArrayOfInt, int paramInt5)
  {
    if ((paramView instanceof r)) {
      return ((r)paramView).dispatchNestedScroll(paramInt1, paramInt2, paramInt3, paramInt4, paramArrayOfInt, paramInt5);
    }
    if (paramInt5 == 0) {
      return a(paramView, paramInt1, paramInt2, paramInt3, paramInt4, paramArrayOfInt);
    }
    return false;
  }
  
  public static boolean a(@F View paramView, int paramInt1, int paramInt2, @b.b.a.G int[] paramArrayOfInt1, @b.b.a.G int[] paramArrayOfInt2)
  {
    if (Build.VERSION.SDK_INT >= 21) {
      return paramView.dispatchNestedPreScroll(paramInt1, paramInt2, paramArrayOfInt1, paramArrayOfInt2);
    }
    if ((paramView instanceof s)) {
      return ((s)paramView).dispatchNestedPreScroll(paramInt1, paramInt2, paramArrayOfInt1, paramArrayOfInt2);
    }
    return false;
  }
  
  public static boolean a(@F View paramView, int paramInt1, int paramInt2, @b.b.a.G int[] paramArrayOfInt1, @b.b.a.G int[] paramArrayOfInt2, int paramInt3)
  {
    if ((paramView instanceof r)) {
      return ((r)paramView).dispatchNestedPreScroll(paramInt1, paramInt2, paramArrayOfInt1, paramArrayOfInt2, paramInt3);
    }
    if (paramInt3 == 0) {
      return a(paramView, paramInt1, paramInt2, paramArrayOfInt1, paramArrayOfInt2);
    }
    return false;
  }
  
  public static boolean a(@F View paramView, int paramInt, Bundle paramBundle)
  {
    int i1 = Build.VERSION.SDK_INT;
    return paramView.performAccessibilityAction(paramInt, paramBundle);
  }
  
  public static boolean a(@F View paramView, ClipData paramClipData, View.DragShadowBuilder paramDragShadowBuilder, Object paramObject, int paramInt)
  {
    if (Build.VERSION.SDK_INT >= 24) {
      return paramView.startDragAndDrop(paramClipData, paramDragShadowBuilder, paramObject, paramInt);
    }
    return paramView.startDrag(paramClipData, paramDragShadowBuilder, paramObject, paramInt);
  }
  
  @V
  public static boolean a(View paramView, KeyEvent paramKeyEvent)
  {
    if (Build.VERSION.SDK_INT >= 28) {
      return false;
    }
    return i.a(paramView).a(paramView, paramKeyEvent);
  }
  
  public static boolean aa(@F View paramView)
  {
    if (Build.VERSION.SDK_INT >= 26) {
      return paramView.isFocusedByDefault();
    }
    return false;
  }
  
  public static int b()
  {
    int i1 = Build.VERSION.SDK_INT;
    return View.generateViewId();
  }
  
  public static Y b(@F View paramView, Y paramY)
  {
    if (Build.VERSION.SDK_INT >= 21)
    {
      paramY = (WindowInsets)Y.a(paramY);
      WindowInsets localWindowInsets = paramView.onApplyWindowInsets(paramY);
      paramView = paramY;
      if (localWindowInsets != paramY) {
        paramView = new WindowInsets(localWindowInsets);
      }
      return Y.a(paramView);
    }
    return paramY;
  }
  
  public static void b(@F View paramView)
  {
    if (Build.VERSION.SDK_INT >= 24) {
      paramView.cancelDragAndDrop();
    }
  }
  
  public static void b(@F View paramView, float paramFloat)
  {
    if (Build.VERSION.SDK_INT >= 21) {
      paramView.setElevation(paramFloat);
    }
  }
  
  public static void b(@F View paramView, @I int paramInt1, @I int paramInt2, @I int paramInt3, @I int paramInt4)
  {
    int i1 = Build.VERSION.SDK_INT;
    paramView.setPaddingRelative(paramInt1, paramInt2, paramInt3, paramInt4);
  }
  
  @Deprecated
  public static void b(View paramView, AccessibilityEvent paramAccessibilityEvent)
  {
    paramView.onPopulateAccessibilityEvent(paramAccessibilityEvent);
  }
  
  public static void b(@F View paramView, @F e paramE)
  {
    if (Build.VERSION.SDK_INT >= 28)
    {
      localObject = (Map)paramView.getTag(a.e.tag_unhandled_key_listeners);
      if (localObject == null) {
        return;
      }
      paramE = (View.OnUnhandledKeyEventListener)((Map)localObject).get(paramE);
      if (paramE != null) {
        paramView.removeOnUnhandledKeyEventListener(paramE);
      }
      return;
    }
    Object localObject = (ArrayList)paramView.getTag(a.e.tag_unhandled_key_listeners);
    if (localObject != null)
    {
      ((ArrayList)localObject).remove(paramE);
      if (((ArrayList)localObject).size() == 0) {
        i.c(paramView);
      }
    }
  }
  
  @Deprecated
  public static void b(View paramView, boolean paramBoolean)
  {
    paramView.setFitsSystemWindows(paramBoolean);
  }
  
  @Deprecated
  public static boolean b(View paramView, int paramInt)
  {
    return paramView.canScrollVertically(paramInt);
  }
  
  public static boolean b(@F View paramView, int paramInt1, int paramInt2)
  {
    if ((paramView instanceof r)) {
      return ((r)paramView).startNestedScroll(paramInt1, paramInt2);
    }
    if (paramInt2 == 0) {
      return q(paramView, paramInt1);
    }
    return false;
  }
  
  @V
  public static boolean b(View paramView, KeyEvent paramKeyEvent)
  {
    if (Build.VERSION.SDK_INT >= 28) {
      return false;
    }
    return i.a(paramView).a(paramKeyEvent);
  }
  
  public static boolean ba(@F View paramView)
  {
    if (Build.VERSION.SDK_INT >= 21) {
      return paramView.isImportantForAccessibility();
    }
    return true;
  }
  
  public static Rect c()
  {
    if (U == null) {
      U = new ThreadLocal();
    }
    Rect localRect2 = (Rect)U.get();
    Rect localRect1 = localRect2;
    if (localRect2 == null)
    {
      localRect1 = new Rect();
      U.set(localRect1);
    }
    localRect1.setEmpty();
    return localRect1;
  }
  
  public static void c(@F View paramView)
  {
    if (Build.VERSION.SDK_INT >= 24)
    {
      paramView.dispatchFinishTemporaryDetach();
      return;
    }
    if (!O) {
      a();
    }
    Method localMethod = N;
    if (localMethod != null) {}
    try
    {
      localMethod.invoke(paramView, new Object[0]);
      return;
    }
    catch (Exception paramView) {}
    paramView.onFinishTemporaryDetach();
    return;
  }
  
  @Deprecated
  public static void c(View paramView, float paramFloat)
  {
    paramView.setPivotX(paramFloat);
  }
  
  public static void c(View paramView, int paramInt)
  {
    paramView.offsetLeftAndRight(paramInt);
    if (paramView.getVisibility() == 0)
    {
      float f1 = paramView.getTranslationY();
      paramView.setTranslationY(1.0F + f1);
      paramView.setTranslationY(f1);
      paramView = paramView.getParent();
      if ((paramView instanceof View)) {
        pa((View)paramView);
      }
    }
  }
  
  public static void c(@F View paramView, boolean paramBoolean)
  {
    if (Build.VERSION.SDK_INT >= 26) {
      paramView.setFocusedByDefault(paramBoolean);
    }
  }
  
  public static boolean ca(@F View paramView)
  {
    if (Build.VERSION.SDK_INT >= 26) {
      return paramView.isImportantForAutofill();
    }
    return true;
  }
  
  public static void d(@F View paramView)
  {
    if (Build.VERSION.SDK_INT >= 24)
    {
      paramView.dispatchStartTemporaryDetach();
      return;
    }
    if (!O) {
      a();
    }
    Method localMethod = M;
    if (localMethod != null) {}
    try
    {
      localMethod.invoke(paramView, new Object[0]);
      return;
    }
    catch (Exception paramView) {}
    paramView.onStartTemporaryDetach();
    return;
  }
  
  @Deprecated
  public static void d(View paramView, float paramFloat)
  {
    paramView.setPivotY(paramFloat);
  }
  
  public static void d(View paramView, int paramInt)
  {
    paramView.offsetTopAndBottom(paramInt);
    if (paramView.getVisibility() == 0)
    {
      float f1 = paramView.getTranslationY();
      paramView.setTranslationY(1.0F + f1);
      paramView.setTranslationY(f1);
      paramView = paramView.getParent();
      if ((paramView instanceof View)) {
        pa((View)paramView);
      }
    }
  }
  
  public static void d(@F View paramView, boolean paramBoolean)
  {
    int i1 = Build.VERSION.SDK_INT;
    paramView.setHasTransientState(paramBoolean);
  }
  
  public static boolean da(@F View paramView)
  {
    int i1 = Build.VERSION.SDK_INT;
    return paramView.isInLayout();
  }
  
  public static int e(@F View paramView)
  {
    int i1 = Build.VERSION.SDK_INT;
    return paramView.getAccessibilityLiveRegion();
  }
  
  @Deprecated
  public static void e(View paramView, float paramFloat)
  {
    paramView.setRotation(paramFloat);
  }
  
  public static void e(@F View paramView, boolean paramBoolean)
  {
    if (Build.VERSION.SDK_INT >= 26) {
      paramView.setKeyboardNavigationCluster(paramBoolean);
    }
  }
  
  public static boolean e(@F View paramView, int paramInt)
  {
    if ((paramView instanceof r)) {
      ((r)paramView).hasNestedScrollingParent(paramInt);
    } else if (paramInt == 0) {
      return V(paramView);
    }
    return false;
  }
  
  public static boolean ea(@F View paramView)
  {
    if (Build.VERSION.SDK_INT >= 26) {
      return paramView.isKeyboardNavigationCluster();
    }
    return false;
  }
  
  public static d f(@F View paramView)
  {
    int i1 = Build.VERSION.SDK_INT;
    paramView = paramView.getAccessibilityNodeProvider();
    if (paramView != null) {
      return new d(paramView);
    }
    return null;
  }
  
  @Deprecated
  public static void f(View paramView, float paramFloat)
  {
    paramView.setRotationX(paramFloat);
  }
  
  public static void f(@F View paramView, int paramInt)
  {
    int i1 = Build.VERSION.SDK_INT;
    if (i1 >= 23)
    {
      paramView.offsetLeftAndRight(paramInt);
      return;
    }
    if (i1 >= 21)
    {
      Rect localRect = c();
      i1 = 0;
      ViewParent localViewParent = paramView.getParent();
      boolean bool;
      if ((localViewParent instanceof View))
      {
        View localView = (View)localViewParent;
        localRect.set(localView.getLeft(), localView.getTop(), localView.getRight(), localView.getBottom());
        bool = localRect.intersects(paramView.getLeft(), paramView.getTop(), paramView.getRight(), paramView.getBottom()) ^ true;
      }
      c(paramView, paramInt);
      if ((bool) && (localRect.intersect(paramView.getLeft(), paramView.getTop(), paramView.getRight(), paramView.getBottom()))) {
        ((View)localViewParent).invalidate(localRect);
      }
    }
    else
    {
      c(paramView, paramInt);
    }
  }
  
  public static void f(@F View paramView, boolean paramBoolean)
  {
    if (Build.VERSION.SDK_INT >= 21)
    {
      paramView.setNestedScrollingEnabled(paramBoolean);
      return;
    }
    if ((paramView instanceof s)) {
      ((s)paramView).setNestedScrollingEnabled(paramBoolean);
    }
  }
  
  public static boolean fa(@F View paramView)
  {
    int i1 = Build.VERSION.SDK_INT;
    return paramView.isLaidOut();
  }
  
  @Deprecated
  public static float g(View paramView)
  {
    return paramView.getAlpha();
  }
  
  @Deprecated
  public static void g(View paramView, float paramFloat)
  {
    paramView.setRotationY(paramFloat);
  }
  
  public static void g(@F View paramView, int paramInt)
  {
    int i1 = Build.VERSION.SDK_INT;
    if (i1 >= 23)
    {
      paramView.offsetTopAndBottom(paramInt);
      return;
    }
    if (i1 >= 21)
    {
      Rect localRect = c();
      i1 = 0;
      ViewParent localViewParent = paramView.getParent();
      boolean bool;
      if ((localViewParent instanceof View))
      {
        View localView = (View)localViewParent;
        localRect.set(localView.getLeft(), localView.getTop(), localView.getRight(), localView.getBottom());
        bool = localRect.intersects(paramView.getLeft(), paramView.getTop(), paramView.getRight(), paramView.getBottom()) ^ true;
      }
      d(paramView, paramInt);
      if ((bool) && (localRect.intersect(paramView.getLeft(), paramView.getTop(), paramView.getRight(), paramView.getBottom()))) {
        ((View)localViewParent).invalidate(localRect);
      }
    }
    else
    {
      d(paramView, paramInt);
    }
  }
  
  @Deprecated
  public static void g(View paramView, boolean paramBoolean)
  {
    paramView.setSaveFromParentEnabled(paramBoolean);
  }
  
  public static boolean ga(@F View paramView)
  {
    int i1 = Build.VERSION.SDK_INT;
    return paramView.isLayoutDirectionResolved();
  }
  
  public static ColorStateList h(@F View paramView)
  {
    if (Build.VERSION.SDK_INT >= 21) {
      return paramView.getBackgroundTintList();
    }
    if ((paramView instanceof E)) {
      return ((E)paramView).getSupportBackgroundTintList();
    }
    return null;
  }
  
  @F
  public static <T extends View> T h(@F View paramView, @v int paramInt)
  {
    if (Build.VERSION.SDK_INT >= 28) {
      return paramView.requireViewById(paramInt);
    }
    paramView = paramView.findViewById(paramInt);
    if (paramView != null) {
      return paramView;
    }
    throw new IllegalArgumentException("ID does not reference a View inside this View");
  }
  
  @Deprecated
  public static void h(View paramView, float paramFloat)
  {
    paramView.setScaleX(paramFloat);
  }
  
  public static boolean ha(@F View paramView)
  {
    if (Build.VERSION.SDK_INT >= 21) {
      return paramView.isNestedScrollingEnabled();
    }
    if ((paramView instanceof s)) {
      return ((s)paramView).isNestedScrollingEnabled();
    }
    return false;
  }
  
  public static PorterDuff.Mode i(@F View paramView)
  {
    if (Build.VERSION.SDK_INT >= 21) {
      return paramView.getBackgroundTintMode();
    }
    if ((paramView instanceof E)) {
      return ((E)paramView).getSupportBackgroundTintMode();
    }
    return null;
  }
  
  @Deprecated
  public static void i(View paramView, float paramFloat)
  {
    paramView.setScaleY(paramFloat);
  }
  
  public static void i(@F View paramView, int paramInt)
  {
    int i1 = Build.VERSION.SDK_INT;
    paramView.setAccessibilityLiveRegion(paramInt);
  }
  
  @Deprecated
  public static boolean ia(View paramView)
  {
    return paramView.isOpaque();
  }
  
  @b.b.a.G
  public static Rect j(@F View paramView)
  {
    int i1 = Build.VERSION.SDK_INT;
    return paramView.getClipBounds();
  }
  
  @Deprecated
  public static void j(View paramView, float paramFloat)
  {
    paramView.setTranslationX(paramFloat);
  }
  
  public static void j(@F View paramView, int paramInt)
  {
    int i1 = Build.VERSION.SDK_INT;
    paramView.setImportantForAccessibility(paramInt);
  }
  
  public static boolean ja(@F View paramView)
  {
    int i1 = Build.VERSION.SDK_INT;
    return paramView.isPaddingRelative();
  }
  
  @b.b.a.G
  public static Display k(@F View paramView)
  {
    int i1 = Build.VERSION.SDK_INT;
    return paramView.getDisplay();
  }
  
  @Deprecated
  public static void k(View paramView, float paramFloat)
  {
    paramView.setTranslationY(paramFloat);
  }
  
  public static void k(@F View paramView, int paramInt)
  {
    if (Build.VERSION.SDK_INT >= 26) {
      paramView.setImportantForAutofill(paramInt);
    }
  }
  
  @Deprecated
  public static void ka(View paramView)
  {
    paramView.jumpDrawablesToCurrentState();
  }
  
  public static float l(@F View paramView)
  {
    if (Build.VERSION.SDK_INT >= 21) {
      return paramView.getElevation();
    }
    return 0.0F;
  }
  
  public static void l(@F View paramView, float paramFloat)
  {
    if (Build.VERSION.SDK_INT >= 21) {
      paramView.setTranslationZ(paramFloat);
    }
  }
  
  public static void l(@F View paramView, @v int paramInt)
  {
    int i1 = Build.VERSION.SDK_INT;
    paramView.setLabelFor(paramInt);
  }
  
  public static void la(@F View paramView)
  {
    int i1 = Build.VERSION.SDK_INT;
    paramView.postInvalidateOnAnimation();
  }
  
  @Deprecated
  public static void m(View paramView, float paramFloat)
  {
    paramView.setX(paramFloat);
  }
  
  public static void m(@F View paramView, int paramInt)
  {
    int i1 = Build.VERSION.SDK_INT;
    paramView.setLayoutDirection(paramInt);
  }
  
  public static boolean m(@F View paramView)
  {
    int i1 = Build.VERSION.SDK_INT;
    return paramView.getFitsSystemWindows();
  }
  
  public static void ma(@F View paramView)
  {
    if (Build.VERSION.SDK_INT >= 20)
    {
      paramView.requestApplyInsets();
      return;
    }
    paramView.requestFitSystemWindows();
  }
  
  public static int n(@F View paramView)
  {
    int i1 = Build.VERSION.SDK_INT;
    return paramView.getImportantForAccessibility();
  }
  
  @Deprecated
  public static void n(View paramView, float paramFloat)
  {
    paramView.setY(paramFloat);
  }
  
  public static void n(@F View paramView, int paramInt)
  {
    if (Build.VERSION.SDK_INT >= 26) {
      paramView.setNextClusterForwardId(paramInt);
    }
  }
  
  public static boolean na(@F View paramView)
  {
    if (Build.VERSION.SDK_INT >= 26) {
      return paramView.restoreDefaultFocus();
    }
    return paramView.requestFocus();
  }
  
  @SuppressLint({"InlinedApi"})
  public static int o(@F View paramView)
  {
    if (Build.VERSION.SDK_INT >= 26) {
      return paramView.getImportantForAutofill();
    }
    return 0;
  }
  
  public static void o(@F View paramView, float paramFloat)
  {
    if (Build.VERSION.SDK_INT >= 21) {
      paramView.setZ(paramFloat);
    }
  }
  
  @Deprecated
  public static void o(View paramView, int paramInt)
  {
    paramView.setOverScrollMode(paramInt);
  }
  
  public static void oa(@F View paramView)
  {
    if (Build.VERSION.SDK_INT >= 21)
    {
      paramView.stopNestedScroll();
      return;
    }
    if ((paramView instanceof s)) {
      ((s)paramView).stopNestedScroll();
    }
  }
  
  public static int p(@F View paramView)
  {
    int i1 = Build.VERSION.SDK_INT;
    return paramView.getLabelFor();
  }
  
  public static void p(@F View paramView, int paramInt)
  {
    if (Build.VERSION.SDK_INT >= 23) {
      paramView.setScrollIndicators(paramInt);
    }
  }
  
  public static void pa(View paramView)
  {
    float f1 = paramView.getTranslationY();
    paramView.setTranslationY(1.0F + f1);
    paramView.setTranslationY(f1);
  }
  
  @Deprecated
  public static int q(View paramView)
  {
    return paramView.getLayerType();
  }
  
  public static boolean q(@F View paramView, int paramInt)
  {
    if (Build.VERSION.SDK_INT >= 21) {
      return paramView.startNestedScroll(paramInt);
    }
    if ((paramView instanceof s)) {
      return ((s)paramView).startNestedScroll(paramInt);
    }
    return false;
  }
  
  public static int r(@F View paramView)
  {
    int i1 = Build.VERSION.SDK_INT;
    return paramView.getLayoutDirection();
  }
  
  public static void r(@F View paramView, int paramInt)
  {
    if ((paramView instanceof r))
    {
      ((r)paramView).stopNestedScroll(paramInt);
      return;
    }
    if (paramInt == 0) {
      oa(paramView);
    }
  }
  
  @Deprecated
  @b.b.a.G
  public static Matrix s(View paramView)
  {
    return paramView.getMatrix();
  }
  
  @Deprecated
  public static int t(View paramView)
  {
    return paramView.getMeasuredHeightAndState();
  }
  
  @Deprecated
  public static int u(View paramView)
  {
    return paramView.getMeasuredState();
  }
  
  @Deprecated
  public static int v(View paramView)
  {
    return paramView.getMeasuredWidthAndState();
  }
  
  public static int w(@F View paramView)
  {
    int i1 = Build.VERSION.SDK_INT;
    return paramView.getMinimumHeight();
  }
  
  public static int x(@F View paramView)
  {
    int i1 = Build.VERSION.SDK_INT;
    return paramView.getMinimumWidth();
  }
  
  public static int y(@F View paramView)
  {
    if (Build.VERSION.SDK_INT >= 26) {
      return paramView.getNextClusterForwardId();
    }
    return -1;
  }
  
  @Deprecated
  public static int z(View paramView)
  {
    return paramView.getOverScrollMode();
  }
  
  @Retention(RetentionPolicy.SOURCE)
  @N({b.b.a.N.a.b})
  public static @interface a {}
  
  @Retention(RetentionPolicy.SOURCE)
  @N({b.b.a.N.a.b})
  public static @interface b {}
  
  @Retention(RetentionPolicy.SOURCE)
  @N({b.b.a.N.a.b})
  public static @interface c {}
  
  @Retention(RetentionPolicy.SOURCE)
  @N({b.b.a.N.a.b})
  public static @interface d {}
  
  public static abstract interface e
  {
    public abstract boolean onUnhandledKeyEvent(View paramView, KeyEvent paramKeyEvent);
  }
  
  @K(28)
  private static class f
    implements View.OnUnhandledKeyEventListener
  {
    public H.e a;
    
    public f(H.e paramE)
    {
      a = paramE;
    }
    
    public boolean onUnhandledKeyEvent(View paramView, KeyEvent paramKeyEvent)
    {
      return a.onUnhandledKeyEvent(paramView, paramKeyEvent);
    }
  }
  
  @Retention(RetentionPolicy.SOURCE)
  @N({b.b.a.N.a.b})
  public static @interface g {}
  
  @Retention(RetentionPolicy.SOURCE)
  @N({b.b.a.N.a.b})
  public static @interface h {}
  
  public static class i
  {
    public static final ArrayList<WeakReference<View>> a = new ArrayList();
    @b.b.a.G
    public WeakHashMap<View, Boolean> b = null;
    public SparseArray<WeakReference<View>> c = null;
    public WeakReference<KeyEvent> d = null;
    
    public i() {}
    
    private SparseArray<WeakReference<View>> a()
    {
      if (c == null) {
        c = new SparseArray();
      }
      return c;
    }
    
    public static i a(View paramView)
    {
      i localI2 = (i)paramView.getTag(a.e.tag_unhandled_key_event_manager);
      i localI1 = localI2;
      if (localI2 == null)
      {
        localI1 = new i();
        paramView.setTag(a.e.tag_unhandled_key_event_manager, localI1);
      }
      return localI1;
    }
    
    @b.b.a.G
    private View b(View paramView, KeyEvent paramKeyEvent)
    {
      Object localObject = b;
      if (localObject != null)
      {
        if (!((WeakHashMap)localObject).containsKey(paramView)) {
          return null;
        }
        if ((paramView instanceof ViewGroup))
        {
          localObject = (ViewGroup)paramView;
          int i = ((ViewGroup)localObject).getChildCount() - 1;
          while (i >= 0)
          {
            View localView = b(((ViewGroup)localObject).getChildAt(i), paramKeyEvent);
            if (localView != null) {
              return localView;
            }
            i -= 1;
          }
        }
        if (c(paramView, paramKeyEvent)) {
          return paramView;
        }
      }
      return null;
    }
    
    private void b()
    {
      Object localObject1 = b;
      if (localObject1 != null) {
        ((WeakHashMap)localObject1).clear();
      }
      if (a.isEmpty()) {
        return;
      }
      int i;
      synchronized (a)
      {
        if (b == null) {
          b = new WeakHashMap();
        }
        i = a.size() - 1;
        if (i >= 0)
        {
          localObject1 = (View)((WeakReference)a.get(i)).get();
          if (localObject1 == null)
          {
            a.remove(i);
          }
          else
          {
            b.put(localObject1, Boolean.TRUE);
            for (localObject1 = ((View)localObject1).getParent(); (localObject1 instanceof View); localObject1 = ((ViewParent)localObject1).getParent()) {
              b.put((View)localObject1, Boolean.TRUE);
            }
          }
        }
        else
        {
          return;
        }
      }
    }
    
    public static void b(View paramView)
    {
      synchronized (a)
      {
        Iterator localIterator = a.iterator();
        while (localIterator.hasNext()) {
          if (((WeakReference)localIterator.next()).get() == paramView) {
            return;
          }
        }
        a.add(new WeakReference(paramView));
        return;
      }
      for (;;)
      {
        throw paramView;
      }
    }
    
    public static void c(View paramView)
    {
      ArrayList localArrayList = a;
      int i = 0;
      for (;;)
      {
        try
        {
          if (i < a.size())
          {
            if (((WeakReference)a.get(i)).get() == paramView) {
              a.remove(i);
            }
          }
          else {
            return;
          }
        }
        finally
        {
          continue;
          throw paramView;
          continue;
          i += 1;
        }
      }
    }
    
    private boolean c(@F View paramView, @F KeyEvent paramKeyEvent)
    {
      ArrayList localArrayList = (ArrayList)paramView.getTag(a.e.tag_unhandled_key_listeners);
      if (localArrayList != null)
      {
        int i = localArrayList.size() - 1;
        while (i >= 0)
        {
          if (((H.e)localArrayList.get(i)).onUnhandledKeyEvent(paramView, paramKeyEvent)) {
            return true;
          }
          i -= 1;
        }
      }
      return false;
    }
    
    public boolean a(KeyEvent paramKeyEvent)
    {
      Object localObject1 = d;
      if ((localObject1 != null) && (((WeakReference)localObject1).get() == paramKeyEvent)) {
        return false;
      }
      d = new WeakReference(paramKeyEvent);
      Object localObject2 = null;
      SparseArray localSparseArray = a();
      localObject1 = localObject2;
      if (paramKeyEvent.getAction() == 1)
      {
        int i = localSparseArray.indexOfKey(paramKeyEvent.getKeyCode());
        localObject1 = localObject2;
        if (i >= 0)
        {
          localObject1 = (WeakReference)localSparseArray.valueAt(i);
          localSparseArray.removeAt(i);
        }
      }
      localObject2 = localObject1;
      if (localObject1 == null) {
        localObject2 = (WeakReference)localSparseArray.get(paramKeyEvent.getKeyCode());
      }
      if (localObject2 != null)
      {
        localObject1 = (View)((WeakReference)localObject2).get();
        if ((localObject1 != null) && (H.Z((View)localObject1))) {
          c((View)localObject1, paramKeyEvent);
        }
        return true;
      }
      return false;
    }
    
    public boolean a(View paramView, KeyEvent paramKeyEvent)
    {
      if (paramKeyEvent.getAction() == 0) {
        b();
      }
      paramView = b(paramView, paramKeyEvent);
      if (paramKeyEvent.getAction() == 0)
      {
        int i = paramKeyEvent.getKeyCode();
        if ((paramView != null) && (!KeyEvent.isModifierKey(i))) {
          a().put(i, new WeakReference(paramView));
        }
      }
      return paramView != null;
    }
  }
}
