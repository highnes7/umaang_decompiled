package b.b.x.m.a;

import b.b.a.N;
import b.b.a.W;
import java.util.Locale;
import java.util.regex.MatchResult;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

@N({b.b.a.N.a.b})
public class a
{
  public static final int a = 4;
  public static final int b = 14;
  public static final int c = 5;
  public static final int d = 25;
  public static final int e = 5;
  public static final a[] f = { new a(99, 99, -1, -1), new a(35, 36, -1, -1), new a(71, 72, -1, -1), new a(96, 96, -1, -1), new a(85, 86, -1, -1), new a(90, 96, -1, -1), new a(80, 81, -1, -1), new a(6, 6, -1, -1), new a(20, 20, -1, -1), new a(19, 19, -1, -1), new a(32, 34, -1, -1), new a(96, 96, -1, -1), new a(30, 31, -1, -1), new a(96, 96, -1, -1), new a(96, 96, -1, -1), new a(50, 52, -1, -1), new a(83, 83, -1, -1), new a(60, 62, -1, -1), new a(46, 47, -1, -1), new a(66, 67, 73, -1), new a(40, 42, -1, -1), new a(70, 71, -1, -1), new a(1, 2, -1, -1), new a(20, 21, -1, -1), new a(3, 4, -1, -1), new a(96, 96, -1, -1), new a(48, 49, -1, -1), new a(55, 56, -1, -1), new a(63, 65, -1, -1), new a(96, 96, -1, -1), new a(38, 39, -1, -1), new a(55, 56, -1, -1), new a(27, 28, -1, -1), new a(58, 58, -1, -1), new a(68, 69, -1, -1), new a(3, 4, -1, -1), new a(7, 8, -1, -1), new a(87, 88, 86, -1), new a(88, 89, 96, -1), new a(10, 14, 0, 6), new a(43, 45, -1, -1), new a(73, 74, -1, -1), new a(97, 97, -1, -1), new a(15, 19, -1, -1), new a(6, 6, 0, 9), new a(96, 96, -1, -1), new a(2, 2, -1, -1), new a(29, 29, -1, -1), new a(57, 57, -1, -1), new a(37, 38, -1, -1), new a(75, 79, 87, 88), new a(84, 84, -1, -1), new a(22, 24, 20, -1), new a(6, 9, -1, -1), new a(5, 5, -1, -1), new a(98, 99, -1, -1), new a(53, 54, -1, -1), new a(24, 26, -1, -1), new a(82, 83, -1, -1) };
  public static final String g = "\n\013\f\r???";
  public static final String h = "\t ????????????????";
  public static final String i = "\t ????????????????\n\013\f\r???";
  public static final String j = ",*?\t ????????????????\n\013\f\r???";
  public static final String k = "(?=[,*?\t ????????????????\n\013\f\r???]|$)";
  public static final Pattern l = Pattern.compile("[^,*?\t ????????????????\n\013\f\r???]+(?=[,*?\t ????????????????\n\013\f\r???]|$)", 2);
  public static final String m = ",\"'\t ????????????????\n\013\f\r???";
  public static final String n = "(?=[,\"'\t ????????????????\n\013\f\r???]|$)";
  public static final String o = ":,\"'\t ????????????????\n\013\f\r???";
  public static final String p = "(?:one|\\d+([a-z](?=[^a-z]|$)|st|nd|rd|th)?)";
  public static final Pattern q = Pattern.compile("(?:one|\\d+([a-z](?=[^a-z]|$)|st|nd|rd|th)?)(?:-(?:one|\\d+([a-z](?=[^a-z]|$)|st|nd|rd|th)?))*(?=[,\"'\t ????????????????\n\013\f\r???]|$)", 2);
  public static final Pattern r = Pattern.compile("(?:(ak|alaska)|(al|alabama)|(ar|arkansas)|(as|american[\t ????????????????]+samoa)|(az|arizona)|(ca|california)|(co|colorado)|(ct|connecticut)|(dc|district[\t ????????????????]+of[\t ????????????????]+columbia)|(de|delaware)|(fl|florida)|(fm|federated[\t ????????????????]+states[\t ????????????????]+of[\t ????????????????]+micronesia)|(ga|georgia)|(gu|guam)|(hi|hawaii)|(ia|iowa)|(id|idaho)|(il|illinois)|(in|indiana)|(ks|kansas)|(ky|kentucky)|(la|louisiana)|(ma|massachusetts)|(md|maryland)|(me|maine)|(mh|marshall[\t ????????????????]+islands)|(mi|michigan)|(mn|minnesota)|(mo|missouri)|(mp|northern[\t ????????????????]+mariana[\t ????????????????]+islands)|(ms|mississippi)|(mt|montana)|(nc|north[\t ????????????????]+carolina)|(nd|north[\t ????????????????]+dakota)|(ne|nebraska)|(nh|new[\t ????????????????]+hampshire)|(nj|new[\t ????????????????]+jersey)|(nm|new[\t ????????????????]+mexico)|(nv|nevada)|(ny|new[\t ????????????????]+york)|(oh|ohio)|(ok|oklahoma)|(or|oregon)|(pa|pennsylvania)|(pr|puerto[\t ????????????????]+rico)|(pw|palau)|(ri|rhode[\t ????????????????]+island)|(sc|south[\t ????????????????]+carolina)|(sd|south[\t ????????????????]+dakota)|(tn|tennessee)|(tx|texas)|(ut|utah)|(va|virginia)|(vi|virgin[\t ????????????????]+islands)|(vt|vermont)|(wa|washington)|(wi|wisconsin)|(wv|west[\t ????????????????]+virginia)|(wy|wyoming))(?=[,*?\t ????????????????\n\013\f\r???]|$)", 2);
  public static final Pattern s = Pattern.compile("(?:alley|annex|arcade|ave[.]?|avenue|alameda|bayou|beach|bend|bluffs?|bottom|boulevard|branch|bridge|brooks?|burgs?|bypass|broadway|camino|camp|canyon|cape|causeway|centers?|circles?|cliffs?|club|common|corners?|course|courts?|coves?|creek|crescent|crest|crossing|crossroad|curve|circulo|dale|dam|divide|drives?|estates?|expressway|extensions?|falls?|ferry|fields?|flats?|fords?|forest|forges?|forks?|fort|freeway|gardens?|gateway|glens?|greens?|groves?|harbors?|haven|heights|highway|hills?|hollow|inlet|islands?|isle|junctions?|keys?|knolls?|lakes?|land|landing|lane|lights?|loaf|locks?|lodge|loop|mall|manors?|meadows?|mews|mills?|mission|motorway|mount|mountains?|neck|orchard|oval|overpass|parks?|parkways?|pass|passage|path|pike|pines?|plains?|plaza|points?|ports?|prairie|privada|radial|ramp|ranch|rapids?|rd[.]?|rest|ridges?|river|roads?|route|row|rue|run|shoals?|shores?|skyway|springs?|spurs?|squares?|station|stravenue|stream|st[.]?|streets?|summit|speedway|terrace|throughway|trace|track|trafficway|trail|tunnel|turnpike|underpass|unions?|valleys?|viaduct|views?|villages?|ville|vista|walks?|wall|ways?|wells?|xing|xrd)(?=[,*?\t ????????????????\n\013\f\r???]|$)", 2);
  public static final Pattern t = Pattern.compile("(\\d+)(st|nd|rd|th)", 2);
  public static final Pattern u = Pattern.compile("(?:\\d{5}(?:-\\d{4})?)(?=[,*?\t ????????????????\n\013\f\r???]|$)", 2);
  
  public a() {}
  
  public static int a(String paramString, MatchResult paramMatchResult)
  {
    int i2 = paramMatchResult.end();
    Matcher localMatcher = l.matcher(paramString);
    paramMatchResult = "";
    int i7 = 1;
    int i8 = 1;
    int i6 = 1;
    int i5 = 0;
    int i3 = -1;
    int i4 = -1;
    int i1;
    for (;;)
    {
      i1 = i2;
      if (i2 >= paramString.length()) {
        break;
      }
      if (!localMatcher.find(i2)) {}
      for (i1 = paramString.length();; i1 = localMatcher.end())
      {
        return -i1;
        i1 = i2;
        if (localMatcher.end() - localMatcher.start() <= 25) {
          break;
        }
      }
      while (i1 < localMatcher.start())
      {
        i2 = i7;
        if ("\n\013\f\r???".indexOf(paramString.charAt(i1)) != -1) {
          i2 = i7 + 1;
        }
        i1 += 1;
        i7 = i2;
      }
      if (i7 > 5) {
        break;
      }
      i8 += 1;
      if (i8 > 14) {
        break;
      }
      int i9;
      int i10;
      int i11;
      if (a(paramString, i1) != null)
      {
        if ((i6 != 0) && (i7 > 1)) {
          return -i1;
        }
        i2 = i6;
        i9 = i5;
        i10 = i3;
        i11 = i4;
        if (i3 == -1)
        {
          i2 = i6;
          i9 = i5;
          i10 = i1;
          i11 = i4;
        }
      }
      else if (c(localMatcher.group(0)))
      {
        i2 = 0;
        i9 = 1;
        i10 = i3;
        i11 = i4;
      }
      else
      {
        if ((i8 == 5) && (i5 == 0))
        {
          i1 = localMatcher.end();
          break;
        }
        i2 = i4;
        if (i5 != 0)
        {
          i2 = i4;
          if (i8 > 4)
          {
            MatchResult localMatchResult = b(paramString, i1);
            i2 = i4;
            if (localMatchResult != null)
            {
              if ((paramMatchResult.equals("et")) && (localMatchResult.group(0).equals("al")))
              {
                i1 = localMatchResult.end();
                break;
              }
              paramMatchResult = l.matcher(paramString);
              if (paramMatchResult.find(localMatchResult.end()))
              {
                i2 = i4;
                if (b(paramMatchResult.group(0), localMatchResult)) {
                  return paramMatchResult.end();
                }
              }
              else
              {
                i2 = localMatchResult.end();
              }
            }
          }
        }
        i1 = 0;
        i11 = i2;
        i10 = i3;
        i9 = i5;
        i2 = i1;
      }
      paramMatchResult = localMatcher.group(0);
      i1 = localMatcher.end();
      i6 = i2;
      i5 = i9;
      i3 = i10;
      i4 = i11;
      i2 = i1;
    }
    if (i4 > 0) {
      return i4;
    }
    if (i3 > 0) {
      i1 = i3;
    }
    return -i1;
  }
  
  @W
  public static MatchResult a(String paramString, int paramInt)
  {
    if ((paramInt > 0) && (":,\"'\t ????????????????\n\013\f\r???".indexOf(paramString.charAt(paramInt - 1)) == -1)) {
      return null;
    }
    paramString = q.matcher(paramString).region(paramInt, paramString.length());
    if (paramString.lookingAt())
    {
      paramString = paramString.toMatchResult();
      if (a(paramString.group(0))) {
        return paramString;
      }
    }
    return null;
  }
  
  public static boolean a(String paramString)
  {
    int i1 = 0;
    int i3;
    for (int i2 = 0; i1 < paramString.length(); i2 = i3)
    {
      i3 = i2;
      if (Character.isDigit(paramString.charAt(i1))) {
        i3 = i2 + 1;
      }
      i1 += 1;
    }
    if (i2 > 5) {
      return false;
    }
    paramString = t.matcher(paramString);
    if (paramString.find())
    {
      i1 = Integer.parseInt(paramString.group(1));
      if (i1 == 0) {
        return false;
      }
      String str = paramString.group(2).toLowerCase(Locale.getDefault());
      i2 = i1 % 10;
      paramString = "th";
      if (i2 != 1)
      {
        if (i2 != 2)
        {
          if (i2 != 3) {
            return str.equals("th");
          }
          if (i1 % 100 != 13) {
            paramString = "rd";
          }
          return str.equals(paramString);
        }
        if (i1 % 100 != 12) {
          paramString = "nd";
        }
        return str.equals(paramString);
      }
      if (i1 % 100 != 11) {
        paramString = "st";
      }
      return str.equals(paramString);
    }
    return true;
  }
  
  @W
  public static boolean a(String paramString1, String paramString2)
  {
    return b(paramString1, b(paramString2, 0));
  }
  
  public static String b(String paramString)
  {
    Matcher localMatcher = q.matcher(paramString);
    int i1 = 0;
    while (localMatcher.find(i1)) {
      if (a(localMatcher.group(0)))
      {
        i1 = localMatcher.start();
        int i2 = a(paramString, localMatcher);
        if (i2 > 0) {
          return paramString.substring(i1, i2);
        }
        i1 = -i2;
      }
      else
      {
        i1 = localMatcher.end();
      }
    }
    return null;
  }
  
  @W
  public static MatchResult b(String paramString, int paramInt)
  {
    Object localObject = null;
    if ((paramInt > 0) && (",*?\t ????????????????\n\013\f\r???".indexOf(paramString.charAt(paramInt - 1)) == -1)) {
      return null;
    }
    Matcher localMatcher = r.matcher(paramString).region(paramInt, paramString.length());
    paramString = localObject;
    if (localMatcher.lookingAt()) {
      paramString = localMatcher.toMatchResult();
    }
    return paramString;
  }
  
  public static boolean b(String paramString, MatchResult paramMatchResult)
  {
    boolean bool2 = false;
    if (paramMatchResult == null) {
      return false;
    }
    int i2;
    for (int i1 = paramMatchResult.groupCount();; i1 = i2)
    {
      i2 = i1;
      if (i1 <= 0) {
        break;
      }
      i2 = i1 - 1;
      if (paramMatchResult.group(i1) != null) {
        break;
      }
    }
    boolean bool1 = bool2;
    if (u.matcher(paramString).matches())
    {
      bool1 = bool2;
      if (f[i2].a(paramString)) {
        bool1 = true;
      }
    }
    return bool1;
  }
  
  @W
  public static boolean c(String paramString)
  {
    return s.matcher(paramString).matches();
  }
  
  @W
  public static boolean d(String paramString)
  {
    return u.matcher(paramString).matches();
  }
  
  private static class a
  {
    public int a;
    public int b;
    public int c;
    public int d;
    
    public a(int paramInt1, int paramInt2, int paramInt3, int paramInt4)
    {
      a = paramInt1;
      b = paramInt2;
      c = paramInt3;
      d = paramInt3;
    }
    
    public boolean a(String paramString)
    {
      boolean bool = false;
      int i = Integer.parseInt(paramString.substring(0, 2));
      if (((a <= i) && (i <= b)) || (i == c) || (i == d)) {
        bool = true;
      }
      return bool;
    }
  }
}
