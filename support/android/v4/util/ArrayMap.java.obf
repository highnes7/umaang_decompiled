package b.b.x.n;

import b.b.a.F;
import b.b.a.G;
import java.util.Collection;
import java.util.Iterator;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

public class b<K, V>
  extends t<K, V>
  implements Map<K, V>
{
  @G
  public n<K, V> m;
  
  public b() {}
  
  public b(int paramInt)
  {
    super(paramInt);
  }
  
  public b(t paramT)
  {
    if (paramT != null) {
      a(paramT);
    }
  }
  
  private n<K, V> b()
  {
    if (m == null) {
      m = new a(this);
    }
    return m;
  }
  
  public boolean a(@F Collection<?> paramCollection)
  {
    return n.a(this, paramCollection);
  }
  
  public boolean b(@F Collection<?> paramCollection)
  {
    return n.b(this, paramCollection);
  }
  
  public boolean c(@F Collection<?> paramCollection)
  {
    return n.c(this, paramCollection);
  }
  
  public Set<Map.Entry<K, V>> entrySet()
  {
    return b().d();
  }
  
  public Set<K> keySet()
  {
    return b().e();
  }
  
  public void putAll(Map<? extends K, ? extends V> paramMap)
  {
    int i = l;
    a(paramMap.size() + i);
    paramMap = paramMap.entrySet().iterator();
    while (paramMap.hasNext())
    {
      Map.Entry localEntry = (Map.Entry)paramMap.next();
      put(localEntry.getKey(), localEntry.getValue());
    }
  }
  
  public Collection<V> values()
  {
    return b().f();
  }
}
