package b.b.x.n;

import b.b.a.F;
import b.b.a.G;

public class u<E>
  implements Cloneable
{
  public static final Object a = new Object();
  public boolean b = false;
  public int[] c;
  public Object[] d;
  public int e;
  
  public u()
  {
    this(10);
  }
  
  public u(int paramInt)
  {
    if (paramInt == 0)
    {
      c = i.a;
      d = i.c;
    }
    else
    {
      paramInt = i.b(paramInt);
      c = new int[paramInt];
      d = new Object[paramInt];
    }
    e = 0;
  }
  
  private void g()
  {
    int m = e;
    int[] arrayOfInt = c;
    Object[] arrayOfObject = d;
    int i = 0;
    int k;
    for (int j = 0; i < m; j = k)
    {
      Object localObject = arrayOfObject[i];
      k = j;
      if (localObject != a)
      {
        if (i != j)
        {
          arrayOfInt[j] = arrayOfInt[i];
          arrayOfObject[j] = localObject;
          arrayOfObject[i] = null;
        }
        k = j + 1;
      }
      i += 1;
    }
    b = false;
    e = j;
  }
  
  public void a(int paramInt1, int paramInt2)
  {
    paramInt2 = Math.min(e, paramInt2 + paramInt1);
    while (paramInt1 < paramInt2)
    {
      g(paramInt1);
      paramInt1 += 1;
    }
  }
  
  public void a(int paramInt, E paramE)
  {
    int i = e;
    if ((i != 0) && (paramInt <= c[(i - 1)]))
    {
      c(paramInt, paramE);
      return;
    }
    if ((b) && (e >= c.length)) {
      g();
    }
    i = e;
    if (i >= c.length)
    {
      int j = i.b(i + 1);
      int[] arrayOfInt = new int[j];
      Object[] arrayOfObject = new Object[j];
      Object localObject = c;
      System.arraycopy(localObject, 0, arrayOfInt, 0, localObject.length);
      localObject = d;
      System.arraycopy(localObject, 0, arrayOfObject, 0, localObject.length);
      c = arrayOfInt;
      d = arrayOfObject;
    }
    c[i] = paramInt;
    d[i] = paramE;
    e = (i + 1);
  }
  
  public void a(@F u<? extends E> paramU)
  {
    int j = paramU.f();
    int i = 0;
    while (i < j)
    {
      c(paramU.e(i), paramU.h(i));
      i += 1;
    }
  }
  
  public boolean a(int paramInt)
  {
    return d(paramInt) >= 0;
  }
  
  public boolean a(E paramE)
  {
    return b(paramE) >= 0;
  }
  
  public int b(E paramE)
  {
    if (b) {
      g();
    }
    int i = 0;
    while (i < e)
    {
      if (d[i] == paramE) {
        return i;
      }
      i += 1;
    }
    return -1;
  }
  
  public E b(int paramInt, E paramE)
  {
    paramInt = i.a(c, e, paramInt);
    if (paramInt >= 0)
    {
      Object[] arrayOfObject = d;
      if (arrayOfObject[paramInt] == a) {
        return paramE;
      }
      return arrayOfObject[paramInt];
    }
    return paramE;
  }
  
  public void b()
  {
    int j = e;
    Object[] arrayOfObject = d;
    int i = 0;
    while (i < j)
    {
      arrayOfObject[i] = null;
      i += 1;
    }
    e = 0;
    b = false;
  }
  
  public void b(int paramInt)
  {
    paramInt = i.a(c, e, paramInt);
    if (paramInt >= 0)
    {
      Object[] arrayOfObject = d;
      Object localObject1 = arrayOfObject[paramInt];
      Object localObject2 = a;
      if (localObject1 != localObject2)
      {
        arrayOfObject[paramInt] = localObject2;
        b = true;
      }
    }
  }
  
  @G
  public E c(int paramInt)
  {
    return b(paramInt, null);
  }
  
  public void c(int paramInt, E paramE)
  {
    int i = i.a(c, e, paramInt);
    if (i >= 0)
    {
      d[i] = paramE;
      return;
    }
    int j = i ^ 0xFFFFFFFF;
    Object localObject1;
    if (j < e)
    {
      localObject1 = d;
      if (localObject1[j] == a)
      {
        c[j] = paramInt;
        localObject1[j] = paramE;
        return;
      }
    }
    i = j;
    if (b)
    {
      i = j;
      if (e >= c.length)
      {
        g();
        i = i.a(c, e, paramInt) ^ 0xFFFFFFFF;
      }
    }
    j = e;
    if (j >= c.length)
    {
      j = i.b(j + 1);
      localObject1 = new int[j];
      Object[] arrayOfObject = new Object[j];
      Object localObject2 = c;
      System.arraycopy(localObject2, 0, localObject1, 0, localObject2.length);
      localObject2 = d;
      System.arraycopy(localObject2, 0, arrayOfObject, 0, localObject2.length);
      c = ((int[])localObject1);
      d = arrayOfObject;
    }
    j = e;
    if (j - i != 0)
    {
      localObject1 = c;
      int k = i + 1;
      System.arraycopy(localObject1, i, localObject1, k, j - i);
      localObject1 = d;
      System.arraycopy(localObject1, i, localObject1, k, e - i);
    }
    c[i] = paramInt;
    d[i] = paramE;
    e += 1;
  }
  
  public boolean c()
  {
    return f() == 0;
  }
  
  public u<E> clone()
  {
    try
    {
      u localU = (u)super.clone();
      c = ((int[])c.clone());
      d = ((Object[])d.clone());
      return localU;
    }
    catch (CloneNotSupportedException localCloneNotSupportedException)
    {
      throw new AssertionError(localCloneNotSupportedException);
    }
  }
  
  public int d(int paramInt)
  {
    if (b) {
      g();
    }
    return i.a(c, e, paramInt);
  }
  
  public void d(int paramInt, E paramE)
  {
    if (b) {
      g();
    }
    d[paramInt] = paramE;
  }
  
  public int e(int paramInt)
  {
    if (b) {
      g();
    }
    return c[paramInt];
  }
  
  public int f()
  {
    if (b) {
      g();
    }
    return e;
  }
  
  public void f(int paramInt)
  {
    b(paramInt);
  }
  
  public void g(int paramInt)
  {
    Object[] arrayOfObject = d;
    Object localObject1 = arrayOfObject[paramInt];
    Object localObject2 = a;
    if (localObject1 != localObject2)
    {
      arrayOfObject[paramInt] = localObject2;
      b = true;
    }
  }
  
  public E h(int paramInt)
  {
    if (b) {
      g();
    }
    return d[paramInt];
  }
  
  public String toString()
  {
    if (f() <= 0) {
      return "{}";
    }
    StringBuilder localStringBuilder = new StringBuilder(e * 28);
    localStringBuilder.append('{');
    int i = 0;
    while (i < e)
    {
      if (i > 0) {
        localStringBuilder.append(", ");
      }
      localStringBuilder.append(e(i));
      localStringBuilder.append('=');
      Object localObject = h(i);
      if (localObject != this) {
        localStringBuilder.append(localObject);
      } else {
        localStringBuilder.append("(this Map)");
      }
      i += 1;
    }
    localStringBuilder.append('}');
    return localStringBuilder.toString();
  }
}
