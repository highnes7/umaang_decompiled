package b.b.x.n;

import android.text.TextUtils;
import b.b.a.F;
import b.b.a.N;
import b.b.a.x;
import f.a.a.a.a;
import java.util.Collection;
import java.util.Iterator;
import java.util.Locale;

@N({b.b.a.N.a.b})
public class s
{
  public s() {}
  
  public static float a(float paramFloat1, float paramFloat2, float paramFloat3, String paramString)
  {
    if (!Float.isNaN(paramFloat1))
    {
      if (paramFloat1 >= paramFloat2)
      {
        if (paramFloat1 <= paramFloat3) {
          return paramFloat1;
        }
        throw new IllegalArgumentException(String.format(Locale.US, "%s is out of range of [%f, %f] (too high)", new Object[] { paramString, Float.valueOf(paramFloat2), Float.valueOf(paramFloat3) }));
      }
      throw new IllegalArgumentException(String.format(Locale.US, "%s is out of range of [%f, %f] (too low)", new Object[] { paramString, Float.valueOf(paramFloat2), Float.valueOf(paramFloat3) }));
    }
    throw new IllegalArgumentException(a.c(paramString, " must not be NaN"));
  }
  
  public static float a(float paramFloat, String paramString)
  {
    if (!Float.isNaN(paramFloat))
    {
      if (!Float.isInfinite(paramFloat)) {
        return paramFloat;
      }
      throw new IllegalArgumentException(a.c(paramString, " must not be infinite"));
    }
    throw new IllegalArgumentException(a.c(paramString, " must not be NaN"));
  }
  
  @x(from=0L)
  public static int a(int paramInt)
  {
    if (paramInt >= 0) {
      return paramInt;
    }
    throw new IllegalArgumentException();
  }
  
  public static int a(int paramInt1, int paramInt2)
  {
    if ((paramInt1 & paramInt2) == paramInt1) {
      return paramInt1;
    }
    StringBuilder localStringBuilder = a.b("Requested flags 0x");
    localStringBuilder.append(Integer.toHexString(paramInt1));
    localStringBuilder.append(", but only 0x");
    localStringBuilder.append(Integer.toHexString(paramInt2));
    localStringBuilder.append(" are allowed");
    throw new IllegalArgumentException(localStringBuilder.toString());
  }
  
  public static int a(int paramInt1, int paramInt2, int paramInt3, String paramString)
  {
    if (paramInt1 >= paramInt2)
    {
      if (paramInt1 <= paramInt3) {
        return paramInt1;
      }
      throw new IllegalArgumentException(String.format(Locale.US, "%s is out of range of [%d, %d] (too high)", new Object[] { paramString, Integer.valueOf(paramInt2), Integer.valueOf(paramInt3) }));
    }
    throw new IllegalArgumentException(String.format(Locale.US, "%s is out of range of [%d, %d] (too low)", new Object[] { paramString, Integer.valueOf(paramInt2), Integer.valueOf(paramInt3) }));
  }
  
  @x(from=0L)
  public static int a(int paramInt, String paramString)
  {
    if (paramInt >= 0) {
      return paramInt;
    }
    throw new IllegalArgumentException(paramString);
  }
  
  public static long a(long paramLong)
  {
    if (paramLong >= 0L) {
      return paramLong;
    }
    throw new IllegalArgumentException();
  }
  
  public static long a(long paramLong1, long paramLong2, long paramLong3, String paramString)
  {
    if (paramLong1 >= paramLong2)
    {
      if (paramLong1 <= paramLong3) {
        return paramLong1;
      }
      throw new IllegalArgumentException(String.format(Locale.US, "%s is out of range of [%d, %d] (too high)", new Object[] { paramString, Long.valueOf(paramLong2), Long.valueOf(paramLong3) }));
    }
    throw new IllegalArgumentException(String.format(Locale.US, "%s is out of range of [%d, %d] (too low)", new Object[] { paramString, Long.valueOf(paramLong2), Long.valueOf(paramLong3) }));
  }
  
  public static long a(long paramLong, String paramString)
  {
    if (paramLong >= 0L) {
      return paramLong;
    }
    throw new IllegalArgumentException(paramString);
  }
  
  @F
  public static <T extends CharSequence> T a(T paramT)
  {
    if (!TextUtils.isEmpty(paramT)) {
      return paramT;
    }
    throw new IllegalArgumentException();
  }
  
  @F
  public static <T extends CharSequence> T a(T paramT, Object paramObject)
  {
    if (!TextUtils.isEmpty(paramT)) {
      return paramT;
    }
    throw new IllegalArgumentException(String.valueOf(paramObject));
  }
  
  @F
  public static <T> T a(T paramT)
  {
    if (paramT != null) {
      return paramT;
    }
    throw new NullPointerException();
  }
  
  @F
  public static <T> T a(T paramT, Object paramObject)
  {
    if (paramT != null) {
      return paramT;
    }
    throw new NullPointerException(String.valueOf(paramObject));
  }
  
  @F
  public static <C extends Collection<T>, T> C a(C paramC, String paramString)
  {
    if (paramC != null)
    {
      long l = 0L;
      Iterator localIterator = paramC.iterator();
      while (localIterator.hasNext()) {
        if (localIterator.next() != null) {
          l += 1L;
        } else {
          throw new NullPointerException(String.format(Locale.US, "%s[%d] must not be null", new Object[] { paramString, Long.valueOf(l) }));
        }
      }
      return paramC;
    }
    paramC = new NullPointerException(a.c(paramString, " must not be null"));
    for (;;)
    {
      throw paramC;
    }
  }
  
  public static void a(boolean paramBoolean)
  {
    if (paramBoolean) {
      return;
    }
    throw new IllegalArgumentException();
  }
  
  public static void a(boolean paramBoolean, Object paramObject)
  {
    if (paramBoolean) {
      return;
    }
    throw new IllegalArgumentException(String.valueOf(paramObject));
  }
  
  public static void a(boolean paramBoolean, String paramString)
  {
    if (paramBoolean) {
      return;
    }
    throw new IllegalStateException(paramString);
  }
  
  public static float[] a(float[] paramArrayOfFloat, float paramFloat1, float paramFloat2, String paramString)
  {
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append(paramString);
    localStringBuilder.append(" must not be null");
    a(paramArrayOfFloat, localStringBuilder.toString());
    int i = 0;
    while (i < paramArrayOfFloat.length)
    {
      float f = paramArrayOfFloat[i];
      if (!Float.isNaN(f))
      {
        if (f >= paramFloat1)
        {
          if (f <= paramFloat2) {
            i += 1;
          } else {
            throw new IllegalArgumentException(String.format(Locale.US, "%s[%d] is out of range of [%f, %f] (too high)", new Object[] { paramString, Integer.valueOf(i), Float.valueOf(paramFloat1), Float.valueOf(paramFloat2) }));
          }
        }
        else {
          throw new IllegalArgumentException(String.format(Locale.US, "%s[%d] is out of range of [%f, %f] (too low)", new Object[] { paramString, Integer.valueOf(i), Float.valueOf(paramFloat1), Float.valueOf(paramFloat2) }));
        }
      }
      else
      {
        paramArrayOfFloat = new StringBuilder();
        paramArrayOfFloat.append(paramString);
        paramArrayOfFloat.append("[");
        paramArrayOfFloat.append(i);
        paramArrayOfFloat.append("] must not be NaN");
        throw new IllegalArgumentException(paramArrayOfFloat.toString());
      }
    }
    return paramArrayOfFloat;
  }
  
  public static <T> T[] a(T[] paramArrayOfT, String paramString)
  {
    if (paramArrayOfT != null)
    {
      int i = 0;
      while (i < paramArrayOfT.length) {
        if (paramArrayOfT[i] != null) {
          i += 1;
        } else {
          throw new NullPointerException(String.format(Locale.US, "%s[%d] must not be null", new Object[] { paramString, Integer.valueOf(i) }));
        }
      }
      return paramArrayOfT;
    }
    paramArrayOfT = new NullPointerException(a.c(paramString, " must not be null"));
    for (;;)
    {
      throw paramArrayOfT;
    }
  }
  
  public static int b(int paramInt, String paramString)
  {
    if (paramInt > 0) {
      return paramInt;
    }
    throw new IllegalArgumentException(paramString);
  }
  
  public static <T> Collection<T> b(Collection<T> paramCollection, String paramString)
  {
    if (paramCollection != null)
    {
      if (!paramCollection.isEmpty()) {
        return paramCollection;
      }
      throw new IllegalArgumentException(a.c(paramString, " is empty"));
    }
    throw new NullPointerException(a.c(paramString, " must not be null"));
  }
  
  public static void b(boolean paramBoolean)
  {
    a(paramBoolean, null);
  }
}
