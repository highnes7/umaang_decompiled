package b.a.b;

import b.b.a.G;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

public class a
{
  public static a a = new a();
  public static final int b = 0;
  public static final int c = 1;
  public static final int d = 2;
  public final Map<Class, a> e = new HashMap();
  public final Map<Class, Boolean> f = new HashMap();
  
  public a() {}
  
  private a a(Class paramClass, @G Method[] paramArrayOfMethod)
  {
    Object localObject1 = paramClass.getSuperclass();
    HashMap localHashMap = new HashMap();
    if (localObject1 != null)
    {
      localObject1 = a((Class)localObject1);
      if (localObject1 != null) {
        localHashMap.putAll(b);
      }
    }
    localObject1 = paramClass.getInterfaces();
    int j = localObject1.length;
    int i = 0;
    Object localObject2;
    Object localObject3;
    while (i < j)
    {
      localObject2 = ab.entrySet().iterator();
      while (((Iterator)localObject2).hasNext())
      {
        localObject3 = (Map.Entry)((Iterator)localObject2).next();
        a(localHashMap, (b)((Map.Entry)localObject3).getKey(), (h.a)((Map.Entry)localObject3).getValue(), paramClass);
      }
      i += 1;
    }
    if (paramArrayOfMethod == null) {
      paramArrayOfMethod = c(paramClass);
    }
    int k = paramArrayOfMethod.length;
    j = 0;
    boolean bool = false;
    while (j < k)
    {
      localObject1 = paramArrayOfMethod[j];
      localObject3 = (t)((Method)localObject1).getAnnotation(t.class);
      if (localObject3 != null)
      {
        localObject2 = ((Method)localObject1).getParameterTypes();
        if (localObject2.length > 0)
        {
          if (localObject2[0].isAssignableFrom(j.class)) {
            i = 1;
          } else {
            throw new IllegalArgumentException("invalid parameter type. Must be one and instanceof LifecycleOwner");
          }
        }
        else {
          i = 0;
        }
        localObject3 = ((t)localObject3).value();
        if (localObject2.length > 1) {
          if (localObject2[1].isAssignableFrom(h.a.class))
          {
            if (localObject3 == h.a.ON_ANY) {
              i = 2;
            } else {
              throw new IllegalArgumentException("Second arg is supported only for ON_ANY value");
            }
          }
          else {
            throw new IllegalArgumentException("invalid parameter type. second arg must be an event");
          }
        }
        if (localObject2.length <= 2)
        {
          a(localHashMap, new b(i, (Method)localObject1), (h.a)localObject3, paramClass);
          bool = true;
        }
      }
      else
      {
        j += 1;
        continue;
      }
      throw new IllegalArgumentException("cannot have more than 2 params");
    }
    paramArrayOfMethod = new a(localHashMap);
    e.put(paramClass, paramArrayOfMethod);
    f.put(paramClass, Boolean.valueOf(bool));
    return paramArrayOfMethod;
  }
  
  private void a(Map<b, h.a> paramMap, b paramB, h.a paramA, Class paramClass)
  {
    h.a localA = (h.a)paramMap.get(paramB);
    if ((localA != null) && (paramA != localA))
    {
      paramMap = b;
      paramB = f.a.a.a.a.b("Method ");
      paramB.append(paramMap.getName());
      paramB.append(" in ");
      paramB.append(paramClass.getName());
      paramB.append(" already declared with different @OnLifecycleEvent value: previous value ");
      paramB.append(localA);
      paramB.append(", new value ");
      paramB.append(paramA);
      throw new IllegalArgumentException(paramB.toString());
    }
    if (localA == null) {
      paramMap.put(paramB, paramA);
    }
  }
  
  private Method[] c(Class paramClass)
  {
    try
    {
      paramClass = paramClass.getDeclaredMethods();
      return paramClass;
    }
    catch (NoClassDefFoundError paramClass)
    {
      throw new IllegalArgumentException("The observer class has some methods that use newer APIs which are not available in the current OS version. Lifecycles cannot access even other methods so you should make sure that your observer classes only access framework classes that are available in your min API level OR use lifecycle:compiler annotation processor.", paramClass);
    }
  }
  
  public a a(Class paramClass)
  {
    a localA = (a)e.get(paramClass);
    if (localA != null) {
      return localA;
    }
    return a(paramClass, null);
  }
  
  public boolean b(Class paramClass)
  {
    if (f.containsKey(paramClass)) {
      return ((Boolean)f.get(paramClass)).booleanValue();
    }
    Method[] arrayOfMethod = c(paramClass);
    int j = arrayOfMethod.length;
    int i = 0;
    while (i < j)
    {
      if ((t)arrayOfMethod[i].getAnnotation(t.class) != null)
      {
        a(paramClass, arrayOfMethod);
        return true;
      }
      i += 1;
    }
    f.put(paramClass, Boolean.valueOf(false));
    return false;
  }
  
  public static class a
  {
    public final Map<h.a, List<a.b>> a;
    public final Map<a.b, h.a> b;
    
    public a(Map<a.b, h.a> paramMap)
    {
      b = paramMap;
      a = new HashMap();
      Iterator localIterator = paramMap.entrySet().iterator();
      while (localIterator.hasNext())
      {
        Map.Entry localEntry = (Map.Entry)localIterator.next();
        h.a localA = (h.a)localEntry.getValue();
        List localList = (List)a.get(localA);
        paramMap = localList;
        if (localList == null)
        {
          paramMap = new ArrayList();
          a.put(localA, paramMap);
        }
        paramMap.add(localEntry.getKey());
      }
    }
    
    public static void a(List<a.b> paramList, j paramJ, h.a paramA, Object paramObject)
    {
      if (paramList != null)
      {
        int i = paramList.size() - 1;
        while (i >= 0)
        {
          ((a.b)paramList.get(i)).a(paramJ, paramA, paramObject);
          i -= 1;
        }
      }
    }
    
    public void a(j paramJ, h.a paramA, Object paramObject)
    {
      a((List)a.get(paramA), paramJ, paramA, paramObject);
      a((List)a.get(h.a.ON_ANY), paramJ, paramA, paramObject);
    }
  }
  
  public static class b
  {
    public final int a;
    public final Method b;
    
    public b(int paramInt, Method paramMethod)
    {
      a = paramInt;
      b = paramMethod;
      b.setAccessible(true);
    }
    
    public void a(j paramJ, h.a paramA, Object paramObject)
    {
      try
      {
        int i = a;
        if (i != 0)
        {
          if (i != 1)
          {
            if (i != 2) {
              return;
            }
            b.invoke(paramObject, new Object[] { paramJ, paramA });
            return;
          }
          b.invoke(paramObject, new Object[] { paramJ });
          return;
        }
        b.invoke(paramObject, new Object[0]);
        return;
      }
      catch (IllegalAccessException paramJ)
      {
        throw new RuntimeException(paramJ);
      }
      catch (InvocationTargetException paramJ)
      {
        throw new RuntimeException("Failed to call observer method", paramJ.getCause());
      }
    }
    
    public boolean equals(Object paramObject)
    {
      if (this == paramObject) {
        return true;
      }
      if (paramObject != null)
      {
        if (b.class != paramObject.getClass()) {
          return false;
        }
        paramObject = (b)paramObject;
        return (a == a) && (b.getName().equals(b.getName()));
      }
      return false;
    }
    
    public int hashCode()
    {
      int i = a;
      return b.getName().hashCode() + i * 31;
    }
  }
}
