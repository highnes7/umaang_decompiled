package b.a.a.b;

import b.b.a.F;
import b.b.a.N;
import java.util.HashMap;
import java.util.Map.Entry;

@N({b.b.a.N.a.b})
public class a<K, V>
  extends c<K, V>
{
  public HashMap<K, c.c<K, V>> e = new HashMap();
  
  public a() {}
  
  public c.c<K, V> b(K paramK)
  {
    return (c.c)e.get(paramK);
  }
  
  public V b(@F K paramK, @F V paramV)
  {
    c.c localC = b(paramK);
    if (localC != null) {
      return b;
    }
    e.put(paramK, a(paramK, paramV));
    return null;
  }
  
  public Map.Entry<K, V> c(K paramK)
  {
    if (contains(paramK)) {
      return e.get(paramK)).d;
    }
    return null;
  }
  
  public boolean contains(K paramK)
  {
    return e.containsKey(paramK);
  }
  
  public V remove(@F K paramK)
  {
    Object localObject = super.remove(paramK);
    e.remove(paramK);
    return localObject;
  }
}
