package b.a.a.a;

import b.b.a.F;
import b.b.a.G;
import b.b.a.N;
import java.util.concurrent.Executor;

@N({b.b.a.N.a.b})
public class c
  extends e
{
  public static volatile c a;
  @F
  public static final Executor b = new a();
  @F
  public static final Executor c = new b();
  @F
  public e d = e;
  @F
  public e e = new d();
  
  public c() {}
  
  @F
  public static Executor b()
  {
    return c;
  }
  
  @F
  public static c c()
  {
    if (a != null) {
      return a;
    }
    try
    {
      if (a == null) {
        a = new c();
      }
      return a;
    }
    finally {}
  }
  
  @F
  public static Executor d()
  {
    return b;
  }
  
  public void a(@G e paramE)
  {
    e localE = paramE;
    if (paramE == null) {
      localE = e;
    }
    d = localE;
  }
  
  public void a(Runnable paramRunnable)
  {
    d.a(paramRunnable);
  }
  
  public boolean a()
  {
    return d.a();
  }
  
  public void c(Runnable paramRunnable)
  {
    d.c(paramRunnable);
  }
}
