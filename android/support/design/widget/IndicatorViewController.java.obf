package android.support.design.widget;

import android.animation.Animator;
import android.animation.AnimatorListenerAdapter;
import android.animation.AnimatorSet;
import android.animation.ObjectAnimator;
import android.content.Context;
import android.content.res.ColorStateList;
import android.content.res.Resources;
import android.graphics.Typeface;
import android.support.design.R.dimen;
import android.support.design.R.id;
import android.support.design.animation.AnimationUtils;
import android.support.design.animation.AnimatorSetCompat;
import android.support.v4.widget.Space;
import android.support.v7.widget.AppCompatTextView;
import android.text.TextUtils;
import android.view.View;
import android.view.ViewGroup;
import android.widget.FrameLayout;
import android.widget.FrameLayout.LayoutParams;
import android.widget.LinearLayout;
import android.widget.LinearLayout.LayoutParams;
import android.widget.TextView;
import b.b.a.G;
import b.b.a.S;
import b.b.a.k;
import b.b.x.o.H;
import b.b.x.p.N;
import java.util.ArrayList;
import java.util.List;

public final class IndicatorViewController
{
  public static final int CAPTION_OPACITY_FADE_ANIMATION_DURATION = 167;
  public static final int CAPTION_STATE_ERROR = 1;
  public static final int CAPTION_STATE_HELPER_TEXT = 2;
  public static final int CAPTION_STATE_NONE = 0;
  public static final int CAPTION_TRANSLATE_Y_ANIMATION_DURATION = 217;
  public static final int COUNTER_INDEX = 2;
  public static final int ERROR_INDEX = 0;
  public static final int HELPER_INDEX = 1;
  @G
  public Animator captionAnimator;
  public FrameLayout captionArea;
  public int captionDisplayed;
  public int captionToShow;
  public final float captionTranslationYPx;
  public int captionViewsAdded;
  public final Context context;
  public boolean errorEnabled;
  public CharSequence errorText;
  public int errorTextAppearance;
  public TextView errorView;
  public CharSequence helperText;
  public boolean helperTextEnabled;
  public int helperTextTextAppearance;
  public TextView helperTextView;
  public LinearLayout indicatorArea;
  public int indicatorsAdded;
  public final TextInputLayout textInputView;
  public Typeface typeface;
  
  public IndicatorViewController(TextInputLayout paramTextInputLayout)
  {
    context = paramTextInputLayout.getContext();
    textInputView = paramTextInputLayout;
    captionTranslationYPx = context.getResources().getDimensionPixelSize(R.dimen.design_textinput_caption_translate_y);
  }
  
  private boolean canAdjustIndicatorPadding()
  {
    return (indicatorArea != null) && (textInputView.getEditText() != null);
  }
  
  private void createCaptionAnimators(List<Animator> paramList, boolean paramBoolean, TextView paramTextView, int paramInt1, int paramInt2, int paramInt3)
  {
    if (paramTextView != null)
    {
      if (!paramBoolean) {
        return;
      }
      if ((paramInt1 == paramInt3) || (paramInt1 == paramInt2))
      {
        if (paramInt3 == paramInt1) {
          paramBoolean = true;
        } else {
          paramBoolean = false;
        }
        paramList.add(createCaptionOpacityAnimator(paramTextView, paramBoolean));
        if (paramInt3 == paramInt1) {
          paramList.add(createCaptionTranslationYAnimator(paramTextView));
        }
      }
    }
  }
  
  private ObjectAnimator createCaptionOpacityAnimator(TextView paramTextView, boolean paramBoolean)
  {
    float f;
    if (paramBoolean) {
      f = 1.0F;
    } else {
      f = 0.0F;
    }
    paramTextView = ObjectAnimator.ofFloat(paramTextView, View.ALPHA, new float[] { f });
    paramTextView.setDuration(167L);
    paramTextView.setInterpolator(AnimationUtils.LINEAR_INTERPOLATOR);
    return paramTextView;
  }
  
  private ObjectAnimator createCaptionTranslationYAnimator(TextView paramTextView)
  {
    paramTextView = ObjectAnimator.ofFloat(paramTextView, View.TRANSLATION_Y, new float[] { -captionTranslationYPx, 0.0F });
    paramTextView.setDuration(217L);
    paramTextView.setInterpolator(AnimationUtils.LINEAR_OUT_SLOW_IN_INTERPOLATOR);
    return paramTextView;
  }
  
  @G
  private TextView getCaptionViewFromDisplayState(int paramInt)
  {
    if (paramInt != 1)
    {
      if (paramInt != 2) {
        return null;
      }
      return helperTextView;
    }
    return errorView;
  }
  
  private boolean isCaptionStateError(int paramInt)
  {
    return (paramInt == 1) && (errorView != null) && (!TextUtils.isEmpty(errorText));
  }
  
  private boolean isCaptionStateHelperText(int paramInt)
  {
    return (paramInt == 2) && (helperTextView != null) && (!TextUtils.isEmpty(helperText));
  }
  
  private void setCaptionViewVisibilities(int paramInt1, int paramInt2)
  {
    if (paramInt1 == paramInt2) {
      return;
    }
    TextView localTextView;
    if (paramInt2 != 0)
    {
      localTextView = getCaptionViewFromDisplayState(paramInt2);
      if (localTextView != null)
      {
        localTextView.setVisibility(0);
        localTextView.setAlpha(1.0F);
      }
    }
    if (paramInt1 != 0)
    {
      localTextView = getCaptionViewFromDisplayState(paramInt1);
      if (localTextView != null)
      {
        localTextView.setVisibility(4);
        if (paramInt1 == 1) {
          localTextView.setText(null);
        }
      }
    }
    captionDisplayed = paramInt2;
  }
  
  private void setTextViewTypeface(@G TextView paramTextView, Typeface paramTypeface)
  {
    if (paramTextView != null) {
      paramTextView.setTypeface(paramTypeface);
    }
  }
  
  private void setViewGroupGoneIfEmpty(ViewGroup paramViewGroup, int paramInt)
  {
    if (paramInt == 0) {
      paramViewGroup.setVisibility(8);
    }
  }
  
  private boolean shouldAnimateCaptionView(TextView paramTextView, @G CharSequence paramCharSequence)
  {
    return (H.fa(textInputView)) && (textInputView.isEnabled()) && ((captionToShow != captionDisplayed) || (paramTextView == null) || (!TextUtils.equals(paramTextView.getText(), paramCharSequence)));
  }
  
  private void updateCaptionViewsVisibility(final int paramInt1, final int paramInt2, boolean paramBoolean)
  {
    if (paramBoolean)
    {
      AnimatorSet localAnimatorSet = new AnimatorSet();
      captionAnimator = localAnimatorSet;
      ArrayList localArrayList = new ArrayList();
      createCaptionAnimators(localArrayList, helperTextEnabled, helperTextView, 2, paramInt1, paramInt2);
      createCaptionAnimators(localArrayList, errorEnabled, errorView, 1, paramInt1, paramInt2);
      AnimatorSetCompat.playTogether(localAnimatorSet, localArrayList);
      localAnimatorSet.addListener(new AnimatorListenerAdapter()
      {
        public void onAnimationEnd(Animator paramAnonymousAnimator)
        {
          paramAnonymousAnimator = IndicatorViewController.this;
          captionDisplayed = paramInt2;
          captionAnimator = null;
          paramAnonymousAnimator = val$captionViewToHide;
          if (paramAnonymousAnimator != null)
          {
            paramAnonymousAnimator.setVisibility(4);
            if (paramInt1 == 1)
            {
              paramAnonymousAnimator = errorView;
              if (paramAnonymousAnimator != null) {
                paramAnonymousAnimator.setText(null);
              }
            }
          }
        }
        
        public void onAnimationStart(Animator paramAnonymousAnimator)
        {
          paramAnonymousAnimator = val$captionViewToShow;
          if (paramAnonymousAnimator != null) {
            paramAnonymousAnimator.setVisibility(0);
          }
        }
      });
      localAnimatorSet.start();
    }
    else
    {
      setCaptionViewVisibilities(paramInt1, paramInt2);
    }
    textInputView.updateEditTextBackground();
    textInputView.updateLabelState(paramBoolean);
    textInputView.updateTextInputBoxState();
  }
  
  public void addIndicator(TextView paramTextView, int paramInt)
  {
    if ((indicatorArea == null) && (captionArea == null))
    {
      indicatorArea = new LinearLayout(context);
      indicatorArea.setOrientation(0);
      textInputView.addView(indicatorArea, -1, -2);
      captionArea = new FrameLayout(context);
      indicatorArea.addView(captionArea, -1, new FrameLayout.LayoutParams(-2, -2));
      Space localSpace = new Space(context, null);
      LinearLayout.LayoutParams localLayoutParams = new LinearLayout.LayoutParams(0, 0, 1.0F);
      indicatorArea.addView(localSpace, localLayoutParams);
      if (textInputView.getEditText() != null) {
        adjustIndicatorPadding();
      }
    }
    if (isCaptionView(paramInt))
    {
      captionArea.setVisibility(0);
      captionArea.addView(paramTextView);
      captionViewsAdded += 1;
    }
    else
    {
      indicatorArea.addView(paramTextView, paramInt);
    }
    indicatorArea.setVisibility(0);
    indicatorsAdded += 1;
  }
  
  public void adjustIndicatorPadding()
  {
    if (canAdjustIndicatorPadding()) {
      H.b(indicatorArea, H.B(textInputView.getEditText()), 0, H.A(textInputView.getEditText()), 0);
    }
  }
  
  public void cancelCaptionAnimator()
  {
    Animator localAnimator = captionAnimator;
    if (localAnimator != null) {
      localAnimator.cancel();
    }
  }
  
  public boolean errorIsDisplayed()
  {
    return isCaptionStateError(captionDisplayed);
  }
  
  public boolean errorShouldBeShown()
  {
    return isCaptionStateError(captionToShow);
  }
  
  public CharSequence getErrorText()
  {
    return errorText;
  }
  
  @k
  public int getErrorViewCurrentTextColor()
  {
    TextView localTextView = errorView;
    if (localTextView != null) {
      return localTextView.getCurrentTextColor();
    }
    return -1;
  }
  
  @G
  public ColorStateList getErrorViewTextColors()
  {
    TextView localTextView = errorView;
    if (localTextView != null) {
      return localTextView.getTextColors();
    }
    return null;
  }
  
  public CharSequence getHelperText()
  {
    return helperText;
  }
  
  @G
  public ColorStateList getHelperTextViewColors()
  {
    TextView localTextView = helperTextView;
    if (localTextView != null) {
      return localTextView.getTextColors();
    }
    return null;
  }
  
  @k
  public int getHelperTextViewCurrentTextColor()
  {
    TextView localTextView = helperTextView;
    if (localTextView != null) {
      return localTextView.getCurrentTextColor();
    }
    return -1;
  }
  
  public boolean helperTextIsDisplayed()
  {
    return isCaptionStateHelperText(captionDisplayed);
  }
  
  public boolean helperTextShouldBeShown()
  {
    return isCaptionStateHelperText(captionToShow);
  }
  
  public void hideError()
  {
    errorText = null;
    cancelCaptionAnimator();
    if (captionDisplayed == 1) {
      if ((helperTextEnabled) && (!TextUtils.isEmpty(helperText))) {
        captionToShow = 2;
      } else {
        captionToShow = 0;
      }
    }
    updateCaptionViewsVisibility(captionDisplayed, captionToShow, shouldAnimateCaptionView(errorView, null));
  }
  
  public void hideHelperText()
  {
    cancelCaptionAnimator();
    if (captionDisplayed == 2) {
      captionToShow = 0;
    }
    updateCaptionViewsVisibility(captionDisplayed, captionToShow, shouldAnimateCaptionView(helperTextView, null));
  }
  
  public boolean isCaptionView(int paramInt)
  {
    boolean bool = true;
    if (paramInt != 0)
    {
      if (paramInt == 1) {
        return true;
      }
      bool = false;
    }
    return bool;
  }
  
  public boolean isErrorEnabled()
  {
    return errorEnabled;
  }
  
  public boolean isHelperTextEnabled()
  {
    return helperTextEnabled;
  }
  
  public void removeIndicator(TextView paramTextView, int paramInt)
  {
    if (indicatorArea == null) {
      return;
    }
    if (isCaptionView(paramInt))
    {
      FrameLayout localFrameLayout = captionArea;
      if (localFrameLayout != null)
      {
        captionViewsAdded -= 1;
        setViewGroupGoneIfEmpty(localFrameLayout, captionViewsAdded);
        captionArea.removeView(paramTextView);
        break label63;
      }
    }
    indicatorArea.removeView(paramTextView);
    label63:
    indicatorsAdded -= 1;
    setViewGroupGoneIfEmpty(indicatorArea, indicatorsAdded);
  }
  
  public void setErrorEnabled(boolean paramBoolean)
  {
    if (errorEnabled == paramBoolean) {
      return;
    }
    cancelCaptionAnimator();
    if (paramBoolean)
    {
      errorView = new AppCompatTextView(context);
      errorView.setId(R.id.textinput_error);
      Typeface localTypeface = typeface;
      if (localTypeface != null) {
        errorView.setTypeface(localTypeface);
      }
      setErrorTextAppearance(errorTextAppearance);
      errorView.setVisibility(4);
      H.i(errorView, 1);
      addIndicator(errorView, 0);
    }
    else
    {
      hideError();
      removeIndicator(errorView, 0);
      errorView = null;
      textInputView.updateEditTextBackground();
      textInputView.updateTextInputBoxState();
    }
    errorEnabled = paramBoolean;
  }
  
  public void setErrorTextAppearance(@S int paramInt)
  {
    errorTextAppearance = paramInt;
    TextView localTextView = errorView;
    if (localTextView != null) {
      textInputView.setTextAppearanceCompatWithErrorFallback(localTextView, paramInt);
    }
  }
  
  public void setErrorViewTextColor(@G ColorStateList paramColorStateList)
  {
    TextView localTextView = errorView;
    if (localTextView != null) {
      localTextView.setTextColor(paramColorStateList);
    }
  }
  
  public void setHelperTextAppearance(@S int paramInt)
  {
    helperTextTextAppearance = paramInt;
    TextView localTextView = helperTextView;
    if (localTextView != null) {
      N.e(localTextView, paramInt);
    }
  }
  
  public void setHelperTextEnabled(boolean paramBoolean)
  {
    if (helperTextEnabled == paramBoolean) {
      return;
    }
    cancelCaptionAnimator();
    if (paramBoolean)
    {
      helperTextView = new AppCompatTextView(context);
      helperTextView.setId(R.id.textinput_helper_text);
      Typeface localTypeface = typeface;
      if (localTypeface != null) {
        helperTextView.setTypeface(localTypeface);
      }
      helperTextView.setVisibility(4);
      H.i(helperTextView, 1);
      setHelperTextAppearance(helperTextTextAppearance);
      addIndicator(helperTextView, 1);
    }
    else
    {
      hideHelperText();
      removeIndicator(helperTextView, 1);
      helperTextView = null;
      textInputView.updateEditTextBackground();
      textInputView.updateTextInputBoxState();
    }
    helperTextEnabled = paramBoolean;
  }
  
  public void setHelperTextViewTextColor(@G ColorStateList paramColorStateList)
  {
    TextView localTextView = helperTextView;
    if (localTextView != null) {
      localTextView.setTextColor(paramColorStateList);
    }
  }
  
  public void setTypefaces(Typeface paramTypeface)
  {
    if (paramTypeface != typeface)
    {
      typeface = paramTypeface;
      TextView localTextView = errorView;
      if (localTextView != null) {
        localTextView.setTypeface(paramTypeface);
      }
      localTextView = helperTextView;
      if (localTextView != null) {
        localTextView.setTypeface(paramTypeface);
      }
    }
  }
  
  public void showError(CharSequence paramCharSequence)
  {
    cancelCaptionAnimator();
    errorText = paramCharSequence;
    errorView.setText(paramCharSequence);
    if (captionDisplayed != 1) {
      captionToShow = 1;
    }
    updateCaptionViewsVisibility(captionDisplayed, captionToShow, shouldAnimateCaptionView(errorView, paramCharSequence));
  }
  
  public void showHelper(CharSequence paramCharSequence)
  {
    cancelCaptionAnimator();
    helperText = paramCharSequence;
    helperTextView.setText(paramCharSequence);
    if (captionDisplayed != 2) {
      captionToShow = 2;
    }
    updateCaptionViewsVisibility(captionDisplayed, captionToShow, shouldAnimateCaptionView(helperTextView, paramCharSequence));
  }
}
