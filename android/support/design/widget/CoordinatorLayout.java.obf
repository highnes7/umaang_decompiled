package android.support.design.widget;

import android.content.Context;
import android.content.res.Resources;
import android.content.res.TypedArray;
import android.graphics.Canvas;
import android.graphics.Paint;
import android.graphics.Rect;
import android.graphics.Region.Op;
import android.graphics.drawable.ColorDrawable;
import android.graphics.drawable.Drawable;
import android.os.Build.VERSION;
import android.os.Parcel;
import android.os.Parcelable;
import android.os.Parcelable.ClassLoaderCreator;
import android.os.Parcelable.Creator;
import android.os.SystemClock;
import android.support.v4.view.AbsSavedState;
import android.text.TextUtils;
import android.util.AttributeSet;
import android.util.DisplayMetrics;
import android.util.SparseArray;
import android.view.Gravity;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.BaseSavedState;
import android.view.View.MeasureSpec;
import android.view.ViewGroup;
import android.view.ViewGroup.LayoutParams;
import android.view.ViewGroup.MarginLayoutParams;
import android.view.ViewGroup.OnHierarchyChangeListener;
import android.view.ViewParent;
import android.view.ViewTreeObserver;
import android.view.ViewTreeObserver.OnPreDrawListener;
import b.b.a.F;
import b.b.a.G;
import b.b.a.N;
import b.b.a.W;
import b.b.a.f;
import b.b.a.k;
import b.b.a.p;
import b.b.a.q;
import b.b.a.v;
import b.b.e.a.a;
import b.b.e.a.i;
import b.b.e.a.j;
import b.b.x.b.c;
import b.b.x.n.o;
import b.b.x.n.r.a;
import b.b.x.n.r.c;
import b.b.x.o.H;
import b.b.x.o.Y;
import b.b.x.o.h;
import b.b.x.o.u;
import b.b.x.o.w;
import b.b.x.o.x;
import b.b.x.p.U;
import b.b.x.p.l;
import java.lang.annotation.Annotation;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.reflect.Constructor;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CoordinatorLayout
  extends ViewGroup
  implements u
{
  public static final Class<?>[] CONSTRUCTOR_PARAMS = { Context.class, AttributeSet.class };
  public static final int EVENT_NESTED_SCROLL = 1;
  public static final int EVENT_PRE_DRAW = 0;
  public static final int EVENT_VIEW_REMOVED = 2;
  public static final String TAG = "CoordinatorLayout";
  public static final Comparator<View> TOP_SORTED_CHILDREN_COMPARATOR;
  public static final int TYPE_ON_INTERCEPT = 0;
  public static final int TYPE_ON_TOUCH = 1;
  public static final String WIDGET_PACKAGE_NAME;
  public static final ThreadLocal<Map<String, Constructor<Behavior>>> sConstructors = new ThreadLocal();
  public static final r.a<Rect> sRectPool = new r.c(12);
  public x mApplyWindowInsetsListener;
  public View mBehaviorTouchView;
  public final l<View> mChildDag = new l();
  public final List<View> mDependencySortedChildren = new ArrayList();
  public boolean mDisallowInterceptReset;
  public boolean mDrawStatusBarBackground;
  public boolean mIsAttachedToWindow;
  public int[] mKeylines;
  public Y mLastInsets;
  public boolean mNeedsPreDrawListener;
  public final w mNestedScrollingParentHelper = new w(this);
  public View mNestedScrollingTarget;
  public ViewGroup.OnHierarchyChangeListener mOnHierarchyChangeListener;
  public OnPreDrawListener mOnPreDrawListener;
  public Paint mScrimPaint;
  public Drawable mStatusBarBackground;
  public final List<View> mTempDependenciesList = new ArrayList();
  public final int[] mTempIntPair = new int[2];
  public final List<View> mTempList1 = new ArrayList();
  
  static
  {
    Object localObject = CoordinatorLayout.class.getPackage();
    if (localObject != null) {
      localObject = ((Package)localObject).getName();
    } else {
      localObject = null;
    }
    WIDGET_PACKAGE_NAME = (String)localObject;
    if (Build.VERSION.SDK_INT >= 21) {
      TOP_SORTED_CHILDREN_COMPARATOR = new ViewElevationComparator();
    } else {
      TOP_SORTED_CHILDREN_COMPARATOR = null;
    }
  }
  
  public CoordinatorLayout(@F Context paramContext)
  {
    this(paramContext, null, a.a.coordinatorLayoutStyle);
  }
  
  public CoordinatorLayout(@F Context paramContext, @G AttributeSet paramAttributeSet)
  {
    this(paramContext, paramAttributeSet, a.a.coordinatorLayoutStyle);
  }
  
  public CoordinatorLayout(@F Context paramContext, @G AttributeSet paramAttributeSet, @f int paramInt)
  {
    super(paramContext, paramAttributeSet, paramInt);
    int i = 0;
    if (paramInt == 0) {
      paramAttributeSet = paramContext.obtainStyledAttributes(paramAttributeSet, a.j.CoordinatorLayout, 0, a.i.Widget_Support_CoordinatorLayout);
    } else {
      paramAttributeSet = paramContext.obtainStyledAttributes(paramAttributeSet, a.j.CoordinatorLayout, paramInt, 0);
    }
    paramInt = paramAttributeSet.getResourceId(a.j.CoordinatorLayout_keylines, 0);
    if (paramInt != 0)
    {
      paramContext = paramContext.getResources();
      mKeylines = paramContext.getIntArray(paramInt);
      float f = getDisplayMetricsdensity;
      int j = mKeylines.length;
      paramInt = i;
      while (paramInt < j)
      {
        paramContext = mKeylines;
        paramContext[paramInt] = ((int)(paramContext[paramInt] * f));
        paramInt += 1;
      }
    }
    mStatusBarBackground = paramAttributeSet.getDrawable(a.j.CoordinatorLayout_statusBarBackground);
    paramAttributeSet.recycle();
    setupForInsets();
    super.setOnHierarchyChangeListener(new HierarchyChangeListener());
  }
  
  @F
  public static Rect acquireTempRect()
  {
    Rect localRect2 = (Rect)sRectPool.a();
    Rect localRect1 = localRect2;
    if (localRect2 == null) {
      localRect1 = new Rect();
    }
    return localRect1;
  }
  
  public static int clamp(int paramInt1, int paramInt2, int paramInt3)
  {
    if (paramInt1 < paramInt2) {
      return paramInt2;
    }
    if (paramInt1 > paramInt3) {
      return paramInt3;
    }
    return paramInt1;
  }
  
  private void constrainChildRect(LayoutParams paramLayoutParams, Rect paramRect, int paramInt1, int paramInt2)
  {
    int j = getWidth();
    int i = getHeight();
    j = Math.max(getPaddingLeft() + leftMargin, Math.min(left, j - getPaddingRight() - paramInt1 - rightMargin));
    i = Math.max(getPaddingTop() + topMargin, Math.min(top, i - getPaddingBottom() - paramInt2 - bottomMargin));
    paramRect.set(j, i, paramInt1 + j, paramInt2 + i);
  }
  
  private Y dispatchApplyWindowInsetsToBehaviors(Y paramY)
  {
    if (paramY.p()) {
      return paramY;
    }
    int i = 0;
    int j = getChildCount();
    for (Y localY = paramY; i < j; localY = paramY)
    {
      View localView = getChildAt(i);
      paramY = localY;
      if (H.m(localView))
      {
        Behavior localBehavior = ((LayoutParams)localView.getLayoutParams()).getBehavior();
        paramY = localY;
        if (localBehavior != null)
        {
          localY = localBehavior.onApplyWindowInsets(this, localView, localY);
          paramY = localY;
          if (localY.p()) {
            return localY;
          }
        }
      }
      i += 1;
    }
    return localY;
  }
  
  private void getDesiredAnchoredChildRectWithoutConstraints(View paramView, int paramInt1, Rect paramRect1, Rect paramRect2, LayoutParams paramLayoutParams, int paramInt2, int paramInt3)
  {
    int j = gravity;
    int i = j;
    if (j == 0) {
      i = 17;
    }
    i = h.a(i, paramInt1);
    paramInt1 = h.a(resolveGravity(anchorGravity), paramInt1);
    int m = i & 0x7;
    int k = i & 0x70;
    j = paramInt1 & 0x7;
    i = paramInt1 & 0x70;
    if (j != 1)
    {
      if (j != 5) {
        paramInt1 = left;
      } else {
        paramInt1 = right;
      }
    }
    else {
      paramInt1 = left + paramRect1.width() / 2;
    }
    if (i != 16)
    {
      if (i != 80) {
        i = top;
      } else {
        i = bottom;
      }
    }
    else {
      i = top + paramRect1.height() / 2;
    }
    if (m != 1)
    {
      j = paramInt1;
      if (m != 5) {
        j = paramInt1 - paramInt2;
      }
    }
    else
    {
      j = paramInt1 - paramInt2 / 2;
    }
    if (k != 16)
    {
      paramInt1 = i;
      if (k != 80) {
        paramInt1 = i - paramInt3;
      }
    }
    else
    {
      paramInt1 = i - paramInt3 / 2;
    }
    paramRect2.set(j, paramInt1, paramInt2 + j, paramInt3 + paramInt1);
  }
  
  private int getKeyline(int paramInt)
  {
    Object localObject = mKeylines;
    if (localObject == null)
    {
      localObject = new StringBuilder();
      ((StringBuilder)localObject).append("No keylines defined for ");
      ((StringBuilder)localObject).append(this);
      ((StringBuilder)localObject).append(" - attempted index lookup ");
      ((StringBuilder)localObject).append(paramInt);
      ((StringBuilder)localObject).toString();
      return 0;
    }
    if ((paramInt >= 0) && (paramInt < localObject.length)) {
      return localObject[paramInt];
    }
    localObject = new StringBuilder();
    ((StringBuilder)localObject).append("Keyline index ");
    ((StringBuilder)localObject).append(paramInt);
    ((StringBuilder)localObject).append(" out of range for ");
    ((StringBuilder)localObject).append(this);
    ((StringBuilder)localObject).toString();
    return 0;
  }
  
  private void getTopSortedChildren(List<View> paramList)
  {
    paramList.clear();
    boolean bool = isChildrenDrawingOrderEnabled();
    int k = getChildCount();
    int i = k - 1;
    while (i >= 0)
    {
      int j;
      if (bool) {
        j = getChildDrawingOrder(k, i);
      } else {
        j = i;
      }
      paramList.add(getChildAt(j));
      i -= 1;
    }
    Comparator localComparator = TOP_SORTED_CHILDREN_COMPARATOR;
    if (localComparator != null) {
      Collections.sort(paramList, localComparator);
    }
  }
  
  private boolean hasDependencies(View paramView)
  {
    return mChildDag.e(paramView);
  }
  
  private void layoutChild(View paramView, int paramInt)
  {
    LayoutParams localLayoutParams = (LayoutParams)paramView.getLayoutParams();
    Rect localRect1 = acquireTempRect();
    localRect1.set(getPaddingLeft() + leftMargin, getPaddingTop() + topMargin, getWidth() - getPaddingRight() - rightMargin, getHeight() - getPaddingBottom() - bottomMargin);
    if ((mLastInsets != null) && (H.m(this)) && (!H.m(paramView)))
    {
      i = left;
      left = (mLastInsets.j() + i);
      i = top;
      top = (mLastInsets.l() + i);
      right -= mLastInsets.k();
      bottom -= mLastInsets.i();
    }
    Rect localRect2 = acquireTempRect();
    int i = resolveGravity(gravity);
    int j = paramView.getMeasuredWidth();
    int k = paramView.getMeasuredHeight();
    int m = Build.VERSION.SDK_INT;
    Gravity.apply(i, j, k, localRect1, localRect2, paramInt);
    paramView.layout(left, top, right, bottom);
    localRect1.setEmpty();
    sRectPool.a(localRect1);
    localRect2.setEmpty();
    sRectPool.a(localRect2);
  }
  
  private void layoutChildWithAnchor(View paramView1, View paramView2, int paramInt)
  {
    Rect localRect1 = acquireTempRect();
    Rect localRect2 = acquireTempRect();
    try
    {
      getDescendantRect(paramView2, localRect1);
      getDesiredAnchoredChildRect(paramView1, paramInt, localRect1, localRect2);
      paramView1.layout(left, top, right, bottom);
      return;
    }
    finally
    {
      localRect1.setEmpty();
      sRectPool.a(localRect1);
      localRect2.setEmpty();
      sRectPool.a(localRect2);
    }
  }
  
  private void layoutChildWithKeyline(View paramView, int paramInt1, int paramInt2)
  {
    LayoutParams localLayoutParams = (LayoutParams)paramView.getLayoutParams();
    int j = gravity;
    int i = j;
    if (j == 0) {
      i = 8388661;
    }
    i = h.a(i, paramInt2);
    int i2 = i & 0x7;
    int i1 = i & 0x70;
    int n = getWidth();
    int m = getHeight();
    j = paramView.getMeasuredWidth();
    int k = paramView.getMeasuredHeight();
    i = paramInt1;
    if (paramInt2 == 1) {
      i = n - paramInt1;
    }
    paramInt1 = getKeyline(i) - j;
    paramInt2 = 0;
    if (i2 != 1)
    {
      if (i2 == 5) {
        paramInt1 += j;
      }
    }
    else {
      paramInt1 += j / 2;
    }
    if (i1 != 16)
    {
      if (i1 == 80) {
        paramInt2 = k + 0;
      }
    }
    else {
      paramInt2 = 0 + k / 2;
    }
    paramInt1 = Math.max(getPaddingLeft() + leftMargin, Math.min(paramInt1, n - getPaddingRight() - j - rightMargin));
    paramInt2 = Math.max(getPaddingTop() + topMargin, Math.min(paramInt2, m - getPaddingBottom() - k - bottomMargin));
    paramView.layout(paramInt1, paramInt2, j + paramInt1, k + paramInt2);
  }
  
  private void offsetChildByInset(View paramView, Rect paramRect, int paramInt)
  {
    if (!H.fa(paramView)) {
      return;
    }
    if (paramView.getWidth() > 0)
    {
      if (paramView.getHeight() <= 0) {
        return;
      }
      LayoutParams localLayoutParams = (LayoutParams)paramView.getLayoutParams();
      Behavior localBehavior = localLayoutParams.getBehavior();
      Rect localRect1 = acquireTempRect();
      Rect localRect2 = acquireTempRect();
      localRect2.set(paramView.getLeft(), paramView.getTop(), paramView.getRight(), paramView.getBottom());
      if ((localBehavior != null) && (localBehavior.getInsetDodgeRect(this, paramView, localRect1)))
      {
        if (!localRect2.contains(localRect1))
        {
          paramView = f.a.a.a.a.b("Rect should be within the child's bounds. Rect:");
          paramView.append(localRect1.toShortString());
          paramView.append(" | Bounds:");
          paramView.append(localRect2.toShortString());
          throw new IllegalArgumentException(paramView.toString());
        }
      }
      else {
        localRect1.set(localRect2);
      }
      localRect2.setEmpty();
      sRectPool.a(localRect2);
      if (localRect1.isEmpty())
      {
        localRect1.setEmpty();
        sRectPool.a(localRect1);
        return;
      }
      int j = h.a(dodgeInsetEdges, paramInt);
      if ((j & 0x30) == 48)
      {
        paramInt = top - topMargin - mInsetOffsetY;
        i = top;
        if (paramInt < i)
        {
          setInsetOffsetY(paramView, i - paramInt);
          paramInt = 1;
          break label262;
        }
      }
      paramInt = 0;
      label262:
      int i = paramInt;
      int k;
      if ((j & 0x50) == 80)
      {
        k = getHeight() - bottom - bottomMargin + mInsetOffsetY;
        int m = bottom;
        i = paramInt;
        if (k < m)
        {
          setInsetOffsetY(paramView, k - m);
          i = 1;
        }
      }
      if (i == 0) {
        setInsetOffsetY(paramView, 0);
      }
      if ((j & 0x3) == 3)
      {
        paramInt = left - leftMargin - mInsetOffsetX;
        i = left;
        if (paramInt < i)
        {
          setInsetOffsetX(paramView, i - paramInt);
          paramInt = 1;
          break label393;
        }
      }
      paramInt = 0;
      label393:
      i = paramInt;
      if ((j & 0x5) == 5)
      {
        j = getWidth() - right - rightMargin + mInsetOffsetX;
        k = right;
        i = paramInt;
        if (j < k)
        {
          setInsetOffsetX(paramView, j - k);
          i = 1;
        }
      }
      if (i == 0) {
        setInsetOffsetX(paramView, 0);
      }
      localRect1.setEmpty();
      sRectPool.a(localRect1);
    }
  }
  
  public static Behavior parseBehavior(Context paramContext, AttributeSet paramAttributeSet, String paramString)
  {
    if (TextUtils.isEmpty(paramString)) {
      return null;
    }
    Object localObject1;
    if (paramString.startsWith("."))
    {
      localObject1 = new StringBuilder();
      ((StringBuilder)localObject1).append(paramContext.getPackageName());
      ((StringBuilder)localObject1).append(paramString);
      localObject1 = ((StringBuilder)localObject1).toString();
    }
    else if (paramString.indexOf('.') >= 0)
    {
      localObject1 = paramString;
    }
    else
    {
      localObject1 = paramString;
      if (!TextUtils.isEmpty(WIDGET_PACKAGE_NAME))
      {
        localObject1 = new StringBuilder();
        ((StringBuilder)localObject1).append(WIDGET_PACKAGE_NAME);
        ((StringBuilder)localObject1).append('.');
        ((StringBuilder)localObject1).append(paramString);
        localObject1 = ((StringBuilder)localObject1).toString();
      }
    }
    try
    {
      Object localObject2 = (Map)sConstructors.get();
      paramString = (String)localObject2;
      if (localObject2 == null)
      {
        paramString = new HashMap();
        sConstructors.set(paramString);
      }
      Constructor localConstructor = (Constructor)paramString.get(localObject1);
      localObject2 = localConstructor;
      if (localConstructor == null)
      {
        localObject2 = paramContext.getClassLoader().loadClass((String)localObject1).getConstructor(CONSTRUCTOR_PARAMS);
        ((Constructor)localObject2).setAccessible(true);
        paramString.put(localObject1, localObject2);
      }
      paramContext = (Behavior)((Constructor)localObject2).newInstance(new Object[] { paramContext, paramAttributeSet });
      return paramContext;
    }
    catch (Exception paramContext)
    {
      throw new RuntimeException(f.a.a.a.a.c("Could not inflate Behavior subclass ", (String)localObject1), paramContext);
    }
  }
  
  private boolean performIntercept(MotionEvent paramMotionEvent, int paramInt)
  {
    int m = paramMotionEvent.getActionMasked();
    List localList = mTempList1;
    getTopSortedChildren(localList);
    int n = localList.size();
    Object localObject1 = null;
    int j = 0;
    boolean bool1 = false;
    int i = 0;
    boolean bool2;
    for (;;)
    {
      bool2 = bool1;
      if (j >= n) {
        break;
      }
      View localView = (View)localList.get(j);
      Object localObject2 = (LayoutParams)localView.getLayoutParams();
      Behavior localBehavior = ((LayoutParams)localObject2).getBehavior();
      int k = 1;
      if (((bool1) || (i != 0)) && (m != 0))
      {
        bool2 = bool1;
        k = i;
        localObject2 = localObject1;
        if (localBehavior != null)
        {
          localObject2 = localObject1;
          if (localObject1 == null)
          {
            long l = SystemClock.uptimeMillis();
            localObject2 = MotionEvent.obtain(l, l, 3, 0.0F, 0.0F, 0);
          }
          if (paramInt != 0)
          {
            if (paramInt != 1)
            {
              bool2 = bool1;
              k = i;
            }
            else
            {
              localBehavior.onTouchEvent(this, localView, (MotionEvent)localObject2);
              bool2 = bool1;
              k = i;
            }
          }
          else
          {
            localBehavior.onInterceptTouchEvent(this, localView, (MotionEvent)localObject2);
            bool2 = bool1;
            k = i;
          }
        }
      }
      else
      {
        bool2 = bool1;
        if (!bool1)
        {
          bool2 = bool1;
          if (localBehavior != null)
          {
            if (paramInt != 0)
            {
              if (paramInt == 1) {
                bool1 = localBehavior.onTouchEvent(this, localView, paramMotionEvent);
              }
            }
            else {
              bool1 = localBehavior.onInterceptTouchEvent(this, localView, paramMotionEvent);
            }
            bool2 = bool1;
            if (bool1)
            {
              mBehaviorTouchView = localView;
              bool2 = bool1;
            }
          }
        }
        bool1 = ((LayoutParams)localObject2).didBlockInteraction();
        boolean bool3 = ((LayoutParams)localObject2).isBlockingInteractionBelow(this, localView);
        if ((bool3) && (!bool1)) {
          i = k;
        } else {
          i = 0;
        }
        if ((bool3) && (i == 0)) {
          break;
        }
        localObject2 = localObject1;
        k = i;
      }
      j += 1;
      bool1 = bool2;
      i = k;
      localObject1 = localObject2;
    }
    localList.clear();
    return bool2;
  }
  
  private void prepareChildren()
  {
    mDependencySortedChildren.clear();
    mChildDag.a();
    int k = getChildCount();
    int i = 0;
    while (i < k)
    {
      View localView1 = getChildAt(i);
      LayoutParams localLayoutParams = getResolvedLayoutParams(localView1);
      localLayoutParams.findAnchorView(this, localView1);
      mChildDag.a(localView1);
      int j = 0;
      while (j < k)
      {
        if (j != i)
        {
          View localView2 = getChildAt(j);
          if (localLayoutParams.dependsOn(this, localView1, localView2))
          {
            if (!mChildDag.b(localView2)) {
              mChildDag.a(localView2);
            }
            mChildDag.a(localView2, localView1);
          }
        }
        j += 1;
      }
      i += 1;
    }
    mDependencySortedChildren.addAll(mChildDag.b());
    Collections.reverse(mDependencySortedChildren);
  }
  
  public static void releaseTempRect(@F Rect paramRect)
  {
    paramRect.setEmpty();
    sRectPool.a(paramRect);
  }
  
  private void resetTouchBehaviors(boolean paramBoolean)
  {
    int j = getChildCount();
    int i = 0;
    while (i < j)
    {
      View localView = getChildAt(i);
      Behavior localBehavior = ((LayoutParams)localView.getLayoutParams()).getBehavior();
      if (localBehavior != null)
      {
        long l = SystemClock.uptimeMillis();
        MotionEvent localMotionEvent = MotionEvent.obtain(l, l, 3, 0.0F, 0.0F, 0);
        if (paramBoolean) {
          localBehavior.onInterceptTouchEvent(this, localView, localMotionEvent);
        } else {
          localBehavior.onTouchEvent(this, localView, localMotionEvent);
        }
        localMotionEvent.recycle();
      }
      i += 1;
    }
    i = 0;
    while (i < j)
    {
      ((LayoutParams)getChildAt(i).getLayoutParams()).resetTouchBehaviorTracking();
      i += 1;
    }
    mBehaviorTouchView = null;
    mDisallowInterceptReset = false;
  }
  
  public static int resolveAnchoredChildGravity(int paramInt)
  {
    int i = paramInt;
    if (paramInt == 0) {
      i = 17;
    }
    return i;
  }
  
  public static int resolveGravity(int paramInt)
  {
    int i = paramInt;
    if ((paramInt & 0x7) == 0) {
      i = paramInt | 0x800003;
    }
    paramInt = i;
    if ((i & 0x70) == 0) {
      paramInt = i | 0x30;
    }
    return paramInt;
  }
  
  public static int resolveKeylineGravity(int paramInt)
  {
    int i = paramInt;
    if (paramInt == 0) {
      i = 8388661;
    }
    return i;
  }
  
  private void setInsetOffsetX(View paramView, int paramInt)
  {
    LayoutParams localLayoutParams = (LayoutParams)paramView.getLayoutParams();
    int i = mInsetOffsetX;
    if (i != paramInt)
    {
      H.f(paramView, paramInt - i);
      mInsetOffsetX = paramInt;
    }
  }
  
  private void setInsetOffsetY(View paramView, int paramInt)
  {
    LayoutParams localLayoutParams = (LayoutParams)paramView.getLayoutParams();
    int i = mInsetOffsetY;
    if (i != paramInt)
    {
      H.g(paramView, paramInt - i);
      mInsetOffsetY = paramInt;
    }
  }
  
  private void setupForInsets()
  {
    if (Build.VERSION.SDK_INT < 21) {
      return;
    }
    if (H.m(this))
    {
      if (mApplyWindowInsetsListener == null) {
        mApplyWindowInsetsListener = new x()
        {
          public Y onApplyWindowInsets(View paramAnonymousView, Y paramAnonymousY)
          {
            return setWindowInsets(paramAnonymousY);
          }
        };
      }
      H.a(this, mApplyWindowInsetsListener);
      setSystemUiVisibility(1280);
      return;
    }
    H.a(this, null);
  }
  
  public void addPreDrawListener()
  {
    if (mIsAttachedToWindow)
    {
      if (mOnPreDrawListener == null) {
        mOnPreDrawListener = new OnPreDrawListener();
      }
      getViewTreeObserver().addOnPreDrawListener(mOnPreDrawListener);
    }
    mNeedsPreDrawListener = true;
  }
  
  public boolean checkLayoutParams(ViewGroup.LayoutParams paramLayoutParams)
  {
    return ((paramLayoutParams instanceof LayoutParams)) && (super.checkLayoutParams(paramLayoutParams));
  }
  
  public void dispatchDependentViewsChanged(@F View paramView)
  {
    List localList = mChildDag.c(paramView);
    if ((localList != null) && (!localList.isEmpty()))
    {
      int i = 0;
      while (i < localList.size())
      {
        View localView = (View)localList.get(i);
        Behavior localBehavior = ((LayoutParams)localView.getLayoutParams()).getBehavior();
        if (localBehavior != null) {
          localBehavior.onDependentViewChanged(this, localView, paramView);
        }
        i += 1;
      }
    }
  }
  
  public boolean doViewsOverlap(@F View paramView1, @F View paramView2)
  {
    int i = paramView1.getVisibility();
    boolean bool2 = false;
    if ((i == 0) && (paramView2.getVisibility() == 0))
    {
      Rect localRect = acquireTempRect();
      if (paramView1.getParent() != this) {
        bool1 = true;
      } else {
        bool1 = false;
      }
      getChildRect(paramView1, bool1, localRect);
      paramView1 = acquireTempRect();
      if (paramView2.getParent() != this) {
        bool1 = true;
      } else {
        bool1 = false;
      }
      getChildRect(paramView2, bool1, paramView1);
      boolean bool1 = bool2;
      try
      {
        if (left <= right)
        {
          bool1 = bool2;
          if (top <= bottom)
          {
            bool1 = bool2;
            if (right >= left)
            {
              i = bottom;
              int j = top;
              bool1 = bool2;
              if (i >= j) {
                bool1 = true;
              }
            }
          }
        }
        return bool1;
      }
      finally
      {
        localRect.setEmpty();
        sRectPool.a(localRect);
        paramView1.setEmpty();
        sRectPool.a(paramView1);
      }
    }
    return false;
  }
  
  public boolean drawChild(Canvas paramCanvas, View paramView, long paramLong)
  {
    LayoutParams localLayoutParams = (LayoutParams)paramView.getLayoutParams();
    Behavior localBehavior = mBehavior;
    if (localBehavior != null)
    {
      float f = localBehavior.getScrimOpacity(this, paramView);
      if (f > 0.0F)
      {
        if (mScrimPaint == null) {
          mScrimPaint = new Paint();
        }
        mScrimPaint.setColor(mBehavior.getScrimColor(this, paramView));
        mScrimPaint.setAlpha(clamp(Math.round(f * 255.0F), 0, 255));
        int i = paramCanvas.save();
        if (paramView.isOpaque()) {
          paramCanvas.clipRect(paramView.getLeft(), paramView.getTop(), paramView.getRight(), paramView.getBottom(), Region.Op.DIFFERENCE);
        }
        paramCanvas.drawRect(getPaddingLeft(), getPaddingTop(), getWidth() - getPaddingRight(), getHeight() - getPaddingBottom(), mScrimPaint);
        paramCanvas.restoreToCount(i);
      }
    }
    return super.drawChild(paramCanvas, paramView, paramLong);
  }
  
  public void drawableStateChanged()
  {
    super.drawableStateChanged();
    int[] arrayOfInt = getDrawableState();
    Drawable localDrawable = mStatusBarBackground;
    boolean bool2 = false;
    boolean bool1 = bool2;
    if (localDrawable != null)
    {
      bool1 = bool2;
      if (localDrawable.isStateful()) {
        bool1 = false | localDrawable.setState(arrayOfInt);
      }
    }
    if (bool1) {
      invalidate();
    }
  }
  
  public void ensurePreDrawListener()
  {
    int j = getChildCount();
    int m = 0;
    int i = 0;
    int k;
    for (;;)
    {
      k = m;
      if (i >= j) {
        break;
      }
      if (hasDependencies(getChildAt(i)))
      {
        k = 1;
        break;
      }
      i += 1;
    }
    if (k != mNeedsPreDrawListener)
    {
      if (k != 0)
      {
        addPreDrawListener();
        return;
      }
      removePreDrawListener();
    }
  }
  
  public LayoutParams generateDefaultLayoutParams()
  {
    return new LayoutParams(-2, -2);
  }
  
  public LayoutParams generateLayoutParams(AttributeSet paramAttributeSet)
  {
    return new LayoutParams(getContext(), paramAttributeSet);
  }
  
  public LayoutParams generateLayoutParams(ViewGroup.LayoutParams paramLayoutParams)
  {
    if ((paramLayoutParams instanceof LayoutParams)) {
      return new LayoutParams((LayoutParams)paramLayoutParams);
    }
    if ((paramLayoutParams instanceof ViewGroup.MarginLayoutParams)) {
      return new LayoutParams((ViewGroup.MarginLayoutParams)paramLayoutParams);
    }
    return new LayoutParams(paramLayoutParams);
  }
  
  public void getChildRect(View paramView, boolean paramBoolean, Rect paramRect)
  {
    if ((!paramView.isLayoutRequested()) && (paramView.getVisibility() != 8))
    {
      if (paramBoolean)
      {
        getDescendantRect(paramView, paramRect);
        return;
      }
      paramRect.set(paramView.getLeft(), paramView.getTop(), paramView.getRight(), paramView.getBottom());
      return;
    }
    paramRect.setEmpty();
  }
  
  @F
  public List<View> getDependencies(@F View paramView)
  {
    paramView = mChildDag.d(paramView);
    mTempDependenciesList.clear();
    if (paramView != null) {
      mTempDependenciesList.addAll(paramView);
    }
    return mTempDependenciesList;
  }
  
  @W
  public final List<View> getDependencySortedChildren()
  {
    prepareChildren();
    return Collections.unmodifiableList(mDependencySortedChildren);
  }
  
  @F
  public List<View> getDependents(@F View paramView)
  {
    paramView = mChildDag.c(paramView);
    mTempDependenciesList.clear();
    if (paramView != null) {
      mTempDependenciesList.addAll(paramView);
    }
    return mTempDependenciesList;
  }
  
  public void getDescendantRect(View paramView, Rect paramRect)
  {
    U.a(this, paramView, paramRect);
  }
  
  public void getDesiredAnchoredChildRect(View paramView, int paramInt, Rect paramRect1, Rect paramRect2)
  {
    LayoutParams localLayoutParams = (LayoutParams)paramView.getLayoutParams();
    int i = paramView.getMeasuredWidth();
    int j = paramView.getMeasuredHeight();
    getDesiredAnchoredChildRectWithoutConstraints(paramView, paramInt, paramRect1, paramRect2, localLayoutParams, i, j);
    constrainChildRect(localLayoutParams, paramRect2, i, j);
  }
  
  public void getLastChildRect(View paramView, Rect paramRect)
  {
    paramRect.set(((LayoutParams)paramView.getLayoutParams()).getLastChildRect());
  }
  
  @N({b.b.a.N.a.b})
  public final Y getLastWindowInsets()
  {
    return mLastInsets;
  }
  
  public int getNestedScrollAxes()
  {
    return mNestedScrollingParentHelper.a();
  }
  
  public LayoutParams getResolvedLayoutParams(View paramView)
  {
    LayoutParams localLayoutParams = (LayoutParams)paramView.getLayoutParams();
    if (!mBehaviorResolved)
    {
      if ((paramView instanceof AttachedBehavior))
      {
        localLayoutParams.setBehavior(((AttachedBehavior)paramView).getBehavior());
        mBehaviorResolved = true;
        return localLayoutParams;
      }
      localObject = paramView.getClass();
      DefaultBehavior localDefaultBehavior;
      for (paramView = null; localObject != null; paramView = localDefaultBehavior)
      {
        localDefaultBehavior = (DefaultBehavior)((Class)localObject).getAnnotation(DefaultBehavior.class);
        paramView = localDefaultBehavior;
        if (localDefaultBehavior != null) {
          break;
        }
        localObject = ((Class)localObject).getSuperclass();
      }
      if (paramView == null) {}
    }
    try
    {
      localLayoutParams.setBehavior((Behavior)paramView.value().getDeclaredConstructor(new Class[0]).newInstance(new Object[0]));
    }
    catch (Exception localException)
    {
      for (;;) {}
    }
    Object localObject = f.a.a.a.a.b("Default behavior class ");
    ((StringBuilder)localObject).append(paramView.value().getName());
    ((StringBuilder)localObject).append(" could not be instantiated. Did you forget");
    ((StringBuilder)localObject).append(" a default constructor?");
    ((StringBuilder)localObject).toString();
    mBehaviorResolved = true;
    return localLayoutParams;
  }
  
  @G
  public Drawable getStatusBarBackground()
  {
    return mStatusBarBackground;
  }
  
  public int getSuggestedMinimumHeight()
  {
    int i = super.getSuggestedMinimumHeight();
    int j = getPaddingTop();
    return Math.max(i, getPaddingBottom() + j);
  }
  
  public int getSuggestedMinimumWidth()
  {
    int i = super.getSuggestedMinimumWidth();
    int j = getPaddingLeft();
    return Math.max(i, getPaddingRight() + j);
  }
  
  public boolean isPointInChildBounds(@F View paramView, int paramInt1, int paramInt2)
  {
    Rect localRect = acquireTempRect();
    getDescendantRect(paramView, localRect);
    try
    {
      boolean bool = localRect.contains(paramInt1, paramInt2);
      return bool;
    }
    finally
    {
      localRect.setEmpty();
      sRectPool.a(localRect);
    }
  }
  
  public void offsetChildToAnchor(View paramView, int paramInt)
  {
    LayoutParams localLayoutParams = (LayoutParams)paramView.getLayoutParams();
    if (mAnchorView != null)
    {
      Rect localRect1 = acquireTempRect();
      Rect localRect2 = acquireTempRect();
      Rect localRect3 = acquireTempRect();
      getDescendantRect(mAnchorView, localRect1);
      int i = 0;
      getChildRect(paramView, false, localRect2);
      int j = paramView.getMeasuredWidth();
      int k = paramView.getMeasuredHeight();
      getDesiredAnchoredChildRectWithoutConstraints(paramView, paramInt, localRect1, localRect3, localLayoutParams, j, k);
      if (left == left)
      {
        paramInt = i;
        if (top == top) {}
      }
      else
      {
        paramInt = 1;
      }
      constrainChildRect(localLayoutParams, localRect3, j, k);
      i = left - left;
      j = top - top;
      if (i != 0) {
        H.f(paramView, i);
      }
      if (j != 0) {
        H.g(paramView, j);
      }
      if (paramInt != 0)
      {
        Behavior localBehavior = localLayoutParams.getBehavior();
        if (localBehavior != null) {
          localBehavior.onDependentViewChanged(this, paramView, mAnchorView);
        }
      }
      localRect1.setEmpty();
      sRectPool.a(localRect1);
      localRect2.setEmpty();
      sRectPool.a(localRect2);
      localRect3.setEmpty();
      sRectPool.a(localRect3);
    }
  }
  
  public void onAttachedToWindow()
  {
    super.onAttachedToWindow();
    resetTouchBehaviors(false);
    if (mNeedsPreDrawListener)
    {
      if (mOnPreDrawListener == null) {
        mOnPreDrawListener = new OnPreDrawListener();
      }
      getViewTreeObserver().addOnPreDrawListener(mOnPreDrawListener);
    }
    if ((mLastInsets == null) && (H.m(this))) {
      H.ma(this);
    }
    mIsAttachedToWindow = true;
  }
  
  public final void onChildViewsChanged(int paramInt)
  {
    int k = H.r(this);
    int m = mDependencySortedChildren.size();
    Rect localRect1 = acquireTempRect();
    Rect localRect2 = acquireTempRect();
    Rect localRect3 = acquireTempRect();
    int i = 0;
    while (i < m)
    {
      View localView = (View)mDependencySortedChildren.get(i);
      Object localObject1 = (LayoutParams)localView.getLayoutParams();
      if ((paramInt != 0) || (localView.getVisibility() != 8))
      {
        int j = 0;
        Object localObject2;
        while (j < i)
        {
          localObject2 = (View)mDependencySortedChildren.get(j);
          if (mAnchorDirectChild == localObject2) {
            offsetChildToAnchor(localView, k);
          }
          j += 1;
        }
        getChildRect(localView, true, localRect2);
        if ((insetEdge != 0) && (!localRect2.isEmpty()))
        {
          j = h.a(insetEdge, k);
          int n = j & 0x70;
          if (n != 48)
          {
            if (n == 80) {
              bottom = Math.max(bottom, getHeight() - top);
            }
          }
          else {
            top = Math.max(top, bottom);
          }
          j &= 0x7;
          if (j != 3)
          {
            if (j == 5) {
              right = Math.max(right, getWidth() - left);
            }
          }
          else {
            left = Math.max(left, right);
          }
        }
        if ((dodgeInsetEdges != 0) && (localView.getVisibility() == 0)) {
          offsetChildByInset(localView, localRect1, k);
        }
        if (paramInt != 2)
        {
          getLastChildRect(localView, localRect3);
          if (!localRect3.equals(localRect2)) {
            recordLastChildRect(localView, localRect2);
          }
        }
        else
        {
          j = i + 1;
          while (j < m)
          {
            localObject1 = (View)mDependencySortedChildren.get(j);
            localObject2 = (LayoutParams)((View)localObject1).getLayoutParams();
            Behavior localBehavior = ((LayoutParams)localObject2).getBehavior();
            if ((localBehavior != null) && (localBehavior.layoutDependsOn(this, (View)localObject1, localView))) {
              if ((paramInt == 0) && (((LayoutParams)localObject2).getChangedAfterNestedScroll()))
              {
                ((LayoutParams)localObject2).resetChangedAfterNestedScroll();
              }
              else
              {
                boolean bool;
                if (paramInt != 2)
                {
                  bool = localBehavior.onDependentViewChanged(this, (View)localObject1, localView);
                }
                else
                {
                  localBehavior.onDependentViewRemoved(this, (View)localObject1, localView);
                  bool = true;
                }
                if (paramInt == 1) {
                  ((LayoutParams)localObject2).setChangedAfterNestedScroll(bool);
                }
              }
            }
            j += 1;
          }
        }
      }
      i += 1;
    }
    localRect1.setEmpty();
    sRectPool.a(localRect1);
    localRect2.setEmpty();
    sRectPool.a(localRect2);
    localRect3.setEmpty();
    sRectPool.a(localRect3);
  }
  
  public void onDetachedFromWindow()
  {
    super.onDetachedFromWindow();
    resetTouchBehaviors(false);
    if ((mNeedsPreDrawListener) && (mOnPreDrawListener != null)) {
      getViewTreeObserver().removeOnPreDrawListener(mOnPreDrawListener);
    }
    View localView = mNestedScrollingTarget;
    if (localView != null) {
      onStopNestedScroll(localView);
    }
    mIsAttachedToWindow = false;
  }
  
  public void onDraw(Canvas paramCanvas)
  {
    super.onDraw(paramCanvas);
    if ((mDrawStatusBarBackground) && (mStatusBarBackground != null))
    {
      Y localY = mLastInsets;
      int i;
      if (localY != null) {
        i = localY.l();
      } else {
        i = 0;
      }
      if (i > 0)
      {
        mStatusBarBackground.setBounds(0, 0, getWidth(), i);
        mStatusBarBackground.draw(paramCanvas);
      }
    }
  }
  
  public boolean onInterceptTouchEvent(MotionEvent paramMotionEvent)
  {
    int i = paramMotionEvent.getActionMasked();
    if (i == 0) {
      resetTouchBehaviors(true);
    }
    boolean bool = performIntercept(paramMotionEvent, 0);
    if ((i == 1) || (i == 3)) {
      resetTouchBehaviors(true);
    }
    return bool;
  }
  
  public void onLayout(boolean paramBoolean, int paramInt1, int paramInt2, int paramInt3, int paramInt4)
  {
    paramInt2 = H.r(this);
    paramInt3 = mDependencySortedChildren.size();
    paramInt1 = 0;
    while (paramInt1 < paramInt3)
    {
      View localView = (View)mDependencySortedChildren.get(paramInt1);
      if (localView.getVisibility() != 8)
      {
        Behavior localBehavior = ((LayoutParams)localView.getLayoutParams()).getBehavior();
        if ((localBehavior == null) || (!localBehavior.onLayoutChild(this, localView, paramInt2))) {
          onLayoutChild(localView, paramInt2);
        }
      }
      paramInt1 += 1;
    }
  }
  
  public void onLayoutChild(@F View paramView, int paramInt)
  {
    LayoutParams localLayoutParams = (LayoutParams)paramView.getLayoutParams();
    if (!localLayoutParams.checkAnchorChanged())
    {
      View localView = mAnchorView;
      if (localView != null)
      {
        layoutChildWithAnchor(paramView, localView, paramInt);
        return;
      }
      int i = keyline;
      if (i >= 0)
      {
        layoutChildWithKeyline(paramView, i, paramInt);
        return;
      }
      layoutChild(paramView, paramInt);
      return;
    }
    throw new IllegalStateException("An anchor may not be changed after CoordinatorLayout measurement begins before layout is complete.");
  }
  
  public void onMeasure(int paramInt1, int paramInt2)
  {
    prepareChildren();
    ensurePreDrawListener();
    int i6 = getPaddingLeft();
    int i7 = getPaddingTop();
    int i8 = getPaddingRight();
    int i9 = getPaddingBottom();
    int i10 = H.r(this);
    int k;
    if (i10 == 1) {
      k = 1;
    } else {
      k = 0;
    }
    int i11 = View.MeasureSpec.getMode(paramInt1);
    int i12 = View.MeasureSpec.getSize(paramInt1);
    int i13 = View.MeasureSpec.getMode(paramInt2);
    int i14 = View.MeasureSpec.getSize(paramInt2);
    int i3 = getSuggestedMinimumWidth();
    int i = getSuggestedMinimumHeight();
    int m;
    if ((mLastInsets != null) && (H.m(this))) {
      m = 1;
    } else {
      m = 0;
    }
    int n = mDependencySortedChildren.size();
    int i2 = 0;
    int i1 = 0;
    while (i1 < n)
    {
      View localView = (View)mDependencySortedChildren.get(i1);
      if (localView.getVisibility() != 8)
      {
        LayoutParams localLayoutParams = (LayoutParams)localView.getLayoutParams();
        int j = keyline;
        int i4;
        if ((j >= 0) && (i11 != 0))
        {
          i5 = getKeyline(j);
          i4 = gravity;
          j = i4;
          if (i4 == 0) {
            j = 8388661;
          }
          j = h.a(j, i10) & 0x7;
          if (((j == 3) && (k == 0)) || ((j == 5) && (k != 0)))
          {
            j = Math.max(0, i12 - i8 - i5);
            break label310;
          }
          if (((j == 5) && (k == 0)) || ((j == 3) && (k != 0)))
          {
            j = Math.max(0, i5 - i6);
            break label310;
          }
        }
        j = 0;
        label310:
        int i5 = i;
        if ((m != 0) && (!H.m(localView)))
        {
          i = mLastInsets.j();
          int i16 = mLastInsets.k();
          i4 = mLastInsets.l();
          int i15 = mLastInsets.i();
          i = View.MeasureSpec.makeMeasureSpec(i12 - (i16 + i), i11);
          i4 = View.MeasureSpec.makeMeasureSpec(i14 - (i15 + i4), i13);
        }
        else
        {
          i = paramInt1;
          i4 = paramInt2;
        }
        Behavior localBehavior = localLayoutParams.getBehavior();
        if (localBehavior != null) {
          if (localBehavior.onMeasureChild(this, localView, i, j, i4, 0)) {
            break label441;
          }
        }
        onMeasureChild(localView, i, j, i4, 0);
        label441:
        i3 = Math.max(i3, localView.getMeasuredWidth() + (i6 + i8) + leftMargin + rightMargin);
        i = Math.max(i5, localView.getMeasuredHeight() + (i7 + i9) + topMargin + bottomMargin);
        i2 = View.combineMeasuredStates(i2, localView.getMeasuredState());
      }
      i1 += 1;
    }
    setMeasuredDimension(View.resolveSizeAndState(i3, paramInt1, 0xFF000000 & i2), View.resolveSizeAndState(i, paramInt2, i2 << 16));
  }
  
  public void onMeasureChild(View paramView, int paramInt1, int paramInt2, int paramInt3, int paramInt4)
  {
    measureChildWithMargins(paramView, paramInt1, paramInt2, paramInt3, paramInt4);
  }
  
  public boolean onNestedFling(View paramView, float paramFloat1, float paramFloat2, boolean paramBoolean)
  {
    int j = getChildCount();
    int i = 0;
    boolean bool2;
    for (boolean bool1 = false; i < j; bool1 = bool2)
    {
      View localView = getChildAt(i);
      if (localView.getVisibility() == 8)
      {
        bool2 = bool1;
      }
      else
      {
        Object localObject = (LayoutParams)localView.getLayoutParams();
        if (!((LayoutParams)localObject).isNestedScrollAccepted(0))
        {
          bool2 = bool1;
        }
        else
        {
          localObject = ((LayoutParams)localObject).getBehavior();
          bool2 = bool1;
          if (localObject != null) {
            bool2 = bool1 | ((Behavior)localObject).onNestedFling(this, localView, paramView, paramFloat1, paramFloat2, paramBoolean);
          }
        }
      }
      i += 1;
    }
    if (bool1) {
      onChildViewsChanged(1);
    }
    return bool1;
  }
  
  public boolean onNestedPreFling(View paramView, float paramFloat1, float paramFloat2)
  {
    int j = getChildCount();
    int i = 0;
    boolean bool2;
    for (boolean bool1 = false; i < j; bool1 = bool2)
    {
      View localView = getChildAt(i);
      if (localView.getVisibility() == 8)
      {
        bool2 = bool1;
      }
      else
      {
        Object localObject = (LayoutParams)localView.getLayoutParams();
        if (!((LayoutParams)localObject).isNestedScrollAccepted(0))
        {
          bool2 = bool1;
        }
        else
        {
          localObject = ((LayoutParams)localObject).getBehavior();
          bool2 = bool1;
          if (localObject != null) {
            bool2 = bool1 | ((Behavior)localObject).onNestedPreFling(this, localView, paramView, paramFloat1, paramFloat2);
          }
        }
      }
      i += 1;
    }
    return bool1;
  }
  
  public void onNestedPreScroll(View paramView, int paramInt1, int paramInt2, int[] paramArrayOfInt)
  {
    onNestedPreScroll(paramView, paramInt1, paramInt2, paramArrayOfInt, 0);
  }
  
  public void onNestedPreScroll(View paramView, int paramInt1, int paramInt2, int[] paramArrayOfInt, int paramInt3)
  {
    int i2 = getChildCount();
    int i1 = 0;
    int k = 0;
    int m = 0;
    int i;
    for (int j = 0; k < i2; j = i)
    {
      View localView = getChildAt(k);
      int n;
      if (localView.getVisibility() == 8)
      {
        n = m;
        i = j;
      }
      else
      {
        Object localObject = (LayoutParams)localView.getLayoutParams();
        if (!((LayoutParams)localObject).isNestedScrollAccepted(paramInt3))
        {
          n = m;
          i = j;
        }
        else
        {
          localObject = ((LayoutParams)localObject).getBehavior();
          n = m;
          i = j;
          if (localObject != null)
          {
            int[] arrayOfInt = mTempIntPair;
            arrayOfInt[1] = 0;
            arrayOfInt[0] = 0;
            ((Behavior)localObject).onNestedPreScroll(this, localView, paramView, paramInt1, paramInt2, arrayOfInt, paramInt3);
            if (paramInt1 > 0) {
              i = Math.max(m, mTempIntPair[0]);
            } else {
              i = Math.min(m, mTempIntPair[0]);
            }
            if (paramInt2 > 0) {
              j = Math.max(j, mTempIntPair[1]);
            } else {
              j = Math.min(j, mTempIntPair[1]);
            }
            n = i;
            i = j;
            i1 = 1;
          }
        }
      }
      k += 1;
      m = n;
    }
    paramArrayOfInt[0] = m;
    paramArrayOfInt[1] = j;
    if (i1 != 0) {
      onChildViewsChanged(1);
    }
  }
  
  public void onNestedScroll(View paramView, int paramInt1, int paramInt2, int paramInt3, int paramInt4)
  {
    onNestedScroll(paramView, paramInt1, paramInt2, paramInt3, paramInt4, 0);
  }
  
  public void onNestedScroll(View paramView, int paramInt1, int paramInt2, int paramInt3, int paramInt4, int paramInt5)
  {
    int k = getChildCount();
    int j = 0;
    int i = 0;
    while (i < k)
    {
      View localView = getChildAt(i);
      if (localView.getVisibility() != 8)
      {
        Object localObject = (LayoutParams)localView.getLayoutParams();
        if (((LayoutParams)localObject).isNestedScrollAccepted(paramInt5))
        {
          localObject = ((LayoutParams)localObject).getBehavior();
          if (localObject != null)
          {
            ((Behavior)localObject).onNestedScroll(this, localView, paramView, paramInt1, paramInt2, paramInt3, paramInt4, paramInt5);
            j = 1;
          }
        }
      }
      i += 1;
    }
    if (j != 0) {
      onChildViewsChanged(1);
    }
  }
  
  public void onNestedScrollAccepted(View paramView1, View paramView2, int paramInt)
  {
    onNestedScrollAccepted(paramView1, paramView2, paramInt, 0);
  }
  
  public void onNestedScrollAccepted(View paramView1, View paramView2, int paramInt1, int paramInt2)
  {
    mNestedScrollingParentHelper.a(paramView1, paramView2, paramInt1, paramInt2);
    mNestedScrollingTarget = paramView2;
    int j = getChildCount();
    int i = 0;
    while (i < j)
    {
      View localView = getChildAt(i);
      Object localObject = (LayoutParams)localView.getLayoutParams();
      if (((LayoutParams)localObject).isNestedScrollAccepted(paramInt2))
      {
        localObject = ((LayoutParams)localObject).getBehavior();
        if (localObject != null) {
          ((Behavior)localObject).onNestedScrollAccepted(this, localView, paramView1, paramView2, paramInt1, paramInt2);
        }
      }
      i += 1;
    }
  }
  
  public void onRestoreInstanceState(Parcelable paramParcelable)
  {
    if (!(paramParcelable instanceof SavedState))
    {
      super.onRestoreInstanceState(paramParcelable);
      return;
    }
    paramParcelable = (SavedState)paramParcelable;
    super.onRestoreInstanceState(paramParcelable.getSuperState());
    paramParcelable = behaviorStates;
    int i = 0;
    int j = getChildCount();
    while (i < j)
    {
      View localView = getChildAt(i);
      int k = localView.getId();
      Behavior localBehavior = getResolvedLayoutParams(localView).getBehavior();
      if ((k != -1) && (localBehavior != null))
      {
        Parcelable localParcelable = (Parcelable)paramParcelable.get(k);
        if (localParcelable != null) {
          localBehavior.onRestoreInstanceState(this, localView, localParcelable);
        }
      }
      i += 1;
    }
  }
  
  public Parcelable onSaveInstanceState()
  {
    SavedState localSavedState = new SavedState(super.onSaveInstanceState());
    SparseArray localSparseArray = new SparseArray();
    int j = getChildCount();
    int i = 0;
    while (i < j)
    {
      Object localObject = getChildAt(i);
      int k = ((View)localObject).getId();
      Behavior localBehavior = ((LayoutParams)((View)localObject).getLayoutParams()).getBehavior();
      if ((k != -1) && (localBehavior != null))
      {
        localObject = localBehavior.onSaveInstanceState(this, (View)localObject);
        if (localObject != null) {
          localSparseArray.append(k, localObject);
        }
      }
      i += 1;
    }
    behaviorStates = localSparseArray;
    return localSavedState;
  }
  
  public boolean onStartNestedScroll(View paramView1, View paramView2, int paramInt)
  {
    return onStartNestedScroll(paramView1, paramView2, paramInt, 0);
  }
  
  public boolean onStartNestedScroll(View paramView1, View paramView2, int paramInt1, int paramInt2)
  {
    int j = getChildCount();
    int i = 0;
    boolean bool1 = false;
    while (i < j)
    {
      View localView = getChildAt(i);
      if (localView.getVisibility() != 8)
      {
        LayoutParams localLayoutParams = (LayoutParams)localView.getLayoutParams();
        Behavior localBehavior = localLayoutParams.getBehavior();
        if (localBehavior != null)
        {
          boolean bool2 = localBehavior.onStartNestedScroll(this, localView, paramView1, paramView2, paramInt1, paramInt2);
          localLayoutParams.setNestedScrollAccepted(paramInt2, bool2);
          bool1 |= bool2;
        }
        else
        {
          localLayoutParams.setNestedScrollAccepted(paramInt2, false);
        }
      }
      i += 1;
    }
    return bool1;
  }
  
  public void onStopNestedScroll(View paramView)
  {
    onStopNestedScroll(paramView, 0);
  }
  
  public void onStopNestedScroll(View paramView, int paramInt)
  {
    mNestedScrollingParentHelper.a(paramView, paramInt);
    int j = getChildCount();
    int i = 0;
    while (i < j)
    {
      View localView = getChildAt(i);
      LayoutParams localLayoutParams = (LayoutParams)localView.getLayoutParams();
      if (localLayoutParams.isNestedScrollAccepted(paramInt))
      {
        Behavior localBehavior = localLayoutParams.getBehavior();
        if (localBehavior != null) {
          localBehavior.onStopNestedScroll(this, localView, paramView, paramInt);
        }
        localLayoutParams.resetNestedScroll(paramInt);
        localLayoutParams.resetChangedAfterNestedScroll();
      }
      i += 1;
    }
    mNestedScrollingTarget = null;
  }
  
  public boolean onTouchEvent(MotionEvent paramMotionEvent)
  {
    int i = paramMotionEvent.getActionMasked();
    boolean bool1;
    if (mBehaviorTouchView == null)
    {
      bool1 = performIntercept(paramMotionEvent, 1);
      bool2 = bool1;
      if (!bool1) {
        break label76;
      }
    }
    else
    {
      bool1 = false;
    }
    Behavior localBehavior = ((LayoutParams)mBehaviorTouchView.getLayoutParams()).getBehavior();
    boolean bool2 = bool1;
    boolean bool3;
    if (localBehavior != null)
    {
      bool3 = localBehavior.onTouchEvent(this, mBehaviorTouchView, paramMotionEvent);
      bool2 = bool1;
      bool1 = bool3;
    }
    else
    {
      label76:
      bool1 = false;
    }
    View localView = mBehaviorTouchView;
    localBehavior = null;
    if (localView == null)
    {
      bool3 = bool1 | super.onTouchEvent(paramMotionEvent);
      paramMotionEvent = localBehavior;
    }
    else
    {
      bool3 = bool1;
      paramMotionEvent = localBehavior;
      if (bool2)
      {
        long l = SystemClock.uptimeMillis();
        paramMotionEvent = MotionEvent.obtain(l, l, 3, 0.0F, 0.0F, 0);
        super.onTouchEvent(paramMotionEvent);
        bool3 = bool1;
      }
    }
    if (paramMotionEvent != null) {
      paramMotionEvent.recycle();
    }
    if ((i == 1) || (i == 3)) {
      resetTouchBehaviors(false);
    }
    return bool3;
  }
  
  public void recordLastChildRect(View paramView, Rect paramRect)
  {
    ((LayoutParams)paramView.getLayoutParams()).setLastChildRect(paramRect);
  }
  
  public void removePreDrawListener()
  {
    if ((mIsAttachedToWindow) && (mOnPreDrawListener != null)) {
      getViewTreeObserver().removeOnPreDrawListener(mOnPreDrawListener);
    }
    mNeedsPreDrawListener = false;
  }
  
  public boolean requestChildRectangleOnScreen(View paramView, Rect paramRect, boolean paramBoolean)
  {
    Behavior localBehavior = ((LayoutParams)paramView.getLayoutParams()).getBehavior();
    if ((localBehavior != null) && (localBehavior.onRequestChildRectangleOnScreen(this, paramView, paramRect, paramBoolean))) {
      return true;
    }
    return super.requestChildRectangleOnScreen(paramView, paramRect, paramBoolean);
  }
  
  public void requestDisallowInterceptTouchEvent(boolean paramBoolean)
  {
    super.requestDisallowInterceptTouchEvent(paramBoolean);
    if ((paramBoolean) && (!mDisallowInterceptReset))
    {
      resetTouchBehaviors(false);
      mDisallowInterceptReset = true;
    }
  }
  
  public void setFitsSystemWindows(boolean paramBoolean)
  {
    super.setFitsSystemWindows(paramBoolean);
    setupForInsets();
  }
  
  public void setOnHierarchyChangeListener(ViewGroup.OnHierarchyChangeListener paramOnHierarchyChangeListener)
  {
    mOnHierarchyChangeListener = paramOnHierarchyChangeListener;
  }
  
  public void setStatusBarBackground(@G Drawable paramDrawable)
  {
    Drawable localDrawable2 = mStatusBarBackground;
    if (localDrawable2 != paramDrawable)
    {
      Drawable localDrawable1 = null;
      if (localDrawable2 != null) {
        localDrawable2.setCallback(null);
      }
      if (paramDrawable != null) {
        localDrawable1 = paramDrawable.mutate();
      }
      mStatusBarBackground = localDrawable1;
      paramDrawable = mStatusBarBackground;
      if (paramDrawable != null)
      {
        if (paramDrawable.isStateful()) {
          mStatusBarBackground.setState(getDrawableState());
        }
        b.b.x.d.a.a.a(mStatusBarBackground, H.r(this));
        paramDrawable = mStatusBarBackground;
        boolean bool;
        if (getVisibility() == 0) {
          bool = true;
        } else {
          bool = false;
        }
        paramDrawable.setVisible(bool, false);
        mStatusBarBackground.setCallback(this);
      }
      H.la(this);
    }
  }
  
  public void setStatusBarBackgroundColor(@k int paramInt)
  {
    setStatusBarBackground(new ColorDrawable(paramInt));
  }
  
  public void setStatusBarBackgroundResource(@p int paramInt)
  {
    Drawable localDrawable;
    if (paramInt != 0) {
      localDrawable = c.getDrawable(getContext(), paramInt);
    } else {
      localDrawable = null;
    }
    setStatusBarBackground(localDrawable);
  }
  
  public void setVisibility(int paramInt)
  {
    super.setVisibility(paramInt);
    boolean bool;
    if (paramInt == 0) {
      bool = true;
    } else {
      bool = false;
    }
    Drawable localDrawable = mStatusBarBackground;
    if ((localDrawable != null) && (localDrawable.isVisible() != bool)) {
      mStatusBarBackground.setVisible(bool, false);
    }
  }
  
  public final Y setWindowInsets(Y paramY)
  {
    Y localY = paramY;
    if (!o.a(mLastInsets, paramY))
    {
      mLastInsets = paramY;
      boolean bool2 = true;
      boolean bool1;
      if ((paramY != null) && (paramY.l() > 0)) {
        bool1 = true;
      } else {
        bool1 = false;
      }
      mDrawStatusBarBackground = bool1;
      if ((!mDrawStatusBarBackground) && (getBackground() == null)) {
        bool1 = bool2;
      } else {
        bool1 = false;
      }
      setWillNotDraw(bool1);
      localY = dispatchApplyWindowInsetsToBehaviors(paramY);
      requestLayout();
    }
    return localY;
  }
  
  public boolean verifyDrawable(Drawable paramDrawable)
  {
    return (super.verifyDrawable(paramDrawable)) || (paramDrawable == mStatusBarBackground);
  }
  
  public static abstract interface AttachedBehavior
  {
    @F
    public abstract CoordinatorLayout.Behavior getBehavior();
  }
  
  public static abstract class Behavior<V extends View>
  {
    public Behavior() {}
    
    public Behavior(Context paramContext, AttributeSet paramAttributeSet) {}
    
    @G
    public static Object getTag(@F View paramView)
    {
      return getLayoutParamsmBehaviorTag;
    }
    
    public static void setTag(@F View paramView, @G Object paramObject)
    {
      getLayoutParamsmBehaviorTag = paramObject;
    }
    
    public boolean blocksInteractionBelow(@F CoordinatorLayout paramCoordinatorLayout, @F V paramV)
    {
      return getScrimOpacity(paramCoordinatorLayout, paramV) > 0.0F;
    }
    
    public boolean getInsetDodgeRect(@F CoordinatorLayout paramCoordinatorLayout, @F V paramV, @F Rect paramRect)
    {
      return false;
    }
    
    @k
    public int getScrimColor(@F CoordinatorLayout paramCoordinatorLayout, @F V paramV)
    {
      return -16777216;
    }
    
    @q(from=0.0D, to=1.0D)
    public float getScrimOpacity(@F CoordinatorLayout paramCoordinatorLayout, @F V paramV)
    {
      return 0.0F;
    }
    
    public boolean layoutDependsOn(@F CoordinatorLayout paramCoordinatorLayout, @F V paramV, @F View paramView)
    {
      return false;
    }
    
    @F
    public Y onApplyWindowInsets(@F CoordinatorLayout paramCoordinatorLayout, @F V paramV, @F Y paramY)
    {
      return paramY;
    }
    
    public void onAttachedToLayoutParams(@F CoordinatorLayout.LayoutParams paramLayoutParams) {}
    
    public boolean onDependentViewChanged(@F CoordinatorLayout paramCoordinatorLayout, @F V paramV, @F View paramView)
    {
      return false;
    }
    
    public void onDependentViewRemoved(@F CoordinatorLayout paramCoordinatorLayout, @F V paramV, @F View paramView) {}
    
    public void onDetachedFromLayoutParams() {}
    
    public boolean onInterceptTouchEvent(@F CoordinatorLayout paramCoordinatorLayout, @F V paramV, @F MotionEvent paramMotionEvent)
    {
      return false;
    }
    
    public boolean onLayoutChild(@F CoordinatorLayout paramCoordinatorLayout, @F V paramV, int paramInt)
    {
      return false;
    }
    
    public boolean onMeasureChild(@F CoordinatorLayout paramCoordinatorLayout, @F V paramV, int paramInt1, int paramInt2, int paramInt3, int paramInt4)
    {
      return false;
    }
    
    public boolean onNestedFling(@F CoordinatorLayout paramCoordinatorLayout, @F V paramV, @F View paramView, float paramFloat1, float paramFloat2, boolean paramBoolean)
    {
      return false;
    }
    
    public boolean onNestedPreFling(@F CoordinatorLayout paramCoordinatorLayout, @F V paramV, @F View paramView, float paramFloat1, float paramFloat2)
    {
      return false;
    }
    
    @Deprecated
    public void onNestedPreScroll(@F CoordinatorLayout paramCoordinatorLayout, @F V paramV, @F View paramView, int paramInt1, int paramInt2, @F int[] paramArrayOfInt) {}
    
    public void onNestedPreScroll(@F CoordinatorLayout paramCoordinatorLayout, @F V paramV, @F View paramView, int paramInt1, int paramInt2, @F int[] paramArrayOfInt, int paramInt3)
    {
      if (paramInt3 == 0) {
        onNestedPreScroll(paramCoordinatorLayout, paramV, paramView, paramInt1, paramInt2, paramArrayOfInt);
      }
    }
    
    @Deprecated
    public void onNestedScroll(@F CoordinatorLayout paramCoordinatorLayout, @F V paramV, @F View paramView, int paramInt1, int paramInt2, int paramInt3, int paramInt4) {}
    
    public void onNestedScroll(@F CoordinatorLayout paramCoordinatorLayout, @F V paramV, @F View paramView, int paramInt1, int paramInt2, int paramInt3, int paramInt4, int paramInt5)
    {
      if (paramInt5 == 0) {
        onNestedScroll(paramCoordinatorLayout, paramV, paramView, paramInt1, paramInt2, paramInt3, paramInt4);
      }
    }
    
    @Deprecated
    public void onNestedScrollAccepted(@F CoordinatorLayout paramCoordinatorLayout, @F V paramV, @F View paramView1, @F View paramView2, int paramInt) {}
    
    public void onNestedScrollAccepted(@F CoordinatorLayout paramCoordinatorLayout, @F V paramV, @F View paramView1, @F View paramView2, int paramInt1, int paramInt2)
    {
      if (paramInt2 == 0) {
        onNestedScrollAccepted(paramCoordinatorLayout, paramV, paramView1, paramView2, paramInt1);
      }
    }
    
    public boolean onRequestChildRectangleOnScreen(@F CoordinatorLayout paramCoordinatorLayout, @F V paramV, @F Rect paramRect, boolean paramBoolean)
    {
      return false;
    }
    
    public void onRestoreInstanceState(@F CoordinatorLayout paramCoordinatorLayout, @F V paramV, @F Parcelable paramParcelable) {}
    
    @G
    public Parcelable onSaveInstanceState(@F CoordinatorLayout paramCoordinatorLayout, @F V paramV)
    {
      return View.BaseSavedState.EMPTY_STATE;
    }
    
    @Deprecated
    public boolean onStartNestedScroll(@F CoordinatorLayout paramCoordinatorLayout, @F V paramV, @F View paramView1, @F View paramView2, int paramInt)
    {
      return false;
    }
    
    public boolean onStartNestedScroll(@F CoordinatorLayout paramCoordinatorLayout, @F V paramV, @F View paramView1, @F View paramView2, int paramInt1, int paramInt2)
    {
      if (paramInt2 == 0) {
        return onStartNestedScroll(paramCoordinatorLayout, paramV, paramView1, paramView2, paramInt1);
      }
      return false;
    }
    
    @Deprecated
    public void onStopNestedScroll(@F CoordinatorLayout paramCoordinatorLayout, @F V paramV, @F View paramView) {}
    
    public void onStopNestedScroll(@F CoordinatorLayout paramCoordinatorLayout, @F V paramV, @F View paramView, int paramInt)
    {
      if (paramInt == 0) {
        onStopNestedScroll(paramCoordinatorLayout, paramV, paramView);
      }
    }
    
    public boolean onTouchEvent(@F CoordinatorLayout paramCoordinatorLayout, @F V paramV, @F MotionEvent paramMotionEvent)
    {
      return false;
    }
  }
  
  @Deprecated
  @Retention(RetentionPolicy.RUNTIME)
  public static @interface DefaultBehavior
  {
    Class<? extends CoordinatorLayout.Behavior> value();
  }
  
  @Retention(RetentionPolicy.SOURCE)
  @N({b.b.a.N.a.b})
  public static @interface DispatchChangeEvent {}
  
  private class HierarchyChangeListener
    implements ViewGroup.OnHierarchyChangeListener
  {
    public HierarchyChangeListener() {}
    
    public void onChildViewAdded(View paramView1, View paramView2)
    {
      ViewGroup.OnHierarchyChangeListener localOnHierarchyChangeListener = mOnHierarchyChangeListener;
      if (localOnHierarchyChangeListener != null) {
        localOnHierarchyChangeListener.onChildViewAdded(paramView1, paramView2);
      }
    }
    
    public void onChildViewRemoved(View paramView1, View paramView2)
    {
      onChildViewsChanged(2);
      ViewGroup.OnHierarchyChangeListener localOnHierarchyChangeListener = mOnHierarchyChangeListener;
      if (localOnHierarchyChangeListener != null) {
        localOnHierarchyChangeListener.onChildViewRemoved(paramView1, paramView2);
      }
    }
  }
  
  public static class LayoutParams
    extends ViewGroup.MarginLayoutParams
  {
    public int anchorGravity = 0;
    public int dodgeInsetEdges = 0;
    public int gravity = 0;
    public int insetEdge = 0;
    public int keyline = -1;
    public View mAnchorDirectChild;
    public int mAnchorId = -1;
    public View mAnchorView;
    public CoordinatorLayout.Behavior mBehavior;
    public boolean mBehaviorResolved = false;
    public Object mBehaviorTag;
    public boolean mDidAcceptNestedScrollNonTouch;
    public boolean mDidAcceptNestedScrollTouch;
    public boolean mDidBlockInteraction;
    public boolean mDidChangeAfterNestedScroll;
    public int mInsetOffsetX;
    public int mInsetOffsetY;
    public final Rect mLastChildRect = new Rect();
    
    public LayoutParams(int paramInt1, int paramInt2)
    {
      super(paramInt2);
    }
    
    public LayoutParams(@F Context paramContext, @G AttributeSet paramAttributeSet)
    {
      super(paramAttributeSet);
      TypedArray localTypedArray = paramContext.obtainStyledAttributes(paramAttributeSet, a.j.CoordinatorLayout_Layout);
      gravity = localTypedArray.getInteger(a.j.CoordinatorLayout_Layout_android_layout_gravity, 0);
      mAnchorId = localTypedArray.getResourceId(a.j.CoordinatorLayout_Layout_layout_anchor, -1);
      anchorGravity = localTypedArray.getInteger(a.j.CoordinatorLayout_Layout_layout_anchorGravity, 0);
      keyline = localTypedArray.getInteger(a.j.CoordinatorLayout_Layout_layout_keyline, -1);
      insetEdge = localTypedArray.getInt(a.j.CoordinatorLayout_Layout_layout_insetEdge, 0);
      dodgeInsetEdges = localTypedArray.getInt(a.j.CoordinatorLayout_Layout_layout_dodgeInsetEdges, 0);
      mBehaviorResolved = localTypedArray.hasValue(a.j.CoordinatorLayout_Layout_layout_behavior);
      if (mBehaviorResolved) {
        mBehavior = CoordinatorLayout.parseBehavior(paramContext, paramAttributeSet, localTypedArray.getString(a.j.CoordinatorLayout_Layout_layout_behavior));
      }
      localTypedArray.recycle();
      paramContext = mBehavior;
      if (paramContext != null) {
        paramContext.onAttachedToLayoutParams(this);
      }
    }
    
    public LayoutParams(LayoutParams paramLayoutParams)
    {
      super();
    }
    
    public LayoutParams(ViewGroup.LayoutParams paramLayoutParams)
    {
      super();
    }
    
    public LayoutParams(ViewGroup.MarginLayoutParams paramMarginLayoutParams)
    {
      super();
    }
    
    private void resolveAnchorView(View paramView, CoordinatorLayout paramCoordinatorLayout)
    {
      mAnchorView = paramCoordinatorLayout.findViewById(mAnchorId);
      View localView = mAnchorView;
      if (localView != null)
      {
        if (localView == paramCoordinatorLayout)
        {
          if (paramCoordinatorLayout.isInEditMode())
          {
            mAnchorDirectChild = null;
            mAnchorView = null;
            return;
          }
          throw new IllegalStateException("View can not be anchored to the the parent CoordinatorLayout");
        }
        for (localObject = localView.getParent(); (localObject != paramCoordinatorLayout) && (localObject != null); localObject = ((ViewParent)localObject).getParent())
        {
          if (localObject == paramView)
          {
            if (paramCoordinatorLayout.isInEditMode())
            {
              mAnchorDirectChild = null;
              mAnchorView = null;
              return;
            }
            throw new IllegalStateException("Anchor must not be a descendant of the anchored view");
          }
          if ((localObject instanceof View)) {
            localView = (View)localObject;
          }
        }
        mAnchorDirectChild = localView;
        return;
      }
      if (paramCoordinatorLayout.isInEditMode())
      {
        mAnchorDirectChild = null;
        mAnchorView = null;
        return;
      }
      Object localObject = f.a.a.a.a.b("Could not find CoordinatorLayout descendant view with id ");
      ((StringBuilder)localObject).append(paramCoordinatorLayout.getResources().getResourceName(mAnchorId));
      ((StringBuilder)localObject).append(" to anchor view ");
      ((StringBuilder)localObject).append(paramView);
      paramView = new IllegalStateException(((StringBuilder)localObject).toString());
      for (;;)
      {
        throw paramView;
      }
    }
    
    private boolean shouldDodge(View paramView, int paramInt)
    {
      int i = h.a(getLayoutParamsinsetEdge, paramInt);
      return (i != 0) && ((h.a(dodgeInsetEdges, paramInt) & i) == i);
    }
    
    private boolean verifyAnchorView(View paramView, CoordinatorLayout paramCoordinatorLayout)
    {
      if (mAnchorView.getId() != mAnchorId) {
        return false;
      }
      View localView = mAnchorView;
      ViewParent localViewParent = localView.getParent();
      while (localViewParent != paramCoordinatorLayout) {
        if ((localViewParent != null) && (localViewParent != paramView))
        {
          if ((localViewParent instanceof View)) {
            localView = (View)localViewParent;
          }
          localViewParent = localViewParent.getParent();
        }
        else
        {
          mAnchorDirectChild = null;
          mAnchorView = null;
          return false;
        }
      }
      mAnchorDirectChild = localView;
      return true;
    }
    
    public boolean checkAnchorChanged()
    {
      return (mAnchorView == null) && (mAnchorId != -1);
    }
    
    public boolean dependsOn(CoordinatorLayout paramCoordinatorLayout, View paramView1, View paramView2)
    {
      if ((paramView2 != mAnchorDirectChild) && (!shouldDodge(paramView2, H.r(paramCoordinatorLayout))))
      {
        CoordinatorLayout.Behavior localBehavior = mBehavior;
        if ((localBehavior == null) || (!localBehavior.layoutDependsOn(paramCoordinatorLayout, paramView1, paramView2))) {
          return false;
        }
      }
      return true;
    }
    
    public boolean didBlockInteraction()
    {
      if (mBehavior == null) {
        mDidBlockInteraction = false;
      }
      return mDidBlockInteraction;
    }
    
    public View findAnchorView(CoordinatorLayout paramCoordinatorLayout, View paramView)
    {
      if (mAnchorId == -1)
      {
        mAnchorDirectChild = null;
        mAnchorView = null;
        return null;
      }
      if ((mAnchorView == null) || (!verifyAnchorView(paramView, paramCoordinatorLayout))) {
        resolveAnchorView(paramView, paramCoordinatorLayout);
      }
      return mAnchorView;
    }
    
    @v
    public int getAnchorId()
    {
      return mAnchorId;
    }
    
    @G
    public CoordinatorLayout.Behavior getBehavior()
    {
      return mBehavior;
    }
    
    public boolean getChangedAfterNestedScroll()
    {
      return mDidChangeAfterNestedScroll;
    }
    
    public Rect getLastChildRect()
    {
      return mLastChildRect;
    }
    
    public void invalidateAnchor()
    {
      mAnchorDirectChild = null;
      mAnchorView = null;
    }
    
    public boolean isBlockingInteractionBelow(CoordinatorLayout paramCoordinatorLayout, View paramView)
    {
      boolean bool2 = mDidBlockInteraction;
      if (bool2) {
        return true;
      }
      CoordinatorLayout.Behavior localBehavior = mBehavior;
      boolean bool1;
      if (localBehavior != null) {
        bool1 = localBehavior.blocksInteractionBelow(paramCoordinatorLayout, paramView);
      } else {
        bool1 = false;
      }
      bool1 |= bool2;
      mDidBlockInteraction = bool1;
      return bool1;
    }
    
    public boolean isNestedScrollAccepted(int paramInt)
    {
      if (paramInt != 0)
      {
        if (paramInt != 1) {
          return false;
        }
        return mDidAcceptNestedScrollNonTouch;
      }
      return mDidAcceptNestedScrollTouch;
    }
    
    public void resetChangedAfterNestedScroll()
    {
      mDidChangeAfterNestedScroll = false;
    }
    
    public void resetNestedScroll(int paramInt)
    {
      setNestedScrollAccepted(paramInt, false);
    }
    
    public void resetTouchBehaviorTracking()
    {
      mDidBlockInteraction = false;
    }
    
    public void setAnchorId(@v int paramInt)
    {
      invalidateAnchor();
      mAnchorId = paramInt;
    }
    
    public void setBehavior(@G CoordinatorLayout.Behavior paramBehavior)
    {
      CoordinatorLayout.Behavior localBehavior = mBehavior;
      if (localBehavior != paramBehavior)
      {
        if (localBehavior != null) {
          localBehavior.onDetachedFromLayoutParams();
        }
        mBehavior = paramBehavior;
        mBehaviorTag = null;
        mBehaviorResolved = true;
        if (paramBehavior != null) {
          paramBehavior.onAttachedToLayoutParams(this);
        }
      }
    }
    
    public void setChangedAfterNestedScroll(boolean paramBoolean)
    {
      mDidChangeAfterNestedScroll = paramBoolean;
    }
    
    public void setLastChildRect(Rect paramRect)
    {
      mLastChildRect.set(paramRect);
    }
    
    public void setNestedScrollAccepted(int paramInt, boolean paramBoolean)
    {
      if (paramInt != 0)
      {
        if (paramInt != 1) {
          return;
        }
        mDidAcceptNestedScrollNonTouch = paramBoolean;
        return;
      }
      mDidAcceptNestedScrollTouch = paramBoolean;
    }
  }
  
  public class OnPreDrawListener
    implements ViewTreeObserver.OnPreDrawListener
  {
    public OnPreDrawListener() {}
    
    public boolean onPreDraw()
    {
      onChildViewsChanged(0);
      return true;
    }
  }
  
  protected static class SavedState
    extends AbsSavedState
  {
    public static final Parcelable.Creator<SavedState> CREATOR = new Parcelable.ClassLoaderCreator()
    {
      public CoordinatorLayout.SavedState createFromParcel(Parcel paramAnonymousParcel)
      {
        return new CoordinatorLayout.SavedState(paramAnonymousParcel, null);
      }
      
      public CoordinatorLayout.SavedState createFromParcel(Parcel paramAnonymousParcel, ClassLoader paramAnonymousClassLoader)
      {
        return new CoordinatorLayout.SavedState(paramAnonymousParcel, paramAnonymousClassLoader);
      }
      
      public CoordinatorLayout.SavedState[] newArray(int paramAnonymousInt)
      {
        return new CoordinatorLayout.SavedState[paramAnonymousInt];
      }
    };
    public SparseArray<Parcelable> behaviorStates;
    
    public SavedState(Parcel paramParcel, ClassLoader paramClassLoader)
    {
      super(paramClassLoader);
      int j = paramParcel.readInt();
      int[] arrayOfInt = new int[j];
      paramParcel.readIntArray(arrayOfInt);
      paramParcel = paramParcel.readParcelableArray(paramClassLoader);
      behaviorStates = new SparseArray(j);
      int i = 0;
      while (i < j)
      {
        behaviorStates.append(arrayOfInt[i], paramParcel[i]);
        i += 1;
      }
    }
    
    public SavedState(Parcelable paramParcelable)
    {
      super();
    }
    
    public void writeToParcel(Parcel paramParcel, int paramInt)
    {
      paramParcel.writeParcelable(mSuperState, paramInt);
      Object localObject = behaviorStates;
      int j = 0;
      int i;
      if (localObject != null) {
        i = ((SparseArray)localObject).size();
      } else {
        i = 0;
      }
      paramParcel.writeInt(i);
      localObject = new int[i];
      Parcelable[] arrayOfParcelable = new Parcelable[i];
      while (j < i)
      {
        localObject[j] = behaviorStates.keyAt(j);
        arrayOfParcelable[j] = ((Parcelable)behaviorStates.valueAt(j));
        j += 1;
      }
      paramParcel.writeIntArray((int[])localObject);
      paramParcel.writeParcelableArray(arrayOfParcelable, paramInt);
    }
  }
  
  public static class ViewElevationComparator
    implements Comparator<View>
  {
    public ViewElevationComparator() {}
    
    public int compare(View paramView1, View paramView2)
    {
      float f1 = H.S(paramView1);
      float f2 = H.S(paramView2);
      if (f1 > f2) {
        return -1;
      }
      if (f1 < f2) {
        return 1;
      }
      return 0;
    }
  }
}
