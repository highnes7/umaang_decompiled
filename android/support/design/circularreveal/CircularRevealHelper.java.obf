package android.support.design.circularreveal;

import android.graphics.Bitmap;
import android.graphics.Bitmap.Config;
import android.graphics.BitmapShader;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.Path;
import android.graphics.Path.Direction;
import android.graphics.Rect;
import android.graphics.Shader.TileMode;
import android.graphics.drawable.Drawable;
import android.os.Build.VERSION;
import android.support.design.widget.MathUtils;
import android.view.View;
import b.b.a.G;
import b.b.a.k;
import f.a.a.a.a;
import java.lang.annotation.Annotation;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;

public class CircularRevealHelper
{
  public static final int BITMAP_SHADER = 0;
  public static final int CLIP_PATH = 1;
  public static final boolean DEBUG = false;
  public static final int REVEAL_ANIMATOR = 2;
  public static final int STRATEGY = 1;
  public boolean buildingCircularRevealCache;
  public Paint debugPaint;
  public final Delegate delegate;
  public boolean hasCircularRevealCache;
  @G
  public Drawable overlayDrawable;
  @G
  public CircularRevealWidget.RevealInfo revealInfo;
  public final Paint revealPaint;
  public final Path revealPath;
  public final Paint scrimPaint;
  public final View view;
  
  static
  {
    if (Build.VERSION.SDK_INT >= 21)
    {
      STRATEGY = 2;
      return;
    }
  }
  
  public CircularRevealHelper(Delegate paramDelegate)
  {
    delegate = paramDelegate;
    view = ((View)paramDelegate);
    view.setWillNotDraw(false);
    revealPath = new Path();
    revealPaint = new Paint(7);
    scrimPaint = new Paint(1);
    scrimPaint.setColor(0);
  }
  
  private void drawDebugCircle(Canvas paramCanvas, int paramInt, float paramFloat)
  {
    debugPaint.setColor(paramInt);
    debugPaint.setStrokeWidth(paramFloat);
    CircularRevealWidget.RevealInfo localRevealInfo = revealInfo;
    paramCanvas.drawCircle(centerX, centerY, radius - paramFloat / 2.0F, debugPaint);
  }
  
  private void drawDebugMode(Canvas paramCanvas)
  {
    delegate.actualDraw(paramCanvas);
    if (shouldDrawScrim())
    {
      CircularRevealWidget.RevealInfo localRevealInfo = revealInfo;
      paramCanvas.drawCircle(centerX, centerY, radius, scrimPaint);
    }
    if (shouldDrawCircularReveal())
    {
      drawDebugCircle(paramCanvas, -16777216, 10.0F);
      drawDebugCircle(paramCanvas, -65536, 5.0F);
    }
    drawOverlayDrawable(paramCanvas);
  }
  
  private void drawOverlayDrawable(Canvas paramCanvas)
  {
    if (shouldDrawOverlayDrawable())
    {
      Rect localRect = overlayDrawable.getBounds();
      float f1 = revealInfo.centerX - localRect.width() / 2.0F;
      float f2 = revealInfo.centerY - localRect.height() / 2.0F;
      paramCanvas.translate(f1, f2);
      overlayDrawable.draw(paramCanvas);
      paramCanvas.translate(-f1, -f2);
    }
  }
  
  private float getDistanceToFurthestCorner(CircularRevealWidget.RevealInfo paramRevealInfo)
  {
    return MathUtils.distanceToFurthestCorner(centerX, centerY, 0.0F, 0.0F, view.getWidth(), view.getHeight());
  }
  
  private void invalidateRevealInfo()
  {
    if (STRATEGY == 1)
    {
      revealPath.rewind();
      CircularRevealWidget.RevealInfo localRevealInfo = revealInfo;
      if (localRevealInfo != null) {
        revealPath.addCircle(centerX, centerY, radius, Path.Direction.CW);
      }
    }
    view.invalidate();
  }
  
  private boolean shouldDrawCircularReveal()
  {
    CircularRevealWidget.RevealInfo localRevealInfo = revealInfo;
    boolean bool2 = false;
    int i;
    if ((localRevealInfo != null) && (!localRevealInfo.isInvalid())) {
      i = 0;
    } else {
      i = 1;
    }
    if (STRATEGY == 0)
    {
      boolean bool1 = bool2;
      if (i == 0)
      {
        bool1 = bool2;
        if (hasCircularRevealCache) {
          bool1 = true;
        }
      }
      return bool1;
    }
    return i ^ 0x1;
  }
  
  private boolean shouldDrawOverlayDrawable()
  {
    return (!buildingCircularRevealCache) && (overlayDrawable != null) && (revealInfo != null);
  }
  
  private boolean shouldDrawScrim()
  {
    return (!buildingCircularRevealCache) && (Color.alpha(scrimPaint.getColor()) != 0);
  }
  
  public void buildCircularRevealCache()
  {
    if (STRATEGY == 0)
    {
      buildingCircularRevealCache = true;
      hasCircularRevealCache = false;
      view.buildDrawingCache();
      Object localObject2 = view.getDrawingCache();
      Object localObject1 = localObject2;
      if (localObject2 == null)
      {
        localObject1 = localObject2;
        if (view.getWidth() != 0)
        {
          localObject1 = localObject2;
          if (view.getHeight() != 0)
          {
            localObject1 = Bitmap.createBitmap(view.getWidth(), view.getHeight(), Bitmap.Config.ARGB_8888);
            localObject2 = new Canvas((Bitmap)localObject1);
            view.draw((Canvas)localObject2);
          }
        }
      }
      if (localObject1 != null)
      {
        localObject2 = revealPaint;
        Shader.TileMode localTileMode = Shader.TileMode.CLAMP;
        ((Paint)localObject2).setShader(new BitmapShader((Bitmap)localObject1, localTileMode, localTileMode));
      }
      buildingCircularRevealCache = false;
      hasCircularRevealCache = true;
    }
  }
  
  public void destroyCircularRevealCache()
  {
    if (STRATEGY == 0)
    {
      hasCircularRevealCache = false;
      view.destroyDrawingCache();
      revealPaint.setShader(null);
      view.invalidate();
    }
  }
  
  public void draw(Canvas paramCanvas)
  {
    if (shouldDrawCircularReveal())
    {
      int i = STRATEGY;
      if (i != 0)
      {
        if (i != 1)
        {
          if (i == 2)
          {
            delegate.actualDraw(paramCanvas);
            if (shouldDrawScrim()) {
              paramCanvas.drawRect(0.0F, 0.0F, view.getWidth(), view.getHeight(), scrimPaint);
            }
          }
          else
          {
            paramCanvas = a.b("Unsupported strategy ");
            paramCanvas.append(STRATEGY);
            throw new IllegalStateException(paramCanvas.toString());
          }
        }
        else
        {
          i = paramCanvas.save();
          paramCanvas.clipPath(revealPath);
          delegate.actualDraw(paramCanvas);
          if (shouldDrawScrim()) {
            paramCanvas.drawRect(0.0F, 0.0F, view.getWidth(), view.getHeight(), scrimPaint);
          }
          paramCanvas.restoreToCount(i);
        }
      }
      else
      {
        CircularRevealWidget.RevealInfo localRevealInfo = revealInfo;
        paramCanvas.drawCircle(centerX, centerY, radius, revealPaint);
        if (shouldDrawScrim())
        {
          localRevealInfo = revealInfo;
          paramCanvas.drawCircle(centerX, centerY, radius, scrimPaint);
        }
      }
    }
    else
    {
      delegate.actualDraw(paramCanvas);
      if (shouldDrawScrim()) {
        paramCanvas.drawRect(0.0F, 0.0F, view.getWidth(), view.getHeight(), scrimPaint);
      }
    }
    drawOverlayDrawable(paramCanvas);
  }
  
  @G
  public Drawable getCircularRevealOverlayDrawable()
  {
    return overlayDrawable;
  }
  
  @k
  public int getCircularRevealScrimColor()
  {
    return scrimPaint.getColor();
  }
  
  @G
  public CircularRevealWidget.RevealInfo getRevealInfo()
  {
    CircularRevealWidget.RevealInfo localRevealInfo = revealInfo;
    if (localRevealInfo == null) {
      return null;
    }
    localRevealInfo = new CircularRevealWidget.RevealInfo(localRevealInfo);
    if (localRevealInfo.isInvalid()) {
      radius = getDistanceToFurthestCorner(localRevealInfo);
    }
    return localRevealInfo;
  }
  
  public boolean isOpaque()
  {
    return (delegate.actualIsOpaque()) && (!shouldDrawCircularReveal());
  }
  
  public void setCircularRevealOverlayDrawable(@G Drawable paramDrawable)
  {
    overlayDrawable = paramDrawable;
    view.invalidate();
  }
  
  public void setCircularRevealScrimColor(@k int paramInt)
  {
    scrimPaint.setColor(paramInt);
    view.invalidate();
  }
  
  public void setRevealInfo(@G CircularRevealWidget.RevealInfo paramRevealInfo)
  {
    if (paramRevealInfo == null)
    {
      revealInfo = null;
    }
    else
    {
      CircularRevealWidget.RevealInfo localRevealInfo = revealInfo;
      if (localRevealInfo == null) {
        revealInfo = new CircularRevealWidget.RevealInfo(paramRevealInfo);
      } else {
        localRevealInfo.set(paramRevealInfo);
      }
      if (MathUtils.geq(radius, getDistanceToFurthestCorner(paramRevealInfo), 1.0E-4F)) {
        revealInfo.radius = Float.MAX_VALUE;
      }
    }
    invalidateRevealInfo();
  }
  
  public static abstract interface Delegate
  {
    public abstract void actualDraw(Canvas paramCanvas);
    
    public abstract boolean actualIsOpaque();
  }
  
  @Retention(RetentionPolicy.SOURCE)
  public static @interface Strategy {}
}
