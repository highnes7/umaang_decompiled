package android.support.v4.view;

import android.content.Context;
import android.content.res.Resources;
import android.content.res.Resources.NotFoundException;
import android.content.res.TypedArray;
import android.database.DataSetObserver;
import android.graphics.Canvas;
import android.graphics.Rect;
import android.graphics.drawable.Drawable;
import android.os.Bundle;
import android.os.Parcel;
import android.os.Parcelable;
import android.os.Parcelable.Creator;
import android.os.SystemClock;
import android.util.AttributeSet;
import android.util.DisplayMetrics;
import android.view.FocusFinder;
import android.view.KeyEvent;
import android.view.MotionEvent;
import android.view.SoundEffectConstants;
import android.view.VelocityTracker;
import android.view.View;
import android.view.View.AccessibilityDelegate;
import android.view.View.MeasureSpec;
import android.view.ViewConfiguration;
import android.view.ViewGroup;
import android.view.ViewGroup.LayoutParams;
import android.view.ViewParent;
import android.view.accessibility.AccessibilityEvent;
import android.view.animation.Interpolator;
import android.widget.EdgeEffect;
import android.widget.Scroller;
import b.b.a.F;
import b.b.a.G;
import b.b.a.I;
import b.b.a.i;
import b.b.a.p;
import b.b.x.o.H;
import b.b.x.o.K;
import b.b.x.o.L;
import b.b.x.o.M;
import b.b.x.o.N;
import b.b.x.o.O;
import b.b.x.o.b;
import b.b.x.o.y;
import f.a.a.a.a;
import java.lang.annotation.Annotation;
import java.lang.annotation.Inherited;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

public class ViewPager
  extends ViewGroup
{
  public static final String a = "ViewPager";
  public static final boolean b = false;
  public static final boolean c = false;
  public static final int d = 1;
  public static final int e = 600;
  public static final int f = 25;
  public static final int g = 16;
  public static final int h = 400;
  public static final int[] i = { 16842931 };
  public static final Comparator<b> j = new K();
  public static final Interpolator k = new L();
  public static final int l = -1;
  public static final int m = 2;
  public static final int n = 0;
  public static final int o = 1;
  public static final int p = 2;
  public static final i q = new i();
  public static final int r = 0;
  public static final int s = 1;
  public static final int t = 2;
  public int A = -1;
  public final Runnable Aa = new M(this);
  public Parcelable B = null;
  public int Ba = 0;
  public ClassLoader C = null;
  public Scroller D;
  public boolean E;
  public g F;
  public int G;
  public Drawable H;
  public int I;
  public int J;
  public float K = -3.4028235E38F;
  public float L = Float.MAX_VALUE;
  public int M;
  public int N;
  public boolean O;
  public boolean P;
  public boolean Q;
  public int R = 1;
  public boolean S;
  public boolean T;
  public int U;
  public int V;
  public int W;
  public float aa;
  public float ba;
  public float ca;
  public float da;
  public int ea = -1;
  public VelocityTracker fa;
  public int ga;
  public int ha;
  public int ia;
  public int ja;
  public boolean ka;
  public long la;
  public EdgeEffect ma;
  public EdgeEffect na;
  public boolean oa = true;
  public boolean pa = false;
  public boolean qa;
  public int ra;
  public List<e> sa;
  public e ta;
  public int u;
  public e ua;
  public final ArrayList<b> v = new ArrayList();
  public List<d> va;
  public final b w = new b();
  public f wa;
  public final Rect x = new Rect();
  public int xa;
  public y y;
  public int ya;
  public int z;
  public ArrayList<View> za;
  
  public ViewPager(@F Context paramContext)
  {
    super(paramContext);
    e();
  }
  
  public ViewPager(@F Context paramContext, @G AttributeSet paramAttributeSet)
  {
    super(paramContext, paramAttributeSet);
    e();
  }
  
  private int a(int paramInt1, float paramFloat, int paramInt2, int paramInt3)
  {
    if ((Math.abs(paramInt3) > ia) && (Math.abs(paramInt2) > ga))
    {
      if (paramInt2 <= 0) {
        paramInt1 += 1;
      }
    }
    else
    {
      float f1;
      if (paramInt1 >= z) {
        f1 = 0.4F;
      } else {
        f1 = 0.6F;
      }
      paramInt1 += (int)(paramFloat + f1);
    }
    paramInt2 = paramInt1;
    if (v.size() > 0)
    {
      b localB = (b)v.get(0);
      Object localObject = v;
      localObject = (b)((ArrayList)localObject).get(((ArrayList)localObject).size() - 1);
      paramInt2 = Math.max(b, Math.min(paramInt1, b));
    }
    return paramInt2;
  }
  
  private Rect a(Rect paramRect, View paramView)
  {
    Rect localRect = paramRect;
    if (paramRect == null) {
      localRect = new Rect();
    }
    if (paramView == null)
    {
      localRect.set(0, 0, 0, 0);
      return localRect;
    }
    left = paramView.getLeft();
    right = paramView.getRight();
    top = paramView.getTop();
    bottom = paramView.getBottom();
    for (paramRect = paramView.getParent(); ((paramRect instanceof ViewGroup)) && (paramRect != this); paramRect = paramRect.getParent())
    {
      paramRect = (ViewGroup)paramRect;
      int i1 = left;
      left = (paramRect.getLeft() + i1);
      i1 = right;
      right = (paramRect.getRight() + i1);
      i1 = top;
      top = (paramRect.getTop() + i1);
      i1 = bottom;
      bottom = (paramRect.getBottom() + i1);
    }
    return localRect;
  }
  
  private void a(int paramInt1, int paramInt2, int paramInt3, int paramInt4)
  {
    if ((paramInt2 > 0) && (!v.isEmpty()))
    {
      if (!D.isFinished())
      {
        D.setFinalX(getCurrentItem() * getClientWidth());
        return;
      }
      int i1 = getPaddingLeft();
      int i2 = getPaddingRight();
      int i3 = getPaddingLeft();
      int i4 = getPaddingRight();
      scrollTo((int)(getScrollX() / (paramInt2 - i3 - i4 + paramInt4) * (paramInt1 - i1 - i2 + paramInt3)), getScrollY());
      return;
    }
    b localB = b(z);
    float f1;
    if (localB != null) {
      f1 = Math.min(e, L);
    } else {
      f1 = 0.0F;
    }
    paramInt1 = (int)(f1 * (paramInt1 - getPaddingLeft() - getPaddingRight()));
    if (paramInt1 != getScrollX())
    {
      a(false);
      scrollTo(paramInt1, getScrollY());
    }
  }
  
  private void a(int paramInt1, boolean paramBoolean1, int paramInt2, boolean paramBoolean2)
  {
    b localB = b(paramInt1);
    int i1;
    if (localB != null)
    {
      float f1 = getClientWidth();
      i1 = (int)(Math.max(K, Math.min(e, L)) * f1);
    }
    else
    {
      i1 = 0;
    }
    if (paramBoolean1)
    {
      a(i1, 0, paramInt2);
      if (paramBoolean2) {
        d(paramInt1);
      }
    }
    else
    {
      if (paramBoolean2) {
        d(paramInt1);
      }
      a(false);
      scrollTo(i1, 0);
      f(i1);
    }
  }
  
  private void a(b paramB1, int paramInt, b paramB2)
  {
    int i4 = y.getCount();
    int i1 = getClientWidth();
    float f2;
    if (i1 > 0) {
      f2 = G / i1;
    } else {
      f2 = 0.0F;
    }
    float f3;
    if (paramB2 != null)
    {
      i1 = b;
      i2 = b;
      if (i1 < i2)
      {
        f1 = e + d + f2;
        i1 += 1;
        i2 = 0;
        while ((i1 <= b) && (i2 < v.size()))
        {
          for (paramB2 = (b)v.get(i2);; paramB2 = (b)v.get(i2))
          {
            i3 = i1;
            f3 = f1;
            if (i1 <= b) {
              break;
            }
            i3 = i1;
            f3 = f1;
            if (i2 >= v.size() - 1) {
              break;
            }
            i2 += 1;
          }
          while (i3 < b)
          {
            f3 += y.getPageWidth(i3) + f2;
            i3 += 1;
          }
          e = f3;
          f1 = f3 + (d + f2);
          i1 = i3 + 1;
        }
      }
      if (i1 > i2)
      {
        i2 = v.size() - 1;
        f1 = e;
        i1 -= 1;
        while ((i1 >= b) && (i2 >= 0))
        {
          for (paramB2 = (b)v.get(i2);; paramB2 = (b)v.get(i2))
          {
            i3 = i1;
            f3 = f1;
            if (i1 >= b) {
              break;
            }
            i3 = i1;
            f3 = f1;
            if (i2 <= 0) {
              break;
            }
            i2 -= 1;
          }
          while (i3 > b)
          {
            f3 -= y.getPageWidth(i3) + f2;
            i3 -= 1;
          }
          f1 = f3 - (d + f2);
          e = f1;
          i1 = i3 - 1;
        }
      }
    }
    int i3 = v.size();
    float f1 = e;
    int i2 = b;
    i1 = i2 - 1;
    if (i2 == 0) {
      f3 = f1;
    } else {
      f3 = -3.4028235E38F;
    }
    K = f3;
    i2 = b;
    i4 -= 1;
    if (i2 == i4) {
      f3 = e + d - 1.0F;
    } else {
      f3 = Float.MAX_VALUE;
    }
    L = f3;
    i2 = paramInt - 1;
    while (i2 >= 0)
    {
      paramB2 = (b)v.get(i2);
      int i5;
      for (;;)
      {
        i5 = b;
        if (i1 <= i5) {
          break;
        }
        f1 -= y.getPageWidth(i1) + f2;
        i1 -= 1;
      }
      f1 -= d + f2;
      e = f1;
      if (i5 == 0) {
        K = f1;
      }
      i2 -= 1;
      i1 -= 1;
    }
    f1 = e + d + f2;
    i2 = b + 1;
    i1 = paramInt + 1;
    paramInt = i2;
    while (i1 < i3)
    {
      paramB1 = (b)v.get(i1);
      for (;;)
      {
        i2 = b;
        if (paramInt >= i2) {
          break;
        }
        f1 += y.getPageWidth(paramInt) + f2;
        paramInt += 1;
      }
      if (i2 == i4) {
        L = (d + f1 - 1.0F);
      }
      e = f1;
      f1 += d + f2;
      i1 += 1;
      paramInt += 1;
    }
    pa = false;
  }
  
  private void a(MotionEvent paramMotionEvent)
  {
    int i1 = paramMotionEvent.getActionIndex();
    if (paramMotionEvent.getPointerId(i1) == ea)
    {
      if (i1 == 0) {
        i1 = 1;
      } else {
        i1 = 0;
      }
      aa = paramMotionEvent.getX(i1);
      ea = paramMotionEvent.getPointerId(i1);
      paramMotionEvent = fa;
      if (paramMotionEvent != null) {
        paramMotionEvent.clear();
      }
    }
  }
  
  private void a(boolean paramBoolean)
  {
    if (Ba == 2) {
      i1 = 1;
    } else {
      i1 = 0;
    }
    if (i1 != 0)
    {
      setScrollingCacheEnabled(false);
      if ((D.isFinished() ^ true))
      {
        D.abortAnimation();
        i2 = getScrollX();
        i3 = getScrollY();
        int i4 = D.getCurrX();
        int i5 = D.getCurrY();
        if ((i2 != i4) || (i3 != i5))
        {
          scrollTo(i4, i5);
          if (i4 != i2) {
            f(i4);
          }
        }
      }
    }
    Q = false;
    int i3 = 0;
    int i2 = i1;
    int i1 = i3;
    while (i1 < v.size())
    {
      b localB = (b)v.get(i1);
      if (c)
      {
        c = false;
        i2 = 1;
      }
      i1 += 1;
    }
    if (i2 != 0)
    {
      if (paramBoolean)
      {
        H.a(this, Aa);
        return;
      }
      Aa.run();
    }
  }
  
  private boolean a(float paramFloat1, float paramFloat2)
  {
    return ((paramFloat1 < V) && (paramFloat2 > 0.0F)) || ((paramFloat1 > getWidth() - V) && (paramFloat2 < 0.0F));
  }
  
  private void b(int paramInt1, float paramFloat, int paramInt2)
  {
    Object localObject = ta;
    if (localObject != null) {
      ((e)localObject).onPageScrolled(paramInt1, paramFloat, paramInt2);
    }
    localObject = sa;
    if (localObject != null)
    {
      int i1 = 0;
      int i2 = ((List)localObject).size();
      while (i1 < i2)
      {
        localObject = (e)sa.get(i1);
        if (localObject != null) {
          ((e)localObject).onPageScrolled(paramInt1, paramFloat, paramInt2);
        }
        i1 += 1;
      }
    }
    localObject = ua;
    if (localObject != null) {
      ((e)localObject).onPageScrolled(paramInt1, paramFloat, paramInt2);
    }
  }
  
  private void b(boolean paramBoolean)
  {
    int i3 = getChildCount();
    int i1 = 0;
    while (i1 < i3)
    {
      int i2;
      if (paramBoolean) {
        i2 = xa;
      } else {
        i2 = 0;
      }
      getChildAt(i1).setLayerType(i2, null);
      i1 += 1;
    }
  }
  
  private void c(boolean paramBoolean)
  {
    ViewParent localViewParent = getParent();
    if (localViewParent != null) {
      localViewParent.requestDisallowInterceptTouchEvent(paramBoolean);
    }
  }
  
  private boolean c(float paramFloat)
  {
    float f1 = aa;
    aa = paramFloat;
    float f2 = getScrollX() + (f1 - paramFloat);
    float f3 = getClientWidth();
    paramFloat = K * f3;
    f1 = L * f3;
    Object localObject1 = v;
    boolean bool2 = false;
    boolean bool3 = false;
    boolean bool1 = false;
    localObject1 = (b)((ArrayList)localObject1).get(0);
    Object localObject2 = v;
    localObject2 = (b)((ArrayList)localObject2).get(((ArrayList)localObject2).size() - 1);
    if (b != 0)
    {
      paramFloat = e * f3;
      i1 = 0;
    }
    else
    {
      i1 = 1;
    }
    int i2;
    if (b != y.getCount() - 1)
    {
      f1 = e * f3;
      i2 = 0;
    }
    else
    {
      i2 = 1;
    }
    if (f2 < paramFloat)
    {
      if (i1 != 0)
      {
        ma.onPull(Math.abs(paramFloat - f2) / f3);
        bool1 = true;
      }
    }
    else
    {
      bool1 = bool3;
      paramFloat = f2;
      if (f2 > f1)
      {
        bool1 = bool2;
        if (i2 != 0)
        {
          na.onPull(Math.abs(f2 - f1) / f3);
          bool1 = true;
        }
        paramFloat = f1;
      }
    }
    f1 = aa;
    int i1 = (int)paramFloat;
    aa = (paramFloat - i1 + f1);
    scrollTo(i1, getScrollY());
    f(i1);
    return bool1;
  }
  
  public static boolean c(@F View paramView)
  {
    return paramView.getClass().getAnnotation(a.class) != null;
  }
  
  private void d(int paramInt)
  {
    Object localObject = ta;
    if (localObject != null) {
      ((e)localObject).onPageSelected(paramInt);
    }
    localObject = sa;
    if (localObject != null)
    {
      int i1 = 0;
      int i2 = ((List)localObject).size();
      while (i1 < i2)
      {
        localObject = (e)sa.get(i1);
        if (localObject != null) {
          ((e)localObject).onPageSelected(paramInt);
        }
        i1 += 1;
      }
    }
    localObject = ua;
    if (localObject != null) {
      ((e)localObject).onPageSelected(paramInt);
    }
  }
  
  private void e(int paramInt)
  {
    Object localObject = ta;
    if (localObject != null) {
      ((e)localObject).onPageScrollStateChanged(paramInt);
    }
    localObject = sa;
    if (localObject != null)
    {
      int i1 = 0;
      int i2 = ((List)localObject).size();
      while (i1 < i2)
      {
        localObject = (e)sa.get(i1);
        if (localObject != null) {
          ((e)localObject).onPageScrollStateChanged(paramInt);
        }
        i1 += 1;
      }
    }
    localObject = ua;
    if (localObject != null) {
      ((e)localObject).onPageScrollStateChanged(paramInt);
    }
  }
  
  private boolean f(int paramInt)
  {
    if (v.size() == 0)
    {
      if (oa) {
        return false;
      }
      qa = false;
      a(0, 0.0F, 0);
      if (qa) {
        return false;
      }
      throw new IllegalStateException("onPageScrolled did not call superclass implementation");
    }
    b localB = k();
    int i2 = getClientWidth();
    int i3 = G;
    float f2 = i3;
    float f1 = i2;
    f2 /= f1;
    int i1 = b;
    f1 = (paramInt / f1 - e) / (d + f2);
    paramInt = (int)((i2 + i3) * f1);
    qa = false;
    a(i1, f1, paramInt);
    if (qa) {
      return true;
    }
    throw new IllegalStateException("onPageScrolled did not call superclass implementation");
  }
  
  private int getClientWidth()
  {
    return getMeasuredWidth() - getPaddingLeft() - getPaddingRight();
  }
  
  private void j()
  {
    S = false;
    T = false;
    VelocityTracker localVelocityTracker = fa;
    if (localVelocityTracker != null)
    {
      localVelocityTracker.recycle();
      fa = null;
    }
  }
  
  private b k()
  {
    int i1 = getClientWidth();
    float f1;
    if (i1 > 0) {
      f1 = getScrollX() / i1;
    } else {
      f1 = 0.0F;
    }
    float f2;
    if (i1 > 0) {
      f2 = G / i1;
    } else {
      f2 = 0.0F;
    }
    Object localObject = null;
    i1 = 0;
    int i2 = 1;
    int i3 = -1;
    float f3 = 0.0F;
    float f4 = 0.0F;
    while (i1 < v.size())
    {
      b localB2 = (b)v.get(i1);
      int i4 = i1;
      b localB1 = localB2;
      if (i2 == 0)
      {
        int i5 = b;
        i3 += 1;
        i4 = i1;
        localB1 = localB2;
        if (i5 != i3)
        {
          localB1 = w;
          e = (f3 + f4 + f2);
          b = i3;
          d = y.getPageWidth(b);
          i4 = i1 - 1;
        }
      }
      f3 = e;
      f4 = d;
      if ((i2 == 0) && (f1 < f3)) {
        return localObject;
      }
      if (f1 >= f4 + f3 + f2)
      {
        if (i4 == v.size() - 1) {
          return localB1;
        }
        i3 = b;
        f4 = d;
        i1 = i4 + 1;
        i2 = 0;
        localObject = localB1;
      }
      else
      {
        return localB1;
      }
    }
    return localObject;
  }
  
  private void l()
  {
    int i2;
    for (int i1 = 0; i1 < getChildCount(); i1 = i2 + 1)
    {
      i2 = i1;
      if (!getChildAtgetLayoutParamsa)
      {
        removeViewAt(i1);
        i2 = i1 - 1;
      }
    }
  }
  
  private boolean m()
  {
    ea = -1;
    j();
    ma.onRelease();
    na.onRelease();
    return (ma.isFinished()) || (na.isFinished());
  }
  
  private void n()
  {
    if (ya != 0)
    {
      Object localObject = za;
      if (localObject == null) {
        za = new ArrayList();
      } else {
        ((ArrayList)localObject).clear();
      }
      int i2 = getChildCount();
      int i1 = 0;
      while (i1 < i2)
      {
        localObject = getChildAt(i1);
        za.add(localObject);
        i1 += 1;
      }
      Collections.sort(za, q);
    }
  }
  
  private void setScrollingCacheEnabled(boolean paramBoolean)
  {
    if (P != paramBoolean) {
      P = paramBoolean;
    }
  }
  
  public float a(float paramFloat)
  {
    return (float)Math.sin((paramFloat - 0.5F) * 0.47123894F);
  }
  
  public b a(int paramInt1, int paramInt2)
  {
    b localB = new b();
    b = paramInt1;
    a = y.instantiateItem(this, paramInt1);
    d = y.getPageWidth(paramInt1);
    if ((paramInt2 >= 0) && (paramInt2 < v.size()))
    {
      v.add(paramInt2, localB);
      return localB;
    }
    v.add(localB);
    return localB;
  }
  
  public b a(View paramView)
  {
    for (;;)
    {
      ViewParent localViewParent = paramView.getParent();
      if (localViewParent == this) {
        break label34;
      }
      if ((localViewParent == null) || (!(localViewParent instanceof View))) {
        break;
      }
      paramView = (View)localViewParent;
    }
    return null;
    label34:
    return b(paramView);
  }
  
  @i
  public void a(int paramInt1, float paramFloat, int paramInt2)
  {
    int i1 = ra;
    int i6 = 0;
    View localView;
    if (i1 > 0)
    {
      int i7 = getScrollX();
      i1 = getPaddingLeft();
      int i2 = getPaddingRight();
      int i8 = getWidth();
      int i9 = getChildCount();
      int i4 = 0;
      while (i4 < i9)
      {
        localView = getChildAt(i4);
        LayoutParams localLayoutParams = (LayoutParams)localView.getLayoutParams();
        if (a)
        {
          int i3 = b & 0x7;
          if (i3 != 1)
          {
            int i5;
            if (i3 != 3)
            {
              if (i3 != 5)
              {
                i5 = i1;
                i3 = i1;
                i1 = i5;
              }
              else
              {
                i3 = i8 - i2 - localView.getMeasuredWidth();
                i2 += localView.getMeasuredWidth();
              }
            }
            else
            {
              i5 = localView.getWidth() + i1;
              i3 = i1;
              i1 = i5;
            }
          }
          else
          {
            i3 = Math.max((i8 - localView.getMeasuredWidth()) / 2, i1);
          }
          i3 = i3 + i7 - localView.getLeft();
          if (i3 != 0) {
            localView.offsetLeftAndRight(i3);
          }
        }
        i4 += 1;
      }
    }
    b(paramInt1, paramFloat, paramInt2);
    if (wa != null)
    {
      paramInt2 = getScrollX();
      i1 = getChildCount();
      paramInt1 = i6;
      while (paramInt1 < i1)
      {
        localView = getChildAt(paramInt1);
        if (!getLayoutParamsa)
        {
          paramFloat = (localView.getLeft() - paramInt2) / getClientWidth();
          wa.a(localView, paramFloat);
        }
        paramInt1 += 1;
      }
    }
    qa = true;
  }
  
  public void a(int paramInt1, int paramInt2, int paramInt3)
  {
    if (getChildCount() == 0)
    {
      setScrollingCacheEnabled(false);
      return;
    }
    Scroller localScroller = D;
    int i1;
    if ((localScroller != null) && (!localScroller.isFinished())) {
      i1 = 1;
    } else {
      i1 = 0;
    }
    if (i1 != 0)
    {
      if (E) {
        i1 = D.getCurrX();
      } else {
        i1 = D.getStartX();
      }
      D.abortAnimation();
      setScrollingCacheEnabled(false);
    }
    else
    {
      i1 = getScrollX();
    }
    int i2 = getScrollY();
    int i3 = paramInt1 - i1;
    paramInt2 -= i2;
    if ((i3 == 0) && (paramInt2 == 0))
    {
      a(false);
      i();
      setScrollState(0);
      return;
    }
    setScrollingCacheEnabled(true);
    setScrollState(2);
    paramInt1 = getClientWidth();
    int i4 = paramInt1 / 2;
    float f2 = Math.abs(i3);
    float f1 = paramInt1;
    float f3 = Math.min(1.0F, f2 * 1.0F / f1);
    f2 = i4;
    f3 = a(f3);
    paramInt1 = Math.abs(paramInt3);
    if (paramInt1 > 0)
    {
      paramInt1 = Math.round(Math.abs((f3 * f2 + f2) / paramInt1) * 1000.0F) * 4;
    }
    else
    {
      f2 = y.getPageWidth(z);
      paramInt1 = (int)((Math.abs(i3) / (f2 * f1 + G) + 1.0F) * 100.0F);
    }
    paramInt1 = Math.min(paramInt1, 600);
    E = false;
    D.startScroll(i1, i2, i3, paramInt2, paramInt1);
    H.la(this);
  }
  
  public void a(int paramInt, boolean paramBoolean)
  {
    Q = false;
    a(paramInt, paramBoolean, false);
  }
  
  public void a(int paramInt, boolean paramBoolean1, boolean paramBoolean2)
  {
    a(paramInt, paramBoolean1, paramBoolean2, 0);
  }
  
  public void a(int paramInt1, boolean paramBoolean1, boolean paramBoolean2, int paramInt2)
  {
    y localY = y;
    if ((localY != null) && (localY.getCount() > 0))
    {
      if ((!paramBoolean2) && (z == paramInt1) && (v.size() != 0))
      {
        setScrollingCacheEnabled(false);
        return;
      }
      paramBoolean2 = true;
      int i1;
      if (paramInt1 < 0)
      {
        i1 = 0;
      }
      else
      {
        i1 = paramInt1;
        if (paramInt1 >= y.getCount()) {
          i1 = y.getCount() - 1;
        }
      }
      paramInt1 = R;
      int i2 = z;
      if ((i1 > i2 + paramInt1) || (i1 < i2 - paramInt1))
      {
        paramInt1 = 0;
        while (paramInt1 < v.size())
        {
          v.get(paramInt1)).c = true;
          paramInt1 += 1;
        }
      }
      if (z == i1) {
        paramBoolean2 = false;
      }
      if (oa)
      {
        z = i1;
        if (paramBoolean2) {
          d(i1);
        }
        requestLayout();
        return;
      }
      c(i1);
      a(i1, paramBoolean1, paramInt2, paramBoolean2);
      return;
    }
    setScrollingCacheEnabled(false);
  }
  
  public void a(@F d paramD)
  {
    if (va == null) {
      va = new ArrayList();
    }
    va.add(paramD);
  }
  
  public void a(@F e paramE)
  {
    if (sa == null) {
      sa = new ArrayList();
    }
    sa.add(paramE);
  }
  
  public void a(boolean paramBoolean, @G f paramF)
  {
    a(paramBoolean, paramF, 2);
  }
  
  public void a(boolean paramBoolean, @G f paramF, int paramInt)
  {
    int i2 = 1;
    boolean bool1;
    if (paramF != null) {
      bool1 = true;
    } else {
      bool1 = false;
    }
    boolean bool2;
    if (wa != null) {
      bool2 = true;
    } else {
      bool2 = false;
    }
    int i1;
    if (bool1 != bool2) {
      i1 = 1;
    } else {
      i1 = 0;
    }
    wa = paramF;
    setChildrenDrawingOrderEnabled(bool1);
    if (bool1)
    {
      if (paramBoolean) {
        i2 = 2;
      }
      ya = i2;
      xa = paramInt;
    }
    else
    {
      ya = 0;
    }
    if (i1 != 0) {
      i();
    }
  }
  
  public boolean a()
  {
    if (S) {
      return false;
    }
    ka = true;
    setScrollState(1);
    aa = 0.0F;
    ca = 0.0F;
    Object localObject = fa;
    if (localObject == null) {
      fa = VelocityTracker.obtain();
    } else {
      ((VelocityTracker)localObject).clear();
    }
    long l1 = SystemClock.uptimeMillis();
    localObject = MotionEvent.obtain(l1, l1, 0, 0.0F, 0.0F, 0);
    fa.addMovement((MotionEvent)localObject);
    ((MotionEvent)localObject).recycle();
    la = l1;
    return true;
  }
  
  public boolean a(int paramInt)
  {
    View localView = findFocus();
    boolean bool = false;
    Object localObject;
    int i1;
    if (localView != this)
    {
      localObject = localView;
      if (localView != null)
      {
        for (localObject = localView.getParent(); (localObject instanceof ViewGroup); localObject = ((ViewParent)localObject).getParent()) {
          if (localObject == this)
          {
            i1 = 1;
            break label67;
          }
        }
        i1 = 0;
        label67:
        localObject = localView;
        if (i1 == 0)
        {
          StringBuilder localStringBuilder = new StringBuilder();
          localStringBuilder.append(localView.getClass().getSimpleName());
          for (localObject = localView.getParent(); (localObject instanceof ViewGroup); localObject = ((ViewParent)localObject).getParent())
          {
            localStringBuilder.append(" => ");
            localStringBuilder.append(localObject.getClass().getSimpleName());
          }
          localObject = a.b("arrowScroll tried to find focus based on non-child current focused view ");
          ((StringBuilder)localObject).append(localStringBuilder.toString());
          ((StringBuilder)localObject).toString();
        }
      }
    }
    else
    {
      localObject = null;
    }
    localView = FocusFinder.getInstance().findNextFocus(this, (View)localObject, paramInt);
    int i2;
    if ((localView != null) && (localView != localObject)) {
      if (paramInt == 17)
      {
        i1 = ax, localView).left;
        i2 = ax, (View)localObject).left;
        if ((localObject != null) && (i1 >= i2)) {
          bool = g();
        } else {
          bool = localView.requestFocus();
        }
      }
    }
    for (;;)
    {
      break;
      if (paramInt == 66)
      {
        i1 = ax, localView).left;
        i2 = ax, (View)localObject).left;
        if ((localObject != null) && (i1 <= i2))
        {
          bool = h();
        }
        else
        {
          bool = localView.requestFocus();
          continue;
          if ((paramInt != 17) && (paramInt != 1))
          {
            if ((paramInt == 66) || (paramInt == 2)) {
              bool = h();
            }
          }
          else {
            bool = g();
          }
        }
      }
    }
    if (bool) {
      playSoundEffect(SoundEffectConstants.getContantForFocusDirection(paramInt));
    }
    return bool;
  }
  
  public boolean a(@F KeyEvent paramKeyEvent)
  {
    if (paramKeyEvent.getAction() == 0)
    {
      int i1 = paramKeyEvent.getKeyCode();
      if (i1 != 21)
      {
        if (i1 != 22)
        {
          if (i1 == 61)
          {
            if (paramKeyEvent.hasNoModifiers()) {
              return a(2);
            }
            if (paramKeyEvent.hasModifiers(1)) {
              return a(1);
            }
          }
        }
        else
        {
          if (paramKeyEvent.hasModifiers(2)) {
            return h();
          }
          return a(66);
        }
      }
      else
      {
        if (paramKeyEvent.hasModifiers(2)) {
          return g();
        }
        return a(17);
      }
    }
    return false;
  }
  
  public boolean a(View paramView, boolean paramBoolean, int paramInt1, int paramInt2, int paramInt3)
  {
    if ((paramView instanceof ViewGroup))
    {
      ViewGroup localViewGroup = (ViewGroup)paramView;
      int i2 = paramView.getScrollX();
      int i3 = paramView.getScrollY();
      int i1 = localViewGroup.getChildCount() - 1;
      while (i1 >= 0)
      {
        View localView = localViewGroup.getChildAt(i1);
        int i4 = paramInt2 + i2;
        if ((i4 >= localView.getLeft()) && (i4 < localView.getRight()))
        {
          int i5 = paramInt3 + i3;
          if ((i5 >= localView.getTop()) && (i5 < localView.getBottom()) && (a(localView, true, paramInt1, i4 - localView.getLeft(), i5 - localView.getTop()))) {
            return true;
          }
        }
        i1 -= 1;
      }
    }
    return (paramBoolean) && (paramView.canScrollHorizontally(-paramInt1));
  }
  
  public void addFocusables(ArrayList<View> paramArrayList, int paramInt1, int paramInt2)
  {
    int i2 = paramArrayList.size();
    int i3 = getDescendantFocusability();
    if (i3 != 393216)
    {
      int i1 = 0;
      while (i1 < getChildCount())
      {
        View localView = getChildAt(i1);
        if (localView.getVisibility() == 0)
        {
          b localB = b(localView);
          if ((localB != null) && (b == z)) {
            localView.addFocusables(paramArrayList, paramInt1, paramInt2);
          }
        }
        i1 += 1;
      }
    }
    if ((i3 != 262144) || (i2 == paramArrayList.size()))
    {
      if (!isFocusable()) {
        return;
      }
      if (((paramInt2 & 0x1) == 1) && (isInTouchMode()) && (!isFocusableInTouchMode())) {
        return;
      }
      paramArrayList.add(this);
    }
  }
  
  public void addTouchables(ArrayList<View> paramArrayList)
  {
    int i1 = 0;
    while (i1 < getChildCount())
    {
      View localView = getChildAt(i1);
      if (localView.getVisibility() == 0)
      {
        b localB = b(localView);
        if ((localB != null) && (b == z)) {
          localView.addTouchables(paramArrayList);
        }
      }
      i1 += 1;
    }
  }
  
  public void addView(View paramView, int paramInt, ViewGroup.LayoutParams paramLayoutParams)
  {
    ViewGroup.LayoutParams localLayoutParams = paramLayoutParams;
    if (!checkLayoutParams(paramLayoutParams)) {
      localLayoutParams = generateLayoutParams(paramLayoutParams);
    }
    paramLayoutParams = (LayoutParams)localLayoutParams;
    a |= c(paramView);
    if (O)
    {
      if (!a)
      {
        d = true;
        addViewInLayout(paramView, paramInt, localLayoutParams);
        return;
      }
      throw new IllegalStateException("Cannot add pager decor view during layout");
    }
    super.addView(paramView, paramInt, localLayoutParams);
  }
  
  public b b(int paramInt)
  {
    int i1 = 0;
    while (i1 < v.size())
    {
      b localB = (b)v.get(i1);
      if (b == paramInt) {
        return localB;
      }
      i1 += 1;
    }
    return null;
  }
  
  public b b(View paramView)
  {
    int i1 = 0;
    while (i1 < v.size())
    {
      b localB = (b)v.get(i1);
      if (y.isViewFromObject(paramView, a)) {
        return localB;
      }
      i1 += 1;
    }
    return null;
  }
  
  public void b()
  {
    List localList = sa;
    if (localList != null) {
      localList.clear();
    }
  }
  
  public void b(float paramFloat)
  {
    if (ka)
    {
      if (y == null) {
        return;
      }
      aa += paramFloat;
      float f2 = getScrollX() - paramFloat;
      float f3 = getClientWidth();
      paramFloat = K * f3;
      float f1 = L * f3;
      Object localObject1 = (b)v.get(0);
      Object localObject2 = v;
      localObject2 = (b)((ArrayList)localObject2).get(((ArrayList)localObject2).size() - 1);
      if (b != 0) {
        paramFloat = e * f3;
      }
      if (b != y.getCount() - 1) {
        f1 = e * f3;
      }
      if (f2 >= paramFloat)
      {
        paramFloat = f2;
        if (f2 > f1) {
          paramFloat = f1;
        }
      }
      f1 = aa;
      int i1 = (int)paramFloat;
      aa = (paramFloat - i1 + f1);
      scrollTo(i1, getScrollY());
      f(i1);
      long l1 = SystemClock.uptimeMillis();
      localObject1 = MotionEvent.obtain(la, l1, 2, aa, 0.0F, 0);
      fa.addMovement((MotionEvent)localObject1);
      ((MotionEvent)localObject1).recycle();
      return;
    }
    throw new IllegalStateException("No fake drag in progress. Call beginFakeDrag first.");
  }
  
  public void b(int paramInt1, int paramInt2)
  {
    a(paramInt1, paramInt2, 0);
  }
  
  public void b(@F d paramD)
  {
    List localList = va;
    if (localList != null) {
      localList.remove(paramD);
    }
  }
  
  public void b(@F e paramE)
  {
    List localList = sa;
    if (localList != null) {
      localList.remove(paramE);
    }
  }
  
  public e c(e paramE)
  {
    e localE = ua;
    ua = paramE;
    return localE;
  }
  
  public void c()
  {
    int i9 = y.getCount();
    u = i9;
    if ((v.size() < R * 2 + 1) && (v.size() < i9)) {
      i1 = 1;
    } else {
      i1 = 0;
    }
    int i2 = z;
    int i6 = i1;
    int i1 = i2;
    int i3 = 0;
    i2 = 0;
    Object localObject;
    while (i3 < v.size())
    {
      localObject = (b)v.get(i3);
      int i8 = y.getItemPosition(a);
      int i4;
      int i5;
      int i7;
      if (i8 == -1)
      {
        i4 = i3;
        i5 = i2;
        i7 = i1;
      }
      else
      {
        if (i8 == -2)
        {
          v.remove(i3);
          i5 = i3 - 1;
          i4 = i2;
          if (i2 == 0)
          {
            y.startUpdate(this);
            i4 = 1;
          }
          y.destroyItem(this, b, a);
          i6 = z;
          i3 = i5;
          i2 = i4;
          if (i6 == b)
          {
            i1 = Math.max(0, Math.min(i6, i9 - 1));
            i2 = i4;
            i3 = i5;
          }
        }
        for (;;)
        {
          i6 = 1;
          i4 = i3;
          i5 = i2;
          i7 = i1;
          break;
          int i10 = b;
          i4 = i3;
          i5 = i2;
          i7 = i1;
          if (i10 == i8) {
            break;
          }
          if (i10 == z) {
            i1 = i8;
          }
          b = i8;
        }
      }
      i3 = i4 + 1;
      i2 = i5;
      i1 = i7;
    }
    if (i2 != 0) {
      y.finishUpdate(this);
    }
    Collections.sort(v, j);
    if (i6 != 0)
    {
      i3 = getChildCount();
      i2 = 0;
      while (i2 < i3)
      {
        localObject = (LayoutParams)getChildAt(i2).getLayoutParams();
        if (!a) {
          c = 0.0F;
        }
        i2 += 1;
      }
      a(i1, false, true);
      requestLayout();
    }
  }
  
  public void c(int paramInt)
  {
    int i1 = z;
    if (i1 != paramInt)
    {
      localObject2 = b(i1);
      z = paramInt;
    }
    else
    {
      localObject2 = null;
    }
    if (y == null)
    {
      n();
      return;
    }
    if (Q)
    {
      n();
      return;
    }
    if (getWindowToken() == null) {
      return;
    }
    y.startUpdate(this);
    paramInt = R;
    int i7 = Math.max(0, z - paramInt);
    int i5 = y.getCount();
    int i6 = Math.min(i5 - 1, z + paramInt);
    if (i5 == u)
    {
      int i2 = 0;
      while (i2 < v.size())
      {
        localObject1 = (b)v.get(i2);
        paramInt = b;
        i1 = z;
        if (paramInt >= i1)
        {
          if (paramInt != i1) {
            break;
          }
          break label189;
        }
        i2 += 1;
      }
      localObject1 = null;
      label189:
      Object localObject3 = localObject1;
      if (localObject1 == null)
      {
        localObject3 = localObject1;
        if (i5 > 0) {
          localObject3 = a(z, i2);
        }
      }
      if (localObject3 != null)
      {
        int i3 = i2 - 1;
        if (i3 >= 0) {
          localObject1 = (b)v.get(i3);
        } else {
          localObject1 = null;
        }
        int i8 = getClientWidth();
        float f3;
        if (i8 <= 0) {
          f3 = 0.0F;
        } else {
          f3 = 2.0F - d + getPaddingLeft() / i8;
        }
        int i4 = z - 1;
        float f2 = 0.0F;
        Object localObject4 = localObject1;
        while (i4 >= 0)
        {
          if ((f2 >= f3) && (i4 < i7))
          {
            if (localObject4 == null) {
              break;
            }
            paramInt = i2;
            i1 = i3;
            localObject1 = localObject4;
            f1 = f2;
            if (i4 != b) {
              break label587;
            }
            paramInt = i2;
            i1 = i3;
            localObject1 = localObject4;
            f1 = f2;
            if (c) {
              break label587;
            }
            v.remove(i3);
            y.destroyItem(this, i4, a);
            i3 -= 1;
            i2 -= 1;
            paramInt = i2;
            i1 = i3;
            f1 = f2;
            if (i3 >= 0)
            {
              localObject1 = (b)v.get(i3);
              paramInt = i2;
              i1 = i3;
              f1 = f2;
              break label587;
            }
          }
          else if ((localObject4 != null) && (i4 == b))
          {
            f2 += d;
            i3 -= 1;
            paramInt = i2;
            i1 = i3;
            f1 = f2;
            if (i3 >= 0)
            {
              localObject1 = (b)v.get(i3);
              paramInt = i2;
              i1 = i3;
              f1 = f2;
              break label587;
            }
          }
          else
          {
            f2 += a1d;
            i2 += 1;
            paramInt = i2;
            i1 = i3;
            f1 = f2;
            if (i3 >= 0)
            {
              localObject1 = (b)v.get(i3);
              paramInt = i2;
              i1 = i3;
              f1 = f2;
              break label587;
            }
          }
          localObject1 = null;
          label587:
          i4 -= 1;
          i2 = paramInt;
          i3 = i1;
          localObject4 = localObject1;
          f2 = f1;
        }
        float f1 = d;
        paramInt = i2 + 1;
        if (f1 < 2.0F)
        {
          if (paramInt < v.size()) {
            localObject1 = (b)v.get(paramInt);
          } else {
            localObject1 = null;
          }
          if (i8 <= 0) {
            f3 = 0.0F;
          } else {
            f3 = getPaddingRight() / i8 + 2.0F;
          }
          i1 = z;
          for (;;)
          {
            i3 = i1 + 1;
            if (i3 >= i5) {
              break;
            }
            if ((f1 >= f3) && (i3 > i6))
            {
              if (localObject1 == null) {
                break;
              }
              i1 = i3;
              if (i3 != b) {
                continue;
              }
              i1 = i3;
              if (c) {
                continue;
              }
              v.remove(paramInt);
              y.destroyItem(this, i3, a);
              f2 = f1;
              i1 = paramInt;
              if (paramInt < v.size())
              {
                localObject1 = (b)v.get(paramInt);
                i1 = i3;
              }
            }
            else if ((localObject1 != null) && (i3 == b))
            {
              f1 += d;
              paramInt += 1;
              f2 = f1;
              i1 = paramInt;
              if (paramInt < v.size())
              {
                localObject1 = (b)v.get(paramInt);
                i1 = i3;
              }
            }
            else
            {
              localObject1 = a(i3, paramInt);
              paramInt += 1;
              f1 += d;
              f2 = f1;
              i1 = paramInt;
              if (paramInt < v.size())
              {
                localObject1 = (b)v.get(paramInt);
                i1 = i3;
                continue;
              }
            }
            localObject1 = null;
            f1 = f2;
            paramInt = i1;
            i1 = i3;
          }
        }
        a((b)localObject3, i2, (b)localObject2);
        y.setPrimaryItem(this, z, a);
      }
      y.finishUpdate(this);
      i1 = getChildCount();
      paramInt = 0;
      while (paramInt < i1)
      {
        localObject2 = getChildAt(paramInt);
        localObject1 = (LayoutParams)((View)localObject2).getLayoutParams();
        f = paramInt;
        if ((!a) && (c == 0.0F))
        {
          localObject2 = b((View)localObject2);
          if (localObject2 != null)
          {
            c = d;
            e = b;
          }
        }
        paramInt += 1;
      }
      n();
      if (hasFocus())
      {
        localObject1 = findFocus();
        if (localObject1 != null) {
          localObject1 = a((View)localObject1);
        } else {
          localObject1 = null;
        }
        if ((localObject1 == null) || (b != z))
        {
          paramInt = 0;
          while (paramInt < getChildCount())
          {
            localObject1 = getChildAt(paramInt);
            localObject2 = b((View)localObject1);
            if ((localObject2 != null) && (b == z) && (((View)localObject1).requestFocus(2))) {
              return;
            }
            paramInt += 1;
          }
        }
      }
      return;
    }
    try
    {
      localObject1 = getResources().getResourceName(getId());
    }
    catch (Resources.NotFoundException localNotFoundException)
    {
      for (;;) {}
    }
    Object localObject1 = Integer.toHexString(getId());
    Object localObject2 = a.b("The application's PagerAdapter changed the adapter's contents without calling PagerAdapter#notifyDataSetChanged! Expected adapter item count: ");
    ((StringBuilder)localObject2).append(u);
    ((StringBuilder)localObject2).append(", found: ");
    ((StringBuilder)localObject2).append(i5);
    ((StringBuilder)localObject2).append(" Pager id: ");
    ((StringBuilder)localObject2).append((String)localObject1);
    ((StringBuilder)localObject2).append(" Pager class: ");
    ((StringBuilder)localObject2).append(getClass());
    ((StringBuilder)localObject2).append(" Problematic adapter: ");
    ((StringBuilder)localObject2).append(y.getClass());
    localObject1 = new IllegalStateException(((StringBuilder)localObject2).toString());
    for (;;)
    {
      throw ((Throwable)localObject1);
    }
  }
  
  public boolean canScrollHorizontally(int paramInt)
  {
    y localY = y;
    boolean bool2 = false;
    boolean bool1 = false;
    if (localY == null) {
      return false;
    }
    int i1 = getClientWidth();
    int i2 = getScrollX();
    if (paramInt < 0)
    {
      if (i2 > (int)(i1 * K)) {
        bool1 = true;
      }
      return bool1;
    }
    bool1 = bool2;
    if (paramInt > 0)
    {
      bool1 = bool2;
      if (i2 < (int)(i1 * L)) {
        bool1 = true;
      }
    }
    return bool1;
  }
  
  public boolean checkLayoutParams(ViewGroup.LayoutParams paramLayoutParams)
  {
    return ((paramLayoutParams instanceof LayoutParams)) && (super.checkLayoutParams(paramLayoutParams));
  }
  
  public void computeScroll()
  {
    E = true;
    if ((!D.isFinished()) && (D.computeScrollOffset()))
    {
      int i1 = getScrollX();
      int i2 = getScrollY();
      int i3 = D.getCurrX();
      int i4 = D.getCurrY();
      if ((i1 != i3) || (i2 != i4))
      {
        scrollTo(i3, i4);
        if (!f(i3))
        {
          D.abortAnimation();
          scrollTo(0, i4);
        }
      }
      H.la(this);
      return;
    }
    a(true);
  }
  
  public void d()
  {
    if (ka)
    {
      if (y != null)
      {
        Object localObject = fa;
        ((VelocityTracker)localObject).computeCurrentVelocity(1000, ha);
        int i1 = (int)((VelocityTracker)localObject).getXVelocity(ea);
        Q = true;
        int i2 = getClientWidth();
        int i3 = getScrollX();
        localObject = k();
        a(a(b, (i3 / i2 - e) / d, i1, (int)(aa - ca)), true, true, i1);
      }
      j();
      ka = false;
      return;
    }
    throw new IllegalStateException("No fake drag in progress. Call beginFakeDrag first.");
  }
  
  public boolean dispatchKeyEvent(KeyEvent paramKeyEvent)
  {
    return (super.dispatchKeyEvent(paramKeyEvent)) || (a(paramKeyEvent));
  }
  
  public boolean dispatchPopulateAccessibilityEvent(AccessibilityEvent paramAccessibilityEvent)
  {
    if (paramAccessibilityEvent.getEventType() == 4096) {
      return super.dispatchPopulateAccessibilityEvent(paramAccessibilityEvent);
    }
    int i2 = getChildCount();
    int i1 = 0;
    while (i1 < i2)
    {
      View localView = getChildAt(i1);
      if (localView.getVisibility() == 0)
      {
        b localB = b(localView);
        if ((localB != null) && (b == z) && (localView.dispatchPopulateAccessibilityEvent(paramAccessibilityEvent))) {
          return true;
        }
      }
      i1 += 1;
    }
    return false;
  }
  
  public void draw(Canvas paramCanvas)
  {
    super.draw(paramCanvas);
    int i4 = getOverScrollMode();
    int i3 = 0;
    int i1 = 0;
    if (i4 != 0) {
      if (i4 == 1)
      {
        y localY = y;
        if ((localY != null) && (localY.getCount() > 1)) {}
      }
      else
      {
        ma.finish();
        na.finish();
        break label260;
      }
    }
    int i5;
    int i2;
    if (!ma.isFinished())
    {
      i3 = paramCanvas.save();
      i1 = getHeight() - getPaddingTop() - getPaddingBottom();
      i4 = getWidth();
      paramCanvas.rotate(270.0F);
      i5 = -i1;
      paramCanvas.translate(getPaddingTop() + i5, K * i4);
      ma.setSize(i1, i4);
      i2 = false | ma.draw(paramCanvas);
      paramCanvas.restoreToCount(i3);
    }
    i3 = i2;
    boolean bool;
    if (!na.isFinished())
    {
      i4 = paramCanvas.save();
      i3 = getWidth();
      i5 = getHeight();
      int i6 = getPaddingTop();
      int i7 = getPaddingBottom();
      paramCanvas.rotate(90.0F);
      paramCanvas.translate(-getPaddingTop(), -(L + 1.0F) * i3);
      na.setSize(i5 - i6 - i7, i3);
      bool = i2 | na.draw(paramCanvas);
      paramCanvas.restoreToCount(i4);
    }
    label260:
    if (bool) {
      H.la(this);
    }
  }
  
  public void drawableStateChanged()
  {
    super.drawableStateChanged();
    Drawable localDrawable = H;
    if ((localDrawable != null) && (localDrawable.isStateful())) {
      localDrawable.setState(getDrawableState());
    }
  }
  
  public void e()
  {
    setWillNotDraw(false);
    setDescendantFocusability(262144);
    setFocusable(true);
    Context localContext = getContext();
    D = new Scroller(localContext, k);
    ViewConfiguration localViewConfiguration = ViewConfiguration.get(localContext);
    float f1 = getResourcesgetDisplayMetricsdensity;
    W = localViewConfiguration.getScaledPagingTouchSlop();
    ga = ((int)(400.0F * f1));
    ha = localViewConfiguration.getScaledMaximumFlingVelocity();
    ma = new EdgeEffect(localContext);
    na = new EdgeEffect(localContext);
    ia = ((int)(25.0F * f1));
    ja = ((int)(2.0F * f1));
    U = ((int)(f1 * 16.0F));
    H.a(this, new c());
    if (H.n(this) == 0) {
      H.j(this, 1);
    }
    H.a(this, new N(this));
  }
  
  public boolean f()
  {
    return ka;
  }
  
  public boolean g()
  {
    int i1 = z;
    if (i1 > 0)
    {
      a(i1 - 1, true);
      return true;
    }
    return false;
  }
  
  public ViewGroup.LayoutParams generateDefaultLayoutParams()
  {
    return new LayoutParams();
  }
  
  public ViewGroup.LayoutParams generateLayoutParams(AttributeSet paramAttributeSet)
  {
    return new LayoutParams(getContext(), paramAttributeSet);
  }
  
  public ViewGroup.LayoutParams generateLayoutParams(ViewGroup.LayoutParams paramLayoutParams)
  {
    return generateDefaultLayoutParams();
  }
  
  @G
  public y getAdapter()
  {
    return y;
  }
  
  public int getChildDrawingOrder(int paramInt1, int paramInt2)
  {
    int i1 = paramInt2;
    if (ya == 2) {
      i1 = paramInt1 - 1 - paramInt2;
    }
    return za.get(i1)).getLayoutParams()).f;
  }
  
  public int getCurrentItem()
  {
    return z;
  }
  
  public int getOffscreenPageLimit()
  {
    return R;
  }
  
  public int getPageMargin()
  {
    return G;
  }
  
  public boolean h()
  {
    y localY = y;
    if ((localY != null) && (z < localY.getCount() - 1))
    {
      a(z + 1, true);
      return true;
    }
    return false;
  }
  
  public void i()
  {
    c(z);
  }
  
  public void onAttachedToWindow()
  {
    super.onAttachedToWindow();
    oa = true;
  }
  
  public void onDetachedFromWindow()
  {
    removeCallbacks(Aa);
    Scroller localScroller = D;
    if ((localScroller != null) && (!localScroller.isFinished())) {
      D.abortAnimation();
    }
    super.onDetachedFromWindow();
  }
  
  public void onDraw(Canvas paramCanvas)
  {
    super.onDraw(paramCanvas);
    if ((G > 0) && (H != null) && (v.size() > 0) && (y != null))
    {
      int i3 = getScrollX();
      int i4 = getWidth();
      float f1 = G;
      float f4 = i4;
      float f2 = f1 / f4;
      Object localObject = v;
      int i2 = 0;
      localObject = (b)((ArrayList)localObject).get(0);
      f1 = e;
      int i5 = v.size();
      int i1 = b;
      int i6 = v.get(i5 - 1)).b;
      while (i1 < i6)
      {
        while ((i1 > b) && (i2 < i5))
        {
          localObject = v;
          i2 += 1;
          localObject = (b)((ArrayList)localObject).get(i2);
        }
        float f5;
        float f3;
        if (i1 == b)
        {
          f1 = e;
          f5 = d;
          f3 = (f1 + f5) * f4;
          f1 = f1 + f5 + f2;
        }
        else
        {
          f5 = y.getPageWidth(i1);
          f3 = (f1 + f5) * f4;
          f1 = f5 + f2 + f1;
        }
        if (G + f3 > i3)
        {
          H.setBounds(Math.round(f3), I, Math.round(G + f3), J);
          H.draw(paramCanvas);
        }
        if (f3 > i3 + i4) {
          return;
        }
        i1 += 1;
      }
    }
  }
  
  public boolean onInterceptTouchEvent(MotionEvent paramMotionEvent)
  {
    int i1 = paramMotionEvent.getAction() & 0xFF;
    if ((i1 != 3) && (i1 != 1))
    {
      if (i1 != 0)
      {
        if (S) {
          return true;
        }
        if (T) {
          return false;
        }
      }
      float f1;
      if (i1 != 0)
      {
        if (i1 != 2)
        {
          if (i1 == 6) {
            a(paramMotionEvent);
          }
        }
        else
        {
          i1 = ea;
          if (i1 != -1)
          {
            i1 = paramMotionEvent.findPointerIndex(i1);
            float f2 = paramMotionEvent.getX(i1);
            f1 = f2 - aa;
            float f4 = Math.abs(f1);
            float f3 = paramMotionEvent.getY(i1);
            float f5 = Math.abs(f3 - da);
            if ((f1 != 0.0F) && (!a(aa, f1)) && (a(this, false, (int)f1, (int)f2, (int)f3)))
            {
              aa = f2;
              ba = f3;
              T = true;
              return false;
            }
            if ((f4 > W) && (f4 * 0.5F > f5))
            {
              S = true;
              c(true);
              setScrollState(1);
              if (f1 > 0.0F) {
                f1 = ca + W;
              } else {
                f1 = ca - W;
              }
              aa = f1;
              ba = f3;
              setScrollingCacheEnabled(true);
            }
            else if (f5 > W)
            {
              T = true;
            }
            if ((S) && (c(f2))) {
              H.la(this);
            }
          }
        }
      }
      else
      {
        f1 = paramMotionEvent.getX();
        ca = f1;
        aa = f1;
        f1 = paramMotionEvent.getY();
        da = f1;
        ba = f1;
        ea = paramMotionEvent.getPointerId(0);
        T = false;
        E = true;
        D.computeScrollOffset();
        if ((Ba == 2) && (Math.abs(D.getFinalX() - D.getCurrX()) > ja))
        {
          D.abortAnimation();
          Q = false;
          i();
          S = true;
          c(true);
          setScrollState(1);
        }
        else
        {
          a(false);
          S = false;
        }
      }
      if (fa == null) {
        fa = VelocityTracker.obtain();
      }
      fa.addMovement(paramMotionEvent);
      return S;
    }
    m();
    return false;
  }
  
  public void onLayout(boolean paramBoolean, int paramInt1, int paramInt2, int paramInt3, int paramInt4)
  {
    int i8 = getChildCount();
    int i9 = paramInt3 - paramInt1;
    int i10 = paramInt4 - paramInt2;
    paramInt2 = getPaddingLeft();
    paramInt1 = getPaddingTop();
    int i2 = getPaddingRight();
    paramInt4 = getPaddingBottom();
    int i11 = getScrollX();
    int i3 = 0;
    int i4 = 0;
    View localView;
    int i1;
    LayoutParams localLayoutParams;
    while (i4 < i8)
    {
      localView = getChildAt(i4);
      i1 = paramInt2;
      int i7 = i2;
      int i6 = paramInt1;
      int i5 = paramInt4;
      paramInt3 = i3;
      if (localView.getVisibility() != 8)
      {
        localLayoutParams = (LayoutParams)localView.getLayoutParams();
        i1 = paramInt2;
        i7 = i2;
        i6 = paramInt1;
        i5 = paramInt4;
        paramInt3 = i3;
        if (a)
        {
          i1 = b;
          paramInt3 = i1 & 0x7;
          i5 = i1 & 0x70;
          if (paramInt3 != 1)
          {
            if (paramInt3 != 3)
            {
              if (paramInt3 != 5)
              {
                paramInt3 = paramInt2;
                i1 = paramInt2;
              }
              else
              {
                paramInt3 = i9 - i2 - localView.getMeasuredWidth();
                i2 += localView.getMeasuredWidth();
                i1 = paramInt2;
              }
            }
            else
            {
              i1 = localView.getMeasuredWidth();
              paramInt3 = paramInt2;
              i1 += paramInt2;
            }
          }
          else
          {
            paramInt3 = Math.max((i9 - localView.getMeasuredWidth()) / 2, paramInt2);
            i1 = paramInt2;
          }
          if (i5 != 16)
          {
            if (i5 != 48)
            {
              if (i5 != 80)
              {
                paramInt2 = paramInt1;
              }
              else
              {
                paramInt2 = i10 - paramInt4 - localView.getMeasuredHeight();
                paramInt4 += localView.getMeasuredHeight();
              }
            }
            else
            {
              i5 = localView.getMeasuredHeight();
              paramInt2 = paramInt1;
              paramInt1 = i5 + paramInt1;
            }
          }
          else {
            paramInt2 = Math.max((i10 - localView.getMeasuredHeight()) / 2, paramInt1);
          }
          paramInt3 += i11;
          localView.layout(paramInt3, paramInt2, localView.getMeasuredWidth() + paramInt3, localView.getMeasuredHeight() + paramInt2);
          paramInt3 = i3 + 1;
          i5 = paramInt4;
          i6 = paramInt1;
          i7 = i2;
        }
      }
      i4 += 1;
      paramInt2 = i1;
      i2 = i7;
      paramInt1 = i6;
      paramInt4 = i5;
      i3 = paramInt3;
    }
    paramInt3 = 0;
    while (paramInt3 < i8)
    {
      localView = getChildAt(paramInt3);
      if (localView.getVisibility() != 8)
      {
        localLayoutParams = (LayoutParams)localView.getLayoutParams();
        if (!a)
        {
          b localB = b(localView);
          if (localB != null)
          {
            float f1 = i9 - paramInt2 - i2;
            i1 = (int)(e * f1) + paramInt2;
            if (d)
            {
              d = false;
              localView.measure(View.MeasureSpec.makeMeasureSpec((int)(f1 * c), 1073741824), View.MeasureSpec.makeMeasureSpec(i10 - paramInt1 - paramInt4, 1073741824));
            }
            localView.layout(i1, paramInt1, localView.getMeasuredWidth() + i1, localView.getMeasuredHeight() + paramInt1);
          }
        }
      }
      paramInt3 += 1;
    }
    I = paramInt1;
    J = (i10 - paramInt4);
    ra = i3;
    if (oa) {
      a(z, false, 0, false);
    }
    oa = false;
  }
  
  public void onMeasure(int paramInt1, int paramInt2)
  {
    int i9 = 0;
    setMeasuredDimension(ViewGroup.getDefaultSize(0, paramInt1), ViewGroup.getDefaultSize(0, paramInt2));
    paramInt1 = getMeasuredWidth();
    V = Math.min(paramInt1 / 10, U);
    int i1 = getPaddingLeft();
    int i2 = getPaddingRight();
    paramInt2 = getMeasuredHeight();
    int i3 = getPaddingTop();
    int i4 = getPaddingBottom();
    int i10 = getChildCount();
    paramInt2 = paramInt2 - i3 - i4;
    paramInt1 = paramInt1 - i1 - i2;
    i3 = 0;
    View localView;
    LayoutParams localLayoutParams;
    for (;;)
    {
      int i6 = 1;
      int i8 = 1073741824;
      if (i3 >= i10) {
        break;
      }
      localView = getChildAt(i3);
      i1 = paramInt2;
      i2 = paramInt1;
      if (localView.getVisibility() != 8)
      {
        localLayoutParams = (LayoutParams)localView.getLayoutParams();
        i1 = paramInt2;
        i2 = paramInt1;
        if (localLayoutParams != null)
        {
          i1 = paramInt2;
          i2 = paramInt1;
          if (a)
          {
            i2 = b;
            i1 = i2 & 0x7;
            i2 &= 0x70;
            int i5;
            if ((i2 != 48) && (i2 != 80)) {
              i5 = 0;
            } else {
              i5 = 1;
            }
            i4 = i6;
            if (i1 != 3) {
              if (i1 == 5) {
                i4 = i6;
              } else {
                i4 = 0;
              }
            }
            i1 = Integer.MIN_VALUE;
            if (i5 != 0)
            {
              i2 = 1073741824;
            }
            else
            {
              i2 = i1;
              if (i4 != 0)
              {
                i6 = 1073741824;
                i2 = i1;
                i1 = i6;
                break label273;
              }
            }
            i1 = Integer.MIN_VALUE;
            label273:
            i6 = width;
            int i7;
            if (i6 != -2)
            {
              if (i6 != -1) {
                i2 = i6;
              } else {
                i2 = paramInt1;
              }
              i6 = 1073741824;
              i7 = i2;
            }
            else
            {
              i7 = paramInt1;
              i6 = i2;
            }
            i2 = height;
            if (i2 != -2)
            {
              if (i2 != -1) {
                i1 = i2;
              } else {
                i1 = paramInt2;
              }
            }
            else
            {
              i2 = paramInt2;
              i8 = i1;
              i1 = i2;
            }
            localView.measure(View.MeasureSpec.makeMeasureSpec(i7, i6), View.MeasureSpec.makeMeasureSpec(i1, i8));
            if (i5 != 0)
            {
              i1 = paramInt2 - localView.getMeasuredHeight();
              i2 = paramInt1;
            }
            else
            {
              i1 = paramInt2;
              i2 = paramInt1;
              if (i4 != 0)
              {
                i2 = paramInt1 - localView.getMeasuredWidth();
                i1 = paramInt2;
              }
            }
          }
        }
      }
      i3 += 1;
      paramInt2 = i1;
      paramInt1 = i2;
    }
    M = View.MeasureSpec.makeMeasureSpec(paramInt1, 1073741824);
    N = View.MeasureSpec.makeMeasureSpec(paramInt2, 1073741824);
    O = true;
    i();
    O = false;
    i1 = getChildCount();
    paramInt2 = i9;
    while (paramInt2 < i1)
    {
      localView = getChildAt(paramInt2);
      if (localView.getVisibility() != 8)
      {
        localLayoutParams = (LayoutParams)localView.getLayoutParams();
        if ((localLayoutParams == null) || (!a)) {
          localView.measure(View.MeasureSpec.makeMeasureSpec((int)(paramInt1 * c), 1073741824), N);
        }
      }
      paramInt2 += 1;
    }
  }
  
  public boolean onRequestFocusInDescendants(int paramInt, Rect paramRect)
  {
    int i1 = getChildCount();
    int i3 = -1;
    int i2;
    if ((paramInt & 0x2) != 0)
    {
      i3 = i1;
      i1 = 0;
      i2 = 1;
    }
    else
    {
      i1 -= 1;
      i2 = -1;
    }
    while (i1 != i3)
    {
      View localView = getChildAt(i1);
      if (localView.getVisibility() == 0)
      {
        b localB = b(localView);
        if ((localB != null) && (b == z) && (localView.requestFocus(paramInt, paramRect))) {
          return true;
        }
      }
      i1 += i2;
    }
    return false;
  }
  
  public void onRestoreInstanceState(Parcelable paramParcelable)
  {
    if (!(paramParcelable instanceof SavedState))
    {
      super.onRestoreInstanceState(paramParcelable);
      return;
    }
    paramParcelable = (SavedState)paramParcelable;
    super.onRestoreInstanceState(paramParcelable.getSuperState());
    y localY = y;
    if (localY != null)
    {
      localY.restoreState(b, c);
      a(a, false, true);
      return;
    }
    A = a;
    B = b;
    C = c;
  }
  
  public Parcelable onSaveInstanceState()
  {
    SavedState localSavedState = new SavedState(super.onSaveInstanceState());
    a = z;
    y localY = y;
    if (localY != null) {
      b = localY.saveState();
    }
    return localSavedState;
  }
  
  public void onSizeChanged(int paramInt1, int paramInt2, int paramInt3, int paramInt4)
  {
    super.onSizeChanged(paramInt1, paramInt2, paramInt3, paramInt4);
    if (paramInt1 != paramInt3)
    {
      paramInt2 = G;
      a(paramInt1, paramInt3, paramInt2, paramInt2);
    }
  }
  
  public boolean onTouchEvent(MotionEvent paramMotionEvent)
  {
    if (ka) {
      return true;
    }
    int i1 = paramMotionEvent.getAction();
    boolean bool = false;
    if ((i1 == 0) && (paramMotionEvent.getEdgeFlags() != 0)) {
      return false;
    }
    Object localObject = y;
    if (localObject != null)
    {
      if (((y)localObject).getCount() == 0) {
        return false;
      }
      if (fa == null) {
        fa = VelocityTracker.obtain();
      }
      fa.addMovement(paramMotionEvent);
      i1 = paramMotionEvent.getAction() & 0xFF;
      float f1;
      if (i1 != 0)
      {
        float f2;
        if (i1 != 1)
        {
          if (i1 != 2)
          {
            if (i1 != 3)
            {
              if (i1 != 5)
              {
                if (i1 == 6)
                {
                  a(paramMotionEvent);
                  aa = paramMotionEvent.getX(paramMotionEvent.findPointerIndex(ea));
                }
              }
              else
              {
                i1 = paramMotionEvent.getActionIndex();
                aa = paramMotionEvent.getX(i1);
                ea = paramMotionEvent.getPointerId(i1);
              }
            }
            else if (S)
            {
              a(z, true, 0, false);
              bool = m();
            }
          }
          else
          {
            if (!S)
            {
              i1 = paramMotionEvent.findPointerIndex(ea);
              if (i1 == -1)
              {
                bool = m();
                break label601;
              }
              f1 = paramMotionEvent.getX(i1);
              float f3 = Math.abs(f1 - aa);
              f2 = paramMotionEvent.getY(i1);
              float f4 = Math.abs(f2 - ba);
              if ((f3 > W) && (f3 > f4))
              {
                S = true;
                c(true);
                f3 = ca;
                if (f1 - f3 > 0.0F) {
                  f1 = f3 + W;
                } else {
                  f1 = f3 - W;
                }
                aa = f1;
                ba = f2;
                setScrollState(1);
                setScrollingCacheEnabled(true);
                localObject = getParent();
                if (localObject != null) {
                  ((ViewParent)localObject).requestDisallowInterceptTouchEvent(true);
                }
              }
            }
            if (S) {
              bool = false | c(paramMotionEvent.getX(paramMotionEvent.findPointerIndex(ea)));
            }
          }
        }
        else if (S)
        {
          localObject = fa;
          ((VelocityTracker)localObject).computeCurrentVelocity(1000, ha);
          i1 = (int)((VelocityTracker)localObject).getXVelocity(ea);
          Q = true;
          int i2 = getClientWidth();
          int i3 = getScrollX();
          localObject = k();
          f2 = G;
          f1 = i2;
          f2 /= f1;
          a(a(b, (i3 / f1 - e) / (d + f2), i1, (int)(paramMotionEvent.getX(paramMotionEvent.findPointerIndex(ea)) - ca)), true, true, i1);
          bool = m();
        }
      }
      else
      {
        D.abortAnimation();
        Q = false;
        i();
        f1 = paramMotionEvent.getX();
        ca = f1;
        aa = f1;
        f1 = paramMotionEvent.getY();
        da = f1;
        ba = f1;
        ea = paramMotionEvent.getPointerId(0);
      }
      label601:
      if (bool) {
        H.la(this);
      }
      return true;
    }
    return false;
  }
  
  public void removeView(View paramView)
  {
    if (O)
    {
      removeViewInLayout(paramView);
      return;
    }
    super.removeView(paramView);
  }
  
  public void setAdapter(@G y paramY)
  {
    Object localObject = y;
    int i2 = 0;
    int i1;
    if (localObject != null)
    {
      ((y)localObject).setViewPagerObserver(null);
      y.startUpdate(this);
      i1 = 0;
      while (i1 < v.size())
      {
        localObject = (b)v.get(i1);
        y.destroyItem(this, b, a);
        i1 += 1;
      }
      y.finishUpdate(this);
      v.clear();
      l();
      z = 0;
      scrollTo(0, 0);
    }
    localObject = y;
    y = paramY;
    u = 0;
    if (y != null)
    {
      if (F == null) {
        F = new g();
      }
      y.setViewPagerObserver(F);
      Q = false;
      boolean bool = oa;
      oa = true;
      u = y.getCount();
      if (A >= 0)
      {
        y.restoreState(B, C);
        a(A, false, true);
        A = -1;
        B = null;
        C = null;
      }
      else if (!bool)
      {
        i();
      }
      else
      {
        requestLayout();
      }
    }
    List localList = va;
    if ((localList != null) && (!localList.isEmpty()))
    {
      int i3 = va.size();
      i1 = i2;
      while (i1 < i3)
      {
        ((d)va.get(i1)).onAdapterChanged(this, (y)localObject, paramY);
        i1 += 1;
      }
    }
  }
  
  public void setCurrentItem(int paramInt)
  {
    Q = false;
    a(paramInt, oa ^ true, false);
  }
  
  public void setOffscreenPageLimit(int paramInt)
  {
    int i1 = paramInt;
    if (paramInt < 1)
    {
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append("Requested offscreen page limit ");
      localStringBuilder.append(paramInt);
      localStringBuilder.append(" too small; defaulting to ");
      localStringBuilder.append(1);
      localStringBuilder.toString();
      i1 = 1;
    }
    if (i1 != R)
    {
      R = i1;
      i();
    }
  }
  
  @Deprecated
  public void setOnPageChangeListener(e paramE)
  {
    ta = paramE;
  }
  
  public void setPageMargin(int paramInt)
  {
    int i1 = G;
    G = paramInt;
    int i2 = getWidth();
    a(i2, i2, paramInt, i1);
    requestLayout();
  }
  
  public void setPageMarginDrawable(@p int paramInt)
  {
    setPageMarginDrawable(b.b.x.b.c.getDrawable(getContext(), paramInt));
  }
  
  public void setPageMarginDrawable(@G Drawable paramDrawable)
  {
    H = paramDrawable;
    if (paramDrawable != null) {
      refreshDrawableState();
    }
    boolean bool;
    if (paramDrawable == null) {
      bool = true;
    } else {
      bool = false;
    }
    setWillNotDraw(bool);
    invalidate();
  }
  
  public void setScrollState(int paramInt)
  {
    if (Ba == paramInt) {
      return;
    }
    Ba = paramInt;
    if (wa != null)
    {
      boolean bool;
      if (paramInt != 0) {
        bool = true;
      } else {
        bool = false;
      }
      b(bool);
    }
    e(paramInt);
  }
  
  public boolean verifyDrawable(Drawable paramDrawable)
  {
    return (super.verifyDrawable(paramDrawable)) || (paramDrawable == H);
  }
  
  public static class LayoutParams
    extends ViewGroup.LayoutParams
  {
    public boolean a;
    public int b;
    public float c = 0.0F;
    public boolean d;
    public int e;
    public int f;
    
    public LayoutParams()
    {
      super(-1);
    }
    
    public LayoutParams(Context paramContext, AttributeSet paramAttributeSet)
    {
      super(paramAttributeSet);
      paramContext = paramContext.obtainStyledAttributes(paramAttributeSet, ViewPager.i);
      b = paramContext.getInteger(0, 48);
      paramContext.recycle();
    }
  }
  
  public static class SavedState
    extends AbsSavedState
  {
    public static final Parcelable.Creator<SavedState> CREATOR = new O();
    public int a;
    public Parcelable b;
    public ClassLoader c;
    
    public SavedState(Parcel paramParcel, ClassLoader paramClassLoader)
    {
      super(paramClassLoader);
      ClassLoader localClassLoader = paramClassLoader;
      if (paramClassLoader == null) {
        localClassLoader = SavedState.class.getClassLoader();
      }
      a = paramParcel.readInt();
      b = paramParcel.readParcelable(localClassLoader);
      c = localClassLoader;
    }
    
    public SavedState(@F Parcelable paramParcelable)
    {
      super();
    }
    
    public String toString()
    {
      StringBuilder localStringBuilder = a.b("FragmentPager.SavedState{");
      localStringBuilder.append(Integer.toHexString(System.identityHashCode(this)));
      localStringBuilder.append(" position=");
      return a.a(localStringBuilder, a, "}");
    }
    
    public void writeToParcel(Parcel paramParcel, int paramInt)
    {
      paramParcel.writeParcelable(mSuperState, paramInt);
      paramParcel.writeInt(a);
      paramParcel.writeParcelable(b, paramInt);
    }
  }
  
  @Inherited
  @Retention(RetentionPolicy.RUNTIME)
  @Target({java.lang.annotation.ElementType.TYPE})
  public static @interface a {}
  
  public static class b
  {
    public Object a;
    public int b;
    public boolean c;
    public float d;
    public float e;
    
    public b() {}
  }
  
  public class c
    extends b
  {
    public c() {}
    
    private boolean a()
    {
      y localY = y;
      return (localY != null) && (localY.getCount() > 1);
    }
    
    public void onInitializeAccessibilityEvent(View paramView, AccessibilityEvent paramAccessibilityEvent)
    {
      b.DEFAULT_DELEGATE.onInitializeAccessibilityEvent(paramView, paramAccessibilityEvent);
      paramAccessibilityEvent.setClassName(ViewPager.class.getName());
      paramAccessibilityEvent.setScrollable(a());
      if (paramAccessibilityEvent.getEventType() == 4096)
      {
        paramView = y;
        if (paramView != null)
        {
          paramAccessibilityEvent.setItemCount(paramView.getCount());
          paramAccessibilityEvent.setFromIndex(z);
          paramAccessibilityEvent.setToIndex(z);
        }
      }
    }
    
    public void onInitializeAccessibilityNodeInfo(View paramView, b.b.x.o.a.c paramC)
    {
      super.onInitializeAccessibilityNodeInfo(paramView, paramC);
      paramC.a(ViewPager.class.getName());
      paramC.s(a());
      if (canScrollHorizontally(1)) {
        paramC.a(4096);
      }
      if (canScrollHorizontally(-1)) {
        paramC.a(8192);
      }
    }
    
    public boolean performAccessibilityAction(View paramView, int paramInt, Bundle paramBundle)
    {
      if (super.performAccessibilityAction(paramView, paramInt, paramBundle)) {
        return true;
      }
      if (paramInt != 4096)
      {
        if (paramInt != 8192) {
          return false;
        }
        if (canScrollHorizontally(-1))
        {
          paramView = ViewPager.this;
          paramView.setCurrentItem(z - 1);
          return true;
        }
        return false;
      }
      if (canScrollHorizontally(1))
      {
        paramView = ViewPager.this;
        paramView.setCurrentItem(z + 1);
        return true;
      }
      return false;
    }
  }
  
  public static abstract interface d
  {
    public abstract void onAdapterChanged(@F ViewPager paramViewPager, @G y paramY1, @G y paramY2);
  }
  
  public static abstract interface e
  {
    public abstract void onPageScrollStateChanged(int paramInt);
    
    public abstract void onPageScrolled(int paramInt1, float paramFloat, @I int paramInt2);
    
    public abstract void onPageSelected(int paramInt);
  }
  
  public static abstract interface f
  {
    public abstract void a(@F View paramView, float paramFloat);
  }
  
  private class g
    extends DataSetObserver
  {
    public g() {}
    
    public void onChanged()
    {
      c();
    }
    
    public void onInvalidated()
    {
      c();
    }
  }
  
  public static class h
    implements ViewPager.e
  {
    public h() {}
    
    public void onPageScrollStateChanged(int paramInt) {}
    
    public void onPageScrolled(int paramInt1, float paramFloat, int paramInt2) {}
    
    public void onPageSelected(int paramInt) {}
  }
  
  public static class i
    implements Comparator<View>
  {
    public i() {}
    
    public int a(View paramView1, View paramView2)
    {
      paramView1 = (ViewPager.LayoutParams)paramView1.getLayoutParams();
      paramView2 = (ViewPager.LayoutParams)paramView2.getLayoutParams();
      boolean bool = a;
      if (bool != a)
      {
        if (bool) {
          return 1;
        }
        return -1;
      }
      return e - e;
    }
  }
}
