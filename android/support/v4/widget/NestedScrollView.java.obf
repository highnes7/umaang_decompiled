package android.support.v4.widget;

import android.content.Context;
import android.content.res.Resources;
import android.content.res.Resources.Theme;
import android.content.res.TypedArray;
import android.graphics.Canvas;
import android.graphics.Rect;
import android.os.Build.VERSION;
import android.os.Bundle;
import android.os.Parcel;
import android.os.Parcelable;
import android.os.Parcelable.Creator;
import android.util.AttributeSet;
import android.util.TypedValue;
import android.view.FocusFinder;
import android.view.KeyEvent;
import android.view.MotionEvent;
import android.view.VelocityTracker;
import android.view.View;
import android.view.View.AccessibilityDelegate;
import android.view.View.BaseSavedState;
import android.view.View.MeasureSpec;
import android.view.ViewConfiguration;
import android.view.ViewGroup;
import android.view.ViewGroup.LayoutParams;
import android.view.ViewGroup.MarginLayoutParams;
import android.view.ViewParent;
import android.view.accessibility.AccessibilityEvent;
import android.view.accessibility.AccessibilityRecord;
import android.view.animation.AnimationUtils;
import android.widget.EdgeEffect;
import android.widget.FrameLayout;
import android.widget.FrameLayout.LayoutParams;
import android.widget.OverScroller;
import android.widget.ScrollView;
import b.b.a.F;
import b.b.a.G;
import b.b.a.N;
import b.b.x.o.D;
import b.b.x.o.H;
import b.b.x.o.a.c;
import b.b.x.o.b;
import b.b.x.o.r;
import b.b.x.o.t;
import b.b.x.o.u;
import b.b.x.o.w;
import b.b.x.p.p;
import b.b.x.p.y;
import f.a.a.a.a;
import java.util.ArrayList;
import java.util.List;

public class NestedScrollView
  extends FrameLayout
  implements u, r, D
{
  public static final int a = 250;
  public static final float b = 0.5F;
  public static final String c = "NestedScrollView";
  public static final int d = -1;
  public static final a e = new a();
  public static final int[] f = { 16843130 };
  public int A;
  public SavedState B;
  public final w C;
  public final t D;
  public float E;
  public b F;
  public long g;
  public final Rect h = new Rect();
  public OverScroller i;
  public EdgeEffect j;
  public EdgeEffect k;
  public int l;
  public boolean m = true;
  public boolean n = false;
  public View o = null;
  public boolean p = false;
  public VelocityTracker q;
  public boolean r;
  public boolean s = true;
  public int t;
  public int u;
  public int v;
  public int w = -1;
  public final int[] x = new int[2];
  public final int[] y = new int[2];
  public int z;
  
  public NestedScrollView(@F Context paramContext)
  {
    this(paramContext, null, 0);
  }
  
  public NestedScrollView(@F Context paramContext, @G AttributeSet paramAttributeSet)
  {
    this(paramContext, paramAttributeSet, 0);
  }
  
  public NestedScrollView(@F Context paramContext, @G AttributeSet paramAttributeSet, int paramInt)
  {
    super(paramContext, paramAttributeSet, paramInt);
    g();
    paramContext = paramContext.obtainStyledAttributes(paramAttributeSet, f, paramInt, 0);
    setFillViewport(paramContext.getBoolean(0, false));
    paramContext.recycle();
    C = new w(this);
    D = new t(this);
    setNestedScrollingEnabled(true);
    H.a(this, e);
  }
  
  public static int a(int paramInt1, int paramInt2, int paramInt3)
  {
    if ((paramInt2 < paramInt3) && (paramInt1 >= 0))
    {
      if (paramInt2 + paramInt1 > paramInt3) {
        return paramInt3 - paramInt2;
      }
      return paramInt1;
    }
    return 0;
  }
  
  private View a(boolean paramBoolean, int paramInt1, int paramInt2)
  {
    ArrayList localArrayList = getFocusables(2);
    int i6 = localArrayList.size();
    Object localObject2 = null;
    int i3 = 0;
    int i2;
    for (int i4 = 0; i3 < i6; i4 = i2)
    {
      View localView = (View)localArrayList.get(i3);
      int i5 = localView.getTop();
      int i7 = localView.getBottom();
      Object localObject1 = localObject2;
      i2 = i4;
      if (paramInt1 < i7)
      {
        localObject1 = localObject2;
        i2 = i4;
        if (i5 < paramInt2)
        {
          int i1;
          if ((paramInt1 < i5) && (i7 < paramInt2)) {
            i1 = 1;
          } else {
            i1 = 0;
          }
          if (localObject2 == null)
          {
            localObject1 = localView;
            i2 = i1;
          }
          else
          {
            if (((paramBoolean) && (i5 < localObject2.getTop())) || ((!paramBoolean) && (i7 > localObject2.getBottom()))) {
              i5 = 1;
            } else {
              i5 = 0;
            }
            if (i4 != 0)
            {
              localObject1 = localObject2;
              i2 = i4;
              if (i1 == 0) {
                break label232;
              }
              localObject1 = localObject2;
              i2 = i4;
              if (i5 == 0) {
                break label232;
              }
            }
            else
            {
              if (i1 != 0)
              {
                localObject1 = localView;
                i2 = 1;
                break label232;
              }
              localObject1 = localObject2;
              i2 = i4;
              if (i5 == 0) {
                break label232;
              }
            }
            localObject1 = localView;
            i2 = i4;
          }
        }
      }
      label232:
      i3 += 1;
      localObject2 = localObject1;
    }
    return localObject2;
  }
  
  private void a(MotionEvent paramMotionEvent)
  {
    int i1 = paramMotionEvent.getActionIndex();
    if (paramMotionEvent.getPointerId(i1) == w)
    {
      if (i1 == 0) {
        i1 = 1;
      } else {
        i1 = 0;
      }
      l = ((int)paramMotionEvent.getY(i1));
      w = paramMotionEvent.getPointerId(i1);
      paramMotionEvent = q;
      if (paramMotionEvent != null) {
        paramMotionEvent.clear();
      }
    }
  }
  
  private boolean a(Rect paramRect, boolean paramBoolean)
  {
    int i1 = a(paramRect);
    boolean bool;
    if (i1 != 0) {
      bool = true;
    } else {
      bool = false;
    }
    if (bool)
    {
      if (paramBoolean)
      {
        scrollBy(0, i1);
        return bool;
      }
      a(0, i1);
    }
    return bool;
  }
  
  private boolean a(View paramView)
  {
    return a(paramView, 0, getHeight()) ^ true;
  }
  
  private boolean a(View paramView, int paramInt1, int paramInt2)
  {
    paramView.getDrawingRect(h);
    offsetDescendantRectToMyCoords(paramView, h);
    return (h.bottom + paramInt1 >= getScrollY()) && (h.top - paramInt1 <= getScrollY() + paramInt2);
  }
  
  public static boolean a(View paramView1, View paramView2)
  {
    if (paramView1 == paramView2) {
      return true;
    }
    paramView1 = paramView1.getParent();
    return ((paramView1 instanceof ViewGroup)) && (a((View)paramView1, paramView2));
  }
  
  private void b(View paramView)
  {
    paramView.getDrawingRect(h);
    offsetDescendantRectToMyCoords(paramView, h);
    int i1 = a(h);
    if (i1 != 0) {
      scrollBy(0, i1);
    }
  }
  
  private boolean b(int paramInt1, int paramInt2, int paramInt3)
  {
    int i2 = getHeight();
    int i1 = getScrollY();
    i2 += i1;
    boolean bool2 = false;
    boolean bool1;
    if (paramInt1 == 33) {
      bool1 = true;
    } else {
      bool1 = false;
    }
    View localView = a(bool1, paramInt2, paramInt3);
    Object localObject = localView;
    if (localView == null) {
      localObject = this;
    }
    if ((paramInt2 >= i1) && (paramInt3 <= i2))
    {
      bool1 = bool2;
    }
    else
    {
      if (bool1) {
        paramInt2 -= i1;
      } else {
        paramInt2 = paramInt3 - i2;
      }
      e(paramInt2);
      bool1 = true;
    }
    if (localObject != findFocus()) {
      ((View)localObject).requestFocus(paramInt1);
    }
    return bool1;
  }
  
  private boolean c()
  {
    int i1 = getChildCount();
    boolean bool2 = false;
    boolean bool1 = bool2;
    if (i1 > 0)
    {
      View localView = getChildAt(0);
      FrameLayout.LayoutParams localLayoutParams = (FrameLayout.LayoutParams)localView.getLayoutParams();
      bool1 = bool2;
      if (localView.getHeight() + topMargin + bottomMargin > getHeight() - getPaddingTop() - getPaddingBottom()) {
        bool1 = true;
      }
    }
    return bool1;
  }
  
  private boolean c(int paramInt1, int paramInt2)
  {
    int i1 = getChildCount();
    boolean bool2 = false;
    boolean bool1 = bool2;
    if (i1 > 0)
    {
      i1 = getScrollY();
      View localView = getChildAt(0);
      bool1 = bool2;
      if (paramInt2 >= localView.getTop() - i1)
      {
        bool1 = bool2;
        if (paramInt2 < localView.getBottom() - i1)
        {
          bool1 = bool2;
          if (paramInt1 >= localView.getLeft())
          {
            bool1 = bool2;
            if (paramInt1 < localView.getRight()) {
              bool1 = true;
            }
          }
        }
      }
    }
    return bool1;
  }
  
  private void d()
  {
    p = false;
    i();
    stopNestedScroll(0);
    EdgeEffect localEdgeEffect = j;
    if (localEdgeEffect != null)
    {
      localEdgeEffect.onRelease();
      k.onRelease();
    }
  }
  
  private void e()
  {
    if (getOverScrollMode() != 2)
    {
      if (j == null)
      {
        Context localContext = getContext();
        j = new EdgeEffect(localContext);
        k = new EdgeEffect(localContext);
      }
    }
    else
    {
      j = null;
      k = null;
    }
  }
  
  private void e(int paramInt)
  {
    if (paramInt != 0)
    {
      if (s)
      {
        a(0, paramInt);
        return;
      }
      scrollBy(0, paramInt);
    }
  }
  
  private void f()
  {
    VelocityTracker localVelocityTracker = q;
    if (localVelocityTracker == null)
    {
      q = VelocityTracker.obtain();
      return;
    }
    localVelocityTracker.clear();
  }
  
  private void f(int paramInt)
  {
    int i1 = getScrollY();
    boolean bool;
    if (((i1 <= 0) && (paramInt <= 0)) || ((i1 >= getScrollRange()) && (paramInt >= 0))) {
      bool = false;
    } else {
      bool = true;
    }
    float f1 = paramInt;
    if (!dispatchNestedPreFling(0.0F, f1))
    {
      dispatchNestedFling(0.0F, f1, bool);
      b(paramInt);
    }
  }
  
  private void g()
  {
    i = new OverScroller(getContext());
    setFocusable(true);
    setDescendantFocusability(262144);
    setWillNotDraw(false);
    ViewConfiguration localViewConfiguration = ViewConfiguration.get(getContext());
    t = localViewConfiguration.getScaledTouchSlop();
    u = localViewConfiguration.getScaledMinimumFlingVelocity();
    v = localViewConfiguration.getScaledMaximumFlingVelocity();
  }
  
  private float getVerticalScrollFactorCompat()
  {
    if (E == 0.0F)
    {
      TypedValue localTypedValue = new TypedValue();
      Context localContext = getContext();
      if (localContext.getTheme().resolveAttribute(16842829, localTypedValue, true)) {
        E = localTypedValue.getDimension(localContext.getResources().getDisplayMetrics());
      } else {
        throw new IllegalStateException("Expected theme to define listPreferredItemHeight.");
      }
    }
    return E;
  }
  
  private void h()
  {
    if (q == null) {
      q = VelocityTracker.obtain();
    }
  }
  
  private void i()
  {
    VelocityTracker localVelocityTracker = q;
    if (localVelocityTracker != null)
    {
      localVelocityTracker.recycle();
      q = null;
    }
  }
  
  public int a(Rect paramRect)
  {
    int i1 = getChildCount();
    int i4 = 0;
    if (i1 == 0) {
      return 0;
    }
    int i5 = getHeight();
    int i2 = getScrollY();
    int i3 = i2 + i5;
    int i6 = getVerticalFadingEdgeLength();
    i1 = i2;
    if (top > 0) {
      i1 = i2 + i6;
    }
    View localView = getChildAt(0);
    FrameLayout.LayoutParams localLayoutParams = (FrameLayout.LayoutParams)localView.getLayoutParams();
    if (bottom < localView.getHeight() + topMargin + bottomMargin) {
      i2 = i3 - i6;
    } else {
      i2 = i3;
    }
    if ((bottom > i2) && (top > i1))
    {
      if (paramRect.height() > i5) {
        i1 = top - i1;
      } else {
        i1 = bottom - i2;
      }
      return Math.min(i1 + 0, localView.getBottom() + bottomMargin - i3);
    }
    i3 = i4;
    if (top < i1)
    {
      i3 = i4;
      if (bottom < i2)
      {
        if (paramRect.height() > i5) {
          i1 = 0 - (i2 - bottom);
        } else {
          i1 = 0 - (i1 - top);
        }
        i3 = Math.max(i1, -getScrollY());
      }
    }
    return i3;
  }
  
  public final void a(int paramInt1, int paramInt2)
  {
    if (getChildCount() == 0) {
      return;
    }
    if (AnimationUtils.currentAnimationTimeMillis() - g > 250L)
    {
      View localView = getChildAt(0);
      FrameLayout.LayoutParams localLayoutParams = (FrameLayout.LayoutParams)localView.getLayoutParams();
      int i1 = localView.getHeight();
      int i2 = topMargin;
      int i3 = bottomMargin;
      int i4 = getHeight();
      int i5 = getPaddingTop();
      int i6 = getPaddingBottom();
      paramInt1 = getScrollY();
      paramInt2 = Math.max(0, Math.min(paramInt2 + paramInt1, Math.max(0, i1 + i2 + i3 - (i4 - i5 - i6))));
      A = getScrollY();
      i.startScroll(getScrollX(), paramInt1, 0, paramInt2 - paramInt1);
      H.la(this);
    }
    else
    {
      if (!i.isFinished()) {
        i.abortAnimation();
      }
      scrollBy(paramInt1, paramInt2);
    }
    g = AnimationUtils.currentAnimationTimeMillis();
  }
  
  public boolean a()
  {
    return r;
  }
  
  public boolean a(int paramInt)
  {
    View localView2 = findFocus();
    View localView1 = localView2;
    if (localView2 == this) {
      localView1 = null;
    }
    localView2 = FocusFinder.getInstance().findNextFocus(this, localView1, paramInt);
    int i2 = getMaxScrollAmount();
    if ((localView2 != null) && (a(localView2, i2, getHeight())))
    {
      localView2.getDrawingRect(h);
      offsetDescendantRectToMyCoords(localView2, h);
      e(a(h));
      localView2.requestFocus(paramInt);
    }
    else
    {
      int i1;
      if ((paramInt == 33) && (getScrollY() < i2))
      {
        i1 = getScrollY();
      }
      else
      {
        i1 = i2;
        if (paramInt == 130)
        {
          i1 = i2;
          if (getChildCount() > 0)
          {
            localView2 = getChildAt(0);
            FrameLayout.LayoutParams localLayoutParams = (FrameLayout.LayoutParams)localView2.getLayoutParams();
            i1 = localView2.getBottom();
            int i3 = bottomMargin;
            int i4 = getScrollY();
            i1 = Math.min(i1 + i3 - (getHeight() + i4 - getPaddingBottom()), i2);
          }
        }
      }
      if (i1 == 0) {
        return false;
      }
      if (paramInt != 130) {
        i1 = -i1;
      }
      e(i1);
    }
    if ((localView1 != null) && (localView1.isFocused()) && ((a(localView1, 0, getHeight()) ^ true)))
    {
      paramInt = getDescendantFocusability();
      setDescendantFocusability(131072);
      requestFocus();
      setDescendantFocusability(paramInt);
    }
    return true;
  }
  
  public boolean a(int paramInt1, int paramInt2, int paramInt3, int paramInt4, int paramInt5, int paramInt6, int paramInt7, int paramInt8, boolean paramBoolean)
  {
    int i3 = getOverScrollMode();
    int i1 = computeHorizontalScrollRange();
    int i2 = computeHorizontalScrollExtent();
    boolean bool2 = false;
    if (i1 > i2) {
      i1 = 1;
    } else {
      i1 = 0;
    }
    if (computeVerticalScrollRange() > computeVerticalScrollExtent()) {
      i2 = 1;
    } else {
      i2 = 0;
    }
    if ((i3 != 0) && ((i3 != 1) || (i1 == 0))) {
      i1 = 0;
    } else {
      i1 = 1;
    }
    if ((i3 != 0) && ((i3 != 1) || (i2 == 0))) {
      i2 = 0;
    } else {
      i2 = 1;
    }
    paramInt3 += paramInt1;
    if (i1 == 0) {
      paramInt1 = 0;
    } else {
      paramInt1 = paramInt7;
    }
    paramInt4 += paramInt2;
    if (i2 == 0) {
      paramInt2 = 0;
    } else {
      paramInt2 = paramInt8;
    }
    paramInt7 = -paramInt1;
    paramInt1 += paramInt5;
    paramInt5 = -paramInt2;
    paramInt6 = paramInt2 + paramInt6;
    if (paramInt3 > paramInt1) {}
    for (;;)
    {
      paramBoolean = true;
      paramInt2 = paramInt1;
      break label198;
      if (paramInt3 >= paramInt7) {
        break;
      }
      paramInt1 = paramInt7;
    }
    paramInt2 = paramInt3;
    paramBoolean = false;
    label198:
    if (paramInt4 > paramInt6) {}
    for (paramInt1 = paramInt6;; paramInt1 = paramInt5)
    {
      bool1 = true;
      break label233;
      if (paramInt4 >= paramInt5) {
        break;
      }
    }
    boolean bool1 = false;
    paramInt1 = paramInt4;
    label233:
    if ((bool1) && (!hasNestedScrollingParent(1))) {
      i.springBack(paramInt2, paramInt1, 0, 0, 0, getScrollRange());
    }
    onOverScrolled(paramInt2, paramInt1, paramBoolean, bool1);
    if (!paramBoolean)
    {
      paramBoolean = bool2;
      if (!bool1) {}
    }
    else
    {
      paramBoolean = true;
    }
    return paramBoolean;
  }
  
  public boolean a(@F KeyEvent paramKeyEvent)
  {
    h.setEmpty();
    boolean bool3 = c();
    boolean bool1 = false;
    boolean bool2 = false;
    int i1 = 130;
    if (!bool3)
    {
      bool1 = bool2;
      if (isFocused())
      {
        bool1 = bool2;
        if (paramKeyEvent.getKeyCode() != 4)
        {
          View localView = findFocus();
          paramKeyEvent = localView;
          if (localView == this) {
            paramKeyEvent = null;
          }
          paramKeyEvent = FocusFinder.getInstance().findNextFocus(this, paramKeyEvent, 130);
          bool1 = bool2;
          if (paramKeyEvent != null)
          {
            bool1 = bool2;
            if (paramKeyEvent != this)
            {
              bool1 = bool2;
              if (paramKeyEvent.requestFocus(130)) {
                bool1 = true;
              }
            }
          }
        }
      }
      return bool1;
    }
    if (paramKeyEvent.getAction() == 0)
    {
      int i2 = paramKeyEvent.getKeyCode();
      if (i2 != 19)
      {
        if (i2 != 20)
        {
          if (i2 != 62) {
            return false;
          }
          if (paramKeyEvent.isShiftPressed()) {
            i1 = 33;
          }
          d(i1);
          return false;
        }
        if (!paramKeyEvent.isAltPressed()) {
          return a(130);
        }
        return c(130);
      }
      if (!paramKeyEvent.isAltPressed()) {
        return a(33);
      }
      bool1 = c(33);
    }
    return bool1;
  }
  
  public void addView(View paramView)
  {
    if (getChildCount() <= 0)
    {
      super.addView(paramView);
      return;
    }
    throw new IllegalStateException("ScrollView can host only one direct child");
  }
  
  public void addView(View paramView, int paramInt)
  {
    if (getChildCount() <= 0)
    {
      super.addView(paramView, paramInt);
      return;
    }
    throw new IllegalStateException("ScrollView can host only one direct child");
  }
  
  public void addView(View paramView, int paramInt, ViewGroup.LayoutParams paramLayoutParams)
  {
    if (getChildCount() <= 0)
    {
      super.addView(paramView, paramInt, paramLayoutParams);
      return;
    }
    throw new IllegalStateException("ScrollView can host only one direct child");
  }
  
  public void addView(View paramView, ViewGroup.LayoutParams paramLayoutParams)
  {
    if (getChildCount() <= 0)
    {
      super.addView(paramView, paramLayoutParams);
      return;
    }
    throw new IllegalStateException("ScrollView can host only one direct child");
  }
  
  public void b(int paramInt)
  {
    if (getChildCount() > 0)
    {
      startNestedScroll(2, 1);
      i.fling(getScrollX(), getScrollY(), 0, paramInt, 0, 0, Integer.MIN_VALUE, Integer.MAX_VALUE, 0, 0);
      A = getScrollY();
      H.la(this);
    }
  }
  
  public final void b(int paramInt1, int paramInt2)
  {
    a(paramInt1 - getScrollX(), paramInt2 - getScrollY());
  }
  
  public boolean b()
  {
    return s;
  }
  
  public boolean c(int paramInt)
  {
    int i1;
    if (paramInt == 130) {
      i1 = 1;
    } else {
      i1 = 0;
    }
    int i2 = getHeight();
    Object localObject = h;
    top = 0;
    bottom = i2;
    if (i1 != 0)
    {
      i1 = getChildCount();
      if (i1 > 0)
      {
        localObject = getChildAt(i1 - 1);
        FrameLayout.LayoutParams localLayoutParams = (FrameLayout.LayoutParams)((View)localObject).getLayoutParams();
        Rect localRect = h;
        i1 = ((View)localObject).getBottom();
        int i3 = bottomMargin;
        bottom = (getPaddingBottom() + (i1 + i3));
        localObject = h;
        top = (bottom - i2);
      }
    }
    localObject = h;
    return b(paramInt, top, bottom);
  }
  
  @N({b.b.a.N.a.b})
  public int computeHorizontalScrollExtent()
  {
    return super.computeHorizontalScrollExtent();
  }
  
  @N({b.b.a.N.a.b})
  public int computeHorizontalScrollOffset()
  {
    return super.computeHorizontalScrollOffset();
  }
  
  @N({b.b.a.N.a.b})
  public int computeHorizontalScrollRange()
  {
    return super.computeHorizontalScrollRange();
  }
  
  public void computeScroll()
  {
    if (i.computeScrollOffset())
    {
      i.getCurrX();
      int i3 = i.getCurrY();
      int i2 = i3 - A;
      int i1 = i2;
      if (dispatchNestedPreScroll(0, i2, y, null, 1)) {
        i1 = i2 - y[1];
      }
      if (i1 != 0)
      {
        i2 = getScrollRange();
        int i4 = getScrollY();
        a(0, i1, getScrollX(), i4, 0, i2, 0, 0, false);
        int i5 = getScrollY() - i4;
        if (!dispatchNestedScroll(0, i5, 0, i1 - i5, null, 1))
        {
          i1 = getOverScrollMode();
          if ((i1 != 0) && ((i1 != 1) || (i2 <= 0))) {
            i1 = 0;
          } else {
            i1 = 1;
          }
          if (i1 != 0)
          {
            e();
            if ((i3 <= 0) && (i4 > 0)) {
              j.onAbsorb((int)i.getCurrVelocity());
            } else if ((i3 >= i2) && (i4 < i2)) {
              k.onAbsorb((int)i.getCurrVelocity());
            }
          }
        }
      }
      A = i3;
      H.la(this);
      return;
    }
    if (hasNestedScrollingParent(1)) {
      stopNestedScroll(1);
    }
    A = 0;
  }
  
  @N({b.b.a.N.a.b})
  public int computeVerticalScrollExtent()
  {
    return super.computeVerticalScrollExtent();
  }
  
  @N({b.b.a.N.a.b})
  public int computeVerticalScrollOffset()
  {
    return Math.max(0, super.computeVerticalScrollOffset());
  }
  
  @N({b.b.a.N.a.b})
  public int computeVerticalScrollRange()
  {
    int i2 = getChildCount();
    int i1 = getHeight() - getPaddingBottom() - getPaddingTop();
    if (i2 == 0) {
      return i1;
    }
    View localView = getChildAt(0);
    FrameLayout.LayoutParams localLayoutParams = (FrameLayout.LayoutParams)localView.getLayoutParams();
    i2 = localView.getBottom() + bottomMargin;
    int i3 = getScrollY();
    int i4 = Math.max(0, i2 - i1);
    if (i3 < 0) {
      return i2 - i3;
    }
    i1 = i2;
    if (i3 > i4) {
      i1 = i2 + (i3 - i4);
    }
    return i1;
  }
  
  public boolean d(int paramInt)
  {
    if (paramInt == 130) {
      i1 = 1;
    } else {
      i1 = 0;
    }
    int i2 = getHeight();
    if (i1 != 0)
    {
      h.top = (getScrollY() + i2);
      i1 = getChildCount();
      if (i1 > 0)
      {
        localObject = getChildAt(i1 - 1);
        FrameLayout.LayoutParams localLayoutParams = (FrameLayout.LayoutParams)((View)localObject).getLayoutParams();
        i1 = ((View)localObject).getBottom();
        int i3 = bottomMargin;
        i1 = getPaddingBottom() + (i1 + i3);
        localObject = h;
        if (top + i2 > i1) {
          top = (i1 - i2);
        }
      }
    }
    else
    {
      h.top = (getScrollY() - i2);
      localObject = h;
      if (top < 0) {
        top = 0;
      }
    }
    Object localObject = h;
    int i1 = top;
    bottom = (i2 + i1);
    return b(paramInt, i1, bottom);
  }
  
  public boolean dispatchKeyEvent(KeyEvent paramKeyEvent)
  {
    return (super.dispatchKeyEvent(paramKeyEvent)) || (a(paramKeyEvent));
  }
  
  public boolean dispatchNestedFling(float paramFloat1, float paramFloat2, boolean paramBoolean)
  {
    return D.a(paramFloat1, paramFloat2, paramBoolean);
  }
  
  public boolean dispatchNestedPreFling(float paramFloat1, float paramFloat2)
  {
    return D.a(paramFloat1, paramFloat2);
  }
  
  public boolean dispatchNestedPreScroll(int paramInt1, int paramInt2, int[] paramArrayOfInt1, int[] paramArrayOfInt2)
  {
    return dispatchNestedPreScroll(paramInt1, paramInt2, paramArrayOfInt1, paramArrayOfInt2, 0);
  }
  
  public boolean dispatchNestedPreScroll(int paramInt1, int paramInt2, int[] paramArrayOfInt1, int[] paramArrayOfInt2, int paramInt3)
  {
    return D.a(paramInt1, paramInt2, paramArrayOfInt1, paramArrayOfInt2, paramInt3);
  }
  
  public boolean dispatchNestedScroll(int paramInt1, int paramInt2, int paramInt3, int paramInt4, int[] paramArrayOfInt)
  {
    return dispatchNestedScroll(paramInt1, paramInt2, paramInt3, paramInt4, paramArrayOfInt, 0);
  }
  
  public boolean dispatchNestedScroll(int paramInt1, int paramInt2, int paramInt3, int paramInt4, int[] paramArrayOfInt, int paramInt5)
  {
    return D.a(paramInt1, paramInt2, paramInt3, paramInt4, paramArrayOfInt, paramInt5);
  }
  
  public void draw(Canvas paramCanvas)
  {
    super.draw(paramCanvas);
    if (j != null)
    {
      int i8 = getScrollY();
      boolean bool = j.isFinished();
      int i5 = 0;
      int i9;
      int i1;
      int i7;
      int i6;
      int i2;
      int i4;
      int i3;
      if (!bool)
      {
        i9 = paramCanvas.save();
        i1 = getWidth();
        i7 = getHeight();
        i6 = Math.min(0, i8);
        if ((Build.VERSION.SDK_INT >= 21) && (!getClipToPadding()))
        {
          i2 = 0;
        }
        else
        {
          i2 = getPaddingLeft();
          i1 -= getPaddingRight() + i2;
          i2 = getPaddingLeft() + 0;
        }
        i4 = i7;
        i3 = i6;
        if (Build.VERSION.SDK_INT >= 21)
        {
          i4 = i7;
          i3 = i6;
          if (getClipToPadding())
          {
            i3 = getPaddingTop();
            i4 = i7 - (getPaddingBottom() + i3);
            i3 = i6 + getPaddingTop();
          }
        }
        paramCanvas.translate(i2, i3);
        j.setSize(i1, i4);
        if (j.draw(paramCanvas)) {
          H.la(this);
        }
        paramCanvas.restoreToCount(i9);
      }
      if (!k.isFinished())
      {
        i9 = paramCanvas.save();
        i3 = getWidth();
        i6 = getHeight();
        i7 = Math.max(getScrollRange(), i8) + i6;
        if (Build.VERSION.SDK_INT >= 21)
        {
          i2 = i5;
          i1 = i3;
          if (!getClipToPadding()) {}
        }
        else
        {
          i1 = getPaddingLeft();
          i1 = i3 - (getPaddingRight() + i1);
          i2 = 0 + getPaddingLeft();
        }
        i4 = i7;
        i3 = i6;
        if (Build.VERSION.SDK_INT >= 21)
        {
          i4 = i7;
          i3 = i6;
          if (getClipToPadding())
          {
            i3 = getPaddingTop();
            i3 = i6 - (getPaddingBottom() + i3);
            i4 = i7 - getPaddingBottom();
          }
        }
        paramCanvas.translate(i2 - i1, i4);
        paramCanvas.rotate(180.0F, i1, 0.0F);
        k.setSize(i1, i3);
        if (k.draw(paramCanvas)) {
          H.la(this);
        }
        paramCanvas.restoreToCount(i9);
      }
    }
  }
  
  public float getBottomFadingEdgeStrength()
  {
    if (getChildCount() == 0) {
      return 0.0F;
    }
    View localView = getChildAt(0);
    FrameLayout.LayoutParams localLayoutParams = (FrameLayout.LayoutParams)localView.getLayoutParams();
    int i1 = getVerticalFadingEdgeLength();
    int i2 = getHeight();
    int i3 = getPaddingBottom();
    i2 = localView.getBottom() + bottomMargin - getScrollY() - (i2 - i3);
    if (i2 < i1) {
      return i2 / i1;
    }
    return 1.0F;
  }
  
  public int getMaxScrollAmount()
  {
    return (int)(getHeight() * 0.5F);
  }
  
  public int getNestedScrollAxes()
  {
    return C.a();
  }
  
  public int getScrollRange()
  {
    int i2 = getChildCount();
    int i1 = 0;
    if (i2 > 0)
    {
      View localView = getChildAt(0);
      FrameLayout.LayoutParams localLayoutParams = (FrameLayout.LayoutParams)localView.getLayoutParams();
      i1 = Math.max(0, localView.getHeight() + topMargin + bottomMargin - (getHeight() - getPaddingTop() - getPaddingBottom()));
    }
    return i1;
  }
  
  public float getTopFadingEdgeStrength()
  {
    if (getChildCount() == 0) {
      return 0.0F;
    }
    int i1 = getVerticalFadingEdgeLength();
    int i2 = getScrollY();
    if (i2 < i1) {
      return i2 / i1;
    }
    return 1.0F;
  }
  
  public boolean hasNestedScrollingParent()
  {
    return hasNestedScrollingParent(0);
  }
  
  public boolean hasNestedScrollingParent(int paramInt)
  {
    return D.a(paramInt);
  }
  
  public boolean isNestedScrollingEnabled()
  {
    return D.b();
  }
  
  public void measureChild(View paramView, int paramInt1, int paramInt2)
  {
    ViewGroup.LayoutParams localLayoutParams = paramView.getLayoutParams();
    paramInt2 = getPaddingLeft();
    paramView.measure(FrameLayout.getChildMeasureSpec(paramInt1, getPaddingRight() + paramInt2, width), View.MeasureSpec.makeMeasureSpec(0, 0));
  }
  
  public void measureChildWithMargins(View paramView, int paramInt1, int paramInt2, int paramInt3, int paramInt4)
  {
    ViewGroup.MarginLayoutParams localMarginLayoutParams = (ViewGroup.MarginLayoutParams)paramView.getLayoutParams();
    paramInt3 = getPaddingLeft();
    paramView.measure(FrameLayout.getChildMeasureSpec(paramInt1, getPaddingRight() + paramInt3 + leftMargin + rightMargin + paramInt2, width), View.MeasureSpec.makeMeasureSpec(topMargin + bottomMargin, 0));
  }
  
  public void onAttachedToWindow()
  {
    super.onAttachedToWindow();
    n = false;
  }
  
  public boolean onGenericMotionEvent(MotionEvent paramMotionEvent)
  {
    if ((paramMotionEvent.getSource() & 0x2) != 0)
    {
      if (paramMotionEvent.getAction() != 8) {
        return false;
      }
      if (!p)
      {
        float f1 = paramMotionEvent.getAxisValue(9);
        if (f1 != 0.0F)
        {
          int i1 = (int)(f1 * getVerticalScrollFactorCompat());
          int i2 = getScrollRange();
          int i4 = getScrollY();
          int i3 = i4 - i1;
          if (i3 < 0)
          {
            i1 = 0;
          }
          else
          {
            i1 = i3;
            if (i3 > i2) {
              i1 = i2;
            }
          }
          if (i1 != i4)
          {
            super.scrollTo(getScrollX(), i1);
            return true;
          }
        }
      }
    }
    return false;
  }
  
  public boolean onInterceptTouchEvent(MotionEvent paramMotionEvent)
  {
    int i1 = paramMotionEvent.getAction();
    if ((i1 == 2) && (p)) {
      return true;
    }
    i1 &= 0xFF;
    if (i1 != 0)
    {
      if (i1 != 1) {
        if (i1 != 2)
        {
          if (i1 != 3)
          {
            if (i1 != 6) {
              break label337;
            }
            a(paramMotionEvent);
            break label337;
          }
        }
        else
        {
          i1 = w;
          if (i1 == -1) {
            break label337;
          }
          int i2 = paramMotionEvent.findPointerIndex(i1);
          if (i2 == -1)
          {
            paramMotionEvent = new StringBuilder();
            paramMotionEvent.append("Invalid pointerId=");
            paramMotionEvent.append(i1);
            paramMotionEvent.append(" in onInterceptTouchEvent");
            paramMotionEvent.toString();
            break label337;
          }
          i1 = (int)paramMotionEvent.getY(i2);
          if ((Math.abs(i1 - l) <= t) || ((0x2 & getNestedScrollAxes()) != 0)) {
            break label337;
          }
          p = true;
          l = i1;
          h();
          q.addMovement(paramMotionEvent);
          z = 0;
          paramMotionEvent = getParent();
          if (paramMotionEvent == null) {
            break label337;
          }
          paramMotionEvent.requestDisallowInterceptTouchEvent(true);
          break label337;
        }
      }
      p = false;
      w = -1;
      i();
      if (i.springBack(getScrollX(), getScrollY(), 0, 0, 0, getScrollRange())) {
        H.la(this);
      }
      stopNestedScroll(0);
    }
    else
    {
      i1 = (int)paramMotionEvent.getY();
      if (!c((int)paramMotionEvent.getX(), i1))
      {
        p = false;
        i();
      }
      else
      {
        l = i1;
        w = paramMotionEvent.getPointerId(0);
        f();
        q.addMovement(paramMotionEvent);
        i.computeScrollOffset();
        p = (i.isFinished() ^ true);
        startNestedScroll(2, 0);
      }
    }
    label337:
    return p;
  }
  
  public void onLayout(boolean paramBoolean, int paramInt1, int paramInt2, int paramInt3, int paramInt4)
  {
    super.onLayout(paramBoolean, paramInt1, paramInt2, paramInt3, paramInt4);
    paramInt1 = 0;
    m = false;
    View localView = o;
    if ((localView != null) && (a(localView, this))) {
      b(o);
    }
    o = null;
    if (!n)
    {
      if (B != null)
      {
        scrollTo(getScrollX(), B.a);
        B = null;
      }
      if (getChildCount() > 0)
      {
        localView = getChildAt(0);
        FrameLayout.LayoutParams localLayoutParams = (FrameLayout.LayoutParams)localView.getLayoutParams();
        paramInt1 = localView.getMeasuredHeight() + topMargin + bottomMargin;
      }
      int i1 = getPaddingTop();
      int i2 = getPaddingBottom();
      paramInt3 = getScrollY();
      paramInt1 = a(paramInt3, paramInt4 - paramInt2 - i1 - i2, paramInt1);
      if (paramInt1 != paramInt3) {
        scrollTo(getScrollX(), paramInt1);
      }
    }
    scrollTo(getScrollX(), getScrollY());
    n = true;
  }
  
  public void onMeasure(int paramInt1, int paramInt2)
  {
    super.onMeasure(paramInt1, paramInt2);
    if (!r) {
      return;
    }
    if (View.MeasureSpec.getMode(paramInt2) == 0) {
      return;
    }
    if (getChildCount() > 0)
    {
      View localView = getChildAt(0);
      FrameLayout.LayoutParams localLayoutParams = (FrameLayout.LayoutParams)localView.getLayoutParams();
      int i1 = localView.getMeasuredHeight();
      paramInt2 = getMeasuredHeight() - getPaddingTop() - getPaddingBottom() - topMargin - bottomMargin;
      if (i1 < paramInt2)
      {
        i1 = getPaddingLeft();
        localView.measure(FrameLayout.getChildMeasureSpec(paramInt1, getPaddingRight() + i1 + leftMargin + rightMargin, width), View.MeasureSpec.makeMeasureSpec(paramInt2, 1073741824));
      }
    }
  }
  
  public boolean onNestedFling(View paramView, float paramFloat1, float paramFloat2, boolean paramBoolean)
  {
    if (!paramBoolean)
    {
      f((int)paramFloat2);
      return true;
    }
    return false;
  }
  
  public boolean onNestedPreFling(View paramView, float paramFloat1, float paramFloat2)
  {
    return dispatchNestedPreFling(paramFloat1, paramFloat2);
  }
  
  public void onNestedPreScroll(View paramView, int paramInt1, int paramInt2, int[] paramArrayOfInt)
  {
    onNestedPreScroll(paramView, paramInt1, paramInt2, paramArrayOfInt, 0);
  }
  
  public void onNestedPreScroll(@F View paramView, int paramInt1, int paramInt2, @F int[] paramArrayOfInt, int paramInt3)
  {
    dispatchNestedPreScroll(paramInt1, paramInt2, paramArrayOfInt, null, paramInt3);
  }
  
  public void onNestedScroll(View paramView, int paramInt1, int paramInt2, int paramInt3, int paramInt4)
  {
    onNestedScroll(paramView, paramInt1, paramInt2, paramInt3, paramInt4, 0);
  }
  
  public void onNestedScroll(View paramView, int paramInt1, int paramInt2, int paramInt3, int paramInt4, int paramInt5)
  {
    paramInt1 = getScrollY();
    scrollBy(0, paramInt4);
    paramInt1 = getScrollY() - paramInt1;
    dispatchNestedScroll(0, paramInt1, 0, paramInt4 - paramInt1, null, paramInt5);
  }
  
  public void onNestedScrollAccepted(View paramView1, View paramView2, int paramInt)
  {
    onNestedScrollAccepted(paramView1, paramView2, paramInt, 0);
  }
  
  public void onNestedScrollAccepted(@F View paramView1, @F View paramView2, int paramInt1, int paramInt2)
  {
    C.a(paramView1, paramView2, paramInt1, paramInt2);
    startNestedScroll(2, paramInt2);
  }
  
  public void onOverScrolled(int paramInt1, int paramInt2, boolean paramBoolean1, boolean paramBoolean2)
  {
    super.scrollTo(paramInt1, paramInt2);
  }
  
  public boolean onRequestFocusInDescendants(int paramInt, Rect paramRect)
  {
    int i1;
    if (paramInt == 2)
    {
      i1 = 130;
    }
    else
    {
      i1 = paramInt;
      if (paramInt == 1) {
        i1 = 33;
      }
    }
    View localView;
    if (paramRect == null) {
      localView = FocusFinder.getInstance().findNextFocus(this, null, i1);
    } else {
      localView = FocusFinder.getInstance().findNextFocusFromRect(this, paramRect, i1);
    }
    if (localView == null) {
      return false;
    }
    if ((true ^ a(localView, 0, getHeight()))) {
      return false;
    }
    return localView.requestFocus(i1, paramRect);
  }
  
  public void onRestoreInstanceState(Parcelable paramParcelable)
  {
    if (!(paramParcelable instanceof SavedState))
    {
      super.onRestoreInstanceState(paramParcelable);
      return;
    }
    paramParcelable = (SavedState)paramParcelable;
    super.onRestoreInstanceState(paramParcelable.getSuperState());
    B = paramParcelable;
    requestLayout();
  }
  
  public Parcelable onSaveInstanceState()
  {
    SavedState localSavedState = new SavedState(super.onSaveInstanceState());
    a = getScrollY();
    return localSavedState;
  }
  
  public void onScrollChanged(int paramInt1, int paramInt2, int paramInt3, int paramInt4)
  {
    super.onScrollChanged(paramInt1, paramInt2, paramInt3, paramInt4);
    b localB = F;
    if (localB != null) {
      localB.onScrollChange(this, paramInt1, paramInt2, paramInt3, paramInt4);
    }
  }
  
  public void onSizeChanged(int paramInt1, int paramInt2, int paramInt3, int paramInt4)
  {
    super.onSizeChanged(paramInt1, paramInt2, paramInt3, paramInt4);
    View localView = findFocus();
    if (localView != null)
    {
      if (this == localView) {
        return;
      }
      if (a(localView, 0, paramInt4))
      {
        localView.getDrawingRect(h);
        offsetDescendantRectToMyCoords(localView, h);
        e(a(h));
      }
    }
  }
  
  public boolean onStartNestedScroll(View paramView1, View paramView2, int paramInt)
  {
    return onStartNestedScroll(paramView1, paramView2, paramInt, 0);
  }
  
  public boolean onStartNestedScroll(@F View paramView1, @F View paramView2, int paramInt1, int paramInt2)
  {
    return (paramInt1 & 0x2) != 0;
  }
  
  public void onStopNestedScroll(View paramView)
  {
    onStopNestedScroll(paramView, 0);
  }
  
  public void onStopNestedScroll(@F View paramView, int paramInt)
  {
    C.a(paramView, paramInt);
    stopNestedScroll(paramInt);
  }
  
  public boolean onTouchEvent(MotionEvent paramMotionEvent)
  {
    h();
    MotionEvent localMotionEvent = MotionEvent.obtain(paramMotionEvent);
    int i1 = paramMotionEvent.getActionMasked();
    if (i1 == 0) {
      z = 0;
    }
    localMotionEvent.offsetLocation(0.0F, z);
    ViewParent localViewParent;
    if (i1 != 0)
    {
      if (i1 != 1)
      {
        if (i1 != 2)
        {
          if (i1 != 3)
          {
            if (i1 != 5)
            {
              if (i1 == 6)
              {
                a(paramMotionEvent);
                l = ((int)paramMotionEvent.getY(paramMotionEvent.findPointerIndex(w)));
              }
            }
            else
            {
              i1 = paramMotionEvent.getActionIndex();
              l = ((int)paramMotionEvent.getY(i1));
              w = paramMotionEvent.getPointerId(i1);
            }
          }
          else
          {
            if ((p) && (getChildCount() > 0) && (i.springBack(getScrollX(), getScrollY(), 0, 0, 0, getScrollRange()))) {
              H.la(this);
            }
            w = -1;
            d();
          }
        }
        else
        {
          int i3 = paramMotionEvent.findPointerIndex(w);
          if (i3 == -1)
          {
            paramMotionEvent = a.b("Invalid pointerId=");
            paramMotionEvent.append(w);
            paramMotionEvent.append(" in onTouchEvent");
            paramMotionEvent.toString();
          }
          else
          {
            int i4 = (int)paramMotionEvent.getY(i3);
            i1 = l - i4;
            int i2 = i1;
            if (dispatchNestedPreScroll(0, i1, y, x, 0))
            {
              i2 = i1 - y[1];
              localMotionEvent.offsetLocation(0.0F, x[1]);
              z += x[1];
            }
            i1 = i2;
            if (!p)
            {
              i1 = i2;
              if (Math.abs(i2) > t)
              {
                localViewParent = getParent();
                if (localViewParent != null) {
                  localViewParent.requestDisallowInterceptTouchEvent(true);
                }
                p = true;
                if (i2 > 0) {
                  i1 = i2 - t;
                } else {
                  i1 = i2 + t;
                }
              }
            }
            if (p)
            {
              l = (i4 - x[1]);
              int i5 = getScrollY();
              i4 = getScrollRange();
              i2 = getOverScrollMode();
              if ((i2 != 0) && ((i2 != 1) || (i4 <= 0))) {
                i2 = 0;
              } else {
                i2 = 1;
              }
              if ((a(0, i1, 0, getScrollY(), 0, i4, 0, 0, true)) && (!hasNestedScrollingParent(0))) {
                q.clear();
              }
              int i6 = getScrollY() - i5;
              if (dispatchNestedScroll(0, i6, 0, i1 - i6, x, 0))
              {
                i1 = l;
                paramMotionEvent = x;
                l = (i1 - paramMotionEvent[1]);
                localMotionEvent.offsetLocation(0.0F, paramMotionEvent[1]);
                z += x[1];
              }
              else if (i2 != 0)
              {
                e();
                i2 = i5 + i1;
                if (i2 < 0)
                {
                  p.a(j, i1 / getHeight(), paramMotionEvent.getX(i3) / getWidth());
                  if (!k.isFinished()) {
                    k.onRelease();
                  }
                }
                else if (i2 > i4)
                {
                  p.a(k, i1 / getHeight(), 1.0F - paramMotionEvent.getX(i3) / getWidth());
                  if (!j.isFinished()) {
                    j.onRelease();
                  }
                }
                paramMotionEvent = j;
                if ((paramMotionEvent != null) && ((!paramMotionEvent.isFinished()) || (!k.isFinished()))) {
                  H.la(this);
                }
              }
            }
          }
        }
      }
      else
      {
        paramMotionEvent = q;
        paramMotionEvent.computeCurrentVelocity(1000, v);
        i1 = (int)paramMotionEvent.getYVelocity(w);
        if (Math.abs(i1) > u) {
          f(-i1);
        } else if (i.springBack(getScrollX(), getScrollY(), 0, 0, 0, getScrollRange())) {
          H.la(this);
        }
        w = -1;
        d();
      }
    }
    else
    {
      if (getChildCount() == 0) {
        return false;
      }
      boolean bool = i.isFinished() ^ true;
      p = bool;
      if (bool)
      {
        localViewParent = getParent();
        if (localViewParent != null) {
          localViewParent.requestDisallowInterceptTouchEvent(true);
        }
      }
      if (!i.isFinished()) {
        i.abortAnimation();
      }
      l = ((int)paramMotionEvent.getY());
      w = paramMotionEvent.getPointerId(0);
      startNestedScroll(2, 0);
    }
    paramMotionEvent = q;
    if (paramMotionEvent != null) {
      paramMotionEvent.addMovement(localMotionEvent);
    }
    localMotionEvent.recycle();
    return true;
  }
  
  public void requestChildFocus(View paramView1, View paramView2)
  {
    if (!m) {
      b(paramView2);
    } else {
      o = paramView2;
    }
    super.requestChildFocus(paramView1, paramView2);
  }
  
  public boolean requestChildRectangleOnScreen(View paramView, Rect paramRect, boolean paramBoolean)
  {
    paramRect.offset(paramView.getLeft() - paramView.getScrollX(), paramView.getTop() - paramView.getScrollY());
    return a(paramRect, paramBoolean);
  }
  
  public void requestDisallowInterceptTouchEvent(boolean paramBoolean)
  {
    if (paramBoolean) {
      i();
    }
    super.requestDisallowInterceptTouchEvent(paramBoolean);
  }
  
  public void requestLayout()
  {
    m = true;
    super.requestLayout();
  }
  
  public void scrollTo(int paramInt1, int paramInt2)
  {
    if (getChildCount() > 0)
    {
      View localView = getChildAt(0);
      FrameLayout.LayoutParams localLayoutParams = (FrameLayout.LayoutParams)localView.getLayoutParams();
      int i7 = getWidth();
      int i8 = getPaddingLeft();
      int i9 = getPaddingRight();
      int i10 = localView.getWidth();
      int i11 = leftMargin;
      int i12 = rightMargin;
      int i1 = getHeight();
      int i2 = getPaddingTop();
      int i3 = getPaddingBottom();
      int i4 = localView.getHeight();
      int i5 = topMargin;
      int i6 = bottomMargin;
      paramInt1 = a(paramInt1, i7 - i8 - i9, i10 + i11 + i12);
      paramInt2 = a(paramInt2, i1 - i2 - i3, i4 + i5 + i6);
      if ((paramInt1 != getScrollX()) || (paramInt2 != getScrollY())) {
        super.scrollTo(paramInt1, paramInt2);
      }
    }
  }
  
  public void setFillViewport(boolean paramBoolean)
  {
    if (paramBoolean != r)
    {
      r = paramBoolean;
      requestLayout();
    }
  }
  
  public void setNestedScrollingEnabled(boolean paramBoolean)
  {
    D.a(paramBoolean);
  }
  
  public void setOnScrollChangeListener(@G b paramB)
  {
    F = paramB;
  }
  
  public void setSmoothScrollingEnabled(boolean paramBoolean)
  {
    s = paramBoolean;
  }
  
  public boolean shouldDelayChildPressedState()
  {
    return true;
  }
  
  public boolean startNestedScroll(int paramInt)
  {
    return startNestedScroll(paramInt, 0);
  }
  
  public boolean startNestedScroll(int paramInt1, int paramInt2)
  {
    return D.a(paramInt1, paramInt2);
  }
  
  public void stopNestedScroll()
  {
    stopNestedScroll(0);
  }
  
  public void stopNestedScroll(int paramInt)
  {
    D.c(paramInt);
  }
  
  public static class SavedState
    extends View.BaseSavedState
  {
    public static final Parcelable.Creator<SavedState> CREATOR = new y();
    public int a;
    
    public SavedState(Parcel paramParcel)
    {
      super();
      a = paramParcel.readInt();
    }
    
    public SavedState(Parcelable paramParcelable)
    {
      super();
    }
    
    public String toString()
    {
      StringBuilder localStringBuilder = a.b("HorizontalScrollView.SavedState{");
      localStringBuilder.append(Integer.toHexString(System.identityHashCode(this)));
      localStringBuilder.append(" scrollPosition=");
      return a.a(localStringBuilder, a, "}");
    }
    
    public void writeToParcel(Parcel paramParcel, int paramInt)
    {
      super.writeToParcel(paramParcel, paramInt);
      paramParcel.writeInt(a);
    }
  }
  
  public static class a
    extends b
  {
    public a() {}
    
    public void onInitializeAccessibilityEvent(View paramView, AccessibilityEvent paramAccessibilityEvent)
    {
      b.DEFAULT_DELEGATE.onInitializeAccessibilityEvent(paramView, paramAccessibilityEvent);
      paramView = (NestedScrollView)paramView;
      paramAccessibilityEvent.setClassName(ScrollView.class.getName());
      boolean bool;
      if (paramView.getScrollRange() > 0) {
        bool = true;
      } else {
        bool = false;
      }
      paramAccessibilityEvent.setScrollable(bool);
      paramAccessibilityEvent.setScrollX(paramView.getScrollX());
      paramAccessibilityEvent.setScrollY(paramView.getScrollY());
      int i = paramView.getScrollX();
      int j = Build.VERSION.SDK_INT;
      paramAccessibilityEvent.setMaxScrollX(i);
      i = paramView.getScrollRange();
      j = Build.VERSION.SDK_INT;
      paramAccessibilityEvent.setMaxScrollY(i);
    }
    
    public void onInitializeAccessibilityNodeInfo(View paramView, c paramC)
    {
      super.onInitializeAccessibilityNodeInfo(paramView, paramC);
      paramView = (NestedScrollView)paramView;
      paramC.a(ScrollView.class.getName());
      if (paramView.isEnabled())
      {
        int i = paramView.getScrollRange();
        if (i > 0)
        {
          paramC.s(true);
          if (paramView.getScrollY() > 0) {
            paramC.a(8192);
          }
          if (paramView.getScrollY() < i) {
            paramC.a(4096);
          }
        }
      }
    }
    
    public boolean performAccessibilityAction(View paramView, int paramInt, Bundle paramBundle)
    {
      if (super.performAccessibilityAction(paramView, paramInt, paramBundle)) {
        return true;
      }
      paramView = (NestedScrollView)paramView;
      if (!paramView.isEnabled()) {
        return false;
      }
      if (paramInt != 4096)
      {
        if (paramInt != 8192) {
          return false;
        }
        paramInt = paramView.getHeight();
        i = paramView.getPaddingBottom();
        j = paramView.getPaddingTop();
        paramInt = Math.max(paramView.getScrollY() - (paramInt - i - j), 0);
        if (paramInt != paramView.getScrollY())
        {
          paramView.b(0, paramInt);
          return true;
        }
        return false;
      }
      paramInt = paramView.getHeight();
      int i = paramView.getPaddingBottom();
      int j = paramView.getPaddingTop();
      paramInt = Math.min(paramView.getScrollY() + (paramInt - i - j), paramView.getScrollRange());
      if (paramInt != paramView.getScrollY())
      {
        paramView.b(0, paramInt);
        return true;
      }
      return false;
    }
  }
  
  public static abstract interface b
  {
    public abstract void onScrollChange(NestedScrollView paramNestedScrollView, int paramInt1, int paramInt2, int paramInt3, int paramInt4);
  }
}
