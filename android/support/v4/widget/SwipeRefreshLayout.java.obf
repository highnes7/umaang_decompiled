package android.support.v4.widget;

import android.content.Context;
import android.content.res.Resources;
import android.content.res.TypedArray;
import android.graphics.drawable.Drawable;
import android.os.Build.VERSION;
import android.util.AttributeSet;
import android.util.DisplayMetrics;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.MeasureSpec;
import android.view.ViewConfiguration;
import android.view.ViewGroup;
import android.view.animation.Animation;
import android.view.animation.Animation.AnimationListener;
import android.view.animation.DecelerateInterpolator;
import android.widget.AbsListView;
import android.widget.ImageView;
import android.widget.ListView;
import b.b.a.W;
import b.b.a.k;
import b.b.a.m;
import b.b.x.o.s;
import b.b.x.o.t;
import b.b.x.o.v;
import b.b.x.o.w;
import b.b.x.p.J;
import b.b.x.p.K;
import b.b.x.p.L;
import b.b.x.p.M;
import b.b.x.p.f;
import b.b.x.p.x;

public class SwipeRefreshLayout
  extends ViewGroup
  implements v, s
{
  public static final int a = 0;
  public static final int b = 1;
  public static final int c = -1;
  @W
  public static final int d = 40;
  @W
  public static final int e = 56;
  public static final String f = "SwipeRefreshLayout";
  public static final int g = 255;
  public static final int h = 76;
  public static final float i = 2.0F;
  public static final int j = -1;
  public static final float k = 0.5F;
  public static final float l = 0.8F;
  public static final int m = 150;
  public static final int n = 300;
  public static final int o = 200;
  public static final int p = 200;
  public static final int q = -328966;
  public static final int r = 64;
  public static final int[] s = { 16842766 };
  public final t A;
  public final int[] B = new int[2];
  public final int[] C = new int[2];
  public boolean D;
  public int E;
  public int F;
  public float G;
  public float H;
  public boolean I;
  public int J = -1;
  public boolean K;
  public boolean L;
  public final DecelerateInterpolator M;
  public b.b.x.p.c N;
  public int O = -1;
  public int P;
  public float Q;
  public int R;
  public int S;
  public int T;
  public f U;
  public Animation V;
  public Animation W;
  public Animation aa;
  public Animation ba;
  public Animation ca;
  public boolean da;
  public int ea;
  public boolean fa;
  public a ga;
  public Animation.AnimationListener ha = new b.b.x.p.F(this);
  public final Animation ia = new K(this);
  public final Animation ja = new L(this);
  public View t;
  public b u;
  public boolean v = false;
  public int w;
  public float x = -1.0F;
  public float y;
  public final w z;
  
  public SwipeRefreshLayout(@b.b.a.F Context paramContext)
  {
    this(paramContext, null);
  }
  
  public SwipeRefreshLayout(@b.b.a.F Context paramContext, @b.b.a.G AttributeSet paramAttributeSet)
  {
    super(paramContext, paramAttributeSet);
    w = ViewConfiguration.get(paramContext).getScaledTouchSlop();
    E = getResources().getInteger(17694721);
    setWillNotDraw(false);
    M = new DecelerateInterpolator(2.0F);
    DisplayMetrics localDisplayMetrics = getResources().getDisplayMetrics();
    ea = ((int)(density * 40.0F));
    d();
    setChildrenDrawingOrderEnabled(true);
    S = ((int)(density * 64.0F));
    x = S;
    z = new w(this);
    A = new t(this);
    setNestedScrollingEnabled(true);
    int i1 = -ea;
    F = i1;
    R = i1;
    a(1.0F);
    paramContext = paramContext.obtainStyledAttributes(paramAttributeSet, s);
    setEnabled(paramContext.getBoolean(0, true));
    paramContext.recycle();
  }
  
  private Animation a(int paramInt1, int paramInt2)
  {
    b.b.x.p.I localI = new b.b.x.p.I(this, paramInt1, paramInt2);
    localI.setDuration(300L);
    N.a(null);
    N.clearAnimation();
    N.startAnimation(localI);
    return localI;
  }
  
  private void a(int paramInt, Animation.AnimationListener paramAnimationListener)
  {
    P = paramInt;
    ia.reset();
    ia.setDuration(200L);
    ia.setInterpolator(M);
    if (paramAnimationListener != null) {
      N.a(paramAnimationListener);
    }
    N.clearAnimation();
    N.startAnimation(ia);
  }
  
  private void a(MotionEvent paramMotionEvent)
  {
    int i1 = paramMotionEvent.getActionIndex();
    if (paramMotionEvent.getPointerId(i1) == J)
    {
      if (i1 == 0) {
        i1 = 1;
      } else {
        i1 = 0;
      }
      J = paramMotionEvent.getPointerId(i1);
    }
  }
  
  private void a(boolean paramBoolean1, boolean paramBoolean2)
  {
    if (v != paramBoolean1)
    {
      da = paramBoolean2;
      e();
      v = paramBoolean1;
      if (v)
      {
        a(F, ha);
        return;
      }
      a(ha);
    }
  }
  
  private boolean a(Animation paramAnimation)
  {
    return (paramAnimation != null) && (paramAnimation.hasStarted()) && (!paramAnimation.hasEnded());
  }
  
  private void b(float paramFloat)
  {
    if (paramFloat > x)
    {
      a(true, true);
      return;
    }
    v = false;
    U.b(0.0F, 0.0F);
    J localJ = null;
    if (!K) {
      localJ = new J(this);
    }
    b(F, localJ);
    U.a(false);
  }
  
  private void b(int paramInt, Animation.AnimationListener paramAnimationListener)
  {
    if (K)
    {
      c(paramInt, paramAnimationListener);
      return;
    }
    P = paramInt;
    ja.reset();
    ja.setDuration(200L);
    ja.setInterpolator(M);
    if (paramAnimationListener != null) {
      N.a(paramAnimationListener);
    }
    N.clearAnimation();
    N.startAnimation(ja);
  }
  
  private void b(Animation.AnimationListener paramAnimationListener)
  {
    N.setVisibility(0);
    U.setAlpha(255);
    V = new b.b.x.p.G(this);
    V.setDuration(E);
    if (paramAnimationListener != null) {
      N.a(paramAnimationListener);
    }
    N.clearAnimation();
    N.startAnimation(V);
  }
  
  private void c(float paramFloat)
  {
    U.a(true);
    float f1 = Math.min(1.0F, Math.abs(paramFloat / x));
    double d1 = f1;
    Double.isNaN(d1);
    float f2 = (float)Math.max(d1 - 0.4D, 0.0D) * 5.0F / 3.0F;
    float f4 = Math.abs(paramFloat);
    float f5 = x;
    int i1 = T;
    if (i1 > 0) {}
    float f3;
    for (;;)
    {
      f3 = i1;
      break;
      if (fa) {
        i1 = S - R;
      } else {
        i1 = S;
      }
    }
    d1 = Math.max(0.0F, Math.min(f4 - f5, f3 * 2.0F) / f3) / 4.0F;
    double d2 = Math.pow(d1, 2.0D);
    Double.isNaN(d1);
    f4 = (float)(d1 - d2) * 2.0F;
    i1 = R;
    int i2 = (int)(f3 * f1 + f3 * f4 * 2.0F);
    if (N.getVisibility() != 0) {
      N.setVisibility(0);
    }
    if (!K)
    {
      N.setScaleX(1.0F);
      N.setScaleY(1.0F);
    }
    if (K) {
      setAnimationProgress(Math.min(1.0F, paramFloat / x));
    }
    if (paramFloat < x)
    {
      if ((U.getAlpha() > 76) && (!a(aa))) {
        g();
      }
    }
    else if ((U.getAlpha() < 255) && (!a(ba))) {
      f();
    }
    U.b(0.0F, Math.min(0.8F, f2 * 0.8F));
    U.a(Math.min(1.0F, f2));
    U.c((f4 * 2.0F + (f2 * 0.4F - 0.25F)) * 0.5F);
    setTargetOffsetTopAndBottom(i1 + i2 - F);
  }
  
  private void c(int paramInt, Animation.AnimationListener paramAnimationListener)
  {
    P = paramInt;
    Q = N.getScaleX();
    ca = new M(this);
    ca.setDuration(150L);
    if (paramAnimationListener != null) {
      N.a(paramAnimationListener);
    }
    N.clearAnimation();
    N.startAnimation(ca);
  }
  
  private void d()
  {
    N = new b.b.x.p.c(getContext(), -328966);
    U = new f(getContext());
    U.b(1);
    N.setImageDrawable(U);
    N.setVisibility(8);
    addView(N);
  }
  
  private void d(float paramFloat)
  {
    float f1 = H;
    int i1 = w;
    if ((paramFloat - f1 > i1) && (!I))
    {
      G = (f1 + i1);
      I = true;
      U.setAlpha(76);
    }
  }
  
  private void e()
  {
    if (t == null)
    {
      int i1 = 0;
      while (i1 < getChildCount())
      {
        View localView = getChildAt(i1);
        if (!localView.equals(N))
        {
          t = localView;
          return;
        }
        i1 += 1;
      }
    }
  }
  
  private void f()
  {
    ba = a(U.getAlpha(), 255);
  }
  
  private void g()
  {
    aa = a(U.getAlpha(), 76);
  }
  
  private void setColorViewAlpha(int paramInt)
  {
    N.getBackground().setAlpha(paramInt);
    U.setAlpha(paramInt);
  }
  
  public void a(float paramFloat)
  {
    int i1 = P;
    setTargetOffsetTopAndBottom(i1 + (int)((R - i1) * paramFloat) - N.getTop());
  }
  
  public void a(Animation.AnimationListener paramAnimationListener)
  {
    W = new b.b.x.p.H(this);
    W.setDuration(150L);
    N.a(paramAnimationListener);
    N.clearAnimation();
    N.startAnimation(W);
  }
  
  public void a(boolean paramBoolean, int paramInt)
  {
    S = paramInt;
    K = paramBoolean;
    N.invalidate();
  }
  
  public void a(boolean paramBoolean, int paramInt1, int paramInt2)
  {
    K = paramBoolean;
    R = paramInt1;
    S = paramInt2;
    fa = true;
    c();
    v = false;
  }
  
  public boolean a()
  {
    Object localObject = ga;
    if (localObject != null) {
      return ((a)localObject).a(this, t);
    }
    localObject = t;
    if ((localObject instanceof ListView)) {
      return x.a((ListView)localObject, -1);
    }
    return ((View)localObject).canScrollVertically(-1);
  }
  
  public boolean b()
  {
    return v;
  }
  
  public void c()
  {
    N.clearAnimation();
    U.stop();
    N.setVisibility(8);
    setColorViewAlpha(255);
    if (K) {
      setAnimationProgress(0.0F);
    } else {
      setTargetOffsetTopAndBottom(R - F);
    }
    F = N.getTop();
  }
  
  public boolean dispatchNestedFling(float paramFloat1, float paramFloat2, boolean paramBoolean)
  {
    return A.a(paramFloat1, paramFloat2, paramBoolean);
  }
  
  public boolean dispatchNestedPreFling(float paramFloat1, float paramFloat2)
  {
    return A.a(paramFloat1, paramFloat2);
  }
  
  public boolean dispatchNestedPreScroll(int paramInt1, int paramInt2, int[] paramArrayOfInt1, int[] paramArrayOfInt2)
  {
    return A.a(paramInt1, paramInt2, paramArrayOfInt1, paramArrayOfInt2);
  }
  
  public boolean dispatchNestedScroll(int paramInt1, int paramInt2, int paramInt3, int paramInt4, int[] paramArrayOfInt)
  {
    return A.a(paramInt1, paramInt2, paramInt3, paramInt4, paramArrayOfInt);
  }
  
  public int getChildDrawingOrder(int paramInt1, int paramInt2)
  {
    int i1 = O;
    if (i1 < 0) {
      return paramInt2;
    }
    if (paramInt2 == paramInt1 - 1) {
      return i1;
    }
    paramInt1 = paramInt2;
    if (paramInt2 >= i1) {
      paramInt1 = paramInt2 + 1;
    }
    return paramInt1;
  }
  
  public int getNestedScrollAxes()
  {
    return z.a();
  }
  
  public int getProgressCircleDiameter()
  {
    return ea;
  }
  
  public int getProgressViewEndOffset()
  {
    return S;
  }
  
  public int getProgressViewStartOffset()
  {
    return R;
  }
  
  public boolean hasNestedScrollingParent()
  {
    return A.a();
  }
  
  public boolean isNestedScrollingEnabled()
  {
    return A.b();
  }
  
  public void onDetachedFromWindow()
  {
    super.onDetachedFromWindow();
    c();
  }
  
  public boolean onInterceptTouchEvent(MotionEvent paramMotionEvent)
  {
    e();
    int i1 = paramMotionEvent.getActionMasked();
    if ((L) && (i1 == 0)) {
      L = false;
    }
    if ((isEnabled()) && (!L) && (!a()) && (!v))
    {
      if (D) {
        return false;
      }
      if (i1 != 0)
      {
        if (i1 != 1) {
          if (i1 != 2)
          {
            if (i1 != 3)
            {
              if (i1 != 6) {
                break label205;
              }
              a(paramMotionEvent);
              break label205;
            }
          }
          else
          {
            i1 = J;
            if (i1 == -1)
            {
              paramMotionEvent = f;
              return false;
            }
            i1 = paramMotionEvent.findPointerIndex(i1);
            if (i1 < 0) {
              return false;
            }
            d(paramMotionEvent.getY(i1));
            break label205;
          }
        }
        I = false;
        J = -1;
      }
      else
      {
        setTargetOffsetTopAndBottom(R - N.getTop());
        J = paramMotionEvent.getPointerId(0);
        I = false;
        i1 = paramMotionEvent.findPointerIndex(J);
        if (i1 < 0) {
          return false;
        }
        H = paramMotionEvent.getY(i1);
      }
      label205:
      return I;
    }
    return false;
  }
  
  public void onLayout(boolean paramBoolean, int paramInt1, int paramInt2, int paramInt3, int paramInt4)
  {
    paramInt1 = getMeasuredWidth();
    paramInt2 = getMeasuredHeight();
    if (getChildCount() == 0) {
      return;
    }
    if (t == null) {
      e();
    }
    Object localObject = t;
    if (localObject == null) {
      return;
    }
    paramInt3 = getPaddingLeft();
    paramInt4 = getPaddingTop();
    ((View)localObject).layout(paramInt3, paramInt4, paramInt1 - getPaddingLeft() - getPaddingRight() + paramInt3, paramInt2 - getPaddingTop() - getPaddingBottom() + paramInt4);
    paramInt3 = N.getMeasuredWidth();
    paramInt2 = N.getMeasuredHeight();
    localObject = N;
    paramInt1 /= 2;
    paramInt3 /= 2;
    paramInt4 = F;
    ((ImageView)localObject).layout(paramInt1 - paramInt3, paramInt4, paramInt1 + paramInt3, paramInt2 + paramInt4);
  }
  
  public void onMeasure(int paramInt1, int paramInt2)
  {
    super.onMeasure(paramInt1, paramInt2);
    if (t == null) {
      e();
    }
    View localView = t;
    if (localView == null) {
      return;
    }
    localView.measure(View.MeasureSpec.makeMeasureSpec(getMeasuredWidth() - getPaddingLeft() - getPaddingRight(), 1073741824), View.MeasureSpec.makeMeasureSpec(getMeasuredHeight() - getPaddingTop() - getPaddingBottom(), 1073741824));
    N.measure(View.MeasureSpec.makeMeasureSpec(ea, 1073741824), View.MeasureSpec.makeMeasureSpec(ea, 1073741824));
    O = -1;
    paramInt1 = 0;
    while (paramInt1 < getChildCount())
    {
      if (getChildAt(paramInt1) == N)
      {
        O = paramInt1;
        return;
      }
      paramInt1 += 1;
    }
  }
  
  public boolean onNestedFling(View paramView, float paramFloat1, float paramFloat2, boolean paramBoolean)
  {
    return dispatchNestedFling(paramFloat1, paramFloat2, paramBoolean);
  }
  
  public boolean onNestedPreFling(View paramView, float paramFloat1, float paramFloat2)
  {
    return dispatchNestedPreFling(paramFloat1, paramFloat2);
  }
  
  public void onNestedPreScroll(View paramView, int paramInt1, int paramInt2, int[] paramArrayOfInt)
  {
    if (paramInt2 > 0)
    {
      float f1 = y;
      if (f1 > 0.0F)
      {
        float f2 = paramInt2;
        if (f2 > f1)
        {
          paramArrayOfInt[1] = (paramInt2 - (int)f1);
          y = 0.0F;
        }
        else
        {
          y = (f1 - f2);
          paramArrayOfInt[1] = paramInt2;
        }
        c(y);
      }
    }
    if ((fa) && (paramInt2 > 0) && (y == 0.0F) && (Math.abs(paramInt2 - paramArrayOfInt[1]) > 0)) {
      N.setVisibility(8);
    }
    paramView = B;
    if (dispatchNestedPreScroll(paramInt1 - paramArrayOfInt[0], paramInt2 - paramArrayOfInt[1], paramView, null))
    {
      paramArrayOfInt[0] += paramView[0];
      paramArrayOfInt[1] += paramView[1];
    }
  }
  
  public void onNestedScroll(View paramView, int paramInt1, int paramInt2, int paramInt3, int paramInt4)
  {
    dispatchNestedScroll(paramInt1, paramInt2, paramInt3, paramInt4, C);
    paramInt1 = paramInt4 + C[1];
    if ((paramInt1 < 0) && (!a()))
    {
      y += Math.abs(paramInt1);
      c(y);
    }
  }
  
  public void onNestedScrollAccepted(View paramView1, View paramView2, int paramInt)
  {
    z.a(paramView1, paramView2, paramInt);
    startNestedScroll(paramInt & 0x2);
    y = 0.0F;
    D = true;
  }
  
  public boolean onStartNestedScroll(View paramView1, View paramView2, int paramInt)
  {
    return (isEnabled()) && (!L) && (!v) && ((paramInt & 0x2) != 0);
  }
  
  public void onStopNestedScroll(View paramView)
  {
    z.a(paramView);
    D = false;
    float f1 = y;
    if (f1 > 0.0F)
    {
      b(f1);
      y = 0.0F;
    }
    stopNestedScroll();
  }
  
  public boolean onTouchEvent(MotionEvent paramMotionEvent)
  {
    int i1 = paramMotionEvent.getActionMasked();
    if ((L) && (i1 == 0)) {
      L = false;
    }
    if ((isEnabled()) && (!L) && (!a()) && (!v))
    {
      if (D) {
        return false;
      }
      if (i1 != 0)
      {
        float f1;
        if (i1 != 1)
        {
          if (i1 != 2)
          {
            if (i1 != 3)
            {
              if (i1 != 5)
              {
                if (i1 != 6) {
                  return true;
                }
                a(paramMotionEvent);
                return true;
              }
              i1 = paramMotionEvent.getActionIndex();
              if (i1 < 0)
              {
                paramMotionEvent = f;
                return false;
              }
              J = paramMotionEvent.getPointerId(i1);
              return true;
            }
            return false;
          }
          i1 = paramMotionEvent.findPointerIndex(J);
          if (i1 < 0)
          {
            paramMotionEvent = f;
            return false;
          }
          f1 = paramMotionEvent.getY(i1);
          d(f1);
          if (I)
          {
            f1 = (f1 - G) * 0.5F;
            if (f1 > 0.0F)
            {
              c(f1);
              return true;
            }
            return false;
          }
        }
        else
        {
          i1 = paramMotionEvent.findPointerIndex(J);
          if (i1 < 0)
          {
            paramMotionEvent = f;
            return false;
          }
          if (I)
          {
            f1 = paramMotionEvent.getY(i1);
            float f2 = G;
            I = false;
            b((f1 - f2) * 0.5F);
          }
          J = -1;
          return false;
        }
      }
      else
      {
        J = paramMotionEvent.getPointerId(0);
        I = false;
      }
      return true;
    }
    return false;
  }
  
  public void requestDisallowInterceptTouchEvent(boolean paramBoolean)
  {
    if ((Build.VERSION.SDK_INT >= 21) || (!(t instanceof AbsListView)))
    {
      View localView = t;
      if ((localView != null) && (!b.b.x.o.H.ha(localView))) {
        return;
      }
      super.requestDisallowInterceptTouchEvent(paramBoolean);
    }
  }
  
  public void setAnimationProgress(float paramFloat)
  {
    N.setScaleX(paramFloat);
    N.setScaleY(paramFloat);
  }
  
  @Deprecated
  public void setColorScheme(@m int... paramVarArgs)
  {
    setColorSchemeResources(paramVarArgs);
  }
  
  public void setColorSchemeColors(@k int... paramVarArgs)
  {
    e();
    U.a(paramVarArgs);
  }
  
  public void setColorSchemeResources(@m int... paramVarArgs)
  {
    Context localContext = getContext();
    int[] arrayOfInt = new int[paramVarArgs.length];
    int i1 = 0;
    while (i1 < paramVarArgs.length)
    {
      arrayOfInt[i1] = b.b.x.b.c.getColor(localContext, paramVarArgs[i1]);
      i1 += 1;
    }
    setColorSchemeColors(arrayOfInt);
  }
  
  public void setDistanceToTriggerSync(int paramInt)
  {
    x = paramInt;
  }
  
  public void setEnabled(boolean paramBoolean)
  {
    super.setEnabled(paramBoolean);
    if (!paramBoolean) {
      c();
    }
  }
  
  public void setNestedScrollingEnabled(boolean paramBoolean)
  {
    A.a(paramBoolean);
  }
  
  public void setOnChildScrollUpCallback(@b.b.a.G a paramA)
  {
    ga = paramA;
  }
  
  public void setOnRefreshListener(@b.b.a.G b paramB)
  {
    u = paramB;
  }
  
  @Deprecated
  public void setProgressBackgroundColor(int paramInt)
  {
    setProgressBackgroundColorSchemeResource(paramInt);
  }
  
  public void setProgressBackgroundColorSchemeColor(@k int paramInt)
  {
    N.setBackgroundColor(paramInt);
  }
  
  public void setProgressBackgroundColorSchemeResource(@m int paramInt)
  {
    setProgressBackgroundColorSchemeColor(b.b.x.b.c.getColor(getContext(), paramInt));
  }
  
  public void setRefreshing(boolean paramBoolean)
  {
    if ((paramBoolean) && (v != paramBoolean))
    {
      v = paramBoolean;
      int i1;
      if (!fa) {
        i1 = S + R;
      } else {
        i1 = S;
      }
      setTargetOffsetTopAndBottom(i1 - F);
      da = false;
      b(ha);
      return;
    }
    a(paramBoolean, false);
  }
  
  public void setSize(int paramInt)
  {
    if ((paramInt != 0) && (paramInt != 1)) {
      return;
    }
    DisplayMetrics localDisplayMetrics = getResources().getDisplayMetrics();
    if (paramInt == 0) {
      ea = ((int)(density * 56.0F));
    } else {
      ea = ((int)(density * 40.0F));
    }
    N.setImageDrawable(null);
    U.b(paramInt);
    N.setImageDrawable(U);
  }
  
  public void setSlingshotDistance(@b.b.a.I int paramInt)
  {
    T = paramInt;
  }
  
  public void setTargetOffsetTopAndBottom(int paramInt)
  {
    N.bringToFront();
    b.b.x.o.H.g(N, paramInt);
    F = N.getTop();
  }
  
  public boolean startNestedScroll(int paramInt)
  {
    return A.b(paramInt);
  }
  
  public void stopNestedScroll()
  {
    A.d();
  }
  
  public static abstract interface a
  {
    public abstract boolean a(@b.b.a.F SwipeRefreshLayout paramSwipeRefreshLayout, @b.b.a.G View paramView);
  }
  
  public static abstract interface b
  {
    public abstract void a();
  }
}
