package android.support.v7.widget;

import android.graphics.PorterDuff.Mode;
import android.graphics.Rect;
import android.graphics.drawable.Drawable;
import android.graphics.drawable.DrawableContainer;
import android.graphics.drawable.DrawableContainer.DrawableContainerState;
import android.graphics.drawable.ScaleDrawable;
import android.os.Build.VERSION;
import android.support.v7.graphics.drawable.DrawableWrapper;
import b.b.a.F;
import b.b.a.N;
import b.b.x.d.a.a;
import b.b.x.d.a.f;
import java.lang.reflect.Field;
import java.lang.reflect.Method;

@N({b.b.a.N.a.b})
public class DrawableUtils
{
  public static final Rect INSETS_NONE = new Rect();
  public static final String TAG = "DrawableUtils";
  public static final String VECTOR_DRAWABLE_CLAZZ_NAME = "android.graphics.drawable.VectorDrawable";
  public static Class<?> sInsetsClazz;
  
  static
  {
    int i = Build.VERSION.SDK_INT;
    try
    {
      sInsetsClazz = Class.forName("android.graphics.Insets");
      return;
    }
    catch (ClassNotFoundException localClassNotFoundException) {}
  }
  
  public DrawableUtils() {}
  
  public static boolean canSafelyMutateDrawable(@F Drawable paramDrawable)
  {
    int i = Build.VERSION.SDK_INT;
    if ((paramDrawable instanceof DrawableContainer))
    {
      paramDrawable = paramDrawable.getConstantState();
      if ((paramDrawable instanceof DrawableContainer.DrawableContainerState))
      {
        paramDrawable = ((DrawableContainer.DrawableContainerState)paramDrawable).getChildren();
        int j = paramDrawable.length;
        i = 0;
        while (i < j)
        {
          if (!canSafelyMutateDrawable(paramDrawable[i])) {
            return false;
          }
          i += 1;
        }
      }
    }
    else
    {
      if ((paramDrawable instanceof f)) {
        return canSafelyMutateDrawable(((f)paramDrawable).a());
      }
      if ((paramDrawable instanceof DrawableWrapper)) {
        return canSafelyMutateDrawable(((DrawableWrapper)paramDrawable).getWrappedDrawable());
      }
      if ((paramDrawable instanceof ScaleDrawable)) {
        return canSafelyMutateDrawable(((ScaleDrawable)paramDrawable).getDrawable());
      }
    }
    return true;
  }
  
  public static void fixDrawable(@F Drawable paramDrawable)
  {
    if ((Build.VERSION.SDK_INT == 21) && ("android.graphics.drawable.VectorDrawable".equals(paramDrawable.getClass().getName()))) {
      fixVectorDrawableTinting(paramDrawable);
    }
  }
  
  public static void fixVectorDrawableTinting(Drawable paramDrawable)
  {
    int[] arrayOfInt = paramDrawable.getState();
    if ((arrayOfInt != null) && (arrayOfInt.length != 0)) {
      paramDrawable.setState(ThemeUtils.EMPTY_STATE_SET);
    } else {
      paramDrawable.setState(ThemeUtils.CHECKED_STATE_SET);
    }
    paramDrawable.setState(arrayOfInt);
  }
  
  public static Rect getOpticalBounds(Drawable paramDrawable)
  {
    if (sInsetsClazz != null)
    {
      for (;;)
      {
        try
        {
          paramDrawable = a.h(paramDrawable);
          paramDrawable = paramDrawable.getClass().getMethod("getOpticalInsets", new Class[0]).invoke(paramDrawable, new Object[0]);
          if (paramDrawable == null) {
            continue;
          }
          localRect = new Rect();
          Field[] arrayOfField = sInsetsClazz.getFields();
          int k = arrayOfField.length;
          j = 0;
          if (j >= k) {
            continue;
          }
          localField = arrayOfField[j];
          str = localField.getName();
          i = -1;
          switch (str.hashCode())
          {
          case 108511772: 
            if (!str.equals("right")) {
              continue;
            }
            i = 2;
          }
        }
        catch (Exception paramDrawable)
        {
          Rect localRect;
          int j;
          Field localField;
          String str;
          int i;
          continue;
          if (i == 0) {
            continue;
          }
          if (i == 1) {
            continue;
          }
          if (i == 2) {
            continue;
          }
          if (i == 3) {
            continue;
          }
          continue;
        }
        if (!str.equals("left")) {
          continue;
        }
        i = 0;
        continue;
        if (!str.equals("top")) {
          continue;
        }
        i = 1;
        continue;
        if (!str.equals("bottom")) {
          continue;
        }
        i = 3;
        continue;
        bottom = localField.getInt(paramDrawable);
        continue;
        right = localField.getInt(paramDrawable);
        continue;
        top = localField.getInt(paramDrawable);
        continue;
        left = localField.getInt(paramDrawable);
        j += 1;
      }
      return localRect;
    }
    return INSETS_NONE;
  }
  
  public static PorterDuff.Mode parseTintMode(int paramInt, PorterDuff.Mode paramMode)
  {
    if (paramInt != 3)
    {
      if (paramInt != 5)
      {
        if (paramInt != 9)
        {
          switch (paramInt)
          {
          default: 
            return paramMode;
          case 16: 
            return PorterDuff.Mode.ADD;
          case 15: 
            return PorterDuff.Mode.SCREEN;
          }
          return PorterDuff.Mode.MULTIPLY;
        }
        return PorterDuff.Mode.SRC_ATOP;
      }
      return PorterDuff.Mode.SRC_IN;
    }
    return PorterDuff.Mode.SRC_OVER;
  }
}
