package android.support.v7.view;

import android.app.Activity;
import android.content.Context;
import android.content.ContextWrapper;
import android.content.res.ColorStateList;
import android.content.res.TypedArray;
import android.graphics.PorterDuff.Mode;
import android.support.v7.appcompat.R.styleable;
import android.support.v7.view.menu.MenuItemImpl;
import android.support.v7.view.menu.MenuItemWrapperICS;
import android.util.AttributeSet;
import android.view.InflateException;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.MenuItem.OnMenuItemClickListener;
import android.view.SubMenu;
import android.view.View;
import b.b.a.N;
import b.b.x.o.c;
import b.b.x.o.p;
import f.a.a.a.a;
import java.io.IOException;
import java.lang.reflect.Constructor;
import java.lang.reflect.Method;
import org.xmlpull.v1.XmlPullParser;
import org.xmlpull.v1.XmlPullParserException;

@N({b.b.a.N.a.b})
public class SupportMenuInflater
  extends MenuInflater
{
  public static final Class<?>[] ACTION_PROVIDER_CONSTRUCTOR_SIGNATURE = ACTION_VIEW_CONSTRUCTOR_SIGNATURE;
  public static final Class<?>[] ACTION_VIEW_CONSTRUCTOR_SIGNATURE = { Context.class };
  public static final String LOG_TAG = "SupportMenuInflater";
  public static final int NO_ID = 0;
  public static final String XML_GROUP = "group";
  public static final String XML_ITEM = "item";
  public static final String XML_MENU = "menu";
  public final Object[] mActionProviderConstructorArguments;
  public final Object[] mActionViewConstructorArguments;
  public Context mContext;
  public Object mRealOwner;
  
  public SupportMenuInflater(Context paramContext)
  {
    super(paramContext);
    mContext = paramContext;
    mActionViewConstructorArguments = new Object[] { paramContext };
    mActionProviderConstructorArguments = mActionViewConstructorArguments;
  }
  
  private Object findRealOwner(Object paramObject)
  {
    if ((paramObject instanceof Activity)) {
      return paramObject;
    }
    Object localObject = paramObject;
    if ((paramObject instanceof ContextWrapper)) {
      localObject = findRealOwner(((ContextWrapper)paramObject).getBaseContext());
    }
    return localObject;
  }
  
  private void parseMenu(XmlPullParser paramXmlPullParser, AttributeSet paramAttributeSet, Menu paramMenu)
    throws XmlPullParserException, IOException
  {
    MenuState localMenuState = new MenuState(paramMenu);
    int i = paramXmlPullParser.getEventType();
    do
    {
      if (i == 2)
      {
        paramMenu = paramXmlPullParser.getName();
        if (paramMenu.equals("menu"))
        {
          i = paramXmlPullParser.next();
          break;
        }
        throw new RuntimeException(a.c("Expecting menu, got ", paramMenu));
      }
      j = paramXmlPullParser.next();
      i = j;
    } while (j != 1);
    i = j;
    int j = 0;
    int k = 0;
    Object localObject = null;
    while (j == 0) {
      if (i != 1)
      {
        int m;
        if (i != 2)
        {
          if (i != 3)
          {
            m = j;
            i = k;
            paramMenu = (Menu)localObject;
          }
          else
          {
            String str = paramXmlPullParser.getName();
            if ((k != 0) && (str.equals(localObject)))
            {
              paramMenu = null;
              i = 0;
              m = j;
            }
            else if (str.equals("group"))
            {
              localMenuState.resetGroup();
              m = j;
              i = k;
              paramMenu = (Menu)localObject;
            }
            else if (str.equals("item"))
            {
              m = j;
              i = k;
              paramMenu = (Menu)localObject;
              if (!localMenuState.hasAddedItem())
              {
                paramMenu = itemActionProvider;
                if ((paramMenu != null) && (paramMenu.hasSubMenu()))
                {
                  localMenuState.addSubMenuItem();
                  m = j;
                  i = k;
                  paramMenu = (Menu)localObject;
                }
                else
                {
                  localMenuState.addItem();
                  m = j;
                  i = k;
                  paramMenu = (Menu)localObject;
                }
              }
            }
            else
            {
              m = j;
              i = k;
              paramMenu = (Menu)localObject;
              if (str.equals("menu"))
              {
                m = 1;
                i = k;
                paramMenu = (Menu)localObject;
              }
            }
          }
        }
        else if (k != 0)
        {
          m = j;
          i = k;
          paramMenu = (Menu)localObject;
        }
        else
        {
          paramMenu = paramXmlPullParser.getName();
          if (paramMenu.equals("group"))
          {
            localMenuState.readGroup(paramAttributeSet);
            m = j;
            i = k;
            paramMenu = (Menu)localObject;
          }
          else if (paramMenu.equals("item"))
          {
            localMenuState.readItem(paramAttributeSet);
            m = j;
            i = k;
            paramMenu = (Menu)localObject;
          }
          else if (paramMenu.equals("menu"))
          {
            parseMenu(paramXmlPullParser, paramAttributeSet, localMenuState.addSubMenuItem());
            m = j;
            i = k;
            paramMenu = (Menu)localObject;
          }
          else
          {
            i = 1;
            m = j;
          }
        }
        int n = paramXmlPullParser.next();
        j = m;
        k = i;
        localObject = paramMenu;
        i = n;
      }
      else
      {
        throw new RuntimeException("Unexpected end of document");
      }
    }
  }
  
  public Object getRealOwner()
  {
    if (mRealOwner == null) {
      mRealOwner = findRealOwner(mContext);
    }
    return mRealOwner;
  }
  
  /* Error */
  public void inflate(@b.b.a.A int paramInt, Menu paramMenu)
  {
    // Byte code:
    //   0: aload_2
    //   1: instanceof 161
    //   4: ifne +10 -> 14
    //   7: aload_0
    //   8: iload_1
    //   9: aload_2
    //   10: invokespecial 163	android/view/MenuInflater:inflate	(ILandroid/view/Menu;)V
    //   13: return
    //   14: aconst_null
    //   15: astore 4
    //   17: aconst_null
    //   18: astore 5
    //   20: aconst_null
    //   21: astore_3
    //   22: aload_0
    //   23: getfield 58	android/support/v7/view/SupportMenuInflater:mContext	Landroid/content/Context;
    //   26: invokevirtual 167	android/content/Context:getResources	()Landroid/content/res/Resources;
    //   29: iload_1
    //   30: invokevirtual 173	android/content/res/Resources:getLayout	(I)Landroid/content/res/XmlResourceParser;
    //   33: astore 6
    //   35: aload 6
    //   37: astore_3
    //   38: aload 6
    //   40: astore 4
    //   42: aload 6
    //   44: astore 5
    //   46: aload_0
    //   47: aload 6
    //   49: aload 6
    //   51: invokestatic 179	android/util/Xml:asAttributeSet	(Lorg/xmlpull/v1/XmlPullParser;)Landroid/util/AttributeSet;
    //   54: aload_2
    //   55: invokespecial 149	android/support/v7/view/SupportMenuInflater:parseMenu	(Lorg/xmlpull/v1/XmlPullParser;Landroid/util/AttributeSet;Landroid/view/Menu;)V
    //   58: aload 6
    //   60: invokeinterface 184 1 0
    //   65: return
    //   66: astore_2
    //   67: goto +33 -> 100
    //   70: astore_2
    //   71: aload 4
    //   73: astore_3
    //   74: new 186	android/view/InflateException
    //   77: dup
    //   78: ldc -68
    //   80: aload_2
    //   81: invokespecial 191	android/view/InflateException:<init>	(Ljava/lang/String;Ljava/lang/Throwable;)V
    //   84: athrow
    //   85: astore_2
    //   86: aload 5
    //   88: astore_3
    //   89: new 186	android/view/InflateException
    //   92: dup
    //   93: ldc -68
    //   95: aload_2
    //   96: invokespecial 191	android/view/InflateException:<init>	(Ljava/lang/String;Ljava/lang/Throwable;)V
    //   99: athrow
    //   100: aload_3
    //   101: ifnull +9 -> 110
    //   104: aload_3
    //   105: invokeinterface 184 1 0
    //   110: aload_2
    //   111: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	112	0	this	SupportMenuInflater
    //   0	112	1	paramInt	int
    //   0	112	2	paramMenu	Menu
    //   21	84	3	localObject1	Object
    //   15	57	4	localObject2	Object
    //   18	69	5	localObject3	Object
    //   33	26	6	localXmlResourceParser	android.content.res.XmlResourceParser
    // Exception table:
    //   from	to	target	type
    //   22	35	66	finally
    //   46	58	66	finally
    //   74	85	66	finally
    //   89	100	66	finally
    //   22	35	70	java/io/IOException
    //   46	58	70	java/io/IOException
    //   22	35	85	org/xmlpull/v1/XmlPullParserException
    //   46	58	85	org/xmlpull/v1/XmlPullParserException
  }
  
  private static class InflatedOnMenuItemClickListener
    implements MenuItem.OnMenuItemClickListener
  {
    public static final Class<?>[] PARAM_TYPES = { MenuItem.class };
    public Method mMethod;
    public Object mRealOwner;
    
    public InflatedOnMenuItemClickListener(Object paramObject, String paramString)
    {
      mRealOwner = paramObject;
      Class localClass = paramObject.getClass();
      try
      {
        mMethod = localClass.getMethod(paramString, PARAM_TYPES);
        return;
      }
      catch (Exception paramObject)
      {
        StringBuilder localStringBuilder = new StringBuilder();
        localStringBuilder.append("Couldn't resolve menu item onClick handler ");
        localStringBuilder.append(paramString);
        localStringBuilder.append(" in class ");
        localStringBuilder.append(localClass.getName());
        paramString = new InflateException(localStringBuilder.toString());
        paramString.initCause(paramObject);
        throw paramString;
      }
    }
    
    public boolean onMenuItemClick(MenuItem paramMenuItem)
    {
      try
      {
        if (mMethod.getReturnType() == Boolean.TYPE) {
          return ((Boolean)mMethod.invoke(mRealOwner, new Object[] { paramMenuItem })).booleanValue();
        }
        mMethod.invoke(mRealOwner, new Object[] { paramMenuItem });
        return true;
      }
      catch (Exception paramMenuItem)
      {
        throw new RuntimeException(paramMenuItem);
      }
    }
  }
  
  private class MenuState
  {
    public static final int defaultGroupId = 0;
    public static final int defaultItemCategory = 0;
    public static final int defaultItemCheckable = 0;
    public static final boolean defaultItemChecked = false;
    public static final boolean defaultItemEnabled = true;
    public static final int defaultItemId = 0;
    public static final int defaultItemOrder = 0;
    public static final boolean defaultItemVisible = true;
    public int groupCategory;
    public int groupCheckable;
    public boolean groupEnabled;
    public int groupId;
    public int groupOrder;
    public boolean groupVisible;
    public c itemActionProvider;
    public String itemActionProviderClassName;
    public String itemActionViewClassName;
    public int itemActionViewLayout;
    public boolean itemAdded;
    public int itemAlphabeticModifiers;
    public char itemAlphabeticShortcut;
    public int itemCategoryOrder;
    public int itemCheckable;
    public boolean itemChecked;
    public CharSequence itemContentDescription;
    public boolean itemEnabled;
    public int itemIconResId;
    public ColorStateList itemIconTintList = null;
    public PorterDuff.Mode itemIconTintMode = null;
    public int itemId;
    public String itemListenerMethodName;
    public int itemNumericModifiers;
    public char itemNumericShortcut;
    public int itemShowAsAction;
    public CharSequence itemTitle;
    public CharSequence itemTitleCondensed;
    public CharSequence itemTooltipText;
    public boolean itemVisible;
    public Menu menu;
    
    public MenuState(Menu paramMenu)
    {
      menu = paramMenu;
      resetGroup();
    }
    
    private char getShortcut(String paramString)
    {
      if (paramString == null) {
        return '\000';
      }
      return paramString.charAt(0);
    }
    
    private <T> T newInstance(String paramString, Class<?>[] paramArrayOfClass, Object[] paramArrayOfObject)
    {
      try
      {
        paramArrayOfClass = mContext.getClassLoader().loadClass(paramString).getConstructor(paramArrayOfClass);
        paramArrayOfClass.setAccessible(true);
        paramArrayOfClass = paramArrayOfClass.newInstance(paramArrayOfObject);
        return paramArrayOfClass;
      }
      catch (Exception paramArrayOfClass)
      {
        for (;;) {}
      }
      a.f("Cannot instantiate class: ", paramString);
      return null;
    }
    
    private void setItem(MenuItem paramMenuItem)
    {
      Object localObject = paramMenuItem.setChecked(itemChecked).setVisible(itemVisible).setEnabled(itemEnabled);
      int j = itemCheckable;
      int i = 0;
      if (j >= 1) {
        bool = true;
      } else {
        bool = false;
      }
      ((MenuItem)localObject).setCheckable(bool).setTitleCondensed(itemTitleCondensed).setIcon(itemIconResId);
      j = itemShowAsAction;
      if (j >= 0) {
        paramMenuItem.setShowAsAction(j);
      }
      if (itemListenerMethodName != null) {
        if (!mContext.isRestricted()) {
          paramMenuItem.setOnMenuItemClickListener(new SupportMenuInflater.InflatedOnMenuItemClickListener(getRealOwner(), itemListenerMethodName));
        } else {
          throw new IllegalStateException("The android:onClick attribute cannot be used within a restricted context");
        }
      }
      boolean bool = paramMenuItem instanceof MenuItemImpl;
      if (bool) {
        localObject = (MenuItemImpl)paramMenuItem;
      }
      if (itemCheckable >= 2) {
        if (bool) {
          ((MenuItemImpl)paramMenuItem).setExclusiveCheckable(true);
        } else if ((paramMenuItem instanceof MenuItemWrapperICS)) {
          ((MenuItemWrapperICS)paramMenuItem).setExclusiveCheckable(true);
        }
      }
      localObject = itemActionViewClassName;
      if (localObject != null)
      {
        paramMenuItem.setActionView((View)newInstance((String)localObject, SupportMenuInflater.ACTION_VIEW_CONSTRUCTOR_SIGNATURE, mActionViewConstructorArguments));
        i = 1;
      }
      j = itemActionViewLayout;
      if ((j > 0) && (i == 0)) {
        paramMenuItem.setActionView(j);
      }
      localObject = itemActionProvider;
      if (localObject != null) {
        p.a(paramMenuItem, (c)localObject);
      }
      p.a(paramMenuItem, itemContentDescription);
      p.b(paramMenuItem, itemTooltipText);
      p.a(paramMenuItem, itemAlphabeticShortcut, itemAlphabeticModifiers);
      p.b(paramMenuItem, itemNumericShortcut, itemNumericModifiers);
      localObject = itemIconTintMode;
      if (localObject != null) {
        p.a(paramMenuItem, (PorterDuff.Mode)localObject);
      }
      localObject = itemIconTintList;
      if (localObject != null) {
        p.a(paramMenuItem, (ColorStateList)localObject);
      }
    }
    
    public void addItem()
    {
      itemAdded = true;
      setItem(menu.add(groupId, itemId, itemCategoryOrder, itemTitle));
    }
    
    public SubMenu addSubMenuItem()
    {
      itemAdded = true;
      SubMenu localSubMenu = menu.addSubMenu(groupId, itemId, itemCategoryOrder, itemTitle);
      setItem(localSubMenu.getItem());
      return localSubMenu;
    }
    
    public boolean hasAddedItem()
    {
      return itemAdded;
    }
    
    public void readGroup(AttributeSet paramAttributeSet)
    {
      paramAttributeSet = mContext.obtainStyledAttributes(paramAttributeSet, R.styleable.MenuGroup);
      groupId = paramAttributeSet.getResourceId(R.styleable.MenuGroup_android_id, 0);
      groupCategory = paramAttributeSet.getInt(R.styleable.MenuGroup_android_menuCategory, 0);
      groupOrder = paramAttributeSet.getInt(R.styleable.MenuGroup_android_orderInCategory, 0);
      groupCheckable = paramAttributeSet.getInt(R.styleable.MenuGroup_android_checkableBehavior, 0);
      groupVisible = paramAttributeSet.getBoolean(R.styleable.MenuGroup_android_visible, true);
      groupEnabled = paramAttributeSet.getBoolean(R.styleable.MenuGroup_android_enabled, true);
      paramAttributeSet.recycle();
    }
    
    public void readItem(AttributeSet paramAttributeSet)
    {
      throw new Runtime("d2j fail translate: java.lang.RuntimeException: can not merge I and Z\n\tat com.googlecode.dex2jar.ir.TypeClass.merge(TypeClass.java:100)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeRef.updateTypeClass(TypeTransformer.java:174)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.copyTypes(TypeTransformer.java:311)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.fixTypes(TypeTransformer.java:226)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.analyze(TypeTransformer.java:207)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer.transform(TypeTransformer.java:44)\n\tat com.googlecode.d2j.dex.Dex2jar$2.optimize(Dex2jar.java:162)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertCode(Dex2Asm.java:414)\n\tat com.googlecode.d2j.dex.ExDex2Asm.convertCode(ExDex2Asm.java:42)\n\tat com.googlecode.d2j.dex.Dex2jar$2.convertCode(Dex2jar.java:128)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertMethod(Dex2Asm.java:509)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertClass(Dex2Asm.java:406)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertDex(Dex2Asm.java:422)\n\tat com.googlecode.d2j.dex.Dex2jar.doTranslate(Dex2jar.java:172)\n\tat com.googlecode.d2j.dex.Dex2jar.to(Dex2jar.java:272)\n\tat com.googlecode.dex2jar.tools.Dex2jarCmd.doCommandLine(Dex2jarCmd.java:108)\n\tat com.googlecode.dex2jar.tools.BaseCmd.doMain(BaseCmd.java:288)\n\tat com.googlecode.dex2jar.tools.Dex2jarCmd.main(Dex2jarCmd.java:32)\n");
    }
    
    public void resetGroup()
    {
      groupId = 0;
      groupCategory = 0;
      groupOrder = 0;
      groupCheckable = 0;
      groupVisible = true;
      groupEnabled = true;
    }
  }
}
