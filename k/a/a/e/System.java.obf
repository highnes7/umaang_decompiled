package k.a.a.e;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.SQLException;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;
import java.util.ArrayList;
import java.util.Collections;
import k.a.a.c.A;
import k.a.a.c.C;
import k.a.a.c.M;
import k.a.a.c.N;
import k.a.a.c.O;
import k.a.a.c.S;
import k.a.a.c.U;
import k.a.a.c.d;
import k.a.a.c.f;
import k.a.a.c.u;
import k.a.a.c.z;
import k.a.a.m.V;

public class b
  extends SQLiteOpenHelper
{
  public static String A = "NotifTime";
  public static String Aa = "BannerActionType";
  public static String Ab = "trai_start_mcc";
  public static String B = "NotifState";
  public static String Ba = "BannerActionUrl";
  public static String Bb = "trai_start_mnc";
  public static String C = "NotifIsFav";
  public static String Ca = "BannerDesc";
  public static String Cb = "trai_end_mcc";
  public static String D = "CurrentTimeMills";
  public static String Da = "BannerId";
  public static String Db = "trai_end_mnc";
  public static String E = "NotifSubType";
  public static String Ea = "KeywordName";
  public static String Eb = "trai_start_lac";
  public static String F = "NotifUrl";
  public static String Fa = "th_id";
  public static String Fb = "trai_end_lac";
  public static String G = "NotifScreenName";
  public static String Ga = "th_dept_id";
  public static String Gb = "trai_start_operator_name";
  public static String H = "NotifReceiveDateTime";
  public static String Ha = "th_dept_name";
  public static String Hb = "trai_start_operator_alias";
  public static String I = "NotifDialogMsg";
  public static String Ia = "th_event";
  public static String Ib = "trai_end_operator_name";
  public static String J = "NotifWebpageTitle";
  public static String Ja = "th_date_time";
  public static String Jb = "trai_end_operator_alias";
  public static String K = "NotifIsRead";
  public static String Ka = "th_image";
  public static String Kb = "trai_start_signal_strength";
  public static String L = "UserId";
  public static String La = "th_desc";
  public static String Lb = "trai_end_signal_strength";
  public static String M = "NotifDepartmentName";
  public static String Ma = "th_status";
  public static String Mb = "trai_average_signal_strength";
  public static String N = "NotifServiceName";
  public static String Na = "th_service_id";
  public static String Nb = "trai_phone_type";
  public static String O = "ServiceId";
  public static String Oa = "th_service_name";
  public static String Ob = "trai_call_duration";
  public static String P = "ServiceName";
  public static String Pa = "th_response";
  public static String Pb = "trai_network_type";
  public static String Q = "ServiceDesc";
  public static String Qa = "th_user_id";
  public static String Qb = "trai_start_cell_signal_strength";
  public static String R = "ServiceImage";
  public static String Ra = "th_key_value";
  public static String Rb = "trai_end_cell_signal_strength";
  public static String S = "ServiceCategoryId";
  public static String Sa = "book_id";
  public static String Sb = "trai_start_time_of_call";
  public static String T = "ServiceCategory";
  public static String Ta = "book_class";
  public static String Tb = "trai_end_time_of_call";
  public static String U = "ServiceSubCategory";
  public static String Ua = "book_image";
  public static String Ub = "trai_start_lon";
  public static String V = "ServiceRating";
  public static String Va = "book_language";
  public static String Vb = "trai_start_lat";
  public static String W = "ServiceUrl";
  public static String Wa = "book_name";
  public static String Wb = "trai_end_lon";
  public static String X = "ServiceState";
  public static String Xa = "book_sub";
  public static String Xb = "trai_end_lat";
  public static String Y = "ServiceLatitude";
  public static String Ya = "chapter_id";
  public static String Yb = "trai_start_lon_rad";
  public static String Z = "ServiceLongitude";
  public static String Za = "chapter_class_book";
  public static String Zb = "trai_end_lon_rad";
  public static String _a = "chapter_epub_link";
  public static String _b = "trai_start_lat_rad";
  public static final String a = "UMANG_DB";
  public static String aa = "ServiceIsFav";
  public static String ab = "chapter_title";
  public static String ac = "trai_end_lat_rad";
  public static int b = 15;
  public static String ba = "ServiceIsHidden";
  public static String bb = "chapter_no";
  public static String bc = "trai_speed";
  public static b c;
  public static String ca = "ServicePhoneNumber";
  public static String cb = "chapter_enm_layout";
  public static String cc = "trai_altitude";
  public static String d = "TableNotifications";
  public static String da = "ServiceIsNotifEnabled";
  public static String db = "chapter_all_data";
  public static String dc = "trai_is_roaming";
  public static String e = "TableServicesData";
  public static String ea = "ServiceWebsite";
  public static String eb = "chapter_enm_type";
  public static String ec = "trai_is_network_roaming";
  public static String f = "TableInfoServicesData";
  public static String fa = "ServiceEmail";
  public static String fb = "chapter_hash_key";
  public static String fc = "trai_call_drop";
  public static String g = "TableServicesDirectory";
  public static String ga = "ServiceAddress";
  public static String gb = "chapter_path";
  public static String gc = "trai_rating";
  public static String h = "TableServiceSections";
  public static String ha = "ServiceWorkingHours";
  public static String hb = "book_category";
  public static String hc = "trai_state_name";
  public static String i = "TableBannerHome";
  public static String ia = "ServiceLanguages";
  public static String ib = "category";
  public static String ic = "trai_additional_info";
  public static String j = "TableBannerInfoHome";
  public static String ja = "ServicePopularity";
  public static String jb = "n_user_id";
  public static String jc = "trai_comment";
  public static String k = "TableBannerState";
  public static String ka = "ServiceShortDesc";
  public static String kb = "n_doc_id";
  public static String kc = "trai_in_out";
  public static String l = "TableRecentServices";
  public static String la = "ServiceOtherInfo";
  public static String lb = "n_doc_path";
  public static String lc = "trai_name";
  public static String m = "TableRecentSearches";
  public static String ma = "ServiceNativeApp";
  public static String mb = "n_thumb_url";
  public static String n = "TableTrendingSearches";
  public static String na = "ServiceNativeAppName";
  public static String nb = "n_author";
  public static String o = "TableServiceNotificationsDisabled";
  public static String oa = "ServiceOtherStates";
  public static String ob = "n_file_format";
  public static String p = "table_th_history";
  public static String pa = "ServiceOtherWebsites";
  public static String pb = "n_file_title";
  public static String q = "table_books_data";
  public static String qa = "ServiceType";
  public static String qb = "n_file_name";
  public static String r = "table_ndli_data";
  public static String ra = "ServiceApkLink";
  public static String rb = "n_type";
  public static String s = "table_trai_my_call";
  public static String sa = "ServiceDisplayName";
  public static String sb = "n_content_size";
  public static String t = "Id";
  public static String ta = "ServiceMultiCategoryId";
  public static String tb = "n_content_url";
  public static String u = "NotifId";
  public static String ua = "ServiceMultiCategory";
  public static String ub = "n_date_time";
  public static String v = "NotifTitle";
  public static String va = "SectionName";
  public static String vb = "trai_number";
  public static String w = "NotifImg";
  public static String wa = "SectionImage";
  public static String wb = "trai_call_incoming_outgoing";
  public static String x = "NotifMsg";
  public static String xa = "SectionServices";
  public static String xb = "trai_is_synced";
  public static String y = "NotifType";
  public static String ya = "SectionId";
  public static String yb = "trai_start_cellId";
  public static String z = "NotifDate";
  public static String za = "BannerImageUrl";
  public static String zb = "trai_end_cellId";
  public final String mc = "DatabaseManager";
  public final Context nc;
  public SQLiteDatabase oc;
  public int pc;
  
  public b(Context paramContext)
  {
    super(paramContext, "UMANG_DB", null, b);
    nc = paramContext;
  }
  
  public static b a(Context paramContext)
  {
    try
    {
      if (c == null) {
        c = new b(paramContext);
      }
      paramContext = c;
      return paramContext;
    }
    finally {}
  }
  
  public ArrayList<String> A()
    throws SQLException
  {
    try
    {
      ArrayList localArrayList = new ArrayList();
      O();
      try
      {
        Cursor localCursor = oc.query(l, new String[] { O }, null, null, null, null, null);
        if (localCursor != null)
        {
          if (localCursor.moveToLast()) {
            do
            {
              localArrayList.add(localCursor.getString(0));
            } while (localCursor.moveToPrevious());
          }
          localCursor.close();
        }
      }
      catch (Exception localException)
      {
        k.a.a.m.b.a(localException);
      }
      a();
      return localArrayList;
    }
    finally {}
    for (;;)
    {
      throw localObject;
    }
  }
  
  public void A(String paramString)
  {
    try
    {
      O();
      try
      {
        Object localObject1 = new StringBuilder();
        ((StringBuilder)localObject1).append("keywordName......");
        ((StringBuilder)localObject1).append(paramString);
        ((StringBuilder)localObject1).toString();
        localObject1 = new StringBuilder();
        ((StringBuilder)localObject1).append("select * from ");
        ((StringBuilder)localObject1).append(m);
        localObject1 = ((StringBuilder)localObject1).toString();
        localObject1 = oc.rawQuery((String)localObject1, null);
        if (localObject1 != null)
        {
          Object localObject3;
          Object localObject4;
          if (((Cursor)localObject1).moveToFirst()) {
            do
            {
              if (((Cursor)localObject1).getString(1).equalsIgnoreCase(paramString))
              {
                localObject2 = oc;
                localObject3 = m;
                localObject4 = new StringBuilder();
                ((StringBuilder)localObject4).append(Ea);
                ((StringBuilder)localObject4).append("=\"");
                ((StringBuilder)localObject4).append(paramString);
                ((StringBuilder)localObject4).append("\"");
                ((SQLiteDatabase)localObject2).delete((String)localObject3, ((StringBuilder)localObject4).toString(), null);
              }
            } while (((Cursor)localObject1).moveToNext());
          }
          Object localObject2 = new StringBuilder();
          ((StringBuilder)localObject2).append("COUNT : ");
          ((StringBuilder)localObject2).append(((Cursor)localObject1).getCount());
          ((StringBuilder)localObject2).toString();
          if (((Cursor)localObject1).getCount() < 5)
          {
            localObject2 = new ContentValues();
            ((ContentValues)localObject2).put(Ea, paramString);
            oc.insert(m, null, (ContentValues)localObject2);
          }
          else if (((Cursor)localObject1).moveToFirst())
          {
            localObject2 = ((Cursor)localObject1).getString(1);
            localObject3 = oc;
            localObject4 = m;
            StringBuilder localStringBuilder = new StringBuilder();
            localStringBuilder.append(Ea);
            localStringBuilder.append("=\"");
            localStringBuilder.append((String)localObject2);
            localStringBuilder.append("\"");
            ((SQLiteDatabase)localObject3).delete((String)localObject4, localStringBuilder.toString(), null);
            localObject2 = new ContentValues();
            ((ContentValues)localObject2).put(Ea, paramString);
            oc.insert(m, null, (ContentValues)localObject2);
          }
          ((Cursor)localObject1).close();
        }
      }
      catch (Exception paramString)
      {
        k.a.a.m.b.a(paramString);
      }
      a();
      return;
    }
    finally {}
    for (;;)
    {
      throw paramString;
    }
  }
  
  public ArrayList<N> B()
    throws SQLException
  {
    try
    {
      ArrayList localArrayList = new ArrayList();
      O();
      try
      {
        Object localObject2 = oc;
        Object localObject3 = e;
        String str1 = T;
        String str2 = S;
        String str3 = T;
        Object localObject4 = new StringBuilder();
        ((StringBuilder)localObject4).append(T);
        ((StringBuilder)localObject4).append(" COLLATE NOCASE ASC");
        localObject4 = ((StringBuilder)localObject4).toString();
        localObject2 = ((SQLiteDatabase)localObject2).query(true, (String)localObject3, new String[] { str1, str2 }, null, null, str3, null, (String)localObject4, null);
        if (localObject2 != null)
        {
          if (((Cursor)localObject2).moveToFirst()) {
            do
            {
              localObject3 = new N();
              ((N)localObject3).b(((Cursor)localObject2).getString(0));
              ((N)localObject3).a(((Cursor)localObject2).getString(1));
              localArrayList.add(localObject3);
            } while (((Cursor)localObject2).moveToNext());
          }
          ((Cursor)localObject2).close();
        }
      }
      catch (Exception localException)
      {
        k.a.a.m.b.a(localException);
      }
      a();
      return localArrayList;
    }
    finally {}
    for (;;)
    {
      throw localObject1;
    }
  }
  
  public void B(String paramString)
  {
    try
    {
      O();
      try
      {
        Object localObject1 = new StringBuilder();
        ((StringBuilder)localObject1).append("SERVICE ID : ");
        ((StringBuilder)localObject1).append(paramString);
        ((StringBuilder)localObject1).toString();
        localObject1 = new StringBuilder();
        ((StringBuilder)localObject1).append("select * from ");
        ((StringBuilder)localObject1).append(l);
        Object localObject2 = ((StringBuilder)localObject1).toString();
        localObject1 = oc.rawQuery((String)localObject2, null);
        if (localObject1 != null)
        {
          Object localObject4;
          Object localObject5;
          if (((Cursor)localObject1).moveToFirst()) {
            do
            {
              if (((Cursor)localObject1).getString(1).equalsIgnoreCase(paramString))
              {
                localObject3 = oc;
                localObject4 = l;
                localObject5 = new StringBuilder();
                ((StringBuilder)localObject5).append(O);
                ((StringBuilder)localObject5).append("=\"");
                ((StringBuilder)localObject5).append(paramString);
                ((StringBuilder)localObject5).append("\"");
                ((SQLiteDatabase)localObject3).delete((String)localObject4, ((StringBuilder)localObject5).toString(), null);
              }
            } while (((Cursor)localObject1).moveToNext());
          }
          localObject2 = oc.rawQuery((String)localObject2, null);
          Object localObject3 = new StringBuilder();
          ((StringBuilder)localObject3).append("COUNT : ");
          ((StringBuilder)localObject3).append(((Cursor)localObject2).getCount());
          ((StringBuilder)localObject3).toString();
          if (((Cursor)localObject2).getCount() < 5)
          {
            localObject3 = new ContentValues();
            ((ContentValues)localObject3).put(O, paramString);
            oc.insert(l, null, (ContentValues)localObject3);
          }
          else if (((Cursor)localObject2).moveToFirst())
          {
            localObject3 = ((Cursor)localObject2).getString(1);
            localObject4 = oc;
            localObject5 = l;
            StringBuilder localStringBuilder = new StringBuilder();
            localStringBuilder.append(O);
            localStringBuilder.append("=\"");
            localStringBuilder.append((String)localObject3);
            localStringBuilder.append("\"");
            ((SQLiteDatabase)localObject4).delete((String)localObject5, localStringBuilder.toString(), null);
            localObject3 = new ContentValues();
            ((ContentValues)localObject3).put(O, paramString);
            oc.insert(l, null, (ContentValues)localObject3);
          }
          ((Cursor)localObject2).close();
          ((Cursor)localObject1).close();
        }
      }
      catch (Exception paramString)
      {
        k.a.a.m.b.a(paramString);
      }
      a();
      return;
    }
    finally {}
    for (;;)
    {
      throw paramString;
    }
  }
  
  public ArrayList<N> C()
    throws SQLException
  {
    for (;;)
    {
      try
      {
        localArrayList = new ArrayList();
        O();
      }
      finally
      {
        ArrayList localArrayList;
        Object localObject2;
        Object localObject3;
        Object localObject4;
        Object localObject5;
        Object localObject6;
        Object localObject7;
        int i1;
        continue;
        throw localObject1;
        continue;
        i1 += 1;
        continue;
      }
      try
      {
        localObject2 = oc;
        localObject3 = e;
        localObject4 = ua;
        localObject5 = ta;
        localObject6 = ua;
        localObject7 = new StringBuilder();
        ((StringBuilder)localObject7).append(ua);
        ((StringBuilder)localObject7).append(" COLLATE NOCASE ASC");
        localObject7 = ((StringBuilder)localObject7).toString();
        localObject2 = ((SQLiteDatabase)localObject2).query(true, (String)localObject3, new String[] { localObject4, localObject5 }, null, null, (String)localObject6, null, (String)localObject7, null);
        if (localObject2 != null)
        {
          if (((Cursor)localObject2).moveToFirst())
          {
            localObject3 = new ArrayList();
            localObject4 = new StringBuilder();
            ((StringBuilder)localObject4).append("c.getString(0)............");
            ((StringBuilder)localObject4).append(((Cursor)localObject2).getString(0));
            ((StringBuilder)localObject4).toString();
            localObject4 = new StringBuilder();
            ((StringBuilder)localObject4).append("c.getString(1)............");
            ((StringBuilder)localObject4).append(((Cursor)localObject2).getString(1));
            ((StringBuilder)localObject4).toString();
            localObject4 = ((Cursor)localObject2).getString(0).split(",");
            localObject5 = ((Cursor)localObject2).getString(1).split(",");
            if (localObject5.length == localObject4.length)
            {
              i1 = 0;
              if (i1 < localObject5.length)
              {
                if (((ArrayList)localObject3).contains(localObject5[i1])) {
                  continue;
                }
                ((ArrayList)localObject3).add(localObject5[i1]);
                localObject6 = new N();
                ((N)localObject6).b(localObject4[i1]);
                ((N)localObject6).a(localObject5[i1]);
                localArrayList.add(localObject6);
                continue;
              }
            }
            if (((Cursor)localObject2).moveToNext()) {
              continue;
            }
          }
          ((Cursor)localObject2).close();
          Collections.sort(localArrayList, new a(this));
        }
      }
      catch (Exception localException)
      {
        k.a.a.m.b.a(localException);
      }
    }
    a();
    return localArrayList;
  }
  
  public void C(String paramString)
  {
    try
    {
      O();
      try
      {
        ContentValues localContentValues = new ContentValues();
        localContentValues.put(Ea, paramString);
        oc.insert(n, null, localContentValues);
      }
      catch (Exception paramString)
      {
        k.a.a.m.b.a(paramString);
      }
      a();
      return;
    }
    finally {}
  }
  
  public int D()
    throws SQLException
  {
    int i3 = 0;
    int i2 = 0;
    try
    {
      O();
      int i1 = i2;
      try
      {
        Object localObject1 = new StringBuilder();
        i1 = i2;
        ((StringBuilder)localObject1).append("select * from ");
        i1 = i2;
        ((StringBuilder)localObject1).append(e);
        i1 = i2;
        localObject1 = ((StringBuilder)localObject1).toString();
        i1 = i2;
        localObject1 = oc.rawQuery((String)localObject1, null);
        i1 = i3;
        if (localObject1 != null)
        {
          i1 = i2;
          i2 = ((Cursor)localObject1).getCount();
          i1 = i2;
          ((Cursor)localObject1).close();
          i1 = i2;
        }
      }
      catch (Exception localException)
      {
        k.a.a.m.b.a(localException);
      }
      a();
      return i1;
    }
    finally {}
  }
  
  public void D(String paramString)
  {
    try
    {
      O();
      try
      {
        ContentValues localContentValues = new ContentValues();
        localContentValues.put(K, "true");
        SQLiteDatabase localSQLiteDatabase = oc;
        String str = d;
        StringBuilder localStringBuilder = new StringBuilder();
        localStringBuilder.append(K);
        localStringBuilder.append("=\"false\" AND ");
        localStringBuilder.append(L);
        localStringBuilder.append("=\"");
        localStringBuilder.append(paramString);
        localStringBuilder.append("\"");
        localSQLiteDatabase.update(str, localContentValues, localStringBuilder.toString(), null);
      }
      catch (Exception paramString)
      {
        k.a.a.m.b.a(paramString);
      }
      a();
      return;
    }
    finally {}
  }
  
  public ArrayList<M> E()
    throws SQLException
  {
    try
    {
      ArrayList localArrayList = new ArrayList();
      O();
      try
      {
        Cursor localCursor = oc.query(h, new String[] { va, wa, xa, ya }, null, null, null, null, null);
        if (localCursor != null)
        {
          if (localCursor.moveToFirst()) {
            do
            {
              M localM = new M();
              localM.c(localCursor.getString(0));
              localM.b(localCursor.getString(1));
              localM.d(localCursor.getString(2));
              localM.a(localCursor.getString(3));
              localArrayList.add(localM);
            } while (localCursor.moveToNext());
          }
          localCursor.close();
        }
      }
      catch (Exception localException)
      {
        k.a.a.m.b.a(localException);
      }
      a();
      return localArrayList;
    }
    finally {}
    for (;;)
    {
      throw localObject;
    }
  }
  
  public void E(String paramString)
  {
    try
    {
      O();
      try
      {
        ContentValues localContentValues = new ContentValues();
        localContentValues.put(K, "true");
        SQLiteDatabase localSQLiteDatabase = oc;
        String str = d;
        StringBuilder localStringBuilder = new StringBuilder();
        localStringBuilder.append(u);
        localStringBuilder.append("=\"");
        localStringBuilder.append(paramString);
        localStringBuilder.append("\"");
        localSQLiteDatabase.update(str, localContentValues, localStringBuilder.toString(), null);
      }
      catch (Exception paramString)
      {
        k.a.a.m.b.a(paramString);
      }
      a();
      return;
    }
    finally {}
  }
  
  public ArrayList<u> F()
    throws SQLException
  {
    for (;;)
    {
      try
      {
        localArrayList = new ArrayList();
        O();
      }
      finally
      {
        ArrayList localArrayList;
        Object localObject2;
        Object localObject3;
        String str1;
        String str2;
        String str3;
        String str4;
        String str5;
        String str6;
        String str7;
        String str8;
        String str9;
        String str10;
        String str11;
        String str12;
        String str13;
        String str14;
        String str15;
        String str16;
        String str17;
        String str18;
        String str19;
        String str20;
        String str21;
        String str22;
        String str23;
        String str24;
        String str25;
        String str26;
        String str27;
        String str28;
        String str29;
        Object localObject4;
        Object localObject5;
        continue;
        throw localObject1;
        continue;
        continue;
      }
      try
      {
        localObject2 = oc;
        localObject3 = e;
        str1 = O;
        str2 = P;
        str3 = Q;
        str4 = R;
        str5 = T;
        str6 = U;
        str7 = V;
        str8 = W;
        str9 = X;
        str10 = Y;
        str11 = Z;
        str12 = aa;
        str13 = ba;
        str14 = ca;
        str15 = da;
        str16 = ea;
        str17 = fa;
        str18 = ga;
        str19 = ha;
        str20 = ia;
        str21 = ja;
        str22 = S;
        str23 = ka;
        str24 = oa;
        str25 = pa;
        str26 = qa;
        str27 = sa;
        str28 = ta;
        str29 = ua;
        localObject4 = new StringBuilder();
        ((StringBuilder)localObject4).append(qa);
        ((StringBuilder)localObject4).append("!=\"I\"");
        localObject4 = ((StringBuilder)localObject4).toString();
        localObject5 = new StringBuilder();
        ((StringBuilder)localObject5).append(P);
        ((StringBuilder)localObject5).append(" COLLATE NOCASE ASC");
        localObject5 = ((StringBuilder)localObject5).toString();
        localObject2 = ((SQLiteDatabase)localObject2).query((String)localObject3, new String[] { str1, str2, str3, str4, str5, str6, str7, str8, str9, str10, str11, str12, str13, str14, str15, str16, str17, str18, str19, str20, str21, str22, str23, str24, str25, str26, str27, str28, str29 }, (String)localObject4, null, null, null, (String)localObject5);
        if (localObject2 != null)
        {
          if (((Cursor)localObject2).moveToFirst())
          {
            localObject3 = new u();
            ((u)localObject3).j(((Cursor)localObject2).getString(0));
            ((u)localObject3).o(((Cursor)localObject2).getString(1));
            ((u)localObject3).a(((Cursor)localObject2).getString(2));
            ((u)localObject3).k(((Cursor)localObject2).getString(3));
            ((u)localObject3).f(((Cursor)localObject2).getString(4));
            ((u)localObject3).w(((Cursor)localObject2).getString(5));
            ((u)localObject3).t(((Cursor)localObject2).getString(6));
            ((u)localObject3).y(((Cursor)localObject2).getString(7));
            ((u)localObject3).v(((Cursor)localObject2).getString(8));
            ((u)localObject3).b(((Cursor)localObject2).getString(9));
            ((u)localObject3).c(((Cursor)localObject2).getString(10));
            ((u)localObject3).b(Boolean.parseBoolean(((Cursor)localObject2).getString(11)));
            ((u)localObject3).a(Boolean.parseBoolean(((Cursor)localObject2).getString(12)));
            ((u)localObject3).r(((Cursor)localObject2).getString(13));
            ((u)localObject3).c(Boolean.parseBoolean(((Cursor)localObject2).getString(14)));
            ((u)localObject3).z(((Cursor)localObject2).getString(15));
            ((u)localObject3).i(((Cursor)localObject2).getString(16));
            ((u)localObject3).d(((Cursor)localObject2).getString(17));
            ((u)localObject3).A(((Cursor)localObject2).getString(18));
            ((u)localObject3).l(((Cursor)localObject2).getString(19));
            ((u)localObject3).s(((Cursor)localObject2).getString(20));
            ((u)localObject3).g(((Cursor)localObject2).getString(21));
            ((u)localObject3).u(((Cursor)localObject2).getString(22));
            ((u)localObject3).p(((Cursor)localObject2).getString(23));
            ((u)localObject3).q(((Cursor)localObject2).getString(24));
            ((u)localObject3).x(((Cursor)localObject2).getString(25));
            ((u)localObject3).h(((Cursor)localObject2).getString(26));
            ((u)localObject3).n(((Cursor)localObject2).getString(27));
            ((u)localObject3).m(((Cursor)localObject2).getString(28));
            localArrayList.add(localObject3);
            if (((Cursor)localObject2).moveToNext()) {
              continue;
            }
          }
          ((Cursor)localObject2).close();
        }
      }
      catch (Exception localException)
      {
        k.a.a.m.b.a(localException);
      }
    }
    a();
    return localArrayList;
  }
  
  public void F(String paramString)
  {
    try
    {
      O();
      try
      {
        ContentValues localContentValues = new ContentValues();
        localContentValues.put(xb, "true");
        SQLiteDatabase localSQLiteDatabase = oc;
        String str = s;
        StringBuilder localStringBuilder = new StringBuilder();
        localStringBuilder.append(t);
        localStringBuilder.append("=\"");
        localStringBuilder.append(paramString);
        localStringBuilder.append("\"");
        localSQLiteDatabase.update(str, localContentValues, localStringBuilder.toString(), null);
      }
      catch (Exception paramString)
      {
        k.a.a.m.b.a(paramString);
      }
      a();
      return;
    }
    finally {}
  }
  
  public ArrayList<u> G()
    throws SQLException
  {
    for (;;)
    {
      try
      {
        localArrayList = new ArrayList();
        O();
      }
      finally
      {
        ArrayList localArrayList;
        Object localObject2;
        Object localObject3;
        String str1;
        String str2;
        String str3;
        String str4;
        String str5;
        String str6;
        String str7;
        String str8;
        String str9;
        String str10;
        String str11;
        String str12;
        String str13;
        String str14;
        String str15;
        String str16;
        String str17;
        String str18;
        String str19;
        String str20;
        String str21;
        String str22;
        String str23;
        String str24;
        String str25;
        String str26;
        String str27;
        String str28;
        String str29;
        Object localObject4;
        Object localObject5;
        continue;
        throw localObject1;
        continue;
        continue;
      }
      try
      {
        localObject2 = oc;
        localObject3 = e;
        str1 = O;
        str2 = P;
        str3 = Q;
        str4 = R;
        str5 = T;
        str6 = U;
        str7 = V;
        str8 = W;
        str9 = X;
        str10 = Y;
        str11 = Z;
        str12 = aa;
        str13 = ba;
        str14 = ca;
        str15 = da;
        str16 = ea;
        str17 = fa;
        str18 = ga;
        str19 = ha;
        str20 = ia;
        str21 = ja;
        str22 = S;
        str23 = ka;
        str24 = oa;
        str25 = pa;
        str26 = qa;
        str27 = sa;
        str28 = ta;
        str29 = ua;
        localObject4 = new StringBuilder();
        ((StringBuilder)localObject4).append("(");
        ((StringBuilder)localObject4).append(X);
        ((StringBuilder)localObject4).append("!=\"99\" OR ");
        ((StringBuilder)localObject4).append(oa);
        ((StringBuilder)localObject4).append("!=\"\") AND ");
        ((StringBuilder)localObject4).append(qa);
        ((StringBuilder)localObject4).append("!=\"I\"");
        localObject4 = ((StringBuilder)localObject4).toString();
        localObject5 = new StringBuilder();
        ((StringBuilder)localObject5).append(P);
        ((StringBuilder)localObject5).append(" COLLATE NOCASE ASC");
        localObject5 = ((StringBuilder)localObject5).toString();
        localObject2 = ((SQLiteDatabase)localObject2).query((String)localObject3, new String[] { str1, str2, str3, str4, str5, str6, str7, str8, str9, str10, str11, str12, str13, str14, str15, str16, str17, str18, str19, str20, str21, str22, str23, str24, str25, str26, str27, str28, str29 }, (String)localObject4, null, null, null, (String)localObject5);
        if (localObject2 != null)
        {
          if (((Cursor)localObject2).moveToFirst())
          {
            localObject3 = new u();
            ((u)localObject3).j(((Cursor)localObject2).getString(0));
            ((u)localObject3).o(((Cursor)localObject2).getString(1));
            ((u)localObject3).a(((Cursor)localObject2).getString(2));
            ((u)localObject3).k(((Cursor)localObject2).getString(3));
            ((u)localObject3).f(((Cursor)localObject2).getString(4));
            ((u)localObject3).w(((Cursor)localObject2).getString(5));
            ((u)localObject3).t(((Cursor)localObject2).getString(6));
            ((u)localObject3).y(((Cursor)localObject2).getString(7));
            ((u)localObject3).v(((Cursor)localObject2).getString(8));
            ((u)localObject3).b(((Cursor)localObject2).getString(9));
            ((u)localObject3).c(((Cursor)localObject2).getString(10));
            ((u)localObject3).b(Boolean.parseBoolean(((Cursor)localObject2).getString(11)));
            ((u)localObject3).a(Boolean.parseBoolean(((Cursor)localObject2).getString(12)));
            ((u)localObject3).r(((Cursor)localObject2).getString(13));
            ((u)localObject3).c(Boolean.parseBoolean(((Cursor)localObject2).getString(14)));
            ((u)localObject3).z(((Cursor)localObject2).getString(15));
            ((u)localObject3).i(((Cursor)localObject2).getString(16));
            ((u)localObject3).d(((Cursor)localObject2).getString(17));
            ((u)localObject3).A(((Cursor)localObject2).getString(18));
            ((u)localObject3).l(((Cursor)localObject2).getString(19));
            ((u)localObject3).s(((Cursor)localObject2).getString(20));
            ((u)localObject3).g(((Cursor)localObject2).getString(21));
            ((u)localObject3).u(((Cursor)localObject2).getString(22));
            ((u)localObject3).p(((Cursor)localObject2).getString(23));
            ((u)localObject3).q(((Cursor)localObject2).getString(24));
            ((u)localObject3).x(((Cursor)localObject2).getString(25));
            ((u)localObject3).h(((Cursor)localObject2).getString(26));
            ((u)localObject3).n(((Cursor)localObject2).getString(27));
            ((u)localObject3).m(((Cursor)localObject2).getString(28));
            localArrayList.add(localObject3);
            if (((Cursor)localObject2).moveToNext()) {
              continue;
            }
          }
          ((Cursor)localObject2).close();
        }
      }
      catch (Exception localException)
      {
        k.a.a.m.b.a(localException);
      }
    }
    a();
    return localArrayList;
  }
  
  public ArrayList<A> H()
    throws SQLException
  {
    try
    {
      ArrayList localArrayList = new ArrayList();
      O();
      try
      {
        Object localObject2 = oc;
        Object localObject3 = e;
        String str1 = O;
        String str2 = P;
        String str3 = R;
        String str4 = da;
        Object localObject4 = new StringBuilder();
        ((StringBuilder)localObject4).append(P);
        ((StringBuilder)localObject4).append(" COLLATE NOCASE ASC");
        localObject4 = ((StringBuilder)localObject4).toString();
        localObject2 = ((SQLiteDatabase)localObject2).query((String)localObject3, new String[] { str1, str2, str3, str4 }, null, null, null, null, (String)localObject4);
        if (localObject2 != null)
        {
          if (((Cursor)localObject2).moveToFirst()) {
            do
            {
              localObject3 = new A();
              ((A)localObject3).a(((Cursor)localObject2).getString(0));
              ((A)localObject3).c(((Cursor)localObject2).getString(1));
              ((A)localObject3).b(((Cursor)localObject2).getString(2));
              ((A)localObject3).a(Boolean.parseBoolean(((Cursor)localObject2).getString(3)));
              localArrayList.add(localObject3);
            } while (((Cursor)localObject2).moveToNext());
          }
          ((Cursor)localObject2).close();
        }
      }
      catch (Exception localException)
      {
        k.a.a.m.b.a(localException);
      }
      a();
      return localArrayList;
    }
    finally {}
    for (;;)
    {
      throw localObject1;
    }
  }
  
  public ArrayList<u> I()
    throws SQLException
  {
    for (;;)
    {
      try
      {
        localArrayList = new ArrayList();
        O();
      }
      finally
      {
        ArrayList localArrayList;
        Object localObject2;
        Object localObject3;
        String str1;
        String str2;
        String str3;
        String str4;
        String str5;
        String str6;
        String str7;
        String str8;
        String str9;
        String str10;
        String str11;
        String str12;
        String str13;
        String str14;
        String str15;
        String str16;
        String str17;
        String str18;
        String str19;
        String str20;
        String str21;
        String str22;
        String str23;
        String str24;
        String str25;
        String str26;
        String str27;
        String str28;
        String str29;
        Object localObject4;
        Object localObject5;
        continue;
        throw localObject1;
        continue;
        continue;
      }
      try
      {
        localObject2 = oc;
        localObject3 = e;
        str1 = O;
        str2 = P;
        str3 = Q;
        str4 = R;
        str5 = T;
        str6 = U;
        str7 = V;
        str8 = W;
        str9 = X;
        str10 = Y;
        str11 = Z;
        str12 = aa;
        str13 = ba;
        str14 = ca;
        str15 = da;
        str16 = ea;
        str17 = fa;
        str18 = ga;
        str19 = ha;
        str20 = ia;
        str21 = ja;
        str22 = S;
        str23 = ka;
        str24 = oa;
        str25 = pa;
        str26 = qa;
        str27 = sa;
        str28 = ta;
        str29 = ua;
        localObject4 = new StringBuilder();
        ((StringBuilder)localObject4).append(qa);
        ((StringBuilder)localObject4).append("!=\"I\"");
        localObject4 = ((StringBuilder)localObject4).toString();
        localObject5 = new StringBuilder();
        ((StringBuilder)localObject5).append(sa);
        ((StringBuilder)localObject5).append(" COLLATE NOCASE ASC");
        localObject5 = ((StringBuilder)localObject5).toString();
        localObject2 = ((SQLiteDatabase)localObject2).query((String)localObject3, new String[] { str1, str2, str3, str4, str5, str6, str7, str8, str9, str10, str11, str12, str13, str14, str15, str16, str17, str18, str19, str20, str21, str22, str23, str24, str25, str26, str27, str28, str29 }, (String)localObject4, null, null, null, (String)localObject5);
        if (localObject2 != null)
        {
          if (((Cursor)localObject2).moveToFirst())
          {
            localObject3 = new u();
            ((u)localObject3).j(((Cursor)localObject2).getString(0));
            ((u)localObject3).o(((Cursor)localObject2).getString(1));
            ((u)localObject3).a(((Cursor)localObject2).getString(2));
            ((u)localObject3).k(((Cursor)localObject2).getString(3));
            ((u)localObject3).f(((Cursor)localObject2).getString(4));
            ((u)localObject3).w(((Cursor)localObject2).getString(5));
            ((u)localObject3).t(((Cursor)localObject2).getString(6));
            ((u)localObject3).y(((Cursor)localObject2).getString(7));
            ((u)localObject3).v(((Cursor)localObject2).getString(8));
            ((u)localObject3).b(((Cursor)localObject2).getString(9));
            ((u)localObject3).c(((Cursor)localObject2).getString(10));
            ((u)localObject3).b(Boolean.parseBoolean(((Cursor)localObject2).getString(11)));
            ((u)localObject3).a(Boolean.parseBoolean(((Cursor)localObject2).getString(12)));
            ((u)localObject3).r(((Cursor)localObject2).getString(13));
            ((u)localObject3).c(Boolean.parseBoolean(((Cursor)localObject2).getString(14)));
            ((u)localObject3).z(((Cursor)localObject2).getString(15));
            ((u)localObject3).i(((Cursor)localObject2).getString(16));
            ((u)localObject3).d(((Cursor)localObject2).getString(17));
            ((u)localObject3).A(((Cursor)localObject2).getString(18));
            ((u)localObject3).l(((Cursor)localObject2).getString(19));
            ((u)localObject3).s(((Cursor)localObject2).getString(20));
            ((u)localObject3).g(((Cursor)localObject2).getString(21));
            ((u)localObject3).u(((Cursor)localObject2).getString(22));
            ((u)localObject3).p(((Cursor)localObject2).getString(23));
            ((u)localObject3).q(((Cursor)localObject2).getString(24));
            ((u)localObject3).x(((Cursor)localObject2).getString(25));
            ((u)localObject3).h(((Cursor)localObject2).getString(26));
            ((u)localObject3).n(((Cursor)localObject2).getString(27));
            ((u)localObject3).m(((Cursor)localObject2).getString(28));
            localArrayList.add(localObject3);
            if (((Cursor)localObject2).moveToNext()) {
              continue;
            }
          }
          ((Cursor)localObject2).close();
        }
      }
      catch (Exception localException)
      {
        k.a.a.m.b.a(localException);
      }
    }
    a();
    return localArrayList;
  }
  
  public ArrayList<String> J()
    throws SQLException
  {
    try
    {
      ArrayList localArrayList = new ArrayList();
      O();
      try
      {
        Cursor localCursor = oc.query(e, new String[] { O }, null, null, null, null, null);
        if (localCursor != null)
        {
          if (localCursor.moveToFirst()) {
            do
            {
              localArrayList.add(localCursor.getString(0));
            } while (localCursor.moveToNext());
          }
          localCursor.close();
        }
      }
      catch (Exception localException)
      {
        k.a.a.m.b.a(localException);
      }
      a();
      return localArrayList;
    }
    finally {}
    for (;;)
    {
      throw localObject;
    }
  }
  
  public ArrayList<S> K()
    throws SQLException
  {
    for (;;)
    {
      try
      {
        localArrayList = new ArrayList();
        O();
      }
      finally
      {
        ArrayList localArrayList;
        Object localObject2;
        Object localObject3;
        String str1;
        String str2;
        String str3;
        String str4;
        String str5;
        String str6;
        String str7;
        String str8;
        String str9;
        String str10;
        String str11;
        String str12;
        String str13;
        String str14;
        String str15;
        String str16;
        String str17;
        String str18;
        String str19;
        String str20;
        String str21;
        String str22;
        String str23;
        String str24;
        String str25;
        String str26;
        String str27;
        String str28;
        String str29;
        String str30;
        String str31;
        String str32;
        String str33;
        String str34;
        String str35;
        String str36;
        String str37;
        String str38;
        String str39;
        String str40;
        String str41;
        String str42;
        String str43;
        String str44;
        String str45;
        Object localObject4;
        continue;
        throw localObject1;
        continue;
        continue;
      }
      try
      {
        localObject2 = oc;
        localObject3 = s;
        str1 = t;
        str2 = vb;
        str3 = wb;
        str4 = xb;
        str5 = yb;
        str6 = zb;
        str7 = Ab;
        str8 = Bb;
        str9 = Cb;
        str10 = Db;
        str11 = Eb;
        str12 = Fb;
        str13 = Gb;
        str14 = Hb;
        str15 = Ib;
        str16 = Jb;
        str17 = Kb;
        str18 = Lb;
        str19 = Mb;
        str20 = Nb;
        str21 = Ob;
        str22 = Pb;
        str23 = Qb;
        str24 = Rb;
        str25 = Sb;
        str26 = Tb;
        str27 = Ub;
        str28 = Vb;
        str29 = Wb;
        str30 = Xb;
        str31 = Yb;
        str32 = Zb;
        str33 = _b;
        str34 = ac;
        str35 = bc;
        str36 = cc;
        str37 = dc;
        str38 = ec;
        str39 = fc;
        str40 = gc;
        str41 = hc;
        str42 = ic;
        str43 = jc;
        str44 = kc;
        str45 = lc;
        localObject4 = new StringBuilder();
        ((StringBuilder)localObject4).append(t);
        ((StringBuilder)localObject4).append(" DESC");
        localObject4 = ((StringBuilder)localObject4).toString();
        localObject2 = ((SQLiteDatabase)localObject2).query((String)localObject3, new String[] { str1, str2, str3, str4, str5, str6, str7, str8, str9, str10, str11, str12, str13, str14, str15, str16, str17, str18, str19, str20, str21, str22, str23, str24, str25, str26, str27, str28, str29, str30, str31, str32, str33, str34, str35, str36, str37, str38, str39, str40, str41, str42, str43, str44, str45 }, null, null, null, null, (String)localObject4);
        if (localObject2 != null)
        {
          if (((Cursor)localObject2).moveToFirst())
          {
            localObject3 = new S();
            ((S)localObject3).f(((Cursor)localObject2).getString(0));
            ((S)localObject3).B(((Cursor)localObject2).getString(1));
            ((S)localObject3).g(((Cursor)localObject2).getString(2));
            ((S)localObject3).y(((Cursor)localObject2).getString(3));
            ((S)localObject3).F(((Cursor)localObject2).getString(4));
            ((S)localObject3).i(((Cursor)localObject2).getString(5));
            ((S)localObject3).L(((Cursor)localObject2).getString(6));
            ((S)localObject3).M(((Cursor)localObject2).getString(7));
            ((S)localObject3).p(((Cursor)localObject2).getString(8));
            ((S)localObject3).q(((Cursor)localObject2).getString(9));
            ((S)localObject3).H(((Cursor)localObject2).getString(10));
            ((S)localObject3).k(((Cursor)localObject2).getString(11));
            ((S)localObject3).O(((Cursor)localObject2).getString(12));
            ((S)localObject3).N(((Cursor)localObject2).getString(13));
            ((S)localObject3).s(((Cursor)localObject2).getString(14));
            ((S)localObject3).r(((Cursor)localObject2).getString(15));
            ((S)localObject3).P(((Cursor)localObject2).getString(16));
            ((S)localObject3).t(((Cursor)localObject2).getString(17));
            ((S)localObject3).c(((Cursor)localObject2).getString(18));
            ((S)localObject3).C(((Cursor)localObject2).getString(19));
            ((S)localObject3).e(((Cursor)localObject2).getString(20));
            ((S)localObject3).A(((Cursor)localObject2).getString(21));
            ((S)localObject3).G(((Cursor)localObject2).getString(22));
            ((S)localObject3).j(((Cursor)localObject2).getString(23));
            ((S)localObject3).Q(((Cursor)localObject2).getString(24));
            ((S)localObject3).u(((Cursor)localObject2).getString(25));
            ((S)localObject3).R(((Cursor)localObject2).getString(26));
            ((S)localObject3).I(((Cursor)localObject2).getString(27));
            ((S)localObject3).n(((Cursor)localObject2).getString(28));
            ((S)localObject3).l(((Cursor)localObject2).getString(29));
            ((S)localObject3).K(((Cursor)localObject2).getString(30));
            ((S)localObject3).n(((Cursor)localObject2).getString(31));
            ((S)localObject3).J(((Cursor)localObject2).getString(32));
            ((S)localObject3).m(((Cursor)localObject2).getString(33));
            ((S)localObject3).E(((Cursor)localObject2).getString(34));
            ((S)localObject3).b(((Cursor)localObject2).getString(35));
            ((S)localObject3).x(((Cursor)localObject2).getString(36));
            ((S)localObject3).w(((Cursor)localObject2).getString(37));
            ((S)localObject3).d(((Cursor)localObject2).getString(38));
            ((S)localObject3).D(((Cursor)localObject2).getString(39));
            ((S)localObject3).S(((Cursor)localObject2).getString(40));
            ((S)localObject3).a(((Cursor)localObject2).getString(41));
            ((S)localObject3).h(((Cursor)localObject2).getString(42));
            ((S)localObject3).v(((Cursor)localObject2).getString(43));
            ((S)localObject3).z(((Cursor)localObject2).getString(44));
            localArrayList.add(localObject3);
            if (((Cursor)localObject2).moveToNext()) {
              continue;
            }
          }
          ((Cursor)localObject2).close();
        }
      }
      catch (Exception localException)
      {
        k.a.a.m.b.a(localException);
      }
    }
    a();
    return localArrayList;
  }
  
  public ArrayList<S> L()
    throws SQLException
  {
    for (;;)
    {
      try
      {
        localArrayList = new ArrayList();
        O();
      }
      finally
      {
        ArrayList localArrayList;
        Object localObject2;
        Object localObject3;
        String str1;
        String str2;
        String str3;
        String str4;
        String str5;
        String str6;
        String str7;
        String str8;
        String str9;
        String str10;
        String str11;
        String str12;
        String str13;
        String str14;
        String str15;
        String str16;
        String str17;
        String str18;
        String str19;
        String str20;
        String str21;
        String str22;
        String str23;
        String str24;
        String str25;
        String str26;
        String str27;
        String str28;
        String str29;
        String str30;
        String str31;
        String str32;
        String str33;
        String str34;
        String str35;
        String str36;
        String str37;
        String str38;
        String str39;
        String str40;
        String str41;
        String str42;
        String str43;
        String str44;
        String str45;
        Object localObject4;
        continue;
        throw localObject1;
        continue;
        continue;
      }
      try
      {
        localObject2 = oc;
        localObject3 = s;
        str1 = t;
        str2 = vb;
        str3 = wb;
        str4 = xb;
        str5 = yb;
        str6 = zb;
        str7 = Ab;
        str8 = Bb;
        str9 = Cb;
        str10 = Db;
        str11 = Eb;
        str12 = Fb;
        str13 = Gb;
        str14 = Hb;
        str15 = Ib;
        str16 = Jb;
        str17 = Kb;
        str18 = Lb;
        str19 = Mb;
        str20 = Nb;
        str21 = Ob;
        str22 = Pb;
        str23 = Qb;
        str24 = Rb;
        str25 = Sb;
        str26 = Tb;
        str27 = Ub;
        str28 = Vb;
        str29 = Wb;
        str30 = Xb;
        str31 = Yb;
        str32 = Zb;
        str33 = _b;
        str34 = ac;
        str35 = bc;
        str36 = cc;
        str37 = dc;
        str38 = ec;
        str39 = fc;
        str40 = gc;
        str41 = hc;
        str42 = ic;
        str43 = jc;
        str44 = kc;
        str45 = lc;
        localObject4 = new StringBuilder();
        ((StringBuilder)localObject4).append(xb);
        ((StringBuilder)localObject4).append("=\"false\" AND ");
        ((StringBuilder)localObject4).append(gc);
        ((StringBuilder)localObject4).append("!=\"\"");
        localObject4 = ((StringBuilder)localObject4).toString();
        localObject2 = ((SQLiteDatabase)localObject2).query((String)localObject3, new String[] { str1, str2, str3, str4, str5, str6, str7, str8, str9, str10, str11, str12, str13, str14, str15, str16, str17, str18, str19, str20, str21, str22, str23, str24, str25, str26, str27, str28, str29, str30, str31, str32, str33, str34, str35, str36, str37, str38, str39, str40, str41, str42, str43, str44, str45 }, (String)localObject4, null, null, null, null);
        if (localObject2 != null)
        {
          if (((Cursor)localObject2).moveToFirst())
          {
            localObject3 = new S();
            ((S)localObject3).f(((Cursor)localObject2).getString(0));
            ((S)localObject3).B(((Cursor)localObject2).getString(1));
            ((S)localObject3).g(((Cursor)localObject2).getString(2));
            ((S)localObject3).y(((Cursor)localObject2).getString(3));
            ((S)localObject3).F(((Cursor)localObject2).getString(4));
            ((S)localObject3).i(((Cursor)localObject2).getString(5));
            ((S)localObject3).L(((Cursor)localObject2).getString(6));
            ((S)localObject3).M(((Cursor)localObject2).getString(7));
            ((S)localObject3).p(((Cursor)localObject2).getString(8));
            ((S)localObject3).q(((Cursor)localObject2).getString(9));
            ((S)localObject3).H(((Cursor)localObject2).getString(10));
            ((S)localObject3).k(((Cursor)localObject2).getString(11));
            ((S)localObject3).O(((Cursor)localObject2).getString(12));
            ((S)localObject3).N(((Cursor)localObject2).getString(13));
            ((S)localObject3).s(((Cursor)localObject2).getString(14));
            ((S)localObject3).r(((Cursor)localObject2).getString(15));
            ((S)localObject3).P(((Cursor)localObject2).getString(16));
            ((S)localObject3).t(((Cursor)localObject2).getString(17));
            ((S)localObject3).c(((Cursor)localObject2).getString(18));
            ((S)localObject3).C(((Cursor)localObject2).getString(19));
            ((S)localObject3).e(((Cursor)localObject2).getString(20));
            ((S)localObject3).A(((Cursor)localObject2).getString(21));
            ((S)localObject3).G(((Cursor)localObject2).getString(22));
            ((S)localObject3).j(((Cursor)localObject2).getString(23));
            ((S)localObject3).Q(((Cursor)localObject2).getString(24));
            ((S)localObject3).u(((Cursor)localObject2).getString(25));
            ((S)localObject3).R(((Cursor)localObject2).getString(26));
            ((S)localObject3).I(((Cursor)localObject2).getString(27));
            ((S)localObject3).n(((Cursor)localObject2).getString(28));
            ((S)localObject3).l(((Cursor)localObject2).getString(29));
            ((S)localObject3).K(((Cursor)localObject2).getString(30));
            ((S)localObject3).n(((Cursor)localObject2).getString(31));
            ((S)localObject3).J(((Cursor)localObject2).getString(32));
            ((S)localObject3).m(((Cursor)localObject2).getString(33));
            ((S)localObject3).E(((Cursor)localObject2).getString(34));
            ((S)localObject3).b(((Cursor)localObject2).getString(35));
            ((S)localObject3).x(((Cursor)localObject2).getString(36));
            ((S)localObject3).w(((Cursor)localObject2).getString(37));
            ((S)localObject3).d(((Cursor)localObject2).getString(38));
            ((S)localObject3).D(((Cursor)localObject2).getString(39));
            ((S)localObject3).S(((Cursor)localObject2).getString(40));
            ((S)localObject3).a(((Cursor)localObject2).getString(41));
            ((S)localObject3).h(((Cursor)localObject2).getString(42));
            ((S)localObject3).v(((Cursor)localObject2).getString(43));
            ((S)localObject3).z(((Cursor)localObject2).getString(44));
            localArrayList.add(localObject3);
            if (((Cursor)localObject2).moveToNext()) {
              continue;
            }
          }
          ((Cursor)localObject2).close();
        }
      }
      catch (Exception localException)
      {
        k.a.a.m.b.a(localException);
      }
    }
    a();
    return localArrayList;
  }
  
  public ArrayList<U> M()
    throws SQLException
  {
    for (;;)
    {
      try
      {
        localArrayList = new ArrayList();
        O();
      }
      finally
      {
        ArrayList localArrayList;
        Cursor localCursor;
        continue;
        throw localObject;
        continue;
        continue;
      }
      try
      {
        localCursor = oc.query(p, new String[] { Fa, Ga, Ha, Ia, Ja, Ka, La, Ma, Na, Oa, Pa, Qa, Ra }, null, null, null, null, null);
        if (localCursor != null)
        {
          if (localCursor.moveToFirst())
          {
            U localU = new U();
            localU.f(localCursor.getString(0));
            localU.a(localCursor.getString(1));
            localU.b(localCursor.getString(2));
            localU.e(localCursor.getString(3));
            localU.m(localCursor.getString(4));
            localU.k(localCursor.getString(5));
            localU.d(localCursor.getString(6));
            localU.l(localCursor.getString(7));
            localU.i(localCursor.getString(8));
            localU.j(localCursor.getString(9));
            localU.c(localCursor.getString(10));
            localU.n(localCursor.getString(11));
            localU.g(localCursor.getString(12));
            localArrayList.add(localU);
            if (localCursor.moveToNext()) {
              continue;
            }
          }
          localCursor.close();
        }
      }
      catch (Exception localException)
      {
        k.a.a.m.b.a(localException);
      }
    }
    a();
    return localArrayList;
  }
  
  public ArrayList<String> N()
    throws SQLException
  {
    try
    {
      ArrayList localArrayList = new ArrayList();
      O();
      try
      {
        Cursor localCursor = oc.query(n, new String[] { Ea }, null, null, null, null, null);
        if (localCursor != null)
        {
          if (localCursor.moveToLast()) {
            do
            {
              localArrayList.add(localCursor.getString(0));
            } while (localCursor.moveToPrevious());
          }
          localCursor.close();
        }
      }
      catch (Exception localException)
      {
        k.a.a.m.b.a(localException);
      }
      a();
      return localArrayList;
    }
    finally {}
    for (;;)
    {
      throw localObject;
    }
  }
  
  public SQLiteDatabase O()
  {
    try
    {
      pc += 1;
      int i1 = pc;
      if (i1 == 1) {
        try
        {
          oc = c.getWritableDatabase();
        }
        catch (Exception localException)
        {
          k.a.a.m.b.a(localException);
        }
      }
      SQLiteDatabase localSQLiteDatabase = oc;
      return localSQLiteDatabase;
    }
    finally {}
  }
  
  public void P()
  {
    try
    {
      O();
      try
      {
        ContentValues localContentValues = new ContentValues();
        localContentValues.put(aa, "false");
        SQLiteDatabase localSQLiteDatabase = oc;
        String str = e;
        StringBuilder localStringBuilder = new StringBuilder();
        localStringBuilder.append(aa);
        localStringBuilder.append("=\"true\"");
        localSQLiteDatabase.update(str, localContentValues, localStringBuilder.toString(), null);
      }
      catch (Exception localException)
      {
        k.a.a.m.b.a(localException);
      }
      a();
      return;
    }
    finally {}
  }
  
  public String a(String paramString1, String paramString2)
    throws SQLException
  {
    String str2 = "false";
    try
    {
      O();
      String str1 = str2;
      try
      {
        SQLiteDatabase localSQLiteDatabase = oc;
        str1 = str2;
        String str3 = r;
        str1 = str2;
        String str4 = qb;
        str1 = str2;
        StringBuilder localStringBuilder = new StringBuilder();
        str1 = str2;
        localStringBuilder.append(jb);
        str1 = str2;
        localStringBuilder.append("=\"");
        str1 = str2;
        localStringBuilder.append(paramString1);
        str1 = str2;
        localStringBuilder.append("\" AND ");
        str1 = str2;
        localStringBuilder.append(kb);
        str1 = str2;
        localStringBuilder.append("=\"");
        str1 = str2;
        localStringBuilder.append(paramString2);
        str1 = str2;
        localStringBuilder.append("\"");
        str1 = str2;
        paramString1 = localStringBuilder.toString();
        str1 = str2;
        paramString2 = localSQLiteDatabase.query(str3, new String[] { str4 }, paramString1, null, null, null, null);
        paramString1 = str2;
        if (paramString2 != null)
        {
          paramString1 = str2;
          str1 = str2;
          if (paramString2.moveToFirst()) {
            do
            {
              str1 = str2;
              paramString1 = paramString2.getString(0);
              str2 = paramString1;
              str1 = paramString1;
            } while (paramString2.moveToNext());
          }
          str1 = paramString1;
          paramString2.close();
        }
      }
      catch (Exception paramString1)
      {
        k.a.a.m.b.a(paramString1);
        paramString1 = str1;
      }
      a();
      return paramString1;
    }
    finally {}
    for (;;)
    {
      throw paramString1;
    }
  }
  
  public ArrayList<C> a(String paramString1, ArrayList<String> paramArrayList1, ArrayList<String> paramArrayList2, String paramString2, String paramString3, String paramString4)
    throws SQLException
  {
    try
    {
      Object localObject = new StringBuilder();
      ((StringBuilder)localObject).append("select * from ");
      ((StringBuilder)localObject).append(d);
      ((StringBuilder)localObject).append(" where ");
      String str = ((StringBuilder)localObject).toString();
      if (paramString1.equalsIgnoreCase("promo"))
      {
        paramString1 = new StringBuilder();
        paramString1.append(str);
        paramString1.append(y);
        paramString1.append(" = 'promo'");
        localObject = paramString1.toString();
      }
      else if (paramString1.equalsIgnoreCase("trans"))
      {
        paramString1 = new StringBuilder();
        paramString1.append(str);
        paramString1.append(y);
        paramString1.append(" = 'trans'");
        localObject = paramString1.toString();
      }
      else
      {
        localObject = str;
        if (paramString1.equalsIgnoreCase("fav"))
        {
          paramString1 = new StringBuilder();
          paramString1.append(str);
          paramString1.append(C);
          paramString1.append(" = 'true'");
          localObject = paramString1.toString();
        }
      }
      if (!((String)localObject).contains(y))
      {
        paramString1 = (String)localObject;
        if (!((String)localObject).contains(C)) {}
      }
      else
      {
        paramString1 = (String)localObject;
        if (paramArrayList1.size() > 0)
        {
          paramString1 = new StringBuilder();
          paramString1.append((String)localObject);
          paramString1.append(" AND ");
          paramString1 = paramString1.toString();
        }
      }
      localObject = paramString1;
      if (paramArrayList1.size() > 0)
      {
        paramArrayList1 = paramArrayList1.toString().replace("[", "(").replace("]", ")");
        localObject = new StringBuilder();
        ((StringBuilder)localObject).append(paramString1);
        ((StringBuilder)localObject).append(O);
        ((StringBuilder)localObject).append(" IN ");
        ((StringBuilder)localObject).append(paramArrayList1);
        localObject = ((StringBuilder)localObject).toString();
      }
      if ((!((String)localObject).contains(y)) && (!((String)localObject).contains(C)))
      {
        paramArrayList1 = (ArrayList<String>)localObject;
        if (!((String)localObject).contains(O)) {}
      }
      else
      {
        paramArrayList1 = (ArrayList<String>)localObject;
        if (paramArrayList2.size() > 0)
        {
          paramString1 = new StringBuilder();
          paramString1.append((String)localObject);
          paramString1.append(" AND ");
          paramArrayList1 = paramString1.toString();
        }
      }
      paramString1 = paramArrayList1;
      if (paramArrayList2.size() > 0) {
        if (!paramArrayList2.contains("-1"))
        {
          paramString1 = paramArrayList2.toString().replace("[", "(").replace("]", ")");
          paramArrayList2 = new StringBuilder();
          paramArrayList2.append(paramArrayList1);
          paramArrayList2.append(B);
          paramArrayList2.append(" IN ");
          paramArrayList2.append(paramString1);
          paramString1 = paramArrayList2.toString();
        }
        else
        {
          paramString1 = paramArrayList2.toString().replace("[", "(").replace("]", ")");
          paramArrayList2 = new StringBuilder();
          paramArrayList2.append(paramArrayList1);
          paramArrayList2.append(B);
          paramArrayList2.append(" NOT IN ");
          paramArrayList2.append(paramString1);
          paramString1 = paramArrayList2.toString();
        }
      }
      if ((!paramString1.contains(y)) && (!paramString1.contains(C)) && (!paramString1.contains(O)))
      {
        paramArrayList1 = paramString1;
        if (!paramString1.contains(B)) {}
      }
      else
      {
        paramArrayList1 = new StringBuilder();
        paramArrayList1.append(paramString1);
        paramArrayList1.append(" AND ");
        paramArrayList1 = paramArrayList1.toString();
      }
      paramString1 = new StringBuilder();
      paramString1.append(paramArrayList1);
      paramString1.append(H);
      paramString1.append(" >= Datetime('");
      paramString1.append(paramString2);
      paramString1.append("') AND ");
      paramString1.append(H);
      paramString1.append(" <= Datetime('");
      paramString1.append(paramString3);
      paramString1.append("')");
      paramString1 = paramString1.toString();
      paramArrayList1 = new StringBuilder();
      paramArrayList1.append(paramString1);
      paramArrayList1.append(" AND ");
      paramArrayList1.append(L);
      paramArrayList1.append(" = '");
      paramArrayList1.append(paramString4);
      paramArrayList1.append("';");
      paramString1 = paramArrayList1.toString();
      paramArrayList1 = new StringBuilder();
      paramArrayList1.append("query........");
      paramArrayList1.append(paramString1);
      paramArrayList1.toString();
      paramArrayList1 = new ArrayList();
      O();
      try
      {
        paramArrayList2 = oc.rawQuery(paramString1, null);
        if (paramArrayList2 != null)
        {
          if (paramArrayList2.moveToFirst()) {
            do
            {
              paramString2 = new C();
              if (paramArrayList2.getString(1) == null) {
                paramString1 = "";
              } else {
                paramString1 = paramArrayList2.getString(1);
              }
              paramString2.h(paramString1);
              if (paramArrayList2.getString(2) == null) {
                paramString1 = "";
              } else {
                paramString1 = paramArrayList2.getString(2);
              }
              paramString2.p(paramString1);
              if (paramArrayList2.getString(3) == null) {
                paramString1 = "";
              } else {
                paramString1 = paramArrayList2.getString(3);
              }
              paramString2.e(paramString1);
              if (paramArrayList2.getString(4) == null) {
                paramString1 = "";
              } else {
                paramString1 = paramArrayList2.getString(4);
              }
              paramString2.g(paramString1);
              if (paramArrayList2.getString(5) == null) {
                paramString1 = "";
              } else {
                paramString1 = paramArrayList2.getString(5);
              }
              paramString2.q(paramString1);
              if (paramArrayList2.getString(6) == null) {
                paramString1 = "";
              } else {
                paramString1 = paramArrayList2.getString(6);
              }
              paramString2.b(paramString1);
              if (paramArrayList2.getString(7) == null) {
                paramString1 = "";
              } else {
                paramString1 = paramArrayList2.getString(7);
              }
              paramString2.o(paramString1);
              if (paramArrayList2.getString(8) == null) {
                paramString1 = "";
              } else {
                paramString1 = paramArrayList2.getString(8);
              }
              paramString2.m(paramString1);
              paramString2.a(Boolean.parseBoolean(paramArrayList2.getString(9)));
              if (paramArrayList2.getString(10) == null) {
                paramString1 = "";
              } else {
                paramString1 = paramArrayList2.getString(10);
              }
              paramString2.k(paramString1);
              if (paramArrayList2.getString(11) == null) {
                paramString1 = "";
              } else {
                paramString1 = paramArrayList2.getString(11);
              }
              paramString2.a(paramString1);
              if (paramArrayList2.getString(12) == null) {
                paramString1 = "";
              } else {
                paramString1 = paramArrayList2.getString(12);
              }
              paramString2.n(paramString1);
              if (paramArrayList2.getString(13) == null) {
                paramString1 = "";
              } else {
                paramString1 = paramArrayList2.getString(13);
              }
              paramString2.r(paramString1);
              if (paramArrayList2.getString(14) == null) {
                paramString1 = "";
              } else {
                paramString1 = paramArrayList2.getString(14);
              }
              paramString2.j(paramString1);
              if (paramArrayList2.getString(15) == null) {
                paramString1 = "";
              } else {
                paramString1 = paramArrayList2.getString(15);
              }
              paramString2.i(paramString1);
              if (paramArrayList2.getString(16) == null) {
                paramString1 = "";
              } else {
                paramString1 = paramArrayList2.getString(16);
              }
              paramString2.d(paramString1);
              if (paramArrayList2.getString(17) == null) {
                paramString1 = "";
              } else {
                paramString1 = paramArrayList2.getString(17);
              }
              paramString2.t(paramString1);
              if (paramArrayList2.getString(18) == null) {
                paramString1 = "";
              } else {
                paramString1 = paramArrayList2.getString(18);
              }
              paramString2.f(paramString1);
              if (paramArrayList2.getString(19) == null) {
                paramString1 = "";
              } else {
                paramString1 = paramArrayList2.getString(19);
              }
              paramString2.s(paramString1);
              if (paramArrayList2.getString(20) == null) {
                paramString1 = "";
              } else {
                paramString1 = paramArrayList2.getString(20);
              }
              paramString2.c(paramString1);
              if (paramArrayList2.getString(21) == null) {
                paramString1 = "";
              } else {
                paramString1 = paramArrayList2.getString(21);
              }
              paramString2.l(paramString1);
              paramString2.b(false);
              paramArrayList1.add(paramString2);
            } while (paramArrayList2.moveToNext());
          }
          paramArrayList2.close();
        }
      }
      catch (Exception paramString1)
      {
        k.a.a.m.b.a(paramString1);
      }
      a();
      return paramArrayList1;
    }
    finally {}
    for (;;)
    {
      throw paramString1;
    }
  }
  
  public ArrayList<O> a(ArrayList<String> paramArrayList)
    throws SQLException
  {
    for (;;)
    {
      try
      {
        localArrayList = new ArrayList();
        O();
      }
      finally
      {
        ArrayList localArrayList;
        Object localObject1;
        Object localObject2;
        String str1;
        String str2;
        String str3;
        String str4;
        String str5;
        String str6;
        String str7;
        String str8;
        String str9;
        String str10;
        String str11;
        String str12;
        String str13;
        String str14;
        String str15;
        String str16;
        String str17;
        String str18;
        String str19;
        String str20;
        String str21;
        String str22;
        String str23;
        String str24;
        Object localObject3;
        continue;
        throw paramArrayList;
        continue;
        continue;
        continue;
      }
      try
      {
        localObject1 = oc;
        localObject2 = g;
        str1 = O;
        str2 = P;
        str3 = Q;
        str4 = R;
        str5 = Y;
        str6 = Z;
        str7 = ca;
        str8 = ea;
        str9 = fa;
        str10 = ga;
        str11 = ha;
        str12 = la;
        str13 = ma;
        str14 = na;
        str15 = pa;
        str16 = ra;
        str17 = S;
        str18 = T;
        str19 = X;
        str20 = oa;
        str21 = sa;
        str22 = qa;
        str23 = ta;
        str24 = ua;
        localObject3 = new StringBuilder();
        ((StringBuilder)localObject3).append(sa);
        ((StringBuilder)localObject3).append(" COLLATE NOCASE ASC");
        localObject3 = ((StringBuilder)localObject3).toString();
        localObject1 = ((SQLiteDatabase)localObject1).query((String)localObject2, new String[] { str1, str2, str3, str4, str5, str6, str7, str8, str9, str10, str11, str12, str13, str14, str15, str16, str17, str18, str19, str20, str21, str22, str23, str24 }, null, null, null, null, (String)localObject3);
        if (localObject1 != null)
        {
          if (((Cursor)localObject1).moveToFirst())
          {
            if (!paramArrayList.contains(((Cursor)localObject1).getString(0))) {
              continue;
            }
            localObject2 = new O();
            ((O)localObject2).j(((Cursor)localObject1).getString(0));
            ((O)localObject2).n(((Cursor)localObject1).getString(1));
            ((O)localObject2).a(((Cursor)localObject1).getString(2));
            ((O)localObject2).k(((Cursor)localObject1).getString(3));
            ((O)localObject2).b(((Cursor)localObject1).getString(4));
            ((O)localObject2).c(((Cursor)localObject1).getString(5));
            ((O)localObject2).t(((Cursor)localObject1).getString(6));
            ((O)localObject2).w(((Cursor)localObject1).getString(7));
            ((O)localObject2).i(((Cursor)localObject1).getString(8));
            ((O)localObject2).d(((Cursor)localObject1).getString(9));
            ((O)localObject2).x(((Cursor)localObject1).getString(10));
            ((O)localObject2).q(((Cursor)localObject1).getString(11));
            ((O)localObject2).o(((Cursor)localObject1).getString(12));
            ((O)localObject2).p(((Cursor)localObject1).getString(13));
            ((O)localObject2).s(((Cursor)localObject1).getString(14));
            ((O)localObject2).e(((Cursor)localObject1).getString(15));
            ((O)localObject2).g(((Cursor)localObject1).getString(16));
            ((O)localObject2).f(((Cursor)localObject1).getString(17));
            ((O)localObject2).u(((Cursor)localObject1).getString(18));
            ((O)localObject2).r(((Cursor)localObject1).getString(19));
            ((O)localObject2).h(((Cursor)localObject1).getString(20));
            ((O)localObject2).v(((Cursor)localObject1).getString(21));
            ((O)localObject2).m(((Cursor)localObject1).getString(22));
            ((O)localObject2).l(((Cursor)localObject1).getString(23));
            localArrayList.add(localObject2);
            if (((Cursor)localObject1).moveToNext()) {
              continue;
            }
          }
          ((Cursor)localObject1).close();
        }
      }
      catch (Exception paramArrayList)
      {
        k.a.a.m.b.a(paramArrayList);
      }
    }
    a();
    return localArrayList;
  }
  
  public ArrayList<O> a(ArrayList<String> paramArrayList, String paramString)
    throws SQLException
  {
    for (;;)
    {
      try
      {
        localArrayList = new ArrayList();
        O();
      }
      finally
      {
        ArrayList localArrayList;
        Object localObject1;
        String str1;
        String str2;
        String str3;
        String str4;
        String str5;
        String str6;
        String str7;
        String str8;
        String str9;
        String str10;
        String str11;
        String str12;
        String str13;
        String str14;
        String str15;
        String str16;
        String str17;
        String str18;
        String str19;
        String str20;
        String str21;
        String str22;
        String str23;
        String str24;
        String str25;
        Object localObject2;
        continue;
        throw paramArrayList;
        continue;
        continue;
        continue;
      }
      try
      {
        localObject1 = oc;
        str1 = g;
        str2 = O;
        str3 = P;
        str4 = Q;
        str5 = R;
        str6 = Y;
        str7 = Z;
        str8 = ca;
        str9 = ea;
        str10 = fa;
        str11 = ga;
        str12 = ha;
        str13 = la;
        str14 = ma;
        str15 = na;
        str16 = pa;
        str17 = ra;
        str18 = S;
        str19 = T;
        str20 = X;
        str21 = oa;
        str22 = sa;
        str23 = qa;
        str24 = ta;
        str25 = ua;
        localObject2 = new StringBuilder();
        ((StringBuilder)localObject2).append(X);
        ((StringBuilder)localObject2).append("=\"");
        ((StringBuilder)localObject2).append(paramString);
        ((StringBuilder)localObject2).append("\" OR ");
        ((StringBuilder)localObject2).append(oa);
        ((StringBuilder)localObject2).append(" LIKE '%|");
        ((StringBuilder)localObject2).append(paramString);
        ((StringBuilder)localObject2).append("|%'");
        paramString = ((StringBuilder)localObject2).toString();
        localObject2 = new StringBuilder();
        ((StringBuilder)localObject2).append(sa);
        ((StringBuilder)localObject2).append(" COLLATE NOCASE ASC");
        localObject2 = ((StringBuilder)localObject2).toString();
        paramString = ((SQLiteDatabase)localObject1).query(str1, new String[] { str2, str3, str4, str5, str6, str7, str8, str9, str10, str11, str12, str13, str14, str15, str16, str17, str18, str19, str20, str21, str22, str23, str24, str25 }, paramString, null, null, null, (String)localObject2);
        if (paramString != null)
        {
          if (paramString.moveToFirst())
          {
            if (!paramArrayList.contains(paramString.getString(0))) {
              continue;
            }
            localObject1 = new O();
            ((O)localObject1).j(paramString.getString(0));
            ((O)localObject1).n(paramString.getString(1));
            ((O)localObject1).a(paramString.getString(2));
            ((O)localObject1).k(paramString.getString(3));
            ((O)localObject1).b(paramString.getString(4));
            ((O)localObject1).c(paramString.getString(5));
            ((O)localObject1).t(paramString.getString(6));
            ((O)localObject1).w(paramString.getString(7));
            ((O)localObject1).i(paramString.getString(8));
            ((O)localObject1).d(paramString.getString(9));
            ((O)localObject1).x(paramString.getString(10));
            ((O)localObject1).q(paramString.getString(11));
            ((O)localObject1).o(paramString.getString(12));
            ((O)localObject1).p(paramString.getString(13));
            ((O)localObject1).s(paramString.getString(14));
            ((O)localObject1).e(paramString.getString(15));
            ((O)localObject1).g(paramString.getString(16));
            ((O)localObject1).f(paramString.getString(17));
            ((O)localObject1).u(paramString.getString(18));
            ((O)localObject1).r(paramString.getString(19));
            ((O)localObject1).h(paramString.getString(20));
            ((O)localObject1).v(paramString.getString(21));
            ((O)localObject1).m(paramString.getString(22));
            ((O)localObject1).l(paramString.getString(23));
            localArrayList.add(localObject1);
            if (paramString.moveToNext()) {
              continue;
            }
          }
          paramString.close();
        }
      }
      catch (Exception paramArrayList)
      {
        k.a.a.m.b.a(paramArrayList);
      }
    }
    a();
    return localArrayList;
  }
  
  public void a()
  {
    try
    {
      pc -= 1;
      int i1 = pc;
      if (i1 == 0) {
        try
        {
          oc.close();
        }
        catch (Exception localException)
        {
          k.a.a.m.b.a(localException);
        }
      }
      return;
    }
    finally {}
  }
  
  public void a(String paramString)
  {
    try
    {
      O();
      try
      {
        SQLiteDatabase localSQLiteDatabase = oc;
        String str = d;
        StringBuilder localStringBuilder = new StringBuilder();
        localStringBuilder.append(L);
        localStringBuilder.append("=\"");
        localStringBuilder.append(paramString);
        localStringBuilder.append("\"");
        localSQLiteDatabase.delete(str, localStringBuilder.toString(), null);
      }
      catch (Exception paramString)
      {
        k.a.a.m.b.a(paramString);
      }
      a();
      return;
    }
    finally {}
  }
  
  public void a(String paramString1, String paramString2, String paramString3, String paramString4)
  {
    try
    {
      O();
      try
      {
        ContentValues localContentValues = new ContentValues();
        localContentValues.put(va, paramString1);
        localContentValues.put(wa, paramString2);
        localContentValues.put(xa, paramString3);
        localContentValues.put(ya, paramString4);
        oc.insert(h, null, localContentValues);
      }
      catch (Exception paramString1)
      {
        k.a.a.m.b.a(paramString1);
      }
      a();
      return;
    }
    finally {}
  }
  
  public void a(String paramString1, String paramString2, String paramString3, String paramString4, String paramString5)
  {
    try
    {
      O();
      try
      {
        ContentValues localContentValues = new ContentValues();
        localContentValues.put(za, paramString1);
        localContentValues.put(Aa, paramString2);
        localContentValues.put(Ba, paramString3);
        localContentValues.put(Ca, paramString4);
        localContentValues.put(Da, paramString5);
        oc.insert(i, null, localContentValues);
      }
      catch (Exception paramString1)
      {
        k.a.a.m.b.a(paramString1);
      }
      a();
      return;
    }
    finally {}
  }
  
  public void a(String paramString1, String paramString2, String paramString3, String paramString4, String paramString5, String paramString6)
  {
    try
    {
      O();
      try
      {
        ContentValues localContentValues = new ContentValues();
        localContentValues.put(za, paramString1);
        localContentValues.put(Aa, paramString2);
        localContentValues.put(Ba, paramString3);
        localContentValues.put(Ca, paramString4);
        localContentValues.put(Da, paramString5);
        localContentValues.put(qa, paramString6);
        oc.insert(j, null, localContentValues);
      }
      catch (Exception paramString1)
      {
        k.a.a.m.b.a(paramString1);
      }
      a();
      return;
    }
    finally {}
  }
  
  public void a(String paramString1, String paramString2, String paramString3, String paramString4, String paramString5, String paramString6, String paramString7)
  {
    try
    {
      O();
      try
      {
        ContentValues localContentValues = new ContentValues();
        localContentValues.put(gc, paramString2);
        localContentValues.put(kc, paramString3);
        localContentValues.put(ic, paramString4);
        localContentValues.put(jc, paramString5);
        localContentValues.put(xb, paramString6);
        localContentValues.put(fc, paramString7);
        paramString2 = oc;
        paramString3 = s;
        paramString4 = new StringBuilder();
        paramString4.append(t);
        paramString4.append("=\"");
        paramString4.append(paramString1);
        paramString4.append("\"");
        paramString2.update(paramString3, localContentValues, paramString4.toString(), null);
      }
      catch (Exception paramString1)
      {
        k.a.a.m.b.a(paramString1);
      }
      a();
      return;
    }
    finally {}
  }
  
  public void a(String paramString1, String paramString2, String paramString3, String paramString4, String paramString5, String paramString6, String paramString7, String paramString8, String paramString9, String paramString10, String paramString11, String paramString12)
  {
    try
    {
      O();
      try
      {
        ContentValues localContentValues = new ContentValues();
        localContentValues.put(jb, paramString1);
        localContentValues.put(kb, paramString2);
        localContentValues.put(lb, paramString3);
        localContentValues.put(mb, paramString4);
        localContentValues.put(nb, paramString5);
        localContentValues.put(ob, paramString6);
        localContentValues.put(pb, paramString7);
        localContentValues.put(qb, paramString8);
        localContentValues.put(rb, paramString9);
        localContentValues.put(sb, paramString10);
        localContentValues.put(tb, paramString11);
        localContentValues.put(ub, paramString12);
        oc.insert(r, null, localContentValues);
      }
      catch (Exception paramString1)
      {
        k.a.a.m.b.a(paramString1);
      }
      a();
      return;
    }
    finally {}
  }
  
  public void a(String paramString1, String paramString2, String paramString3, String paramString4, String paramString5, String paramString6, String paramString7, String paramString8, String paramString9, String paramString10, String paramString11, String paramString12, String paramString13)
  {
    try
    {
      O();
      try
      {
        ContentValues localContentValues = new ContentValues();
        localContentValues.put(Fa, paramString1);
        localContentValues.put(Ga, paramString2);
        localContentValues.put(Ha, paramString3);
        localContentValues.put(Ia, paramString4);
        localContentValues.put(Ja, paramString5);
        localContentValues.put(Ka, paramString6);
        localContentValues.put(La, paramString7);
        localContentValues.put(Ma, paramString8);
        localContentValues.put(Na, paramString9);
        localContentValues.put(Oa, paramString10);
        localContentValues.put(Pa, paramString11);
        localContentValues.put(Ra, paramString13);
        localContentValues.put(Qa, paramString12);
        oc.insert(p, null, localContentValues);
      }
      catch (Exception paramString1)
      {
        k.a.a.m.b.a(paramString1);
      }
      a();
      return;
    }
    finally {}
  }
  
  public void a(String paramString1, String paramString2, String paramString3, String paramString4, String paramString5, String paramString6, String paramString7, String paramString8, String paramString9, String paramString10, String paramString11, String paramString12, String paramString13, String paramString14, String paramString15, String paramString16, String paramString17, String paramString18, String paramString19)
  {
    try
    {
      O();
      try
      {
        ContentValues localContentValues = new ContentValues();
        localContentValues.put(L, paramString1);
        localContentValues.put(Sa, paramString2);
        localContentValues.put(Ta, paramString3);
        localContentValues.put(Ua, paramString4);
        localContentValues.put(Va, paramString5);
        localContentValues.put(Wa, paramString6);
        localContentValues.put(Xa, paramString7);
        localContentValues.put(Ya, paramString8);
        localContentValues.put(Za, paramString9);
        localContentValues.put(_a, paramString10);
        localContentValues.put(ab, paramString11);
        localContentValues.put(bb, paramString12);
        localContentValues.put(cb, paramString13);
        localContentValues.put(db, paramString14);
        localContentValues.put(eb, paramString15);
        localContentValues.put(fb, paramString16);
        localContentValues.put(gb, paramString17);
        localContentValues.put(hb, paramString18);
        localContentValues.put(ib, paramString19);
        oc.insert(q, null, localContentValues);
      }
      catch (Exception paramString1)
      {
        k.a.a.m.b.a(paramString1);
      }
      a();
      return;
    }
    finally {}
  }
  
  public void a(String paramString1, String paramString2, String paramString3, String paramString4, String paramString5, String paramString6, String paramString7, String paramString8, String paramString9, String paramString10, String paramString11, String paramString12, String paramString13, String paramString14, String paramString15, String paramString16, String paramString17, String paramString18, String paramString19, String paramString20, String paramString21)
  {
    try
    {
      O();
      try
      {
        ContentValues localContentValues = new ContentValues();
        localContentValues.put(u, paramString1);
        localContentValues.put(v, paramString2);
        localContentValues.put(w, paramString3);
        localContentValues.put(x, paramString4);
        localContentValues.put(y, paramString5);
        localContentValues.put(z, paramString6);
        localContentValues.put(A, paramString7);
        localContentValues.put(B, paramString8);
        localContentValues.put(C, paramString9);
        localContentValues.put(O, paramString10);
        localContentValues.put(D, paramString11);
        localContentValues.put(E, paramString12);
        localContentValues.put(F, paramString13);
        localContentValues.put(G, paramString14);
        localContentValues.put(H, paramString15);
        localContentValues.put(I, paramString16);
        localContentValues.put(J, paramString17);
        localContentValues.put(K, paramString18);
        localContentValues.put(L, paramString19);
        localContentValues.put(M, paramString20);
        localContentValues.put(N, paramString21);
        oc.insert(d, null, localContentValues);
      }
      catch (Exception paramString1)
      {
        k.a.a.m.b.a(paramString1);
      }
      a();
      return;
    }
    finally {}
  }
  
  public void a(String paramString1, String paramString2, String paramString3, String paramString4, String paramString5, String paramString6, String paramString7, String paramString8, String paramString9, String paramString10, String paramString11, String paramString12, String paramString13, String paramString14, String paramString15, String paramString16, String paramString17, String paramString18, String paramString19, String paramString20, String paramString21, String paramString22, String paramString23, String paramString24)
  {
    try
    {
      O();
      try
      {
        ContentValues localContentValues = new ContentValues();
        localContentValues.put(O, paramString1);
        localContentValues.put(P, paramString2);
        localContentValues.put(Q, paramString3);
        localContentValues.put(R, paramString4);
        localContentValues.put(Y, paramString5);
        localContentValues.put(Z, paramString6);
        localContentValues.put(ca, paramString7);
        localContentValues.put(ea, paramString8);
        localContentValues.put(fa, paramString9);
        localContentValues.put(ga, paramString10);
        localContentValues.put(ha, paramString11);
        localContentValues.put(la, paramString12);
        localContentValues.put(ma, paramString13);
        localContentValues.put(na, paramString14);
        localContentValues.put(pa, paramString15);
        localContentValues.put(ra, paramString16);
        localContentValues.put(S, paramString17);
        localContentValues.put(T, paramString18);
        localContentValues.put(X, paramString19);
        localContentValues.put(oa, paramString20);
        localContentValues.put(sa, paramString21);
        localContentValues.put(qa, paramString22);
        localContentValues.put(ta, paramString23);
        localContentValues.put(ua, paramString24);
        oc.insert(g, null, localContentValues);
      }
      catch (Exception paramString1)
      {
        k.a.a.m.b.a(paramString1);
      }
      a();
      return;
    }
    finally {}
  }
  
  public void a(String paramString1, String paramString2, String paramString3, String paramString4, String paramString5, String paramString6, String paramString7, String paramString8, String paramString9, String paramString10, String paramString11, String paramString12, String paramString13, String paramString14, String paramString15, String paramString16, String paramString17, String paramString18, String paramString19, String paramString20, String paramString21, String paramString22, String paramString23, String paramString24, String paramString25, String paramString26, String paramString27, String paramString28)
  {
    try
    {
      O();
      try
      {
        ContentValues localContentValues = new ContentValues();
        localContentValues.put(O, paramString1);
        localContentValues.put(P, paramString2);
        localContentValues.put(Q, paramString3);
        localContentValues.put(R, paramString4);
        localContentValues.put(T, paramString5);
        localContentValues.put(U, paramString6);
        localContentValues.put(V, paramString7);
        localContentValues.put(W, paramString8);
        localContentValues.put(X, paramString9);
        localContentValues.put(Y, paramString10);
        localContentValues.put(Z, paramString11);
        localContentValues.put(aa, paramString12);
        localContentValues.put(ba, paramString13);
        localContentValues.put(ca, paramString14);
        localContentValues.put(da, paramString15);
        localContentValues.put(ea, paramString16);
        localContentValues.put(fa, paramString17);
        localContentValues.put(ga, paramString18);
        localContentValues.put(ha, paramString19);
        localContentValues.put(ia, paramString20);
        localContentValues.put(ja, paramString21);
        localContentValues.put(S, paramString22);
        localContentValues.put(ka, paramString23);
        localContentValues.put(oa, paramString24);
        localContentValues.put(pa, paramString25);
        localContentValues.put(qa, paramString26);
        localContentValues.put(ta, paramString27);
        localContentValues.put(ua, paramString28);
        oc.insert(f, null, localContentValues);
      }
      catch (Exception paramString1)
      {
        k.a.a.m.b.a(paramString1);
      }
      a();
      return;
    }
    finally {}
  }
  
  public void a(String paramString1, String paramString2, String paramString3, String paramString4, String paramString5, String paramString6, String paramString7, String paramString8, String paramString9, String paramString10, String paramString11, String paramString12, String paramString13, String paramString14, String paramString15, String paramString16, String paramString17, String paramString18, String paramString19, String paramString20, String paramString21, String paramString22, String paramString23, String paramString24, String paramString25, String paramString26, String paramString27, String paramString28, String paramString29)
  {
    try
    {
      O();
      try
      {
        ContentValues localContentValues = new ContentValues();
        localContentValues.put(O, paramString1);
        localContentValues.put(P, paramString2);
        localContentValues.put(Q, paramString3);
        localContentValues.put(R, paramString4);
        localContentValues.put(T, paramString5);
        localContentValues.put(U, paramString6);
        localContentValues.put(V, paramString7);
        localContentValues.put(W, paramString8);
        localContentValues.put(X, paramString9);
        localContentValues.put(Y, paramString10);
        localContentValues.put(Z, paramString11);
        localContentValues.put(aa, paramString12);
        localContentValues.put(ba, paramString13);
        localContentValues.put(ca, paramString14);
        localContentValues.put(da, paramString15);
        localContentValues.put(ea, paramString16);
        localContentValues.put(fa, paramString17);
        localContentValues.put(ga, paramString18);
        localContentValues.put(ha, paramString19);
        localContentValues.put(ia, paramString20);
        localContentValues.put(ja, paramString21);
        localContentValues.put(S, paramString22);
        localContentValues.put(ka, paramString23);
        localContentValues.put(oa, paramString24);
        localContentValues.put(pa, paramString25);
        localContentValues.put(qa, paramString26);
        localContentValues.put(sa, paramString27);
        localContentValues.put(ta, paramString28);
        localContentValues.put(ua, paramString29);
        oc.insert(e, null, localContentValues);
      }
      catch (Exception paramString1)
      {
        k.a.a.m.b.a(paramString1);
      }
      a();
      return;
    }
    finally {}
  }
  
  public void a(String paramString1, String paramString2, String paramString3, String paramString4, String paramString5, String paramString6, String paramString7, String paramString8, String paramString9, String paramString10, String paramString11, String paramString12, String paramString13, String paramString14, String paramString15, String paramString16, String paramString17, String paramString18, String paramString19, String paramString20, String paramString21, String paramString22, String paramString23, String paramString24, String paramString25, String paramString26, String paramString27, String paramString28, String paramString29, String paramString30, String paramString31, String paramString32, String paramString33, String paramString34, String paramString35, String paramString36, String paramString37, String paramString38, String paramString39, String paramString40, String paramString41, String paramString42, String paramString43, String paramString44)
  {
    try
    {
      O();
      try
      {
        ContentValues localContentValues = new ContentValues();
        localContentValues.put(vb, paramString1);
        localContentValues.put(wb, paramString2);
        localContentValues.put(xb, paramString3);
        localContentValues.put(yb, paramString4);
        localContentValues.put(zb, paramString5);
        localContentValues.put(Ab, paramString6);
        localContentValues.put(Bb, paramString7);
        localContentValues.put(Cb, paramString8);
        localContentValues.put(Db, paramString9);
        localContentValues.put(Eb, paramString10);
        localContentValues.put(Fb, paramString11);
        localContentValues.put(Gb, paramString12);
        localContentValues.put(Hb, paramString13);
        localContentValues.put(Ib, paramString14);
        localContentValues.put(Jb, paramString15);
        localContentValues.put(Kb, paramString16);
        localContentValues.put(Lb, paramString17);
        localContentValues.put(Mb, paramString18);
        localContentValues.put(Nb, paramString19);
        localContentValues.put(Ob, paramString20);
        localContentValues.put(Pb, paramString21);
        localContentValues.put(Qb, paramString22);
        localContentValues.put(Rb, paramString23);
        localContentValues.put(Sb, paramString24);
        localContentValues.put(Tb, paramString25);
        localContentValues.put(Ub, paramString26);
        localContentValues.put(Vb, paramString27);
        localContentValues.put(Wb, paramString28);
        localContentValues.put(Xb, paramString29);
        localContentValues.put(Yb, paramString30);
        localContentValues.put(Zb, paramString31);
        localContentValues.put(_b, paramString32);
        localContentValues.put(ac, paramString33);
        localContentValues.put(bc, paramString34);
        localContentValues.put(cc, paramString35);
        localContentValues.put(dc, paramString36);
        localContentValues.put(ec, paramString37);
        localContentValues.put(fc, paramString38);
        localContentValues.put(gc, paramString39);
        localContentValues.put(hc, paramString40);
        localContentValues.put(ic, paramString41);
        localContentValues.put(jc, paramString42);
        localContentValues.put(kc, paramString43);
        localContentValues.put(lc, paramString44);
        oc.insert(s, null, localContentValues);
      }
      catch (Exception paramString1)
      {
        k.a.a.m.b.a(paramString1);
      }
      a();
      return;
    }
    finally {}
  }
  
  public ArrayList<O> b(ArrayList<String> paramArrayList)
    throws SQLException
  {
    for (;;)
    {
      try
      {
        localArrayList = new ArrayList();
        O();
      }
      finally
      {
        ArrayList localArrayList;
        Object localObject1;
        Object localObject2;
        String str1;
        String str2;
        String str3;
        String str4;
        String str5;
        String str6;
        String str7;
        String str8;
        String str9;
        String str10;
        String str11;
        String str12;
        String str13;
        String str14;
        String str15;
        String str16;
        String str17;
        String str18;
        String str19;
        String str20;
        String str21;
        String str22;
        String str23;
        String str24;
        Object localObject3;
        Object localObject4;
        continue;
        throw paramArrayList;
        continue;
        continue;
        continue;
      }
      try
      {
        localObject1 = oc;
        localObject2 = g;
        str1 = O;
        str2 = P;
        str3 = Q;
        str4 = R;
        str5 = Y;
        str6 = Z;
        str7 = ca;
        str8 = ea;
        str9 = fa;
        str10 = ga;
        str11 = ha;
        str12 = la;
        str13 = ma;
        str14 = na;
        str15 = pa;
        str16 = ra;
        str17 = S;
        str18 = T;
        str19 = X;
        str20 = oa;
        str21 = sa;
        str22 = qa;
        str23 = ta;
        str24 = ua;
        localObject3 = new StringBuilder();
        ((StringBuilder)localObject3).append(X);
        ((StringBuilder)localObject3).append("!=\"99\" OR ");
        ((StringBuilder)localObject3).append(oa);
        ((StringBuilder)localObject3).append("!=\"\"");
        localObject3 = ((StringBuilder)localObject3).toString();
        localObject4 = new StringBuilder();
        ((StringBuilder)localObject4).append(P);
        ((StringBuilder)localObject4).append(" COLLATE NOCASE ASC");
        localObject4 = ((StringBuilder)localObject4).toString();
        localObject1 = ((SQLiteDatabase)localObject1).query((String)localObject2, new String[] { str1, str2, str3, str4, str5, str6, str7, str8, str9, str10, str11, str12, str13, str14, str15, str16, str17, str18, str19, str20, str21, str22, str23, str24 }, (String)localObject3, null, null, null, (String)localObject4);
        if (localObject1 != null)
        {
          if (((Cursor)localObject1).moveToFirst())
          {
            if (!paramArrayList.contains(((Cursor)localObject1).getString(0))) {
              continue;
            }
            localObject2 = new O();
            ((O)localObject2).j(((Cursor)localObject1).getString(0));
            ((O)localObject2).n(((Cursor)localObject1).getString(1));
            ((O)localObject2).a(((Cursor)localObject1).getString(2));
            ((O)localObject2).k(((Cursor)localObject1).getString(3));
            ((O)localObject2).b(((Cursor)localObject1).getString(4));
            ((O)localObject2).c(((Cursor)localObject1).getString(5));
            ((O)localObject2).t(((Cursor)localObject1).getString(6));
            ((O)localObject2).w(((Cursor)localObject1).getString(7));
            ((O)localObject2).i(((Cursor)localObject1).getString(8));
            ((O)localObject2).d(((Cursor)localObject1).getString(9));
            ((O)localObject2).x(((Cursor)localObject1).getString(10));
            ((O)localObject2).q(((Cursor)localObject1).getString(11));
            ((O)localObject2).o(((Cursor)localObject1).getString(12));
            ((O)localObject2).p(((Cursor)localObject1).getString(13));
            ((O)localObject2).s(((Cursor)localObject1).getString(14));
            ((O)localObject2).e(((Cursor)localObject1).getString(15));
            ((O)localObject2).g(((Cursor)localObject1).getString(16));
            ((O)localObject2).f(((Cursor)localObject1).getString(17));
            ((O)localObject2).u(((Cursor)localObject1).getString(18));
            ((O)localObject2).r(((Cursor)localObject1).getString(19));
            ((O)localObject2).h(((Cursor)localObject1).getString(20));
            ((O)localObject2).v(((Cursor)localObject1).getString(21));
            ((O)localObject2).m(((Cursor)localObject1).getString(22));
            ((O)localObject2).l(((Cursor)localObject1).getString(23));
            localArrayList.add(localObject2);
            if (((Cursor)localObject1).moveToNext()) {
              continue;
            }
          }
          ((Cursor)localObject1).close();
        }
      }
      catch (Exception paramArrayList)
      {
        k.a.a.m.b.a(paramArrayList);
      }
    }
    a();
    return localArrayList;
  }
  
  public void b()
  {
    try
    {
      O();
      try
      {
        oc.delete(f, null, null);
      }
      catch (Exception localException)
      {
        k.a.a.m.b.a(localException);
      }
      a();
      return;
    }
    finally {}
  }
  
  public void b(String paramString)
  {
    try
    {
      O();
      try
      {
        oc.delete(e, null, null);
        oc.delete(g, null, null);
        oc.delete(h, null, null);
        oc.delete(i, null, null);
        oc.delete(k, null, null);
        oc.delete(m, null, null);
        oc.delete(n, null, null);
        oc.delete(p, null, null);
        oc.delete(s, null, null);
        if (!paramString.equalsIgnoreCase("DontDeleteNotif"))
        {
          SQLiteDatabase localSQLiteDatabase = oc;
          String str = d;
          StringBuilder localStringBuilder = new StringBuilder();
          localStringBuilder.append(L);
          localStringBuilder.append("=\"");
          localStringBuilder.append(paramString);
          localStringBuilder.append("\"");
          localSQLiteDatabase.delete(str, localStringBuilder.toString(), null);
          localSQLiteDatabase = oc;
          str = o;
          localStringBuilder = new StringBuilder();
          localStringBuilder.append(L);
          localStringBuilder.append("=\"");
          localStringBuilder.append(paramString);
          localStringBuilder.append("\"");
          localSQLiteDatabase.delete(str, localStringBuilder.toString(), null);
        }
      }
      catch (Exception paramString)
      {
        k.a.a.m.b.a(paramString);
      }
      a();
      return;
    }
    finally {}
  }
  
  public void b(String paramString1, String paramString2)
  {
    try
    {
      O();
      try
      {
        SQLiteDatabase localSQLiteDatabase = oc;
        String str = q;
        StringBuilder localStringBuilder = new StringBuilder();
        localStringBuilder.append(L);
        localStringBuilder.append("=\"");
        localStringBuilder.append(paramString1);
        localStringBuilder.append("\" AND ");
        localStringBuilder.append(Ya);
        localStringBuilder.append("=\"");
        localStringBuilder.append(paramString2);
        localStringBuilder.append("\"");
        localSQLiteDatabase.delete(str, localStringBuilder.toString(), null);
      }
      catch (Exception paramString1)
      {
        k.a.a.m.b.a(paramString1);
      }
      a();
      return;
    }
    finally {}
  }
  
  public void b(String paramString1, String paramString2, String paramString3, String paramString4, String paramString5)
  {
    try
    {
      O();
      try
      {
        ContentValues localContentValues = new ContentValues();
        localContentValues.put(za, paramString1);
        localContentValues.put(Aa, paramString2);
        localContentValues.put(Ba, paramString3);
        localContentValues.put(Ca, paramString4);
        localContentValues.put(Da, paramString5);
        oc.insert(k, null, localContentValues);
      }
      catch (Exception paramString1)
      {
        k.a.a.m.b.a(paramString1);
      }
      a();
      return;
    }
    finally {}
  }
  
  public void b(String paramString1, String paramString2, String paramString3, String paramString4, String paramString5, String paramString6, String paramString7, String paramString8, String paramString9, String paramString10, String paramString11, String paramString12, String paramString13, String paramString14, String paramString15, String paramString16, String paramString17, String paramString18, String paramString19, String paramString20, String paramString21)
  {
    try
    {
      paramString1 = y(paramString1);
      if (!paramString1.isEmpty())
      {
        O();
        try
        {
          ContentValues localContentValues = new ContentValues();
          localContentValues.put(zb, paramString2);
          localContentValues.put(Cb, paramString3);
          localContentValues.put(Db, paramString4);
          localContentValues.put(Fb, paramString5);
          localContentValues.put(Ib, paramString6);
          localContentValues.put(Jb, paramString7);
          localContentValues.put(Lb, paramString8);
          localContentValues.put(Mb, paramString9);
          localContentValues.put(Ob, paramString10);
          localContentValues.put(Rb, paramString11);
          localContentValues.put(Tb, paramString12);
          localContentValues.put(Wb, paramString13);
          localContentValues.put(Xb, paramString14);
          localContentValues.put(Zb, paramString15);
          localContentValues.put(ac, paramString16);
          localContentValues.put(bc, paramString17);
          localContentValues.put(cc, paramString18);
          localContentValues.put(dc, paramString19);
          localContentValues.put(ec, paramString20);
          localContentValues.put(hc, paramString21);
          paramString2 = oc;
          paramString3 = s;
          paramString4 = new StringBuilder();
          paramString4.append(t);
          paramString4.append("=\"");
          paramString4.append(paramString1);
          paramString4.append("\"");
          paramString2.update(paramString3, localContentValues, paramString4.toString(), null);
        }
        catch (Exception paramString1)
        {
          k.a.a.m.b.a(paramString1);
        }
        a();
      }
      return;
    }
    finally {}
  }
  
  public void b(String paramString1, String paramString2, String paramString3, String paramString4, String paramString5, String paramString6, String paramString7, String paramString8, String paramString9, String paramString10, String paramString11, String paramString12, String paramString13, String paramString14, String paramString15, String paramString16, String paramString17, String paramString18, String paramString19, String paramString20, String paramString21, String paramString22, String paramString23, String paramString24)
  {
    try
    {
      O();
      try
      {
        ContentValues localContentValues = new ContentValues();
        localContentValues.put(P, paramString2);
        localContentValues.put(Q, paramString3);
        localContentValues.put(R, paramString4);
        localContentValues.put(Y, paramString5);
        localContentValues.put(Z, paramString6);
        localContentValues.put(ca, paramString7);
        localContentValues.put(ea, paramString8);
        localContentValues.put(fa, paramString9);
        localContentValues.put(ga, paramString10);
        localContentValues.put(ha, paramString11);
        localContentValues.put(la, paramString12);
        localContentValues.put(ma, paramString13);
        localContentValues.put(na, paramString14);
        localContentValues.put(pa, paramString15);
        localContentValues.put(ra, paramString16);
        localContentValues.put(S, paramString17);
        localContentValues.put(T, paramString18);
        localContentValues.put(X, paramString19);
        localContentValues.put(oa, paramString20);
        localContentValues.put(sa, paramString21);
        localContentValues.put(qa, paramString22);
        localContentValues.put(ta, paramString23);
        localContentValues.put(ua, paramString24);
        paramString2 = oc;
        paramString3 = g;
        paramString4 = new StringBuilder();
        paramString4.append(O);
        paramString4.append("=\"");
        paramString4.append(paramString1);
        paramString4.append("\"");
        paramString2.update(paramString3, localContentValues, paramString4.toString(), null);
      }
      catch (Exception paramString1)
      {
        k.a.a.m.b.a(paramString1);
      }
      a();
      return;
    }
    finally {}
  }
  
  public void b(String paramString1, String paramString2, String paramString3, String paramString4, String paramString5, String paramString6, String paramString7, String paramString8, String paramString9, String paramString10, String paramString11, String paramString12, String paramString13, String paramString14, String paramString15, String paramString16, String paramString17, String paramString18, String paramString19, String paramString20, String paramString21, String paramString22, String paramString23, String paramString24, String paramString25, String paramString26, String paramString27, String paramString28)
  {
    try
    {
      O();
      try
      {
        ContentValues localContentValues = new ContentValues();
        localContentValues.put(P, paramString2);
        localContentValues.put(Q, paramString3);
        localContentValues.put(R, paramString4);
        localContentValues.put(T, paramString5);
        localContentValues.put(U, paramString6);
        localContentValues.put(V, paramString7);
        localContentValues.put(W, paramString8);
        localContentValues.put(X, paramString9);
        localContentValues.put(Y, paramString10);
        localContentValues.put(Z, paramString11);
        localContentValues.put(aa, paramString12);
        localContentValues.put(ba, paramString13);
        localContentValues.put(ca, paramString14);
        localContentValues.put(da, paramString15);
        localContentValues.put(ea, paramString16);
        localContentValues.put(fa, paramString17);
        localContentValues.put(ga, paramString18);
        localContentValues.put(ha, paramString19);
        localContentValues.put(ia, paramString20);
        localContentValues.put(ja, paramString21);
        localContentValues.put(S, paramString22);
        localContentValues.put(ka, paramString23);
        localContentValues.put(oa, paramString24);
        localContentValues.put(pa, paramString25);
        localContentValues.put(qa, paramString26);
        localContentValues.put(ta, paramString27);
        localContentValues.put(ua, paramString28);
        paramString2 = oc;
        paramString3 = f;
        paramString4 = new StringBuilder();
        paramString4.append(O);
        paramString4.append("=\"");
        paramString4.append(paramString1);
        paramString4.append("\"");
        paramString2.update(paramString3, localContentValues, paramString4.toString(), null);
      }
      catch (Exception paramString1)
      {
        k.a.a.m.b.a(paramString1);
      }
      a();
      return;
    }
    finally {}
  }
  
  public void b(String paramString1, String paramString2, String paramString3, String paramString4, String paramString5, String paramString6, String paramString7, String paramString8, String paramString9, String paramString10, String paramString11, String paramString12, String paramString13, String paramString14, String paramString15, String paramString16, String paramString17, String paramString18, String paramString19, String paramString20, String paramString21, String paramString22, String paramString23, String paramString24, String paramString25, String paramString26, String paramString27, String paramString28, String paramString29)
  {
    try
    {
      O();
      try
      {
        ContentValues localContentValues = new ContentValues();
        localContentValues.put(P, paramString2);
        localContentValues.put(Q, paramString3);
        localContentValues.put(R, paramString4);
        localContentValues.put(T, paramString5);
        localContentValues.put(U, paramString6);
        localContentValues.put(V, paramString7);
        localContentValues.put(W, paramString8);
        localContentValues.put(X, paramString9);
        localContentValues.put(Y, paramString10);
        localContentValues.put(Z, paramString11);
        localContentValues.put(aa, paramString12);
        localContentValues.put(ba, paramString13);
        localContentValues.put(ca, paramString14);
        localContentValues.put(da, paramString15);
        localContentValues.put(ea, paramString16);
        localContentValues.put(fa, paramString17);
        localContentValues.put(ga, paramString18);
        localContentValues.put(ha, paramString19);
        localContentValues.put(ia, paramString20);
        localContentValues.put(ja, paramString21);
        localContentValues.put(S, paramString22);
        localContentValues.put(ka, paramString23);
        localContentValues.put(oa, paramString24);
        localContentValues.put(pa, paramString25);
        localContentValues.put(qa, paramString26);
        localContentValues.put(sa, paramString27);
        localContentValues.put(ta, paramString28);
        localContentValues.put(ua, paramString29);
        paramString2 = oc;
        paramString3 = e;
        paramString4 = new StringBuilder();
        paramString4.append(O);
        paramString4.append("=\"");
        paramString4.append(paramString1);
        paramString4.append("\"");
        paramString2.update(paramString3, localContentValues, paramString4.toString(), null);
      }
      catch (Exception paramString1)
      {
        k.a.a.m.b.a(paramString1);
      }
      a();
      return;
    }
    finally {}
  }
  
  public ArrayList<O> c(ArrayList<String> paramArrayList)
    throws SQLException
  {
    for (;;)
    {
      try
      {
        localArrayList = new ArrayList();
        O();
      }
      finally
      {
        ArrayList localArrayList;
        Object localObject1;
        Object localObject2;
        String str1;
        String str2;
        String str3;
        String str4;
        String str5;
        String str6;
        String str7;
        String str8;
        String str9;
        String str10;
        String str11;
        String str12;
        String str13;
        String str14;
        String str15;
        String str16;
        String str17;
        String str18;
        String str19;
        String str20;
        String str21;
        String str22;
        String str23;
        String str24;
        Object localObject3;
        continue;
        throw paramArrayList;
        continue;
        continue;
        continue;
      }
      try
      {
        localObject1 = oc;
        localObject2 = g;
        str1 = O;
        str2 = P;
        str3 = Q;
        str4 = R;
        str5 = Y;
        str6 = Z;
        str7 = ca;
        str8 = ea;
        str9 = fa;
        str10 = ga;
        str11 = ha;
        str12 = la;
        str13 = ma;
        str14 = na;
        str15 = pa;
        str16 = ra;
        str17 = S;
        str18 = T;
        str19 = X;
        str20 = oa;
        str21 = sa;
        str22 = qa;
        str23 = ta;
        str24 = ua;
        localObject3 = new StringBuilder();
        ((StringBuilder)localObject3).append(sa);
        ((StringBuilder)localObject3).append(" COLLATE NOCASE ASC");
        localObject3 = ((StringBuilder)localObject3).toString();
        localObject1 = ((SQLiteDatabase)localObject1).query((String)localObject2, new String[] { str1, str2, str3, str4, str5, str6, str7, str8, str9, str10, str11, str12, str13, str14, str15, str16, str17, str18, str19, str20, str21, str22, str23, str24 }, null, null, null, null, (String)localObject3);
        if (localObject1 != null)
        {
          if (((Cursor)localObject1).moveToFirst())
          {
            if (paramArrayList.contains(((Cursor)localObject1).getString(0))) {
              continue;
            }
            localObject2 = new O();
            ((O)localObject2).j(((Cursor)localObject1).getString(0));
            ((O)localObject2).n(((Cursor)localObject1).getString(1));
            ((O)localObject2).a(((Cursor)localObject1).getString(2));
            ((O)localObject2).k(((Cursor)localObject1).getString(3));
            ((O)localObject2).b(((Cursor)localObject1).getString(4));
            ((O)localObject2).c(((Cursor)localObject1).getString(5));
            ((O)localObject2).t(((Cursor)localObject1).getString(6));
            ((O)localObject2).w(((Cursor)localObject1).getString(7));
            ((O)localObject2).i(((Cursor)localObject1).getString(8));
            ((O)localObject2).d(((Cursor)localObject1).getString(9));
            ((O)localObject2).x(((Cursor)localObject1).getString(10));
            ((O)localObject2).q(((Cursor)localObject1).getString(11));
            ((O)localObject2).o(((Cursor)localObject1).getString(12));
            ((O)localObject2).p(((Cursor)localObject1).getString(13));
            ((O)localObject2).s(((Cursor)localObject1).getString(14));
            ((O)localObject2).e(((Cursor)localObject1).getString(15));
            ((O)localObject2).g(((Cursor)localObject1).getString(16));
            ((O)localObject2).f(((Cursor)localObject1).getString(17));
            ((O)localObject2).u(((Cursor)localObject1).getString(18));
            ((O)localObject2).r(((Cursor)localObject1).getString(19));
            ((O)localObject2).h(((Cursor)localObject1).getString(20));
            ((O)localObject2).v(((Cursor)localObject1).getString(21));
            ((O)localObject2).m(((Cursor)localObject1).getString(22));
            ((O)localObject2).l(((Cursor)localObject1).getString(23));
            localArrayList.add(localObject2);
            if (((Cursor)localObject1).moveToNext()) {
              continue;
            }
          }
          ((Cursor)localObject1).close();
        }
      }
      catch (Exception paramArrayList)
      {
        k.a.a.m.b.a(paramArrayList);
      }
    }
    a();
    return localArrayList;
  }
  
  public void c()
  {
    try
    {
      O();
      try
      {
        oc.delete(g, null, null);
      }
      catch (Exception localException)
      {
        k.a.a.m.b.a(localException);
      }
      a();
      return;
    }
    finally {}
  }
  
  public void c(String paramString)
  {
    try
    {
      O();
      try
      {
        SQLiteDatabase localSQLiteDatabase = oc;
        String str = f;
        StringBuilder localStringBuilder = new StringBuilder();
        localStringBuilder.append(O);
        localStringBuilder.append("=\"");
        localStringBuilder.append(paramString);
        localStringBuilder.append("\"");
        localSQLiteDatabase.delete(str, localStringBuilder.toString(), null);
      }
      catch (Exception paramString)
      {
        k.a.a.m.b.a(paramString);
      }
      a();
      return;
    }
    finally {}
  }
  
  public void c(String paramString1, String paramString2)
  {
    try
    {
      O();
      try
      {
        SQLiteDatabase localSQLiteDatabase = oc;
        String str = o;
        StringBuilder localStringBuilder = new StringBuilder();
        localStringBuilder.append(L);
        localStringBuilder.append("=\"");
        localStringBuilder.append(paramString1);
        localStringBuilder.append("\" AND ");
        localStringBuilder.append(O);
        localStringBuilder.append("=\"");
        localStringBuilder.append(paramString2);
        localStringBuilder.append("\"");
        localSQLiteDatabase.delete(str, localStringBuilder.toString(), null);
      }
      catch (Exception paramString1)
      {
        k.a.a.m.b.a(paramString1);
      }
      a();
      return;
    }
    finally {}
  }
  
  public void d()
  {
    try
    {
      O();
      try
      {
        oc.delete(e, null, null);
      }
      catch (Exception localException)
      {
        k.a.a.m.b.a(localException);
      }
      a();
      return;
    }
    finally {}
  }
  
  public void d(String paramString)
  {
    try
    {
      O();
      try
      {
        SQLiteDatabase localSQLiteDatabase = oc;
        String str = d;
        StringBuilder localStringBuilder = new StringBuilder();
        localStringBuilder.append(u);
        localStringBuilder.append("=\"");
        localStringBuilder.append(paramString);
        localStringBuilder.append("\"");
        localSQLiteDatabase.delete(str, localStringBuilder.toString(), null);
      }
      catch (Exception paramString)
      {
        k.a.a.m.b.a(paramString);
      }
      a();
      return;
    }
    finally {}
  }
  
  public void d(String paramString1, String paramString2)
  {
    try
    {
      O();
      try
      {
        SQLiteDatabase localSQLiteDatabase = oc;
        String str = r;
        StringBuilder localStringBuilder = new StringBuilder();
        localStringBuilder.append(jb);
        localStringBuilder.append("=\"");
        localStringBuilder.append(paramString1);
        localStringBuilder.append("\" AND ");
        localStringBuilder.append(kb);
        localStringBuilder.append("=\"");
        localStringBuilder.append(paramString2);
        localStringBuilder.append("\"");
        localSQLiteDatabase.delete(str, localStringBuilder.toString(), null);
      }
      catch (Exception paramString1)
      {
        k.a.a.m.b.a(paramString1);
      }
      a();
      return;
    }
    finally {}
  }
  
  public f e(String paramString1, String paramString2)
    throws SQLException
  {
    try
    {
      O();
      try
      {
        SQLiteDatabase localSQLiteDatabase = oc;
        String str1 = q;
        String str2 = Sa;
        String str3 = Ta;
        String str4 = Ua;
        String str5 = Va;
        String str6 = Wa;
        String str7 = Xa;
        String str8 = Ya;
        String str9 = Za;
        String str10 = _a;
        String str11 = ab;
        String str12 = bb;
        String str13 = cb;
        String str14 = db;
        String str15 = eb;
        String str16 = fb;
        String str17 = gb;
        String str18 = hb;
        String str19 = ib;
        StringBuilder localStringBuilder = new StringBuilder();
        localStringBuilder.append(L);
        localStringBuilder.append("=\"");
        localStringBuilder.append(paramString1);
        localStringBuilder.append("\" AND ");
        localStringBuilder.append(Ya);
        localStringBuilder.append("=\"");
        localStringBuilder.append(paramString2);
        localStringBuilder.append("\"");
        paramString1 = localStringBuilder.toString();
        paramString2 = localSQLiteDatabase.query(str1, new String[] { str2, str3, str4, str5, str6, str7, str8, str9, str10, str11, str12, str13, str14, str15, str16, str17, str18, str19 }, paramString1, null, null, null, null);
        if (paramString2 != null)
        {
          if (paramString2.moveToFirst())
          {
            paramString1 = new f();
            try
            {
              paramString1.c(paramString2.getString(0));
              paramString1.b(paramString2.getString(1));
              paramString1.d(paramString2.getString(2));
              paramString1.e(paramString2.getString(3));
              paramString1.f(paramString2.getString(4));
              paramString1.g(paramString2.getString(5));
              paramString1.o(paramString2.getString(6));
              paramString1.j(paramString2.getString(7));
              paramString1.m(paramString2.getString(8));
              paramString1.r(paramString2.getString(9));
              paramString1.p(paramString2.getString(10));
              paramString1.k(paramString2.getString(11));
              paramString1.i(paramString2.getString(12));
              paramString1.l(paramString2.getString(13));
              paramString1.n(paramString2.getString(14));
              paramString1.q(paramString2.getString(15));
              paramString1.a(paramString2.getString(16));
              paramString1.h(paramString2.getString(17));
            }
            catch (Exception paramString2)
            {
              break label570;
            }
          }
          else
          {
            paramString1 = null;
          }
          try
          {
            paramString2.close();
          }
          catch (Exception paramString2)
          {
            break label570;
          }
        }
        else
        {
          paramString1 = null;
        }
      }
      catch (Exception paramString2)
      {
        paramString1 = null;
        label570:
        k.a.a.m.b.a(paramString2);
      }
      a();
      return paramString1;
    }
    finally {}
  }
  
  public void e()
  {
    try
    {
      O();
      try
      {
        oc.delete(i, null, null);
      }
      catch (Exception localException)
      {
        k.a.a.m.b.a(localException);
      }
      a();
      return;
    }
    finally {}
  }
  
  public void e(String paramString)
  {
    try
    {
      O();
      try
      {
        SQLiteDatabase localSQLiteDatabase = oc;
        String str = e;
        StringBuilder localStringBuilder = new StringBuilder();
        localStringBuilder.append(O);
        localStringBuilder.append("=\"");
        localStringBuilder.append(paramString);
        localStringBuilder.append("\"");
        localSQLiteDatabase.delete(str, localStringBuilder.toString(), null);
      }
      catch (Exception paramString)
      {
        k.a.a.m.b.a(paramString);
      }
      a();
      return;
    }
    finally {}
  }
  
  public ArrayList<f> f(String paramString1, String paramString2)
    throws SQLException
  {
    for (;;)
    {
      try
      {
        localArrayList = new ArrayList();
        O();
      }
      finally
      {
        ArrayList localArrayList;
        SQLiteDatabase localSQLiteDatabase;
        String str1;
        String str2;
        String str3;
        String str4;
        String str5;
        String str6;
        String str7;
        String str8;
        String str9;
        String str10;
        String str11;
        String str12;
        String str13;
        String str14;
        String str15;
        String str16;
        String str17;
        String str18;
        String str19;
        StringBuilder localStringBuilder;
        continue;
        throw paramString1;
        continue;
        continue;
      }
      try
      {
        localSQLiteDatabase = oc;
        str1 = q;
        str2 = Sa;
        str3 = Ta;
        str4 = Ua;
        str5 = Va;
        str6 = Wa;
        str7 = Xa;
        str8 = Ya;
        str9 = Za;
        str10 = _a;
        str11 = ab;
        str12 = bb;
        str13 = cb;
        str14 = db;
        str15 = eb;
        str16 = fb;
        str17 = gb;
        str18 = hb;
        str19 = ib;
        localStringBuilder = new StringBuilder();
        localStringBuilder.append(L);
        localStringBuilder.append("=\"");
        localStringBuilder.append(paramString1);
        localStringBuilder.append("\" AND ");
        localStringBuilder.append(Sa);
        localStringBuilder.append("=\"");
        localStringBuilder.append(paramString2);
        localStringBuilder.append("\"");
        paramString1 = localStringBuilder.toString();
        paramString1 = localSQLiteDatabase.query(str1, new String[] { str2, str3, str4, str5, str6, str7, str8, str9, str10, str11, str12, str13, str14, str15, str16, str17, str18, str19 }, paramString1, null, null, null, null);
        if (paramString1 != null)
        {
          if (paramString1.moveToFirst())
          {
            paramString2 = new f();
            paramString2.c(paramString1.getString(0));
            paramString2.b(paramString1.getString(1));
            paramString2.d(paramString1.getString(2));
            paramString2.e(paramString1.getString(3));
            paramString2.f(paramString1.getString(4));
            paramString2.g(paramString1.getString(5));
            paramString2.o(paramString1.getString(6));
            paramString2.j(paramString1.getString(7));
            paramString2.m(paramString1.getString(8));
            paramString2.r(paramString1.getString(9));
            paramString2.p(paramString1.getString(10));
            paramString2.k(paramString1.getString(11));
            paramString2.i(paramString1.getString(12));
            paramString2.l(paramString1.getString(13));
            paramString2.n(paramString1.getString(14));
            paramString2.q(paramString1.getString(15));
            paramString2.a(paramString1.getString(16));
            paramString2.h(paramString1.getString(17));
            localArrayList.add(paramString2);
            if (paramString1.moveToNext()) {
              continue;
            }
          }
          paramString1.close();
        }
      }
      catch (Exception paramString1)
      {
        k.a.a.m.b.a(paramString1);
      }
    }
    a();
    return localArrayList;
  }
  
  public void f()
  {
    try
    {
      O();
      try
      {
        oc.delete(j, null, null);
      }
      catch (Exception localException)
      {
        k.a.a.m.b.a(localException);
      }
      a();
      return;
    }
    finally {}
  }
  
  public void f(String paramString)
  {
    try
    {
      O();
      try
      {
        SQLiteDatabase localSQLiteDatabase = oc;
        String str = g;
        StringBuilder localStringBuilder = new StringBuilder();
        localStringBuilder.append(O);
        localStringBuilder.append("=\"");
        localStringBuilder.append(paramString);
        localStringBuilder.append("\"");
        localSQLiteDatabase.delete(str, localStringBuilder.toString(), null);
      }
      catch (Exception paramString)
      {
        k.a.a.m.b.a(paramString);
      }
      a();
      return;
    }
    finally {}
  }
  
  public ArrayList<f> g(String paramString)
    throws SQLException
  {
    for (;;)
    {
      try
      {
        localArrayList = new ArrayList();
        O();
      }
      finally
      {
        ArrayList localArrayList;
        Object localObject;
        String str1;
        String str2;
        String str3;
        String str4;
        String str5;
        String str6;
        String str7;
        String str8;
        String str9;
        String str10;
        String str11;
        String str12;
        String str13;
        String str14;
        String str15;
        String str16;
        String str17;
        String str18;
        String str19;
        StringBuilder localStringBuilder;
        continue;
        throw paramString;
        continue;
        continue;
      }
      try
      {
        localObject = oc;
        str1 = q;
        str2 = Sa;
        str3 = Ta;
        str4 = Ua;
        str5 = Va;
        str6 = Wa;
        str7 = Xa;
        str8 = Ya;
        str9 = Za;
        str10 = _a;
        str11 = ab;
        str12 = bb;
        str13 = cb;
        str14 = db;
        str15 = eb;
        str16 = fb;
        str17 = gb;
        str18 = hb;
        str19 = ib;
        localStringBuilder = new StringBuilder();
        localStringBuilder.append(L);
        localStringBuilder.append("=\"");
        localStringBuilder.append(paramString);
        localStringBuilder.append("\"");
        paramString = localStringBuilder.toString();
        paramString = ((SQLiteDatabase)localObject).query(str1, new String[] { str2, str3, str4, str5, str6, str7, str8, str9, str10, str11, str12, str13, str14, str15, str16, str17, str18, str19 }, paramString, null, null, null, null);
        if (paramString != null)
        {
          if (paramString.moveToFirst())
          {
            localObject = new f();
            ((f)localObject).c(paramString.getString(0));
            ((f)localObject).b(paramString.getString(1));
            ((f)localObject).d(paramString.getString(2));
            ((f)localObject).e(paramString.getString(3));
            ((f)localObject).f(paramString.getString(4));
            ((f)localObject).g(paramString.getString(5));
            ((f)localObject).o(paramString.getString(6));
            ((f)localObject).j(paramString.getString(7));
            ((f)localObject).m(paramString.getString(8));
            ((f)localObject).r(paramString.getString(9));
            ((f)localObject).p(paramString.getString(10));
            ((f)localObject).k(paramString.getString(11));
            ((f)localObject).i(paramString.getString(12));
            ((f)localObject).l(paramString.getString(13));
            ((f)localObject).n(paramString.getString(14));
            ((f)localObject).q(paramString.getString(15));
            ((f)localObject).a(paramString.getString(16));
            ((f)localObject).h(paramString.getString(17));
            localArrayList.add(localObject);
            if (paramString.moveToNext()) {
              continue;
            }
          }
          paramString.close();
        }
      }
      catch (Exception paramString)
      {
        k.a.a.m.b.a(paramString);
      }
    }
    a();
    return localArrayList;
  }
  
  public ArrayList<String> g(String paramString1, String paramString2)
    throws SQLException
  {
    try
    {
      ArrayList localArrayList = new ArrayList();
      O();
      try
      {
        SQLiteDatabase localSQLiteDatabase = oc;
        String str1 = q;
        String str2 = Ya;
        StringBuilder localStringBuilder = new StringBuilder();
        localStringBuilder.append(L);
        localStringBuilder.append("=\"");
        localStringBuilder.append(paramString1);
        localStringBuilder.append("\" AND ");
        localStringBuilder.append(Sa);
        localStringBuilder.append("=\"");
        localStringBuilder.append(paramString2);
        localStringBuilder.append("\"");
        paramString1 = localStringBuilder.toString();
        paramString1 = localSQLiteDatabase.query(str1, new String[] { str2 }, paramString1, null, null, null, null);
        if (paramString1 != null)
        {
          if (paramString1.moveToFirst()) {
            do
            {
              localArrayList.add(paramString1.getString(0));
            } while (paramString1.moveToNext());
          }
          paramString1.close();
        }
      }
      catch (Exception paramString1)
      {
        k.a.a.m.b.a(paramString1);
      }
      a();
      return localArrayList;
    }
    finally {}
    for (;;)
    {
      throw paramString1;
    }
  }
  
  public void g()
  {
    try
    {
      O();
      try
      {
        oc.delete(k, null, null);
      }
      catch (Exception localException)
      {
        k.a.a.m.b.a(localException);
      }
      a();
      return;
    }
    finally {}
  }
  
  public ArrayList<String> h(String paramString)
    throws SQLException
  {
    try
    {
      ArrayList localArrayList = new ArrayList();
      O();
      try
      {
        SQLiteDatabase localSQLiteDatabase = oc;
        String str1 = o;
        String str2 = O;
        StringBuilder localStringBuilder = new StringBuilder();
        localStringBuilder.append(L);
        localStringBuilder.append("=\"");
        localStringBuilder.append(paramString);
        localStringBuilder.append("\"");
        paramString = localStringBuilder.toString();
        paramString = localSQLiteDatabase.query(str1, new String[] { str2 }, paramString, null, null, null, null);
        if (paramString != null)
        {
          if (paramString.moveToLast()) {
            do
            {
              localArrayList.add(paramString.getString(0));
            } while (paramString.moveToPrevious());
          }
          paramString.close();
        }
      }
      catch (Exception paramString)
      {
        k.a.a.m.b.a(paramString);
      }
      a();
      return localArrayList;
    }
    finally {}
    for (;;)
    {
      throw paramString;
    }
  }
  
  public z h(String paramString1, String paramString2)
    throws SQLException
  {
    try
    {
      O();
      try
      {
        SQLiteDatabase localSQLiteDatabase = oc;
        String str1 = r;
        String str2 = kb;
        String str3 = lb;
        String str4 = mb;
        String str5 = nb;
        String str6 = ob;
        String str7 = pb;
        String str8 = qb;
        String str9 = rb;
        String str10 = sb;
        String str11 = tb;
        String str12 = ub;
        StringBuilder localStringBuilder = new StringBuilder();
        localStringBuilder.append(jb);
        localStringBuilder.append("=\"");
        localStringBuilder.append(paramString1);
        localStringBuilder.append("\" AND ");
        localStringBuilder.append(kb);
        localStringBuilder.append("=\"");
        localStringBuilder.append(paramString2);
        localStringBuilder.append("\"");
        paramString1 = localStringBuilder.toString();
        paramString2 = localSQLiteDatabase.query(str1, new String[] { str2, str3, str4, str5, str6, str7, str8, str9, str10, str11, str12 }, paramString1, null, null, null, null);
        if (paramString2 != null)
        {
          if (paramString2.moveToFirst())
          {
            paramString1 = new z();
            try
            {
              paramString1.e(paramString2.getString(0));
              paramString1.f(paramString2.getString(1));
              paramString1.j(paramString2.getString(2));
              paramString1.a(paramString2.getString(3));
              paramString1.g(paramString2.getString(4));
              paramString1.i(paramString2.getString(5));
              paramString1.h(paramString2.getString(6));
              paramString1.k(paramString2.getString(7));
              paramString1.b(paramString2.getString(8));
              paramString1.c(paramString2.getString(9));
              paramString1.d(paramString2.getString(10));
            }
            catch (Exception paramString2)
            {
              break label409;
            }
          }
          else
          {
            paramString1 = null;
          }
          try
          {
            paramString2.close();
          }
          catch (Exception paramString2)
          {
            break label409;
          }
        }
        else
        {
          paramString1 = null;
        }
      }
      catch (Exception paramString2)
      {
        paramString1 = null;
        label409:
        k.a.a.m.b.a(paramString2);
      }
      a();
      return paramString1;
    }
    finally {}
  }
  
  public void h()
  {
    try
    {
      O();
      try
      {
        oc.delete(m, null, null);
      }
      catch (Exception localException)
      {
        k.a.a.m.b.a(localException);
      }
      a();
      return;
    }
    finally {}
  }
  
  public String i(String paramString)
    throws SQLException
  {
    String str2 = "en";
    try
    {
      O();
      String str1 = str2;
      try
      {
        Object localObject = oc;
        str1 = str2;
        String str3 = f;
        str1 = str2;
        String str4 = W;
        str1 = str2;
        StringBuilder localStringBuilder = new StringBuilder();
        str1 = str2;
        localStringBuilder.append(O);
        str1 = str2;
        localStringBuilder.append("=\"");
        str1 = str2;
        localStringBuilder.append(paramString);
        str1 = str2;
        localStringBuilder.append("\"");
        str1 = str2;
        paramString = localStringBuilder.toString();
        str1 = str2;
        localObject = ((SQLiteDatabase)localObject).query(str3, new String[] { str4 }, paramString, null, null, null, null);
        paramString = str2;
        if (localObject != null)
        {
          paramString = str2;
          str1 = str2;
          if (((Cursor)localObject).moveToFirst())
          {
            str1 = str2;
            paramString = ((Cursor)localObject).getString(0);
          }
          str1 = paramString;
          ((Cursor)localObject).close();
        }
      }
      catch (Exception paramString)
      {
        k.a.a.m.b.a(paramString);
        paramString = str1;
      }
      a();
      return paramString;
    }
    finally {}
  }
  
  public ArrayList<S> i(String paramString1, String paramString2)
    throws SQLException
  {
    for (;;)
    {
      try
      {
        localArrayList = new ArrayList();
        O();
      }
      finally
      {
        ArrayList localArrayList;
        SQLiteDatabase localSQLiteDatabase;
        String str1;
        String str2;
        String str3;
        String str4;
        String str5;
        String str6;
        String str7;
        String str8;
        String str9;
        String str10;
        String str11;
        String str12;
        String str13;
        String str14;
        String str15;
        String str16;
        String str17;
        String str18;
        String str19;
        String str20;
        String str21;
        String str22;
        String str23;
        String str24;
        String str25;
        String str26;
        String str27;
        String str28;
        String str29;
        String str30;
        String str31;
        String str32;
        String str33;
        String str34;
        String str35;
        String str36;
        String str37;
        String str38;
        String str39;
        String str40;
        String str41;
        String str42;
        String str43;
        String str44;
        String str45;
        String str46;
        Object localObject1;
        Object localObject2;
        continue;
        throw paramString1;
        continue;
        continue;
      }
      try
      {
        localSQLiteDatabase = oc;
        str1 = s;
        str2 = t;
        str3 = vb;
        str4 = wb;
        str5 = xb;
        str6 = yb;
        str7 = zb;
        str8 = Ab;
        str9 = Bb;
        str10 = Cb;
        str11 = Db;
        str12 = Eb;
        str13 = Fb;
        str14 = Gb;
        str15 = Hb;
        str16 = Ib;
        str17 = Jb;
        str18 = Kb;
        str19 = Lb;
        str20 = Mb;
        str21 = Nb;
        str22 = Ob;
        str23 = Pb;
        str24 = Qb;
        str25 = Rb;
        str26 = Sb;
        str27 = Tb;
        str28 = Ub;
        str29 = Vb;
        str30 = Wb;
        str31 = Xb;
        str32 = Yb;
        str33 = Zb;
        str34 = _b;
        str35 = ac;
        str36 = bc;
        str37 = cc;
        str38 = dc;
        str39 = ec;
        str40 = fc;
        str41 = gc;
        str42 = hc;
        str43 = ic;
        str44 = jc;
        str45 = kc;
        str46 = lc;
        localObject1 = new StringBuilder();
        ((StringBuilder)localObject1).append(Sb);
        ((StringBuilder)localObject1).append(">=? and ");
        ((StringBuilder)localObject1).append(Sb);
        ((StringBuilder)localObject1).append("<=?");
        localObject1 = ((StringBuilder)localObject1).toString();
        localObject2 = new StringBuilder();
        ((StringBuilder)localObject2).append(t);
        ((StringBuilder)localObject2).append(" DESC");
        localObject2 = ((StringBuilder)localObject2).toString();
        paramString1 = localSQLiteDatabase.query(str1, new String[] { str2, str3, str4, str5, str6, str7, str8, str9, str10, str11, str12, str13, str14, str15, str16, str17, str18, str19, str20, str21, str22, str23, str24, str25, str26, str27, str28, str29, str30, str31, str32, str33, str34, str35, str36, str37, str38, str39, str40, str41, str42, str43, str44, str45, str46 }, (String)localObject1, new String[] { paramString1, paramString2 }, null, null, (String)localObject2);
        if (paramString1 != null)
        {
          if (paramString1.moveToFirst())
          {
            paramString2 = new S();
            paramString2.f(paramString1.getString(0));
            paramString2.B(paramString1.getString(1));
            paramString2.g(paramString1.getString(2));
            paramString2.y(paramString1.getString(3));
            paramString2.F(paramString1.getString(4));
            paramString2.i(paramString1.getString(5));
            paramString2.L(paramString1.getString(6));
            paramString2.M(paramString1.getString(7));
            paramString2.p(paramString1.getString(8));
            paramString2.q(paramString1.getString(9));
            paramString2.H(paramString1.getString(10));
            paramString2.k(paramString1.getString(11));
            paramString2.O(paramString1.getString(12));
            paramString2.N(paramString1.getString(13));
            paramString2.s(paramString1.getString(14));
            paramString2.r(paramString1.getString(15));
            paramString2.P(paramString1.getString(16));
            paramString2.t(paramString1.getString(17));
            paramString2.c(paramString1.getString(18));
            paramString2.C(paramString1.getString(19));
            paramString2.e(paramString1.getString(20));
            paramString2.A(paramString1.getString(21));
            paramString2.G(paramString1.getString(22));
            paramString2.j(paramString1.getString(23));
            paramString2.Q(paramString1.getString(24));
            paramString2.u(paramString1.getString(25));
            paramString2.R(paramString1.getString(26));
            paramString2.I(paramString1.getString(27));
            paramString2.n(paramString1.getString(28));
            paramString2.l(paramString1.getString(29));
            paramString2.K(paramString1.getString(30));
            paramString2.n(paramString1.getString(31));
            paramString2.J(paramString1.getString(32));
            paramString2.m(paramString1.getString(33));
            paramString2.E(paramString1.getString(34));
            paramString2.b(paramString1.getString(35));
            paramString2.x(paramString1.getString(36));
            paramString2.w(paramString1.getString(37));
            paramString2.d(paramString1.getString(38));
            paramString2.D(paramString1.getString(39));
            paramString2.S(paramString1.getString(40));
            paramString2.a(paramString1.getString(41));
            paramString2.h(paramString1.getString(42));
            paramString2.v(paramString1.getString(43));
            paramString2.z(paramString1.getString(44));
            localArrayList.add(paramString2);
            if (paramString1.moveToNext()) {
              continue;
            }
          }
          paramString1.close();
        }
      }
      catch (Exception paramString1)
      {
        k.a.a.m.b.a(paramString1);
      }
    }
    a();
    return localArrayList;
  }
  
  public void i()
  {
    try
    {
      O();
      try
      {
        oc.delete(h, null, null);
      }
      catch (Exception localException)
      {
        k.a.a.m.b.a(localException);
      }
      a();
      return;
    }
    finally {}
  }
  
  public String j(String paramString)
    throws SQLException
  {
    String str2 = "";
    try
    {
      O();
      String str1 = str2;
      try
      {
        Object localObject1 = oc;
        str1 = str2;
        String str3 = f;
        str1 = str2;
        String str4 = O;
        str1 = str2;
        String str5 = P;
        str1 = str2;
        String str6 = Q;
        str1 = str2;
        String str7 = R;
        str1 = str2;
        String str8 = T;
        str1 = str2;
        String str9 = U;
        str1 = str2;
        String str10 = V;
        str1 = str2;
        String str11 = W;
        str1 = str2;
        String str12 = X;
        str1 = str2;
        String str13 = Y;
        str1 = str2;
        String str14 = Z;
        str1 = str2;
        String str15 = aa;
        str1 = str2;
        String str16 = ba;
        str1 = str2;
        String str17 = ca;
        str1 = str2;
        String str18 = da;
        str1 = str2;
        String str19 = ea;
        str1 = str2;
        String str20 = fa;
        str1 = str2;
        String str21 = ga;
        str1 = str2;
        String str22 = ha;
        str1 = str2;
        String str23 = ia;
        str1 = str2;
        String str24 = ja;
        str1 = str2;
        String str25 = S;
        str1 = str2;
        String str26 = ka;
        str1 = str2;
        String str27 = oa;
        str1 = str2;
        String str28 = pa;
        str1 = str2;
        String str29 = ta;
        str1 = str2;
        String str30 = ua;
        str1 = str2;
        Object localObject2 = new StringBuilder();
        str1 = str2;
        ((StringBuilder)localObject2).append("(");
        str1 = str2;
        ((StringBuilder)localObject2).append(X);
        str1 = str2;
        ((StringBuilder)localObject2).append("=\"");
        str1 = str2;
        ((StringBuilder)localObject2).append(paramString);
        str1 = str2;
        ((StringBuilder)localObject2).append("\" OR ");
        str1 = str2;
        ((StringBuilder)localObject2).append(oa);
        str1 = str2;
        ((StringBuilder)localObject2).append(" LIKE '%|");
        str1 = str2;
        ((StringBuilder)localObject2).append(paramString);
        str1 = str2;
        ((StringBuilder)localObject2).append("|%') AND ");
        str1 = str2;
        ((StringBuilder)localObject2).append(qa);
        str1 = str2;
        ((StringBuilder)localObject2).append("!=\"I\"");
        str1 = str2;
        paramString = ((StringBuilder)localObject2).toString();
        str1 = str2;
        localObject2 = new StringBuilder();
        str1 = str2;
        ((StringBuilder)localObject2).append(P);
        str1 = str2;
        ((StringBuilder)localObject2).append(" COLLATE NOCASE ASC");
        str1 = str2;
        localObject2 = ((StringBuilder)localObject2).toString();
        str1 = str2;
        localObject1 = ((SQLiteDatabase)localObject1).query(str3, new String[] { str4, str5, str6, str7, str8, str9, str10, str11, str12, str13, str14, str15, str16, str17, str18, str19, str20, str21, str22, str23, str24, str25, str26, str27, str28, str29, str30 }, paramString, null, null, null, (String)localObject2);
        str1 = str2;
        if (localObject1 != null)
        {
          str1 = str2;
          paramString = new StringBuilder();
          str1 = str2;
          paramString.append("");
          str1 = str2;
          paramString.append(((Cursor)localObject1).getCount());
          str1 = str2;
          paramString = paramString.toString();
          str1 = paramString;
          ((Cursor)localObject1).close();
          str1 = paramString;
        }
      }
      catch (Exception paramString)
      {
        k.a.a.m.b.a(paramString);
      }
      a();
      return str1;
    }
    finally {}
  }
  
  public void j()
  {
    try
    {
      O();
      try
      {
        oc.delete(e, null, null);
      }
      catch (Exception localException)
      {
        k.a.a.m.b.a(localException);
      }
      a();
      return;
    }
    finally {}
  }
  
  public void j(String paramString1, String paramString2)
  {
    try
    {
      O();
      try
      {
        ContentValues localContentValues = new ContentValues();
        localContentValues.put(L, paramString1);
        localContentValues.put(O, paramString2);
        oc.insert(o, null, localContentValues);
      }
      catch (Exception paramString1)
      {
        k.a.a.m.b.a(paramString1);
      }
      a();
      return;
    }
    finally {}
  }
  
  public ArrayList<u> k(String paramString)
    throws SQLException
  {
    for (;;)
    {
      try
      {
        localArrayList = new ArrayList();
        O();
      }
      finally
      {
        ArrayList localArrayList;
        Object localObject1;
        String str1;
        String str2;
        String str3;
        String str4;
        String str5;
        String str6;
        String str7;
        String str8;
        String str9;
        String str10;
        String str11;
        String str12;
        String str13;
        String str14;
        String str15;
        String str16;
        String str17;
        String str18;
        String str19;
        String str20;
        String str21;
        String str22;
        String str23;
        String str24;
        String str25;
        String str26;
        String str27;
        String str28;
        String str29;
        Object localObject2;
        continue;
        throw paramString;
        continue;
        continue;
      }
      try
      {
        localObject1 = oc;
        str1 = f;
        str2 = O;
        str3 = P;
        str4 = Q;
        str5 = R;
        str6 = T;
        str7 = U;
        str8 = V;
        str9 = W;
        str10 = X;
        str11 = Y;
        str12 = Z;
        str13 = aa;
        str14 = ba;
        str15 = ca;
        str16 = da;
        str17 = ea;
        str18 = fa;
        str19 = ga;
        str20 = ha;
        str21 = ia;
        str22 = ja;
        str23 = S;
        str24 = ka;
        str25 = oa;
        str26 = pa;
        str27 = qa;
        str28 = ta;
        str29 = ua;
        localObject2 = new StringBuilder();
        ((StringBuilder)localObject2).append("(");
        ((StringBuilder)localObject2).append(X);
        ((StringBuilder)localObject2).append("=\"");
        ((StringBuilder)localObject2).append(paramString);
        ((StringBuilder)localObject2).append("\" OR ");
        ((StringBuilder)localObject2).append(oa);
        ((StringBuilder)localObject2).append(" LIKE '%|");
        ((StringBuilder)localObject2).append(paramString);
        ((StringBuilder)localObject2).append("|%') AND ");
        ((StringBuilder)localObject2).append(qa);
        ((StringBuilder)localObject2).append("!=\"I\"");
        paramString = ((StringBuilder)localObject2).toString();
        localObject2 = new StringBuilder();
        ((StringBuilder)localObject2).append(P);
        ((StringBuilder)localObject2).append(" COLLATE NOCASE ASC");
        localObject2 = ((StringBuilder)localObject2).toString();
        paramString = ((SQLiteDatabase)localObject1).query(str1, new String[] { str2, str3, str4, str5, str6, str7, str8, str9, str10, str11, str12, str13, str14, str15, str16, str17, str18, str19, str20, str21, str22, str23, str24, str25, str26, str27, str28, str29 }, paramString, null, null, null, (String)localObject2);
        if (paramString != null)
        {
          if (paramString.moveToFirst())
          {
            localObject1 = new u();
            ((u)localObject1).j(paramString.getString(0));
            ((u)localObject1).o(paramString.getString(1));
            ((u)localObject1).a(paramString.getString(2));
            ((u)localObject1).k(paramString.getString(3));
            ((u)localObject1).f(paramString.getString(4));
            ((u)localObject1).w(paramString.getString(5));
            ((u)localObject1).t(paramString.getString(6));
            ((u)localObject1).y(paramString.getString(7));
            ((u)localObject1).v(paramString.getString(8));
            ((u)localObject1).b(paramString.getString(9));
            ((u)localObject1).c(paramString.getString(10));
            ((u)localObject1).b(Boolean.parseBoolean(paramString.getString(11)));
            ((u)localObject1).a(Boolean.parseBoolean(paramString.getString(12)));
            ((u)localObject1).r(paramString.getString(13));
            ((u)localObject1).c(Boolean.parseBoolean(paramString.getString(14)));
            ((u)localObject1).z(paramString.getString(15));
            ((u)localObject1).i(paramString.getString(16));
            ((u)localObject1).d(paramString.getString(17));
            ((u)localObject1).A(paramString.getString(18));
            ((u)localObject1).l(paramString.getString(19));
            ((u)localObject1).s(paramString.getString(20));
            ((u)localObject1).g(paramString.getString(21));
            ((u)localObject1).u(paramString.getString(22));
            ((u)localObject1).p(paramString.getString(23));
            ((u)localObject1).q(paramString.getString(24));
            ((u)localObject1).x(paramString.getString(25));
            ((u)localObject1).n(paramString.getString(26));
            ((u)localObject1).m(paramString.getString(27));
            localArrayList.add(localObject1);
            if (paramString.moveToNext()) {
              continue;
            }
          }
          paramString.close();
        }
      }
      catch (Exception paramString)
      {
        k.a.a.m.b.a(paramString);
      }
    }
    a();
    return localArrayList;
  }
  
  public void k()
  {
    try
    {
      O();
      try
      {
        oc.delete(p, null, null);
      }
      catch (Exception localException)
      {
        k.a.a.m.b.a(localException);
      }
      a();
      return;
    }
    finally {}
  }
  
  public void k(String paramString1, String paramString2)
  {
    try
    {
      O();
      try
      {
        ContentValues localContentValues = new ContentValues();
        localContentValues.put(C, paramString2);
        paramString2 = oc;
        String str = d;
        StringBuilder localStringBuilder = new StringBuilder();
        localStringBuilder.append(u);
        localStringBuilder.append("=\"");
        localStringBuilder.append(paramString1);
        localStringBuilder.append("\"");
        paramString2.update(str, localContentValues, localStringBuilder.toString(), null);
      }
      catch (Exception paramString1)
      {
        k.a.a.m.b.a(paramString1);
      }
      a();
      return;
    }
    finally {}
  }
  
  public u l(String paramString)
    throws SQLException
  {
    try
    {
      O();
      try
      {
        Object localObject = oc;
        String str1 = f;
        String str2 = O;
        String str3 = P;
        String str4 = Q;
        String str5 = R;
        String str6 = T;
        String str7 = U;
        String str8 = V;
        String str9 = W;
        String str10 = X;
        String str11 = Y;
        String str12 = Z;
        String str13 = aa;
        String str14 = ba;
        String str15 = ca;
        String str16 = da;
        String str17 = ea;
        String str18 = fa;
        String str19 = ga;
        String str20 = ha;
        String str21 = ia;
        String str22 = ja;
        String str23 = S;
        String str24 = ka;
        String str25 = oa;
        String str26 = pa;
        String str27 = qa;
        String str28 = ta;
        String str29 = ua;
        StringBuilder localStringBuilder = new StringBuilder();
        localStringBuilder.append(O);
        localStringBuilder.append("=\"");
        localStringBuilder.append(paramString);
        localStringBuilder.append("\"");
        paramString = localStringBuilder.toString();
        localObject = ((SQLiteDatabase)localObject).query(str1, new String[] { str2, str3, str4, str5, str6, str7, str8, str9, str10, str11, str12, str13, str14, str15, str16, str17, str18, str19, str20, str21, str22, str23, str24, str25, str26, str27, str28, str29 }, paramString, null, null, null, null);
        if (localObject != null)
        {
          if (((Cursor)localObject).moveToFirst())
          {
            paramString = new u();
            try
            {
              paramString.j(((Cursor)localObject).getString(0));
              paramString.o(((Cursor)localObject).getString(1));
              paramString.a(((Cursor)localObject).getString(2));
              paramString.k(((Cursor)localObject).getString(3));
              paramString.f(((Cursor)localObject).getString(4));
              paramString.w(((Cursor)localObject).getString(5));
              paramString.t(((Cursor)localObject).getString(6));
              paramString.y(((Cursor)localObject).getString(7));
              paramString.v(((Cursor)localObject).getString(8));
              paramString.b(((Cursor)localObject).getString(9));
              paramString.c(((Cursor)localObject).getString(10));
              paramString.b(Boolean.parseBoolean(((Cursor)localObject).getString(11)));
              paramString.a(Boolean.parseBoolean(((Cursor)localObject).getString(12)));
              paramString.r(((Cursor)localObject).getString(13));
              paramString.c(Boolean.parseBoolean(((Cursor)localObject).getString(14)));
              paramString.z(((Cursor)localObject).getString(15));
              paramString.i(((Cursor)localObject).getString(16));
              paramString.d(((Cursor)localObject).getString(17));
              paramString.A(((Cursor)localObject).getString(18));
              paramString.l(((Cursor)localObject).getString(19));
              paramString.s(((Cursor)localObject).getString(20));
              paramString.g(((Cursor)localObject).getString(21));
              paramString.u(((Cursor)localObject).getString(22));
              paramString.p(((Cursor)localObject).getString(23));
              paramString.q(((Cursor)localObject).getString(24));
              paramString.x(((Cursor)localObject).getString(25));
              paramString.n(((Cursor)localObject).getString(26));
              paramString.m(((Cursor)localObject).getString(27));
            }
            catch (Exception localException1)
            {
              break label773;
            }
          }
          else
          {
            paramString = null;
          }
          try
          {
            localException1.close();
          }
          catch (Exception localException2)
          {
            break label773;
          }
        }
        else
        {
          paramString = null;
        }
      }
      catch (Exception localException3)
      {
        paramString = null;
        label773:
        k.a.a.m.b.a(localException3);
      }
      a();
      return paramString;
    }
    finally {}
  }
  
  public void l()
  {
    try
    {
      O();
      try
      {
        oc.delete(n, null, null);
      }
      catch (Exception localException)
      {
        k.a.a.m.b.a(localException);
      }
      a();
      return;
    }
    finally {}
  }
  
  public void l(String paramString1, String paramString2)
  {
    try
    {
      O();
      try
      {
        ContentValues localContentValues = new ContentValues();
        localContentValues.put(aa, paramString2);
        paramString2 = oc;
        String str = e;
        StringBuilder localStringBuilder = new StringBuilder();
        localStringBuilder.append(O);
        localStringBuilder.append("=\"");
        localStringBuilder.append(paramString1);
        localStringBuilder.append("\"");
        paramString2.update(str, localContentValues, localStringBuilder.toString(), null);
      }
      catch (Exception paramString1)
      {
        k.a.a.m.b.a(paramString1);
      }
      a();
      return;
    }
    finally {}
  }
  
  public String m(String paramString)
    throws SQLException
  {
    String str2 = "en";
    try
    {
      O();
      String str1 = str2;
      try
      {
        Object localObject = oc;
        str1 = str2;
        String str3 = f;
        str1 = str2;
        String str4 = ia;
        str1 = str2;
        StringBuilder localStringBuilder = new StringBuilder();
        str1 = str2;
        localStringBuilder.append(O);
        str1 = str2;
        localStringBuilder.append("=\"");
        str1 = str2;
        localStringBuilder.append(paramString);
        str1 = str2;
        localStringBuilder.append("\"");
        str1 = str2;
        paramString = localStringBuilder.toString();
        str1 = str2;
        localObject = ((SQLiteDatabase)localObject).query(str3, new String[] { str4 }, paramString, null, null, null, null);
        paramString = str2;
        if (localObject != null)
        {
          paramString = str2;
          str1 = str2;
          if (((Cursor)localObject).moveToFirst())
          {
            str1 = str2;
            paramString = ((Cursor)localObject).getString(0);
          }
          str1 = paramString;
          ((Cursor)localObject).close();
        }
      }
      catch (Exception paramString)
      {
        k.a.a.m.b.a(paramString);
        paramString = str1;
      }
      a();
      return paramString;
    }
    finally {}
  }
  
  public ArrayList<d> m()
    throws SQLException
  {
    try
    {
      ArrayList localArrayList = new ArrayList();
      O();
      try
      {
        Cursor localCursor = oc.query(i, new String[] { za, Aa, Ba, Ca, Da }, null, null, null, null, null);
        if (localCursor != null)
        {
          if (localCursor.moveToFirst()) {
            do
            {
              d localD = new d();
              localD.e(localCursor.getString(0));
              localD.a(localCursor.getString(1));
              localD.b(localCursor.getString(2));
              localD.d(localCursor.getString(3));
              localD.c(localCursor.getString(4));
              localArrayList.add(localD);
            } while (localCursor.moveToNext());
          }
          localCursor.close();
        }
      }
      catch (Exception localException)
      {
        k.a.a.m.b.a(localException);
      }
      a();
      return localArrayList;
    }
    finally {}
    for (;;)
    {
      throw localObject;
    }
  }
  
  public void m(String paramString1, String paramString2)
  {
    try
    {
      O();
      try
      {
        ContentValues localContentValues = new ContentValues();
        localContentValues.put(da, paramString2);
        paramString2 = oc;
        String str = e;
        StringBuilder localStringBuilder = new StringBuilder();
        localStringBuilder.append(O);
        localStringBuilder.append("=\"");
        localStringBuilder.append(paramString1);
        localStringBuilder.append("\"");
        paramString2.update(str, localContentValues, localStringBuilder.toString(), null);
      }
      catch (Exception paramString1)
      {
        k.a.a.m.b.a(paramString1);
      }
      a();
      return;
    }
    finally {}
  }
  
  public ArrayList<d> n()
    throws SQLException
  {
    try
    {
      ArrayList localArrayList = new ArrayList();
      O();
      try
      {
        Cursor localCursor = oc.query(j, new String[] { za, Aa, Ba, Ca, Da, qa }, null, null, null, null, null);
        if (localCursor != null)
        {
          if (localCursor.moveToFirst()) {
            do
            {
              d localD = new d();
              localD.e(localCursor.getString(0));
              localD.a(localCursor.getString(1));
              localD.b(localCursor.getString(2));
              localD.d(localCursor.getString(3));
              localD.c(localCursor.getString(4));
              localD.f(localCursor.getString(5));
              localArrayList.add(localD);
            } while (localCursor.moveToNext());
          }
          localCursor.close();
        }
      }
      catch (Exception localException)
      {
        k.a.a.m.b.a(localException);
      }
      a();
      return localArrayList;
    }
    finally {}
    for (;;)
    {
      throw localObject;
    }
  }
  
  public ArrayList<z> n(String paramString)
    throws SQLException
  {
    try
    {
      ArrayList localArrayList = new ArrayList();
      O();
      try
      {
        Object localObject = oc;
        String str1 = r;
        String str2 = kb;
        String str3 = lb;
        String str4 = mb;
        String str5 = nb;
        String str6 = ob;
        String str7 = pb;
        String str8 = qb;
        String str9 = rb;
        String str10 = sb;
        String str11 = tb;
        String str12 = ub;
        StringBuilder localStringBuilder = new StringBuilder();
        localStringBuilder.append(jb);
        localStringBuilder.append("=\"");
        localStringBuilder.append(paramString);
        localStringBuilder.append("\"");
        paramString = localStringBuilder.toString();
        paramString = ((SQLiteDatabase)localObject).query(str1, new String[] { str2, str3, str4, str5, str6, str7, str8, str9, str10, str11, str12 }, paramString, null, null, null, null);
        if (paramString != null)
        {
          if (paramString.moveToFirst()) {
            do
            {
              localObject = new z();
              ((z)localObject).e(paramString.getString(0));
              ((z)localObject).f(paramString.getString(1));
              ((z)localObject).j(paramString.getString(2));
              ((z)localObject).a(paramString.getString(3));
              ((z)localObject).g(paramString.getString(4));
              ((z)localObject).i(paramString.getString(5));
              ((z)localObject).h(paramString.getString(6));
              ((z)localObject).k(paramString.getString(7));
              ((z)localObject).b(paramString.getString(8));
              ((z)localObject).c(paramString.getString(9));
              ((z)localObject).d(paramString.getString(10));
              localArrayList.add(localObject);
            } while (paramString.moveToNext());
          }
          paramString.close();
        }
      }
      catch (Exception paramString)
      {
        k.a.a.m.b.a(paramString);
      }
      a();
      return localArrayList;
    }
    finally {}
    for (;;)
    {
      throw paramString;
    }
  }
  
  public void n(String paramString1, String paramString2)
  {
    try
    {
      O();
      try
      {
        ContentValues localContentValues = new ContentValues();
        localContentValues.put(ja, paramString2);
        paramString2 = oc;
        String str = e;
        StringBuilder localStringBuilder = new StringBuilder();
        localStringBuilder.append(O);
        localStringBuilder.append("=\"");
        localStringBuilder.append(paramString1);
        localStringBuilder.append("\"");
        paramString2.update(str, localContentValues, localStringBuilder.toString(), null);
      }
      catch (Exception paramString1)
      {
        k.a.a.m.b.a(paramString1);
      }
      a();
      return;
    }
    finally {}
  }
  
  public ArrayList<d> o()
    throws SQLException
  {
    try
    {
      ArrayList localArrayList = new ArrayList();
      O();
      try
      {
        Cursor localCursor = oc.query(k, new String[] { za, Aa, Ba, Ca, Da }, null, null, null, null, null);
        if (localCursor != null)
        {
          if (localCursor.moveToFirst()) {
            do
            {
              d localD = new d();
              localD.e(localCursor.getString(0));
              localD.a(localCursor.getString(1));
              localD.b(localCursor.getString(2));
              localD.d(localCursor.getString(3));
              localD.c(localCursor.getString(4));
              localArrayList.add(localD);
            } while (localCursor.moveToNext());
          }
          localCursor.close();
        }
      }
      catch (Exception localException)
      {
        k.a.a.m.b.a(localException);
      }
      a();
      return localArrayList;
    }
    finally {}
    for (;;)
    {
      throw localObject;
    }
  }
  
  public ArrayList<C> o(String paramString)
    throws SQLException
  {
    for (;;)
    {
      try
      {
        localArrayList = new ArrayList();
        O();
      }
      finally
      {
        ArrayList localArrayList;
        Object localObject1;
        Object localObject2;
        String str1;
        String str2;
        String str3;
        String str4;
        String str5;
        String str6;
        String str7;
        String str8;
        String str9;
        String str10;
        String str11;
        String str12;
        String str13;
        String str14;
        String str15;
        String str16;
        String str17;
        String str18;
        String str19;
        String str20;
        String str21;
        Object localObject3;
        continue;
        throw paramString;
        continue;
        continue;
      }
      try
      {
        localObject1 = oc;
        localObject2 = d;
        str1 = u;
        str2 = v;
        str3 = w;
        str4 = x;
        str5 = y;
        str6 = z;
        str7 = A;
        str8 = B;
        str9 = C;
        str10 = O;
        str11 = D;
        str12 = E;
        str13 = F;
        str14 = G;
        str15 = H;
        str16 = I;
        str17 = J;
        str18 = K;
        str19 = L;
        str20 = M;
        str21 = N;
        localObject3 = new StringBuilder();
        ((StringBuilder)localObject3).append(L);
        ((StringBuilder)localObject3).append("=\"");
        ((StringBuilder)localObject3).append(paramString);
        ((StringBuilder)localObject3).append("\"");
        paramString = ((StringBuilder)localObject3).toString();
        localObject3 = new StringBuilder();
        ((StringBuilder)localObject3).append(D);
        ((StringBuilder)localObject3).append(" DESC");
        localObject3 = ((StringBuilder)localObject3).toString();
        localObject1 = ((SQLiteDatabase)localObject1).query((String)localObject2, new String[] { str1, str2, str3, str4, str5, str6, str7, str8, str9, str10, str11, str12, str13, str14, str15, str16, str17, str18, str19, str20, str21 }, paramString, null, null, null, (String)localObject3);
        if (localObject1 != null)
        {
          if (((Cursor)localObject1).moveToFirst())
          {
            localObject2 = new C();
            if (((Cursor)localObject1).getString(0) == null) {
              paramString = "";
            } else {
              paramString = ((Cursor)localObject1).getString(0);
            }
            ((C)localObject2).h(paramString);
            if (((Cursor)localObject1).getString(1) == null) {
              paramString = "";
            } else {
              paramString = ((Cursor)localObject1).getString(1);
            }
            ((C)localObject2).p(paramString);
            if (((Cursor)localObject1).getString(2) == null) {
              paramString = "";
            } else {
              paramString = ((Cursor)localObject1).getString(2);
            }
            ((C)localObject2).e(paramString);
            if (((Cursor)localObject1).getString(3) == null) {
              paramString = "";
            } else {
              paramString = ((Cursor)localObject1).getString(3);
            }
            ((C)localObject2).g(paramString);
            if (((Cursor)localObject1).getString(4) == null) {
              paramString = "";
            } else {
              paramString = ((Cursor)localObject1).getString(4);
            }
            ((C)localObject2).q(paramString);
            if (((Cursor)localObject1).getString(5) == null) {
              paramString = "";
            } else {
              paramString = ((Cursor)localObject1).getString(5);
            }
            ((C)localObject2).b(paramString);
            if (((Cursor)localObject1).getString(6) == null) {
              paramString = "";
            } else {
              paramString = ((Cursor)localObject1).getString(6);
            }
            ((C)localObject2).o(paramString);
            if (((Cursor)localObject1).getString(7) == null) {
              paramString = "";
            } else {
              paramString = ((Cursor)localObject1).getString(7);
            }
            ((C)localObject2).m(paramString);
            ((C)localObject2).a(Boolean.parseBoolean(((Cursor)localObject1).getString(8)));
            if (((Cursor)localObject1).getString(9) == null) {
              paramString = "";
            } else {
              paramString = ((Cursor)localObject1).getString(9);
            }
            ((C)localObject2).k(paramString);
            if (((Cursor)localObject1).getString(10) == null) {
              paramString = "";
            } else {
              paramString = ((Cursor)localObject1).getString(10);
            }
            ((C)localObject2).a(paramString);
            if (((Cursor)localObject1).getString(11) == null) {
              paramString = "";
            } else {
              paramString = ((Cursor)localObject1).getString(11);
            }
            ((C)localObject2).n(paramString);
            if (((Cursor)localObject1).getString(12) == null) {
              paramString = "";
            } else {
              paramString = ((Cursor)localObject1).getString(12);
            }
            ((C)localObject2).r(paramString);
            if (((Cursor)localObject1).getString(13) == null) {
              paramString = "";
            } else {
              paramString = ((Cursor)localObject1).getString(13);
            }
            ((C)localObject2).j(paramString);
            if (((Cursor)localObject1).getString(14) == null) {
              paramString = "";
            } else {
              paramString = ((Cursor)localObject1).getString(14);
            }
            ((C)localObject2).i(paramString);
            if (((Cursor)localObject1).getString(15) == null) {
              paramString = "";
            } else {
              paramString = ((Cursor)localObject1).getString(15);
            }
            ((C)localObject2).d(paramString);
            if (((Cursor)localObject1).getString(16) == null) {
              paramString = "";
            } else {
              paramString = ((Cursor)localObject1).getString(16);
            }
            ((C)localObject2).t(paramString);
            if (((Cursor)localObject1).getString(17) == null) {
              paramString = "";
            } else {
              paramString = ((Cursor)localObject1).getString(17);
            }
            ((C)localObject2).f(paramString);
            if (((Cursor)localObject1).getString(18) == null) {
              paramString = "";
            } else {
              paramString = ((Cursor)localObject1).getString(18);
            }
            ((C)localObject2).s(paramString);
            if (((Cursor)localObject1).getString(19) == null) {
              paramString = "";
            } else {
              paramString = ((Cursor)localObject1).getString(19);
            }
            ((C)localObject2).c(paramString);
            if (((Cursor)localObject1).getString(20) == null) {
              paramString = "";
            } else {
              paramString = ((Cursor)localObject1).getString(20);
            }
            ((C)localObject2).l(paramString);
            ((C)localObject2).b(false);
            localArrayList.add(localObject2);
            paramString = new StringBuilder();
            paramString.append("notifid : ");
            paramString.append(((Cursor)localObject1).getString(0));
            paramString.toString();
            paramString = new StringBuilder();
            paramString.append("isfav : ");
            paramString.append(((Cursor)localObject1).getString(8));
            paramString.toString();
            if (((Cursor)localObject1).moveToNext()) {
              continue;
            }
          }
          ((Cursor)localObject1).close();
        }
      }
      catch (Exception paramString)
      {
        k.a.a.m.b.a(paramString);
      }
    }
    a();
    return localArrayList;
  }
  
  public void o(String paramString1, String paramString2)
  {
    try
    {
      O();
      try
      {
        ContentValues localContentValues = new ContentValues();
        localContentValues.put(Ra, paramString2);
        paramString2 = oc;
        String str = p;
        StringBuilder localStringBuilder = new StringBuilder();
        localStringBuilder.append(Fa);
        localStringBuilder.append("=\"");
        localStringBuilder.append(paramString1);
        localStringBuilder.append("\"");
        paramString2.update(str, localContentValues, localStringBuilder.toString(), null);
      }
      catch (Exception paramString1)
      {
        k.a.a.m.b.a(paramString1);
      }
      a();
      return;
    }
    finally {}
  }
  
  public void onCreate(SQLiteDatabase paramSQLiteDatabase)
  {
    StringBuilder localStringBuilder = f.a.a.a.a.b("create table ");
    localStringBuilder.append(d);
    localStringBuilder.append(" ( ");
    localStringBuilder.append(t);
    localStringBuilder.append(" integer primary key autoincrement not null,");
    localStringBuilder.append(u);
    localStringBuilder.append(" text not null unique,");
    localStringBuilder.append(v);
    localStringBuilder.append(" text,");
    localStringBuilder.append(w);
    localStringBuilder.append(" text,");
    localStringBuilder.append(x);
    localStringBuilder.append(" text,");
    localStringBuilder.append(y);
    localStringBuilder.append(" text,");
    localStringBuilder.append(z);
    localStringBuilder.append(" text,");
    localStringBuilder.append(A);
    localStringBuilder.append(" text,");
    localStringBuilder.append(B);
    localStringBuilder.append(" text,");
    localStringBuilder.append(C);
    localStringBuilder.append(" text,");
    localStringBuilder.append(O);
    localStringBuilder.append(" text,");
    localStringBuilder.append(D);
    localStringBuilder.append(" text,");
    localStringBuilder.append(E);
    localStringBuilder.append(" text,");
    localStringBuilder.append(F);
    localStringBuilder.append(" text,");
    localStringBuilder.append(G);
    localStringBuilder.append(" text,");
    localStringBuilder.append(H);
    localStringBuilder.append(" text,");
    localStringBuilder.append(I);
    localStringBuilder.append(" text,");
    localStringBuilder.append(J);
    localStringBuilder.append(" text,");
    localStringBuilder.append(K);
    localStringBuilder.append(" text,");
    localStringBuilder.append(L);
    localStringBuilder.append(" text,");
    localStringBuilder.append(M);
    localStringBuilder.append(" text,");
    localStringBuilder = f.a.a.a.a.a(localStringBuilder, N, " text );", paramSQLiteDatabase, "create table ");
    localStringBuilder.append(e);
    localStringBuilder.append(" ( ");
    localStringBuilder.append(t);
    localStringBuilder.append(" integer primary key autoincrement not null,");
    localStringBuilder.append(O);
    localStringBuilder.append(" text not null unique,");
    localStringBuilder.append(P);
    localStringBuilder.append(" text,");
    localStringBuilder.append(Q);
    localStringBuilder.append(" text,");
    localStringBuilder.append(R);
    localStringBuilder.append(" text,");
    localStringBuilder.append(T);
    localStringBuilder.append(" text,");
    localStringBuilder.append(U);
    localStringBuilder.append(" text,");
    localStringBuilder.append(V);
    localStringBuilder.append(" text,");
    localStringBuilder.append(W);
    localStringBuilder.append(" text,");
    localStringBuilder.append(X);
    localStringBuilder.append(" text,");
    localStringBuilder.append(Y);
    localStringBuilder.append(" text,");
    localStringBuilder.append(Z);
    localStringBuilder.append(" text,");
    localStringBuilder.append(aa);
    localStringBuilder.append(" text,");
    localStringBuilder.append(ba);
    localStringBuilder.append(" text,");
    localStringBuilder.append(ca);
    localStringBuilder.append(" text,");
    localStringBuilder.append(da);
    localStringBuilder.append(" text,");
    localStringBuilder.append(ea);
    localStringBuilder.append(" text,");
    localStringBuilder.append(fa);
    localStringBuilder.append(" text,");
    localStringBuilder.append(ga);
    localStringBuilder.append(" text,");
    localStringBuilder.append(ha);
    localStringBuilder.append(" text,");
    localStringBuilder.append(ia);
    localStringBuilder.append(" text,");
    localStringBuilder.append(ja);
    localStringBuilder.append(" text,");
    localStringBuilder.append(S);
    localStringBuilder.append(" text,");
    localStringBuilder.append(ka);
    localStringBuilder.append(" text,");
    localStringBuilder.append(oa);
    localStringBuilder.append(" text,");
    localStringBuilder.append(pa);
    localStringBuilder.append(" text,");
    localStringBuilder.append(qa);
    localStringBuilder.append(" text,");
    localStringBuilder.append(sa);
    localStringBuilder.append(" text,");
    localStringBuilder.append(ta);
    localStringBuilder.append(" text,");
    localStringBuilder = f.a.a.a.a.a(localStringBuilder, ua, " text );", paramSQLiteDatabase, "create table ");
    localStringBuilder.append(f);
    localStringBuilder.append(" ( ");
    localStringBuilder.append(t);
    localStringBuilder.append(" integer primary key autoincrement not null,");
    localStringBuilder.append(O);
    localStringBuilder.append(" text not null unique,");
    localStringBuilder.append(P);
    localStringBuilder.append(" text,");
    localStringBuilder.append(Q);
    localStringBuilder.append(" text,");
    localStringBuilder.append(R);
    localStringBuilder.append(" text,");
    localStringBuilder.append(T);
    localStringBuilder.append(" text,");
    localStringBuilder.append(U);
    localStringBuilder.append(" text,");
    localStringBuilder.append(V);
    localStringBuilder.append(" text,");
    localStringBuilder.append(W);
    localStringBuilder.append(" text,");
    localStringBuilder.append(X);
    localStringBuilder.append(" text,");
    localStringBuilder.append(Y);
    localStringBuilder.append(" text,");
    localStringBuilder.append(Z);
    localStringBuilder.append(" text,");
    localStringBuilder.append(aa);
    localStringBuilder.append(" text,");
    localStringBuilder.append(ba);
    localStringBuilder.append(" text,");
    localStringBuilder.append(ca);
    localStringBuilder.append(" text,");
    localStringBuilder.append(da);
    localStringBuilder.append(" text,");
    localStringBuilder.append(ea);
    localStringBuilder.append(" text,");
    localStringBuilder.append(fa);
    localStringBuilder.append(" text,");
    localStringBuilder.append(ga);
    localStringBuilder.append(" text,");
    localStringBuilder.append(ha);
    localStringBuilder.append(" text,");
    localStringBuilder.append(ia);
    localStringBuilder.append(" text,");
    localStringBuilder.append(ja);
    localStringBuilder.append(" text,");
    localStringBuilder.append(S);
    localStringBuilder.append(" text,");
    localStringBuilder.append(ka);
    localStringBuilder.append(" text,");
    localStringBuilder.append(oa);
    localStringBuilder.append(" text,");
    localStringBuilder.append(pa);
    localStringBuilder.append(" text,");
    localStringBuilder.append(qa);
    localStringBuilder.append(" text,");
    localStringBuilder.append(ta);
    localStringBuilder.append(" text,");
    localStringBuilder = f.a.a.a.a.a(localStringBuilder, ua, " text );", paramSQLiteDatabase, "create table ");
    localStringBuilder.append(g);
    localStringBuilder.append(" ( ");
    localStringBuilder.append(t);
    localStringBuilder.append(" integer primary key autoincrement not null,");
    localStringBuilder.append(O);
    localStringBuilder.append(" text not null unique,");
    localStringBuilder.append(P);
    localStringBuilder.append(" text,");
    localStringBuilder.append(Q);
    localStringBuilder.append(" text,");
    localStringBuilder.append(R);
    localStringBuilder.append(" text,");
    localStringBuilder.append(Y);
    localStringBuilder.append(" text,");
    localStringBuilder.append(Z);
    localStringBuilder.append(" text,");
    localStringBuilder.append(ca);
    localStringBuilder.append(" text,");
    localStringBuilder.append(ea);
    localStringBuilder.append(" text,");
    localStringBuilder.append(fa);
    localStringBuilder.append(" text,");
    localStringBuilder.append(ga);
    localStringBuilder.append(" text,");
    localStringBuilder.append(ha);
    localStringBuilder.append(" text,");
    localStringBuilder.append(la);
    localStringBuilder.append(" text,");
    localStringBuilder.append(ma);
    localStringBuilder.append(" text,");
    localStringBuilder.append(na);
    localStringBuilder.append(" text,");
    localStringBuilder.append(pa);
    localStringBuilder.append(" text,");
    localStringBuilder.append(ra);
    localStringBuilder.append(" text,");
    localStringBuilder.append(S);
    localStringBuilder.append(" text,");
    localStringBuilder.append(T);
    localStringBuilder.append(" text,");
    localStringBuilder.append(X);
    localStringBuilder.append(" text,");
    localStringBuilder.append(oa);
    localStringBuilder.append(" text,");
    localStringBuilder.append(sa);
    localStringBuilder.append(" text,");
    localStringBuilder.append(qa);
    localStringBuilder.append(" text,");
    localStringBuilder.append(ta);
    localStringBuilder.append(" text,");
    localStringBuilder = f.a.a.a.a.a(localStringBuilder, ua, " text );", paramSQLiteDatabase, "create table ");
    localStringBuilder.append(h);
    localStringBuilder.append(" ( ");
    localStringBuilder.append(t);
    localStringBuilder.append(" integer primary key autoincrement not null,");
    localStringBuilder.append(va);
    localStringBuilder.append(" text,");
    localStringBuilder.append(wa);
    localStringBuilder.append(" text,");
    localStringBuilder.append(xa);
    localStringBuilder.append(" text,");
    localStringBuilder = f.a.a.a.a.a(localStringBuilder, ya, " text );", paramSQLiteDatabase, "create table ");
    localStringBuilder.append(i);
    localStringBuilder.append(" ( ");
    localStringBuilder.append(t);
    localStringBuilder.append(" integer primary key autoincrement not null,");
    localStringBuilder.append(za);
    localStringBuilder.append(" text,");
    localStringBuilder.append(Aa);
    localStringBuilder.append(" text,");
    localStringBuilder.append(Ba);
    localStringBuilder.append(" text,");
    localStringBuilder.append(Ca);
    localStringBuilder.append(" text,");
    localStringBuilder = f.a.a.a.a.a(localStringBuilder, Da, " text );", paramSQLiteDatabase, "create table ");
    localStringBuilder.append(j);
    localStringBuilder.append(" ( ");
    localStringBuilder.append(t);
    localStringBuilder.append(" integer primary key autoincrement not null,");
    localStringBuilder.append(za);
    localStringBuilder.append(" text,");
    localStringBuilder.append(Aa);
    localStringBuilder.append(" text,");
    localStringBuilder.append(Ba);
    localStringBuilder.append(" text,");
    localStringBuilder.append(Ca);
    localStringBuilder.append(" text,");
    localStringBuilder.append(Da);
    localStringBuilder.append(" text,");
    localStringBuilder = f.a.a.a.a.a(localStringBuilder, qa, " text );", paramSQLiteDatabase, "create table ");
    localStringBuilder.append(k);
    localStringBuilder.append(" ( ");
    localStringBuilder.append(t);
    localStringBuilder.append(" integer primary key autoincrement not null,");
    localStringBuilder.append(za);
    localStringBuilder.append(" text,");
    localStringBuilder.append(Aa);
    localStringBuilder.append(" text,");
    localStringBuilder.append(Ba);
    localStringBuilder.append(" text,");
    localStringBuilder.append(Ca);
    localStringBuilder.append(" text,");
    localStringBuilder = f.a.a.a.a.a(localStringBuilder, Da, " text );", paramSQLiteDatabase, "create table ");
    localStringBuilder.append(l);
    localStringBuilder.append(" ( ");
    localStringBuilder.append(t);
    localStringBuilder.append(" integer primary key autoincrement not null,");
    localStringBuilder = f.a.a.a.a.a(localStringBuilder, O, " text not null unique );", paramSQLiteDatabase, "create table ");
    localStringBuilder.append(m);
    localStringBuilder.append(" ( ");
    localStringBuilder.append(t);
    localStringBuilder.append(" integer primary key autoincrement not null,");
    localStringBuilder = f.a.a.a.a.a(localStringBuilder, Ea, " text not null unique );", paramSQLiteDatabase, "create table ");
    localStringBuilder.append(n);
    localStringBuilder.append(" ( ");
    localStringBuilder.append(t);
    localStringBuilder.append(" integer primary key autoincrement not null,");
    localStringBuilder = f.a.a.a.a.a(localStringBuilder, Ea, " text not null );", paramSQLiteDatabase, "create table ");
    localStringBuilder.append(o);
    localStringBuilder.append(" ( ");
    localStringBuilder.append(t);
    localStringBuilder.append(" integer primary key autoincrement not null,");
    localStringBuilder.append(L);
    localStringBuilder.append(" text not null,");
    localStringBuilder = f.a.a.a.a.a(localStringBuilder, O, " text not null );", paramSQLiteDatabase, "create table ");
    localStringBuilder.append(p);
    localStringBuilder.append(" ( ");
    localStringBuilder.append(t);
    localStringBuilder.append(" integer primary key autoincrement not null,");
    localStringBuilder.append(Fa);
    localStringBuilder.append(" text,");
    localStringBuilder.append(Ga);
    localStringBuilder.append(" text,");
    localStringBuilder.append(Ha);
    localStringBuilder.append(" text,");
    localStringBuilder.append(Ia);
    localStringBuilder.append(" text,");
    localStringBuilder.append(Ja);
    localStringBuilder.append(" text,");
    localStringBuilder.append(Ka);
    localStringBuilder.append(" text,");
    localStringBuilder.append(La);
    localStringBuilder.append(" text,");
    localStringBuilder.append(Ma);
    localStringBuilder.append(" text,");
    localStringBuilder.append(Na);
    localStringBuilder.append(" text,");
    localStringBuilder.append(Oa);
    localStringBuilder.append(" text,");
    localStringBuilder.append(Pa);
    localStringBuilder.append(" text,");
    localStringBuilder.append(Qa);
    localStringBuilder.append(" text,");
    localStringBuilder = f.a.a.a.a.a(localStringBuilder, Ra, " text );", paramSQLiteDatabase, "create table ");
    localStringBuilder.append(q);
    localStringBuilder.append(" ( ");
    localStringBuilder.append(t);
    localStringBuilder.append(" integer primary key autoincrement not null,");
    localStringBuilder.append(L);
    localStringBuilder.append(" text not null,");
    localStringBuilder.append(Sa);
    localStringBuilder.append(" text not null,");
    localStringBuilder.append(Ta);
    localStringBuilder.append(" text,");
    localStringBuilder.append(Ua);
    localStringBuilder.append(" text,");
    localStringBuilder.append(Va);
    localStringBuilder.append(" text,");
    localStringBuilder.append(Wa);
    localStringBuilder.append(" text,");
    localStringBuilder.append(Xa);
    localStringBuilder.append(" text,");
    localStringBuilder.append(Ya);
    localStringBuilder.append(" text not null,");
    localStringBuilder.append(Za);
    localStringBuilder.append(" text,");
    localStringBuilder.append(_a);
    localStringBuilder.append(" text,");
    localStringBuilder.append(ab);
    localStringBuilder.append(" text,");
    localStringBuilder.append(bb);
    localStringBuilder.append(" text,");
    localStringBuilder.append(cb);
    localStringBuilder.append(" text,");
    localStringBuilder.append(db);
    localStringBuilder.append(" text,");
    localStringBuilder.append(eb);
    localStringBuilder.append(" text,");
    localStringBuilder.append(fb);
    localStringBuilder.append(" text,");
    localStringBuilder.append(gb);
    localStringBuilder.append(" text,");
    localStringBuilder.append(hb);
    localStringBuilder.append(" text,");
    localStringBuilder = f.a.a.a.a.a(localStringBuilder, ib, " text );", paramSQLiteDatabase, "create table ");
    localStringBuilder.append(r);
    localStringBuilder.append(" ( ");
    localStringBuilder.append(t);
    localStringBuilder.append(" integer primary key autoincrement not null,");
    localStringBuilder.append(jb);
    localStringBuilder.append(" text not null,");
    localStringBuilder.append(kb);
    localStringBuilder.append(" text not null unique,");
    localStringBuilder.append(lb);
    localStringBuilder.append(" text,");
    localStringBuilder.append(mb);
    localStringBuilder.append(" text,");
    localStringBuilder.append(nb);
    localStringBuilder.append(" text,");
    localStringBuilder.append(ob);
    localStringBuilder.append(" text,");
    localStringBuilder.append(pb);
    localStringBuilder.append(" text,");
    localStringBuilder.append(qb);
    localStringBuilder.append(" text,");
    localStringBuilder.append(rb);
    localStringBuilder.append(" text,");
    localStringBuilder.append(sb);
    localStringBuilder.append(" text,");
    localStringBuilder.append(tb);
    localStringBuilder.append(" text,");
    localStringBuilder = f.a.a.a.a.a(localStringBuilder, ub, " text );", paramSQLiteDatabase, "create table ");
    localStringBuilder.append(s);
    localStringBuilder.append(" ( ");
    localStringBuilder.append(t);
    localStringBuilder.append(" integer primary key autoincrement not null,");
    localStringBuilder.append(vb);
    localStringBuilder.append(" text,");
    localStringBuilder.append(wb);
    localStringBuilder.append(" text,");
    localStringBuilder.append(xb);
    localStringBuilder.append(" text,");
    localStringBuilder.append(yb);
    localStringBuilder.append(" text,");
    localStringBuilder.append(zb);
    localStringBuilder.append(" text,");
    localStringBuilder.append(Ab);
    localStringBuilder.append(" text,");
    localStringBuilder.append(Bb);
    localStringBuilder.append(" text,");
    localStringBuilder.append(Cb);
    localStringBuilder.append(" text,");
    localStringBuilder.append(Db);
    localStringBuilder.append(" text,");
    localStringBuilder.append(Eb);
    localStringBuilder.append(" text,");
    localStringBuilder.append(Fb);
    localStringBuilder.append(" text,");
    localStringBuilder.append(Gb);
    localStringBuilder.append(" text,");
    localStringBuilder.append(Hb);
    localStringBuilder.append(" text,");
    localStringBuilder.append(Ib);
    localStringBuilder.append(" text,");
    localStringBuilder.append(Jb);
    localStringBuilder.append(" text,");
    localStringBuilder.append(Kb);
    localStringBuilder.append(" text,");
    localStringBuilder.append(Lb);
    localStringBuilder.append(" text,");
    localStringBuilder.append(Mb);
    localStringBuilder.append(" text,");
    localStringBuilder.append(Nb);
    localStringBuilder.append(" text,");
    localStringBuilder.append(Ob);
    localStringBuilder.append(" text,");
    localStringBuilder.append(Pb);
    localStringBuilder.append(" text,");
    localStringBuilder.append(Qb);
    localStringBuilder.append(" text,");
    localStringBuilder.append(Rb);
    localStringBuilder.append(" text,");
    localStringBuilder.append(Sb);
    localStringBuilder.append(" text,");
    localStringBuilder.append(Tb);
    localStringBuilder.append(" text,");
    localStringBuilder.append(Ub);
    localStringBuilder.append(" text,");
    localStringBuilder.append(Vb);
    localStringBuilder.append(" text,");
    localStringBuilder.append(Wb);
    localStringBuilder.append(" text,");
    localStringBuilder.append(Xb);
    localStringBuilder.append(" text,");
    localStringBuilder.append(Yb);
    localStringBuilder.append(" text,");
    localStringBuilder.append(Zb);
    localStringBuilder.append(" text,");
    localStringBuilder.append(_b);
    localStringBuilder.append(" text,");
    localStringBuilder.append(ac);
    localStringBuilder.append(" text,");
    localStringBuilder.append(bc);
    localStringBuilder.append(" text,");
    localStringBuilder.append(cc);
    localStringBuilder.append(" text,");
    localStringBuilder.append(dc);
    localStringBuilder.append(" text,");
    localStringBuilder.append(ec);
    localStringBuilder.append(" text,");
    localStringBuilder.append(fc);
    localStringBuilder.append(" text,");
    localStringBuilder.append(gc);
    localStringBuilder.append(" text,");
    localStringBuilder.append(hc);
    localStringBuilder.append(" text,");
    localStringBuilder.append(ic);
    localStringBuilder.append(" text,");
    localStringBuilder.append(jc);
    localStringBuilder.append(" text,");
    localStringBuilder.append(kc);
    localStringBuilder.append(" text,");
    localStringBuilder.append(lc);
    localStringBuilder.append(" text );");
    paramSQLiteDatabase.execSQL(localStringBuilder.toString());
  }
  
  public void onUpgrade(SQLiteDatabase paramSQLiteDatabase, int paramInt1, int paramInt2)
  {
    StringBuilder localStringBuilder1;
    switch (paramInt1)
    {
    default: 
      throw new IllegalStateException(f.a.a.a.a.a("onUpgrade() with unknown oldVersion ", paramInt1));
    case 1: 
      localStringBuilder1 = f.a.a.a.a.b("create table ");
      localStringBuilder1.append(g);
      localStringBuilder1.append(" ( ");
      localStringBuilder1.append(t);
      localStringBuilder1.append(" integer primary key autoincrement not null,");
      localStringBuilder1.append(O);
      localStringBuilder1.append(" text not null unique,");
      localStringBuilder1.append(P);
      localStringBuilder1.append(" text,");
      localStringBuilder1.append(Q);
      localStringBuilder1.append(" text,");
      localStringBuilder1.append(R);
      localStringBuilder1.append(" text,");
      localStringBuilder1.append(Y);
      localStringBuilder1.append(" text,");
      localStringBuilder1.append(Z);
      localStringBuilder1.append(" text,");
      localStringBuilder1.append(ca);
      localStringBuilder1.append(" text,");
      localStringBuilder1.append(ea);
      localStringBuilder1.append(" text,");
      localStringBuilder1.append(fa);
      localStringBuilder1.append(" text,");
      localStringBuilder1.append(ga);
      localStringBuilder1.append(" text,");
      localStringBuilder1.append(ha);
      localStringBuilder1.append(" text,");
      localStringBuilder1.append(la);
      localStringBuilder1.append(" text,");
      localStringBuilder1.append(ma);
      localStringBuilder1.append(" text,");
      localStringBuilder1.append(na);
      localStringBuilder1.append(" text );");
      paramSQLiteDatabase.execSQL(localStringBuilder1.toString());
    case 2: 
      localStringBuilder1 = f.a.a.a.a.b("ALTER TABLE ");
      localStringBuilder1.append(e);
      localStringBuilder1.append(" ADD COLUMN ");
      localStringBuilder1.append(oa);
      localStringBuilder1.append(" TEXT DEFAULT ''");
      paramSQLiteDatabase.execSQL(localStringBuilder1.toString());
    case 3: 
      localStringBuilder1 = f.a.a.a.a.b("ALTER TABLE ");
      localStringBuilder1.append(q);
      localStringBuilder1.append(" ADD COLUMN ");
      localStringBuilder1.append(hb);
      localStringBuilder1.append(" TEXT DEFAULT ''");
      paramSQLiteDatabase.execSQL(localStringBuilder1.toString());
    case 4: 
      localStringBuilder1 = f.a.a.a.a.b("ALTER TABLE ");
      localStringBuilder1.append(e);
      localStringBuilder1.append(" ADD COLUMN ");
      localStringBuilder1 = f.a.a.a.a.a(localStringBuilder1, pa, " TEXT DEFAULT ''", paramSQLiteDatabase, "ALTER TABLE ");
      localStringBuilder1.append(g);
      localStringBuilder1.append(" ADD COLUMN ");
      localStringBuilder1 = f.a.a.a.a.a(localStringBuilder1, pa, " TEXT DEFAULT ''", paramSQLiteDatabase, "ALTER TABLE ");
      localStringBuilder1.append(g);
      localStringBuilder1.append(" ADD COLUMN ");
      localStringBuilder1.append(ra);
      localStringBuilder1.append(" TEXT DEFAULT ''");
      paramSQLiteDatabase.execSQL(localStringBuilder1.toString());
    case 5: 
      localStringBuilder1 = f.a.a.a.a.b("ALTER TABLE ");
      localStringBuilder1.append(q);
      localStringBuilder1.append(" ADD COLUMN ");
      localStringBuilder1 = f.a.a.a.a.a(localStringBuilder1, ib, " TEXT DEFAULT ''", paramSQLiteDatabase, "ALTER TABLE ");
      localStringBuilder1.append(g);
      localStringBuilder1.append(" ADD COLUMN ");
      localStringBuilder1 = f.a.a.a.a.a(localStringBuilder1, S, " TEXT DEFAULT ''", paramSQLiteDatabase, "ALTER TABLE ");
      localStringBuilder1.append(g);
      localStringBuilder1.append(" ADD COLUMN ");
      localStringBuilder1 = f.a.a.a.a.a(localStringBuilder1, T, " TEXT DEFAULT ''", paramSQLiteDatabase, "ALTER TABLE ");
      localStringBuilder1.append(g);
      localStringBuilder1.append(" ADD COLUMN ");
      localStringBuilder1 = f.a.a.a.a.a(localStringBuilder1, X, " TEXT DEFAULT ''", paramSQLiteDatabase, "ALTER TABLE ");
      localStringBuilder1.append(g);
      localStringBuilder1.append(" ADD COLUMN ");
      localStringBuilder1.append(oa);
      localStringBuilder1.append(" TEXT DEFAULT ''");
      paramSQLiteDatabase.execSQL(localStringBuilder1.toString());
    case 6: 
      localStringBuilder1 = f.a.a.a.a.b("create table ");
      localStringBuilder1.append(r);
      localStringBuilder1.append(" ( ");
      localStringBuilder1.append(t);
      localStringBuilder1.append(" integer primary key autoincrement not null,");
      localStringBuilder1.append(jb);
      localStringBuilder1.append(" text not null,");
      localStringBuilder1.append(kb);
      localStringBuilder1.append(" text not null unique,");
      localStringBuilder1.append(lb);
      localStringBuilder1.append(" text,");
      localStringBuilder1.append(mb);
      localStringBuilder1.append(" text,");
      localStringBuilder1.append(nb);
      localStringBuilder1.append(" text,");
      localStringBuilder1.append(ob);
      localStringBuilder1.append(" text,");
      localStringBuilder1.append(pb);
      localStringBuilder1.append(" text,");
      localStringBuilder1.append(qb);
      localStringBuilder1.append(" text,");
      localStringBuilder1.append(rb);
      localStringBuilder1.append(" text,");
      localStringBuilder1.append(sb);
      localStringBuilder1.append(" text,");
      localStringBuilder1.append(tb);
      localStringBuilder1.append(" text,");
      localStringBuilder1.append(ub);
      localStringBuilder1.append(" text );");
      paramSQLiteDatabase.execSQL(localStringBuilder1.toString());
    case 7: 
      localStringBuilder1 = f.a.a.a.a.b("create table ");
      localStringBuilder1.append(s);
      localStringBuilder1.append(" ( ");
      localStringBuilder1.append(t);
      localStringBuilder1.append(" integer primary key autoincrement not null,");
      localStringBuilder1.append(vb);
      localStringBuilder1.append(" text,");
      localStringBuilder1.append(wb);
      localStringBuilder1.append(" text,");
      localStringBuilder1.append(xb);
      localStringBuilder1.append(" text,");
      localStringBuilder1.append(yb);
      localStringBuilder1.append(" text,");
      localStringBuilder1.append(zb);
      localStringBuilder1.append(" text,");
      localStringBuilder1.append(Ab);
      localStringBuilder1.append(" text,");
      localStringBuilder1.append(Bb);
      localStringBuilder1.append(" text,");
      localStringBuilder1.append(Cb);
      localStringBuilder1.append(" text,");
      localStringBuilder1.append(Db);
      localStringBuilder1.append(" text,");
      localStringBuilder1.append(Eb);
      localStringBuilder1.append(" text,");
      localStringBuilder1.append(Fb);
      localStringBuilder1.append(" text,");
      localStringBuilder1.append(Gb);
      localStringBuilder1.append(" text,");
      localStringBuilder1.append(Hb);
      localStringBuilder1.append(" text,");
      localStringBuilder1.append(Ib);
      localStringBuilder1.append(" text,");
      localStringBuilder1.append(Jb);
      localStringBuilder1.append(" text,");
      localStringBuilder1.append(Kb);
      localStringBuilder1.append(" text,");
      localStringBuilder1.append(Lb);
      localStringBuilder1.append(" text,");
      localStringBuilder1.append(Mb);
      localStringBuilder1.append(" text,");
      localStringBuilder1.append(Nb);
      localStringBuilder1.append(" text,");
      localStringBuilder1.append(Ob);
      localStringBuilder1.append(" text,");
      localStringBuilder1.append(Pb);
      localStringBuilder1.append(" text,");
      localStringBuilder1.append(Qb);
      localStringBuilder1.append(" text,");
      localStringBuilder1.append(Rb);
      localStringBuilder1.append(" text,");
      localStringBuilder1.append(Sb);
      localStringBuilder1.append(" text,");
      localStringBuilder1.append(Tb);
      localStringBuilder1.append(" text,");
      localStringBuilder1.append(Ub);
      localStringBuilder1.append(" text,");
      localStringBuilder1.append(Vb);
      localStringBuilder1.append(" text,");
      localStringBuilder1.append(Wb);
      localStringBuilder1.append(" text,");
      localStringBuilder1.append(Xb);
      localStringBuilder1.append(" text,");
      localStringBuilder1.append(Yb);
      localStringBuilder1.append(" text,");
      localStringBuilder1.append(Zb);
      localStringBuilder1.append(" text,");
      localStringBuilder1.append(_b);
      localStringBuilder1.append(" text,");
      localStringBuilder1.append(ac);
      localStringBuilder1.append(" text,");
      localStringBuilder1.append(bc);
      localStringBuilder1.append(" text,");
      localStringBuilder1.append(cc);
      localStringBuilder1.append(" text,");
      localStringBuilder1.append(dc);
      localStringBuilder1.append(" text,");
      localStringBuilder1.append(ec);
      localStringBuilder1.append(" text,");
      localStringBuilder1.append(fc);
      localStringBuilder1.append(" text,");
      localStringBuilder1.append(gc);
      localStringBuilder1.append(" text,");
      localStringBuilder1.append(hc);
      localStringBuilder1.append(" text,");
      localStringBuilder1.append(ic);
      localStringBuilder1.append(" text,");
      localStringBuilder1.append(jc);
      localStringBuilder1.append(" text,");
      localStringBuilder1.append(kc);
      localStringBuilder1.append(" text,");
      localStringBuilder1.append(lc);
      localStringBuilder1.append(" text );");
      paramSQLiteDatabase.execSQL(localStringBuilder1.toString());
    case 8: 
      localStringBuilder1 = f.a.a.a.a.b("ALTER TABLE ");
      localStringBuilder1.append(h);
      localStringBuilder1.append(" ADD COLUMN ");
      localStringBuilder1.append(ya);
      localStringBuilder1.append(" TEXT DEFAULT ''");
      paramSQLiteDatabase.execSQL(localStringBuilder1.toString());
    case 9: 
      localStringBuilder1 = f.a.a.a.a.b("ALTER TABLE ");
      localStringBuilder1.append(i);
      localStringBuilder1.append(" ADD COLUMN ");
      localStringBuilder1 = f.a.a.a.a.a(localStringBuilder1, Da, " TEXT DEFAULT ''", paramSQLiteDatabase, "ALTER TABLE ");
      localStringBuilder1.append(k);
      localStringBuilder1.append(" ADD COLUMN ");
      localStringBuilder1.append(Da);
      localStringBuilder1.append(" TEXT DEFAULT ''");
      paramSQLiteDatabase.execSQL(localStringBuilder1.toString());
    case 10: 
      try
      {
        new V(nc).c(V.la, "");
      }
      catch (Exception localException)
      {
        k.a.a.m.b.a(localException);
      }
      paramSQLiteDatabase.delete(g, null, null);
      localStringBuilder2 = new StringBuilder();
      localStringBuilder2.append("ALTER TABLE ");
      localStringBuilder2.append(g);
      localStringBuilder2.append(" ADD COLUMN ");
      localStringBuilder2.append(sa);
      localStringBuilder2.append(" TEXT DEFAULT ''");
      paramSQLiteDatabase.execSQL(localStringBuilder2.toString());
    case 11: 
      localStringBuilder2 = f.a.a.a.a.b("create table ");
      localStringBuilder2.append(f);
      localStringBuilder2.append(" ( ");
      localStringBuilder2.append(t);
      localStringBuilder2.append(" integer primary key autoincrement not null,");
      localStringBuilder2.append(O);
      localStringBuilder2.append(" text not null unique,");
      localStringBuilder2.append(P);
      localStringBuilder2.append(" text,");
      localStringBuilder2.append(Q);
      localStringBuilder2.append(" text,");
      localStringBuilder2.append(R);
      localStringBuilder2.append(" text,");
      localStringBuilder2.append(T);
      localStringBuilder2.append(" text,");
      localStringBuilder2.append(U);
      localStringBuilder2.append(" text,");
      localStringBuilder2.append(V);
      localStringBuilder2.append(" text,");
      localStringBuilder2.append(W);
      localStringBuilder2.append(" text,");
      localStringBuilder2.append(X);
      localStringBuilder2.append(" text,");
      localStringBuilder2.append(Y);
      localStringBuilder2.append(" text,");
      localStringBuilder2.append(Z);
      localStringBuilder2.append(" text,");
      localStringBuilder2.append(aa);
      localStringBuilder2.append(" text,");
      localStringBuilder2.append(ba);
      localStringBuilder2.append(" text,");
      localStringBuilder2.append(ca);
      localStringBuilder2.append(" text,");
      localStringBuilder2.append(da);
      localStringBuilder2.append(" text,");
      localStringBuilder2.append(ea);
      localStringBuilder2.append(" text,");
      localStringBuilder2.append(fa);
      localStringBuilder2.append(" text,");
      localStringBuilder2.append(ga);
      localStringBuilder2.append(" text,");
      localStringBuilder2.append(ha);
      localStringBuilder2.append(" text,");
      localStringBuilder2.append(ia);
      localStringBuilder2.append(" text,");
      localStringBuilder2.append(ja);
      localStringBuilder2.append(" text,");
      localStringBuilder2.append(S);
      localStringBuilder2.append(" text,");
      localStringBuilder2.append(ka);
      localStringBuilder2.append(" text,");
      localStringBuilder2.append(oa);
      localStringBuilder2.append(" text,");
      localStringBuilder2.append(pa);
      localStringBuilder2.append(" text,");
      localStringBuilder2 = f.a.a.a.a.a(localStringBuilder2, qa, " text );", paramSQLiteDatabase, "create table ");
      localStringBuilder2.append(j);
      localStringBuilder2.append(" ( ");
      localStringBuilder2.append(t);
      localStringBuilder2.append(" integer primary key autoincrement not null,");
      localStringBuilder2.append(za);
      localStringBuilder2.append(" text,");
      localStringBuilder2.append(Aa);
      localStringBuilder2.append(" text,");
      localStringBuilder2.append(Ba);
      localStringBuilder2.append(" text,");
      localStringBuilder2.append(Ca);
      localStringBuilder2.append(" text,");
      localStringBuilder2.append(Da);
      localStringBuilder2.append(" text );");
      paramSQLiteDatabase.execSQL(localStringBuilder2.toString());
    case 12: 
      localStringBuilder2 = f.a.a.a.a.b("ALTER TABLE ");
      localStringBuilder2.append(e);
      localStringBuilder2.append(" ADD COLUMN ");
      localStringBuilder2 = f.a.a.a.a.a(localStringBuilder2, qa, " TEXT DEFAULT ''", paramSQLiteDatabase, "ALTER TABLE ");
      localStringBuilder2.append(g);
      localStringBuilder2.append(" ADD COLUMN ");
      localStringBuilder2 = f.a.a.a.a.a(localStringBuilder2, qa, " TEXT DEFAULT ''", paramSQLiteDatabase, "ALTER TABLE ");
      localStringBuilder2.append(j);
      localStringBuilder2.append(" ADD COLUMN ");
      localStringBuilder2.append(qa);
      localStringBuilder2.append(" TEXT DEFAULT ''");
      paramSQLiteDatabase.execSQL(localStringBuilder2.toString());
    case 13: 
      localStringBuilder2 = f.a.a.a.a.b("ALTER TABLE ");
      localStringBuilder2.append(e);
      localStringBuilder2.append(" ADD COLUMN ");
      localStringBuilder2.append(sa);
      localStringBuilder2.append(" TEXT DEFAULT ''");
      paramSQLiteDatabase.execSQL(localStringBuilder2.toString());
    }
    StringBuilder localStringBuilder2 = f.a.a.a.a.b("ALTER TABLE ");
    localStringBuilder2.append(e);
    localStringBuilder2.append(" ADD COLUMN ");
    localStringBuilder2 = f.a.a.a.a.a(localStringBuilder2, ta, " TEXT DEFAULT ''", paramSQLiteDatabase, "ALTER TABLE ");
    localStringBuilder2.append(e);
    localStringBuilder2.append(" ADD COLUMN ");
    localStringBuilder2 = f.a.a.a.a.a(localStringBuilder2, ua, " TEXT DEFAULT ''", paramSQLiteDatabase, "ALTER TABLE ");
    localStringBuilder2.append(g);
    localStringBuilder2.append(" ADD COLUMN ");
    localStringBuilder2 = f.a.a.a.a.a(localStringBuilder2, ta, " TEXT DEFAULT ''", paramSQLiteDatabase, "ALTER TABLE ");
    localStringBuilder2.append(g);
    localStringBuilder2.append(" ADD COLUMN ");
    localStringBuilder2 = f.a.a.a.a.a(localStringBuilder2, ua, " TEXT DEFAULT ''", paramSQLiteDatabase, "ALTER TABLE ");
    localStringBuilder2.append(f);
    localStringBuilder2.append(" ADD COLUMN ");
    localStringBuilder2 = f.a.a.a.a.a(localStringBuilder2, ta, " TEXT DEFAULT ''", paramSQLiteDatabase, "ALTER TABLE ");
    localStringBuilder2.append(f);
    localStringBuilder2.append(" ADD COLUMN ");
    localStringBuilder2.append(ua);
    localStringBuilder2.append(" TEXT DEFAULT ''");
    paramSQLiteDatabase.execSQL(localStringBuilder2.toString());
  }
  
  public String p(String paramString)
    throws SQLException
  {
    String str2 = "";
    try
    {
      O();
      String str1 = str2;
      try
      {
        Object localObject = new StringBuilder();
        str1 = str2;
        ((StringBuilder)localObject).append("select * from ");
        str1 = str2;
        ((StringBuilder)localObject).append(d);
        str1 = str2;
        ((StringBuilder)localObject).append(" where ");
        str1 = str2;
        ((StringBuilder)localObject).append(K);
        str1 = str2;
        ((StringBuilder)localObject).append(" = 'false' AND ");
        str1 = str2;
        ((StringBuilder)localObject).append(L);
        str1 = str2;
        ((StringBuilder)localObject).append(" = '");
        str1 = str2;
        ((StringBuilder)localObject).append(paramString);
        str1 = str2;
        ((StringBuilder)localObject).append("'");
        str1 = str2;
        paramString = ((StringBuilder)localObject).toString();
        str1 = str2;
        localObject = oc.rawQuery(paramString, null);
        str1 = str2;
        if (localObject != null)
        {
          str1 = str2;
          paramString = new StringBuilder();
          str1 = str2;
          paramString.append("");
          str1 = str2;
          paramString.append(((Cursor)localObject).getCount());
          str1 = str2;
          paramString = paramString.toString();
          str1 = paramString;
          ((Cursor)localObject).close();
          str1 = paramString;
        }
      }
      catch (Exception paramString)
      {
        k.a.a.m.b.a(paramString);
      }
      a();
      return str1;
    }
    finally {}
  }
  
  public ArrayList<u> p()
    throws SQLException
  {
    for (;;)
    {
      try
      {
        localArrayList = new ArrayList();
        O();
      }
      finally
      {
        ArrayList localArrayList;
        Object localObject2;
        Object localObject3;
        String str1;
        String str2;
        String str3;
        String str4;
        String str5;
        String str6;
        String str7;
        String str8;
        String str9;
        String str10;
        String str11;
        String str12;
        String str13;
        String str14;
        String str15;
        String str16;
        String str17;
        String str18;
        String str19;
        String str20;
        String str21;
        String str22;
        String str23;
        String str24;
        String str25;
        String str26;
        String str27;
        String str28;
        Object localObject4;
        Object localObject5;
        continue;
        throw localObject1;
        continue;
        continue;
      }
      try
      {
        localObject2 = oc;
        localObject3 = f;
        str1 = O;
        str2 = P;
        str3 = Q;
        str4 = R;
        str5 = T;
        str6 = U;
        str7 = V;
        str8 = W;
        str9 = X;
        str10 = Y;
        str11 = Z;
        str12 = aa;
        str13 = ba;
        str14 = ca;
        str15 = da;
        str16 = ea;
        str17 = fa;
        str18 = ga;
        str19 = ha;
        str20 = ia;
        str21 = ja;
        str22 = S;
        str23 = ka;
        str24 = oa;
        str25 = pa;
        str26 = qa;
        str27 = ta;
        str28 = ua;
        localObject4 = new StringBuilder();
        ((StringBuilder)localObject4).append(X);
        ((StringBuilder)localObject4).append("=\"99\" AND ");
        ((StringBuilder)localObject4).append(qa);
        ((StringBuilder)localObject4).append("!=\"I\"");
        localObject4 = ((StringBuilder)localObject4).toString();
        localObject5 = new StringBuilder();
        ((StringBuilder)localObject5).append(P);
        ((StringBuilder)localObject5).append(" COLLATE NOCASE ASC");
        localObject5 = ((StringBuilder)localObject5).toString();
        localObject2 = ((SQLiteDatabase)localObject2).query((String)localObject3, new String[] { str1, str2, str3, str4, str5, str6, str7, str8, str9, str10, str11, str12, str13, str14, str15, str16, str17, str18, str19, str20, str21, str22, str23, str24, str25, str26, str27, str28 }, (String)localObject4, null, null, null, (String)localObject5);
        if (localObject2 != null)
        {
          if (((Cursor)localObject2).moveToFirst())
          {
            localObject3 = new u();
            ((u)localObject3).j(((Cursor)localObject2).getString(0));
            ((u)localObject3).o(((Cursor)localObject2).getString(1));
            ((u)localObject3).a(((Cursor)localObject2).getString(2));
            ((u)localObject3).k(((Cursor)localObject2).getString(3));
            ((u)localObject3).f(((Cursor)localObject2).getString(4));
            ((u)localObject3).w(((Cursor)localObject2).getString(5));
            ((u)localObject3).t(((Cursor)localObject2).getString(6));
            ((u)localObject3).y(((Cursor)localObject2).getString(7));
            ((u)localObject3).v(((Cursor)localObject2).getString(8));
            ((u)localObject3).b(((Cursor)localObject2).getString(9));
            ((u)localObject3).c(((Cursor)localObject2).getString(10));
            ((u)localObject3).b(Boolean.parseBoolean(((Cursor)localObject2).getString(11)));
            ((u)localObject3).a(Boolean.parseBoolean(((Cursor)localObject2).getString(12)));
            ((u)localObject3).r(((Cursor)localObject2).getString(13));
            ((u)localObject3).c(Boolean.parseBoolean(((Cursor)localObject2).getString(14)));
            ((u)localObject3).z(((Cursor)localObject2).getString(15));
            ((u)localObject3).i(((Cursor)localObject2).getString(16));
            ((u)localObject3).d(((Cursor)localObject2).getString(17));
            ((u)localObject3).A(((Cursor)localObject2).getString(18));
            ((u)localObject3).l(((Cursor)localObject2).getString(19));
            ((u)localObject3).s(((Cursor)localObject2).getString(20));
            ((u)localObject3).g(((Cursor)localObject2).getString(21));
            ((u)localObject3).u(((Cursor)localObject2).getString(22));
            ((u)localObject3).p(((Cursor)localObject2).getString(23));
            ((u)localObject3).q(((Cursor)localObject2).getString(24));
            ((u)localObject3).x(((Cursor)localObject2).getString(25));
            ((u)localObject3).n(((Cursor)localObject2).getString(26));
            ((u)localObject3).m(((Cursor)localObject2).getString(27));
            localArrayList.add(localObject3);
            if (((Cursor)localObject2).moveToNext()) {
              continue;
            }
          }
          ((Cursor)localObject2).close();
        }
      }
      catch (Exception localException)
      {
        k.a.a.m.b.a(localException);
      }
    }
    a();
    return localArrayList;
  }
  
  public String q(String paramString)
    throws SQLException
  {
    String str2 = "";
    try
    {
      O();
      String str1 = str2;
      try
      {
        Object localObject = oc;
        str1 = str2;
        String str3 = h;
        str1 = str2;
        String str4 = xa;
        str1 = str2;
        StringBuilder localStringBuilder = new StringBuilder();
        str1 = str2;
        localStringBuilder.append(va);
        str1 = str2;
        localStringBuilder.append("=\"");
        str1 = str2;
        localStringBuilder.append(paramString);
        str1 = str2;
        localStringBuilder.append("\"");
        str1 = str2;
        paramString = localStringBuilder.toString();
        str1 = str2;
        localObject = ((SQLiteDatabase)localObject).query(str3, new String[] { str4 }, paramString, null, null, null, null);
        paramString = str2;
        if (localObject != null)
        {
          paramString = str2;
          str1 = str2;
          if (((Cursor)localObject).moveToFirst())
          {
            str1 = str2;
            paramString = ((Cursor)localObject).getString(0);
          }
          str1 = paramString;
          ((Cursor)localObject).close();
        }
      }
      catch (Exception paramString)
      {
        k.a.a.m.b.a(paramString);
        paramString = str1;
      }
      a();
      return paramString;
    }
    finally {}
  }
  
  public ArrayList<u> q()
    throws SQLException
  {
    for (;;)
    {
      try
      {
        localArrayList = new ArrayList();
        O();
      }
      finally
      {
        ArrayList localArrayList;
        Object localObject2;
        Object localObject3;
        String str1;
        String str2;
        String str3;
        String str4;
        String str5;
        String str6;
        String str7;
        String str8;
        String str9;
        String str10;
        String str11;
        String str12;
        String str13;
        String str14;
        String str15;
        String str16;
        String str17;
        String str18;
        String str19;
        String str20;
        String str21;
        String str22;
        String str23;
        String str24;
        String str25;
        String str26;
        String str27;
        String str28;
        String str29;
        Object localObject4;
        Object localObject5;
        continue;
        throw localObject1;
        continue;
        continue;
      }
      try
      {
        localObject2 = oc;
        localObject3 = e;
        str1 = O;
        str2 = P;
        str3 = Q;
        str4 = R;
        str5 = T;
        str6 = U;
        str7 = V;
        str8 = W;
        str9 = X;
        str10 = Y;
        str11 = Z;
        str12 = aa;
        str13 = ba;
        str14 = ca;
        str15 = da;
        str16 = ea;
        str17 = fa;
        str18 = ga;
        str19 = ha;
        str20 = ia;
        str21 = ja;
        str22 = S;
        str23 = ka;
        str24 = oa;
        str25 = pa;
        str26 = qa;
        str27 = sa;
        str28 = ta;
        str29 = ua;
        localObject4 = new StringBuilder();
        ((StringBuilder)localObject4).append(X);
        ((StringBuilder)localObject4).append("=\"99\" AND ");
        ((StringBuilder)localObject4).append(qa);
        ((StringBuilder)localObject4).append("!=\"I\"");
        localObject4 = ((StringBuilder)localObject4).toString();
        localObject5 = new StringBuilder();
        ((StringBuilder)localObject5).append(P);
        ((StringBuilder)localObject5).append(" COLLATE NOCASE ASC");
        localObject5 = ((StringBuilder)localObject5).toString();
        localObject2 = ((SQLiteDatabase)localObject2).query((String)localObject3, new String[] { str1, str2, str3, str4, str5, str6, str7, str8, str9, str10, str11, str12, str13, str14, str15, str16, str17, str18, str19, str20, str21, str22, str23, str24, str25, str26, str27, str28, str29 }, (String)localObject4, null, null, null, (String)localObject5);
        if (localObject2 != null)
        {
          if (((Cursor)localObject2).moveToFirst())
          {
            localObject3 = new u();
            ((u)localObject3).j(((Cursor)localObject2).getString(0));
            ((u)localObject3).o(((Cursor)localObject2).getString(1));
            ((u)localObject3).a(((Cursor)localObject2).getString(2));
            ((u)localObject3).k(((Cursor)localObject2).getString(3));
            ((u)localObject3).f(((Cursor)localObject2).getString(4));
            ((u)localObject3).w(((Cursor)localObject2).getString(5));
            ((u)localObject3).t(((Cursor)localObject2).getString(6));
            ((u)localObject3).y(((Cursor)localObject2).getString(7));
            ((u)localObject3).v(((Cursor)localObject2).getString(8));
            ((u)localObject3).b(((Cursor)localObject2).getString(9));
            ((u)localObject3).c(((Cursor)localObject2).getString(10));
            ((u)localObject3).b(Boolean.parseBoolean(((Cursor)localObject2).getString(11)));
            ((u)localObject3).a(Boolean.parseBoolean(((Cursor)localObject2).getString(12)));
            ((u)localObject3).r(((Cursor)localObject2).getString(13));
            ((u)localObject3).c(Boolean.parseBoolean(((Cursor)localObject2).getString(14)));
            ((u)localObject3).z(((Cursor)localObject2).getString(15));
            ((u)localObject3).i(((Cursor)localObject2).getString(16));
            ((u)localObject3).d(((Cursor)localObject2).getString(17));
            ((u)localObject3).A(((Cursor)localObject2).getString(18));
            ((u)localObject3).l(((Cursor)localObject2).getString(19));
            ((u)localObject3).s(((Cursor)localObject2).getString(20));
            ((u)localObject3).g(((Cursor)localObject2).getString(21));
            ((u)localObject3).u(((Cursor)localObject2).getString(22));
            ((u)localObject3).p(((Cursor)localObject2).getString(23));
            ((u)localObject3).q(((Cursor)localObject2).getString(24));
            ((u)localObject3).x(((Cursor)localObject2).getString(25));
            ((u)localObject3).h(((Cursor)localObject2).getString(26));
            ((u)localObject3).n(((Cursor)localObject2).getString(27));
            ((u)localObject3).m(((Cursor)localObject2).getString(28));
            localArrayList.add(localObject3);
            if (((Cursor)localObject2).moveToNext()) {
              continue;
            }
          }
          ((Cursor)localObject2).close();
        }
      }
      catch (Exception localException)
      {
        k.a.a.m.b.a(localException);
      }
    }
    a();
    return localArrayList;
  }
  
  public String r(String paramString)
    throws SQLException
  {
    String str2 = "en";
    try
    {
      O();
      String str1 = str2;
      try
      {
        Object localObject = oc;
        str1 = str2;
        String str3 = e;
        str1 = str2;
        String str4 = W;
        str1 = str2;
        StringBuilder localStringBuilder = new StringBuilder();
        str1 = str2;
        localStringBuilder.append(O);
        str1 = str2;
        localStringBuilder.append("=\"");
        str1 = str2;
        localStringBuilder.append(paramString);
        str1 = str2;
        localStringBuilder.append("\"");
        str1 = str2;
        paramString = localStringBuilder.toString();
        str1 = str2;
        localObject = ((SQLiteDatabase)localObject).query(str3, new String[] { str4 }, paramString, null, null, null, null);
        paramString = str2;
        if (localObject != null)
        {
          paramString = str2;
          str1 = str2;
          if (((Cursor)localObject).moveToFirst())
          {
            str1 = str2;
            paramString = ((Cursor)localObject).getString(0);
          }
          str1 = paramString;
          ((Cursor)localObject).close();
        }
      }
      catch (Exception paramString)
      {
        k.a.a.m.b.a(paramString);
        paramString = str1;
      }
      a();
      return paramString;
    }
    finally {}
  }
  
  public ArrayList<u> r()
    throws SQLException
  {
    for (;;)
    {
      try
      {
        localArrayList = new ArrayList();
        O();
      }
      finally
      {
        ArrayList localArrayList;
        Object localObject2;
        Object localObject3;
        String str1;
        String str2;
        String str3;
        String str4;
        String str5;
        String str6;
        String str7;
        String str8;
        String str9;
        String str10;
        String str11;
        String str12;
        String str13;
        String str14;
        String str15;
        String str16;
        String str17;
        String str18;
        String str19;
        String str20;
        String str21;
        String str22;
        String str23;
        String str24;
        String str25;
        String str26;
        String str27;
        String str28;
        String str29;
        Object localObject4;
        Object localObject5;
        continue;
        throw localObject1;
        continue;
        continue;
      }
      try
      {
        localObject2 = oc;
        localObject3 = e;
        str1 = O;
        str2 = P;
        str3 = Q;
        str4 = R;
        str5 = T;
        str6 = U;
        str7 = V;
        str8 = W;
        str9 = X;
        str10 = Y;
        str11 = Z;
        str12 = aa;
        str13 = ba;
        str14 = ca;
        str15 = da;
        str16 = ea;
        str17 = fa;
        str18 = ga;
        str19 = ha;
        str20 = ia;
        str21 = ja;
        str22 = S;
        str23 = ka;
        str24 = oa;
        str25 = pa;
        str26 = qa;
        str27 = sa;
        str28 = ta;
        str29 = ua;
        localObject4 = new StringBuilder();
        ((StringBuilder)localObject4).append(aa);
        ((StringBuilder)localObject4).append("=\"true\"");
        localObject4 = ((StringBuilder)localObject4).toString();
        localObject5 = new StringBuilder();
        ((StringBuilder)localObject5).append(P);
        ((StringBuilder)localObject5).append(" COLLATE NOCASE ASC");
        localObject5 = ((StringBuilder)localObject5).toString();
        localObject2 = ((SQLiteDatabase)localObject2).query((String)localObject3, new String[] { str1, str2, str3, str4, str5, str6, str7, str8, str9, str10, str11, str12, str13, str14, str15, str16, str17, str18, str19, str20, str21, str22, str23, str24, str25, str26, str27, str28, str29 }, (String)localObject4, null, null, null, (String)localObject5);
        if (localObject2 != null)
        {
          if (((Cursor)localObject2).moveToFirst())
          {
            localObject3 = new u();
            ((u)localObject3).j(((Cursor)localObject2).getString(0));
            ((u)localObject3).o(((Cursor)localObject2).getString(1));
            ((u)localObject3).a(((Cursor)localObject2).getString(2));
            ((u)localObject3).k(((Cursor)localObject2).getString(3));
            ((u)localObject3).f(((Cursor)localObject2).getString(4));
            ((u)localObject3).w(((Cursor)localObject2).getString(5));
            ((u)localObject3).t(((Cursor)localObject2).getString(6));
            ((u)localObject3).y(((Cursor)localObject2).getString(7));
            ((u)localObject3).v(((Cursor)localObject2).getString(8));
            ((u)localObject3).b(((Cursor)localObject2).getString(9));
            ((u)localObject3).c(((Cursor)localObject2).getString(10));
            ((u)localObject3).b(Boolean.parseBoolean(((Cursor)localObject2).getString(11)));
            ((u)localObject3).a(Boolean.parseBoolean(((Cursor)localObject2).getString(12)));
            ((u)localObject3).r(((Cursor)localObject2).getString(13));
            ((u)localObject3).c(Boolean.parseBoolean(((Cursor)localObject2).getString(14)));
            ((u)localObject3).z(((Cursor)localObject2).getString(15));
            ((u)localObject3).i(((Cursor)localObject2).getString(16));
            ((u)localObject3).d(((Cursor)localObject2).getString(17));
            ((u)localObject3).A(((Cursor)localObject2).getString(18));
            ((u)localObject3).l(((Cursor)localObject2).getString(19));
            ((u)localObject3).s(((Cursor)localObject2).getString(20));
            ((u)localObject3).g(((Cursor)localObject2).getString(21));
            ((u)localObject3).u(((Cursor)localObject2).getString(22));
            ((u)localObject3).p(((Cursor)localObject2).getString(23));
            ((u)localObject3).q(((Cursor)localObject2).getString(24));
            ((u)localObject3).x(((Cursor)localObject2).getString(25));
            ((u)localObject3).h(((Cursor)localObject2).getString(26));
            ((u)localObject3).n(((Cursor)localObject2).getString(27));
            ((u)localObject3).m(((Cursor)localObject2).getString(28));
            localArrayList.add(localObject3);
            if (((Cursor)localObject2).moveToNext()) {
              continue;
            }
          }
          ((Cursor)localObject2).close();
        }
      }
      catch (Exception localException)
      {
        k.a.a.m.b.a(localException);
      }
    }
    a();
    return localArrayList;
  }
  
  public String s(String paramString)
    throws SQLException
  {
    String str2 = "";
    try
    {
      O();
      String str1 = str2;
      try
      {
        Object localObject1 = oc;
        str1 = str2;
        String str3 = e;
        str1 = str2;
        String str4 = O;
        str1 = str2;
        String str5 = P;
        str1 = str2;
        String str6 = Q;
        str1 = str2;
        String str7 = R;
        str1 = str2;
        String str8 = T;
        str1 = str2;
        String str9 = U;
        str1 = str2;
        String str10 = V;
        str1 = str2;
        String str11 = W;
        str1 = str2;
        String str12 = X;
        str1 = str2;
        String str13 = Y;
        str1 = str2;
        String str14 = Z;
        str1 = str2;
        String str15 = aa;
        str1 = str2;
        String str16 = ba;
        str1 = str2;
        String str17 = ca;
        str1 = str2;
        String str18 = da;
        str1 = str2;
        String str19 = ea;
        str1 = str2;
        String str20 = fa;
        str1 = str2;
        String str21 = ga;
        str1 = str2;
        String str22 = ha;
        str1 = str2;
        String str23 = ia;
        str1 = str2;
        String str24 = ja;
        str1 = str2;
        String str25 = S;
        str1 = str2;
        String str26 = ka;
        str1 = str2;
        String str27 = oa;
        str1 = str2;
        String str28 = pa;
        str1 = str2;
        String str29 = qa;
        str1 = str2;
        String str30 = sa;
        str1 = str2;
        String str31 = ta;
        str1 = str2;
        String str32 = ua;
        str1 = str2;
        Object localObject2 = new StringBuilder();
        str1 = str2;
        ((StringBuilder)localObject2).append("(");
        str1 = str2;
        ((StringBuilder)localObject2).append(X);
        str1 = str2;
        ((StringBuilder)localObject2).append("=\"");
        str1 = str2;
        ((StringBuilder)localObject2).append(paramString);
        str1 = str2;
        ((StringBuilder)localObject2).append("\" OR ");
        str1 = str2;
        ((StringBuilder)localObject2).append(oa);
        str1 = str2;
        ((StringBuilder)localObject2).append(" LIKE '%|");
        str1 = str2;
        ((StringBuilder)localObject2).append(paramString);
        str1 = str2;
        ((StringBuilder)localObject2).append("|%') AND ");
        str1 = str2;
        ((StringBuilder)localObject2).append(qa);
        str1 = str2;
        ((StringBuilder)localObject2).append("!=\"I\"");
        str1 = str2;
        paramString = ((StringBuilder)localObject2).toString();
        str1 = str2;
        localObject2 = new StringBuilder();
        str1 = str2;
        ((StringBuilder)localObject2).append(P);
        str1 = str2;
        ((StringBuilder)localObject2).append(" COLLATE NOCASE ASC");
        str1 = str2;
        localObject2 = ((StringBuilder)localObject2).toString();
        str1 = str2;
        localObject1 = ((SQLiteDatabase)localObject1).query(str3, new String[] { str4, str5, str6, str7, str8, str9, str10, str11, str12, str13, str14, str15, str16, str17, str18, str19, str20, str21, str22, str23, str24, str25, str26, str27, str28, str29, str30, str31, str32 }, paramString, null, null, null, (String)localObject2);
        str1 = str2;
        if (localObject1 != null)
        {
          str1 = str2;
          paramString = new StringBuilder();
          str1 = str2;
          paramString.append("");
          str1 = str2;
          paramString.append(((Cursor)localObject1).getCount());
          str1 = str2;
          paramString = paramString.toString();
          str1 = paramString;
          ((Cursor)localObject1).close();
          str1 = paramString;
        }
      }
      catch (Exception paramString)
      {
        k.a.a.m.b.a(paramString);
      }
      a();
      return str1;
    }
    finally {}
  }
  
  public ArrayList<u> s()
    throws SQLException
  {
    for (;;)
    {
      try
      {
        localArrayList = new ArrayList();
        O();
      }
      finally
      {
        ArrayList localArrayList;
        Object localObject2;
        Object localObject3;
        String str1;
        String str2;
        String str3;
        String str4;
        String str5;
        String str6;
        String str7;
        String str8;
        String str9;
        String str10;
        String str11;
        String str12;
        String str13;
        String str14;
        String str15;
        String str16;
        String str17;
        String str18;
        String str19;
        String str20;
        String str21;
        String str22;
        String str23;
        String str24;
        String str25;
        String str26;
        String str27;
        String str28;
        String str29;
        Object localObject4;
        Object localObject5;
        continue;
        throw localObject1;
        continue;
        continue;
      }
      try
      {
        localObject2 = oc;
        localObject3 = e;
        str1 = O;
        str2 = P;
        str3 = Q;
        str4 = R;
        str5 = T;
        str6 = U;
        str7 = V;
        str8 = W;
        str9 = X;
        str10 = Y;
        str11 = Z;
        str12 = aa;
        str13 = ba;
        str14 = ca;
        str15 = da;
        str16 = ea;
        str17 = fa;
        str18 = ga;
        str19 = ha;
        str20 = ia;
        str21 = ja;
        str22 = S;
        str23 = ka;
        str24 = oa;
        str25 = pa;
        str26 = qa;
        str27 = sa;
        str28 = ta;
        str29 = ua;
        localObject4 = new StringBuilder();
        ((StringBuilder)localObject4).append(qa);
        ((StringBuilder)localObject4).append("=\"I\"");
        localObject4 = ((StringBuilder)localObject4).toString();
        localObject5 = new StringBuilder();
        ((StringBuilder)localObject5).append(P);
        ((StringBuilder)localObject5).append(" COLLATE NOCASE ASC");
        localObject5 = ((StringBuilder)localObject5).toString();
        localObject2 = ((SQLiteDatabase)localObject2).query((String)localObject3, new String[] { str1, str2, str3, str4, str5, str6, str7, str8, str9, str10, str11, str12, str13, str14, str15, str16, str17, str18, str19, str20, str21, str22, str23, str24, str25, str26, str27, str28, str29 }, (String)localObject4, null, null, null, (String)localObject5);
        if (localObject2 != null)
        {
          if (((Cursor)localObject2).moveToFirst())
          {
            localObject3 = new u();
            ((u)localObject3).j(((Cursor)localObject2).getString(0));
            ((u)localObject3).o(((Cursor)localObject2).getString(1));
            ((u)localObject3).a(((Cursor)localObject2).getString(2));
            ((u)localObject3).k(((Cursor)localObject2).getString(3));
            ((u)localObject3).f(((Cursor)localObject2).getString(4));
            ((u)localObject3).w(((Cursor)localObject2).getString(5));
            ((u)localObject3).t(((Cursor)localObject2).getString(6));
            ((u)localObject3).y(((Cursor)localObject2).getString(7));
            ((u)localObject3).v(((Cursor)localObject2).getString(8));
            ((u)localObject3).b(((Cursor)localObject2).getString(9));
            ((u)localObject3).c(((Cursor)localObject2).getString(10));
            ((u)localObject3).b(Boolean.parseBoolean(((Cursor)localObject2).getString(11)));
            ((u)localObject3).a(Boolean.parseBoolean(((Cursor)localObject2).getString(12)));
            ((u)localObject3).r(((Cursor)localObject2).getString(13));
            ((u)localObject3).c(Boolean.parseBoolean(((Cursor)localObject2).getString(14)));
            ((u)localObject3).z(((Cursor)localObject2).getString(15));
            ((u)localObject3).i(((Cursor)localObject2).getString(16));
            ((u)localObject3).d(((Cursor)localObject2).getString(17));
            ((u)localObject3).A(((Cursor)localObject2).getString(18));
            ((u)localObject3).l(((Cursor)localObject2).getString(19));
            ((u)localObject3).s(((Cursor)localObject2).getString(20));
            ((u)localObject3).g(((Cursor)localObject2).getString(21));
            ((u)localObject3).u(((Cursor)localObject2).getString(22));
            ((u)localObject3).p(((Cursor)localObject2).getString(23));
            ((u)localObject3).q(((Cursor)localObject2).getString(24));
            ((u)localObject3).x(((Cursor)localObject2).getString(25));
            ((u)localObject3).h(((Cursor)localObject2).getString(26));
            ((u)localObject3).n(((Cursor)localObject2).getString(27));
            ((u)localObject3).m(((Cursor)localObject2).getString(28));
            localArrayList.add(localObject3);
            if (((Cursor)localObject2).moveToNext()) {
              continue;
            }
          }
          ((Cursor)localObject2).close();
        }
      }
      catch (Exception localException)
      {
        k.a.a.m.b.a(localException);
      }
    }
    a();
    return localArrayList;
  }
  
  public ArrayList<u> t()
    throws SQLException
  {
    for (;;)
    {
      try
      {
        localArrayList = new ArrayList();
        O();
      }
      finally
      {
        ArrayList localArrayList;
        Object localObject2;
        Object localObject3;
        String str1;
        String str2;
        String str3;
        String str4;
        String str5;
        String str6;
        String str7;
        String str8;
        String str9;
        String str10;
        String str11;
        String str12;
        String str13;
        String str14;
        String str15;
        String str16;
        String str17;
        String str18;
        String str19;
        String str20;
        String str21;
        String str22;
        String str23;
        String str24;
        String str25;
        String str26;
        String str27;
        String str28;
        Object localObject4;
        Object localObject5;
        continue;
        throw localObject1;
        continue;
        continue;
      }
      try
      {
        localObject2 = oc;
        localObject3 = f;
        str1 = O;
        str2 = P;
        str3 = Q;
        str4 = R;
        str5 = T;
        str6 = U;
        str7 = V;
        str8 = W;
        str9 = X;
        str10 = Y;
        str11 = Z;
        str12 = aa;
        str13 = ba;
        str14 = ca;
        str15 = da;
        str16 = ea;
        str17 = fa;
        str18 = ga;
        str19 = ha;
        str20 = ia;
        str21 = ja;
        str22 = S;
        str23 = ka;
        str24 = oa;
        str25 = pa;
        str26 = qa;
        str27 = ta;
        str28 = ua;
        localObject4 = new StringBuilder();
        ((StringBuilder)localObject4).append(qa);
        ((StringBuilder)localObject4).append("!=\"I\"");
        localObject4 = ((StringBuilder)localObject4).toString();
        localObject5 = new StringBuilder();
        ((StringBuilder)localObject5).append(P);
        ((StringBuilder)localObject5).append(" COLLATE NOCASE ASC");
        localObject5 = ((StringBuilder)localObject5).toString();
        localObject2 = ((SQLiteDatabase)localObject2).query((String)localObject3, new String[] { str1, str2, str3, str4, str5, str6, str7, str8, str9, str10, str11, str12, str13, str14, str15, str16, str17, str18, str19, str20, str21, str22, str23, str24, str25, str26, str27, str28 }, (String)localObject4, null, null, null, (String)localObject5);
        if (localObject2 != null)
        {
          if (((Cursor)localObject2).moveToFirst())
          {
            localObject3 = new u();
            ((u)localObject3).j(((Cursor)localObject2).getString(0));
            ((u)localObject3).o(((Cursor)localObject2).getString(1));
            ((u)localObject3).a(((Cursor)localObject2).getString(2));
            ((u)localObject3).k(((Cursor)localObject2).getString(3));
            ((u)localObject3).f(((Cursor)localObject2).getString(4));
            ((u)localObject3).w(((Cursor)localObject2).getString(5));
            ((u)localObject3).t(((Cursor)localObject2).getString(6));
            ((u)localObject3).y(((Cursor)localObject2).getString(7));
            ((u)localObject3).v(((Cursor)localObject2).getString(8));
            ((u)localObject3).b(((Cursor)localObject2).getString(9));
            ((u)localObject3).c(((Cursor)localObject2).getString(10));
            ((u)localObject3).b(Boolean.parseBoolean(((Cursor)localObject2).getString(11)));
            ((u)localObject3).a(Boolean.parseBoolean(((Cursor)localObject2).getString(12)));
            ((u)localObject3).r(((Cursor)localObject2).getString(13));
            ((u)localObject3).c(Boolean.parseBoolean(((Cursor)localObject2).getString(14)));
            ((u)localObject3).z(((Cursor)localObject2).getString(15));
            ((u)localObject3).i(((Cursor)localObject2).getString(16));
            ((u)localObject3).d(((Cursor)localObject2).getString(17));
            ((u)localObject3).A(((Cursor)localObject2).getString(18));
            ((u)localObject3).l(((Cursor)localObject2).getString(19));
            ((u)localObject3).s(((Cursor)localObject2).getString(20));
            ((u)localObject3).g(((Cursor)localObject2).getString(21));
            ((u)localObject3).u(((Cursor)localObject2).getString(22));
            ((u)localObject3).p(((Cursor)localObject2).getString(23));
            ((u)localObject3).q(((Cursor)localObject2).getString(24));
            ((u)localObject3).x(((Cursor)localObject2).getString(25));
            ((u)localObject3).n(((Cursor)localObject2).getString(26));
            ((u)localObject3).m(((Cursor)localObject2).getString(27));
            localArrayList.add(localObject3);
            if (((Cursor)localObject2).moveToNext()) {
              continue;
            }
          }
          ((Cursor)localObject2).close();
        }
      }
      catch (Exception localException)
      {
        k.a.a.m.b.a(localException);
      }
    }
    a();
    return localArrayList;
  }
  
  public ArrayList<u> t(String paramString)
    throws SQLException
  {
    for (;;)
    {
      try
      {
        localArrayList = new ArrayList();
        O();
      }
      finally
      {
        ArrayList localArrayList;
        Object localObject1;
        String str1;
        String str2;
        String str3;
        String str4;
        String str5;
        String str6;
        String str7;
        String str8;
        String str9;
        String str10;
        String str11;
        String str12;
        String str13;
        String str14;
        String str15;
        String str16;
        String str17;
        String str18;
        String str19;
        String str20;
        String str21;
        String str22;
        String str23;
        String str24;
        String str25;
        String str26;
        String str27;
        String str28;
        String str29;
        String str30;
        Object localObject2;
        continue;
        throw paramString;
        continue;
        continue;
      }
      try
      {
        localObject1 = oc;
        str1 = e;
        str2 = O;
        str3 = P;
        str4 = Q;
        str5 = R;
        str6 = T;
        str7 = U;
        str8 = V;
        str9 = W;
        str10 = X;
        str11 = Y;
        str12 = Z;
        str13 = aa;
        str14 = ba;
        str15 = ca;
        str16 = da;
        str17 = ea;
        str18 = fa;
        str19 = ga;
        str20 = ha;
        str21 = ia;
        str22 = ja;
        str23 = S;
        str24 = ka;
        str25 = oa;
        str26 = pa;
        str27 = qa;
        str28 = sa;
        str29 = ta;
        str30 = ua;
        localObject2 = new StringBuilder();
        ((StringBuilder)localObject2).append("(");
        ((StringBuilder)localObject2).append(X);
        ((StringBuilder)localObject2).append("=\"");
        ((StringBuilder)localObject2).append(paramString);
        ((StringBuilder)localObject2).append("\" OR ");
        ((StringBuilder)localObject2).append(oa);
        ((StringBuilder)localObject2).append(" LIKE '%|");
        ((StringBuilder)localObject2).append(paramString);
        ((StringBuilder)localObject2).append("|%') AND ");
        ((StringBuilder)localObject2).append(qa);
        ((StringBuilder)localObject2).append("!=\"I\"");
        paramString = ((StringBuilder)localObject2).toString();
        localObject2 = new StringBuilder();
        ((StringBuilder)localObject2).append(P);
        ((StringBuilder)localObject2).append(" COLLATE NOCASE ASC");
        localObject2 = ((StringBuilder)localObject2).toString();
        paramString = ((SQLiteDatabase)localObject1).query(str1, new String[] { str2, str3, str4, str5, str6, str7, str8, str9, str10, str11, str12, str13, str14, str15, str16, str17, str18, str19, str20, str21, str22, str23, str24, str25, str26, str27, str28, str29, str30 }, paramString, null, null, null, (String)localObject2);
        if (paramString != null)
        {
          if (paramString.moveToFirst())
          {
            localObject1 = new u();
            ((u)localObject1).j(paramString.getString(0));
            ((u)localObject1).o(paramString.getString(1));
            ((u)localObject1).a(paramString.getString(2));
            ((u)localObject1).k(paramString.getString(3));
            ((u)localObject1).f(paramString.getString(4));
            ((u)localObject1).w(paramString.getString(5));
            ((u)localObject1).t(paramString.getString(6));
            ((u)localObject1).y(paramString.getString(7));
            ((u)localObject1).v(paramString.getString(8));
            ((u)localObject1).b(paramString.getString(9));
            ((u)localObject1).c(paramString.getString(10));
            ((u)localObject1).b(Boolean.parseBoolean(paramString.getString(11)));
            ((u)localObject1).a(Boolean.parseBoolean(paramString.getString(12)));
            ((u)localObject1).r(paramString.getString(13));
            ((u)localObject1).c(Boolean.parseBoolean(paramString.getString(14)));
            ((u)localObject1).z(paramString.getString(15));
            ((u)localObject1).i(paramString.getString(16));
            ((u)localObject1).d(paramString.getString(17));
            ((u)localObject1).A(paramString.getString(18));
            ((u)localObject1).l(paramString.getString(19));
            ((u)localObject1).s(paramString.getString(20));
            ((u)localObject1).g(paramString.getString(21));
            ((u)localObject1).u(paramString.getString(22));
            ((u)localObject1).p(paramString.getString(23));
            ((u)localObject1).q(paramString.getString(24));
            ((u)localObject1).x(paramString.getString(25));
            ((u)localObject1).h(paramString.getString(26));
            ((u)localObject1).n(paramString.getString(27));
            ((u)localObject1).m(paramString.getString(28));
            localArrayList.add(localObject1);
            if (paramString.moveToNext()) {
              continue;
            }
          }
          paramString.close();
        }
      }
      catch (Exception paramString)
      {
        k.a.a.m.b.a(paramString);
      }
    }
    a();
    return localArrayList;
  }
  
  public ArrayList<N> u()
    throws SQLException
  {
    try
    {
      ArrayList localArrayList = new ArrayList();
      O();
      try
      {
        Object localObject2 = oc;
        Object localObject3 = f;
        String str1 = T;
        String str2 = S;
        String str3 = T;
        Object localObject4 = new StringBuilder();
        ((StringBuilder)localObject4).append(T);
        ((StringBuilder)localObject4).append(" COLLATE NOCASE ASC");
        localObject4 = ((StringBuilder)localObject4).toString();
        localObject2 = ((SQLiteDatabase)localObject2).query(true, (String)localObject3, new String[] { str1, str2 }, null, null, str3, null, (String)localObject4, null);
        if (localObject2 != null)
        {
          if (((Cursor)localObject2).moveToFirst()) {
            do
            {
              localObject3 = new N();
              ((N)localObject3).b(((Cursor)localObject2).getString(0));
              ((N)localObject3).a(((Cursor)localObject2).getString(1));
              localArrayList.add(localObject3);
            } while (((Cursor)localObject2).moveToNext());
          }
          ((Cursor)localObject2).close();
        }
      }
      catch (Exception localException)
      {
        k.a.a.m.b.a(localException);
      }
      a();
      return localArrayList;
    }
    finally {}
    for (;;)
    {
      throw localObject1;
    }
  }
  
  public u u(String paramString)
    throws SQLException
  {
    try
    {
      O();
      try
      {
        Object localObject = oc;
        String str1 = e;
        String str2 = O;
        String str3 = P;
        String str4 = Q;
        String str5 = R;
        String str6 = T;
        String str7 = U;
        String str8 = V;
        String str9 = W;
        String str10 = X;
        String str11 = Y;
        String str12 = Z;
        String str13 = aa;
        String str14 = ba;
        String str15 = ca;
        String str16 = da;
        String str17 = ea;
        String str18 = fa;
        String str19 = ga;
        String str20 = ha;
        String str21 = ia;
        String str22 = ja;
        String str23 = S;
        String str24 = ka;
        String str25 = oa;
        String str26 = pa;
        String str27 = qa;
        String str28 = sa;
        String str29 = ta;
        String str30 = ua;
        StringBuilder localStringBuilder = new StringBuilder();
        localStringBuilder.append(O);
        localStringBuilder.append("=\"");
        localStringBuilder.append(paramString);
        localStringBuilder.append("\"");
        paramString = localStringBuilder.toString();
        localObject = ((SQLiteDatabase)localObject).query(str1, new String[] { str2, str3, str4, str5, str6, str7, str8, str9, str10, str11, str12, str13, str14, str15, str16, str17, str18, str19, str20, str21, str22, str23, str24, str25, str26, str27, str28, str29, str30 }, paramString, null, null, null, null);
        if (localObject != null)
        {
          if (((Cursor)localObject).moveToFirst())
          {
            paramString = new u();
            try
            {
              paramString.j(((Cursor)localObject).getString(0));
              paramString.o(((Cursor)localObject).getString(1));
              paramString.a(((Cursor)localObject).getString(2));
              paramString.k(((Cursor)localObject).getString(3));
              paramString.f(((Cursor)localObject).getString(4));
              paramString.w(((Cursor)localObject).getString(5));
              paramString.t(((Cursor)localObject).getString(6));
              paramString.y(((Cursor)localObject).getString(7));
              paramString.v(((Cursor)localObject).getString(8));
              paramString.b(((Cursor)localObject).getString(9));
              paramString.c(((Cursor)localObject).getString(10));
              paramString.b(Boolean.parseBoolean(((Cursor)localObject).getString(11)));
              paramString.a(Boolean.parseBoolean(((Cursor)localObject).getString(12)));
              paramString.r(((Cursor)localObject).getString(13));
              paramString.c(Boolean.parseBoolean(((Cursor)localObject).getString(14)));
              paramString.z(((Cursor)localObject).getString(15));
              paramString.i(((Cursor)localObject).getString(16));
              paramString.d(((Cursor)localObject).getString(17));
              paramString.A(((Cursor)localObject).getString(18));
              paramString.l(((Cursor)localObject).getString(19));
              paramString.s(((Cursor)localObject).getString(20));
              paramString.g(((Cursor)localObject).getString(21));
              paramString.u(((Cursor)localObject).getString(22));
              paramString.p(((Cursor)localObject).getString(23));
              paramString.q(((Cursor)localObject).getString(24));
              paramString.x(((Cursor)localObject).getString(25));
              paramString.h(((Cursor)localObject).getString(26));
              paramString.n(((Cursor)localObject).getString(27));
              paramString.m(((Cursor)localObject).getString(28));
            }
            catch (Exception localException1)
            {
              break label796;
            }
          }
          else
          {
            paramString = null;
          }
          try
          {
            localException1.close();
          }
          catch (Exception localException2)
          {
            break label796;
          }
        }
        else
        {
          paramString = null;
        }
      }
      catch (Exception localException3)
      {
        paramString = null;
        label796:
        k.a.a.m.b.a(localException3);
      }
      a();
      return paramString;
    }
    finally {}
  }
  
  public ArrayList<N> v()
    throws SQLException
  {
    for (;;)
    {
      try
      {
        localArrayList = new ArrayList();
        O();
      }
      finally
      {
        ArrayList localArrayList;
        Object localObject2;
        Object localObject3;
        Object localObject4;
        Object localObject5;
        Object localObject6;
        Object localObject7;
        int i1;
        continue;
        throw localObject1;
        continue;
        i1 += 1;
        continue;
      }
      try
      {
        localObject2 = oc;
        localObject3 = f;
        localObject4 = ua;
        localObject5 = ta;
        localObject6 = ua;
        localObject7 = new StringBuilder();
        ((StringBuilder)localObject7).append(ua);
        ((StringBuilder)localObject7).append(" COLLATE NOCASE ASC");
        localObject7 = ((StringBuilder)localObject7).toString();
        localObject2 = ((SQLiteDatabase)localObject2).query(true, (String)localObject3, new String[] { localObject4, localObject5 }, null, null, (String)localObject6, null, (String)localObject7, null);
        if (localObject2 != null)
        {
          if (((Cursor)localObject2).moveToFirst())
          {
            localObject3 = new ArrayList();
            localObject4 = ((Cursor)localObject2).getString(0).split(",");
            localObject5 = ((Cursor)localObject2).getString(1).split(",");
            if (localObject5.length == localObject4.length)
            {
              i1 = 0;
              if (i1 < localObject5.length)
              {
                if (((ArrayList)localObject3).contains(localObject5[i1])) {
                  continue;
                }
                ((ArrayList)localObject3).add(localObject5[i1]);
                localObject6 = new N();
                ((N)localObject6).b(localObject4[i1]);
                ((N)localObject6).a(localObject5[i1]);
                localArrayList.add(localObject6);
                continue;
              }
            }
            if (((Cursor)localObject2).moveToNext()) {
              continue;
            }
          }
          ((Cursor)localObject2).close();
        }
      }
      catch (Exception localException)
      {
        k.a.a.m.b.a(localException);
      }
    }
    a();
    return localArrayList;
  }
  
  public O v(String paramString)
    throws SQLException
  {
    try
    {
      O();
      try
      {
        Object localObject = oc;
        String str1 = g;
        String str2 = O;
        String str3 = P;
        String str4 = Q;
        String str5 = R;
        String str6 = Y;
        String str7 = Z;
        String str8 = ca;
        String str9 = ea;
        String str10 = fa;
        String str11 = ga;
        String str12 = ha;
        String str13 = la;
        String str14 = ma;
        String str15 = na;
        String str16 = pa;
        String str17 = ra;
        String str18 = S;
        String str19 = T;
        String str20 = X;
        String str21 = oa;
        String str22 = sa;
        String str23 = qa;
        String str24 = ta;
        String str25 = ua;
        StringBuilder localStringBuilder = new StringBuilder();
        localStringBuilder.append(O);
        localStringBuilder.append("=\"");
        localStringBuilder.append(paramString);
        localStringBuilder.append("\"");
        paramString = localStringBuilder.toString();
        localObject = ((SQLiteDatabase)localObject).query(str1, new String[] { str2, str3, str4, str5, str6, str7, str8, str9, str10, str11, str12, str13, str14, str15, str16, str17, str18, str19, str20, str21, str22, str23, str24, str25 }, paramString, null, null, null, null);
        if (localObject != null)
        {
          if (((Cursor)localObject).moveToFirst())
          {
            paramString = new O();
            try
            {
              paramString.j(((Cursor)localObject).getString(0));
              paramString.n(((Cursor)localObject).getString(1));
              paramString.a(((Cursor)localObject).getString(2));
              paramString.k(((Cursor)localObject).getString(3));
              paramString.b(((Cursor)localObject).getString(4));
              paramString.c(((Cursor)localObject).getString(5));
              paramString.t(((Cursor)localObject).getString(6));
              paramString.w(((Cursor)localObject).getString(7));
              paramString.i(((Cursor)localObject).getString(8));
              paramString.d(((Cursor)localObject).getString(9));
              paramString.x(((Cursor)localObject).getString(10));
              paramString.q(((Cursor)localObject).getString(11));
              paramString.o(((Cursor)localObject).getString(12));
              paramString.p(((Cursor)localObject).getString(13));
              paramString.s(((Cursor)localObject).getString(14));
              paramString.e(((Cursor)localObject).getString(15));
              paramString.g(((Cursor)localObject).getString(16));
              paramString.f(((Cursor)localObject).getString(17));
              paramString.u(((Cursor)localObject).getString(18));
              paramString.r(((Cursor)localObject).getString(19));
              paramString.h(((Cursor)localObject).getString(20));
              paramString.v(((Cursor)localObject).getString(21));
              paramString.m(((Cursor)localObject).getString(22));
              paramString.l(((Cursor)localObject).getString(23));
            }
            catch (Exception localException1)
            {
              break label672;
            }
          }
          else
          {
            paramString = null;
          }
          try
          {
            localException1.close();
          }
          catch (Exception localException2)
          {
            break label672;
          }
        }
        else
        {
          paramString = null;
        }
      }
      catch (Exception localException3)
      {
        paramString = null;
        label672:
        k.a.a.m.b.a(localException3);
      }
      a();
      return paramString;
    }
    finally {}
  }
  
  public String w(String paramString)
    throws SQLException
  {
    String str2 = "en";
    try
    {
      O();
      String str1 = str2;
      try
      {
        Object localObject = oc;
        str1 = str2;
        String str3 = e;
        str1 = str2;
        String str4 = ia;
        str1 = str2;
        StringBuilder localStringBuilder = new StringBuilder();
        str1 = str2;
        localStringBuilder.append(O);
        str1 = str2;
        localStringBuilder.append("=\"");
        str1 = str2;
        localStringBuilder.append(paramString);
        str1 = str2;
        localStringBuilder.append("\"");
        str1 = str2;
        paramString = localStringBuilder.toString();
        str1 = str2;
        localObject = ((SQLiteDatabase)localObject).query(str3, new String[] { str4 }, paramString, null, null, null, null);
        paramString = str2;
        if (localObject != null)
        {
          paramString = str2;
          str1 = str2;
          if (((Cursor)localObject).moveToFirst())
          {
            str1 = str2;
            paramString = ((Cursor)localObject).getString(0);
          }
          str1 = paramString;
          ((Cursor)localObject).close();
        }
      }
      catch (Exception paramString)
      {
        k.a.a.m.b.a(paramString);
        paramString = str1;
      }
      a();
      return paramString;
    }
    finally {}
  }
  
  public ArrayList<u> w()
    throws SQLException
  {
    for (;;)
    {
      try
      {
        localArrayList = new ArrayList();
        O();
      }
      finally
      {
        ArrayList localArrayList;
        Object localObject2;
        Object localObject3;
        String str1;
        String str2;
        String str3;
        String str4;
        String str5;
        String str6;
        String str7;
        String str8;
        String str9;
        String str10;
        String str11;
        String str12;
        String str13;
        String str14;
        String str15;
        String str16;
        String str17;
        String str18;
        String str19;
        String str20;
        String str21;
        String str22;
        String str23;
        String str24;
        String str25;
        String str26;
        String str27;
        String str28;
        Object localObject4;
        Object localObject5;
        continue;
        throw localObject1;
        continue;
        continue;
      }
      try
      {
        localObject2 = oc;
        localObject3 = f;
        str1 = O;
        str2 = P;
        str3 = Q;
        str4 = R;
        str5 = T;
        str6 = U;
        str7 = V;
        str8 = W;
        str9 = X;
        str10 = Y;
        str11 = Z;
        str12 = aa;
        str13 = ba;
        str14 = ca;
        str15 = da;
        str16 = ea;
        str17 = fa;
        str18 = ga;
        str19 = ha;
        str20 = ia;
        str21 = ja;
        str22 = S;
        str23 = ka;
        str24 = oa;
        str25 = pa;
        str26 = qa;
        str27 = ta;
        str28 = ua;
        localObject4 = new StringBuilder();
        ((StringBuilder)localObject4).append(qa);
        ((StringBuilder)localObject4).append("=\"I\"");
        localObject4 = ((StringBuilder)localObject4).toString();
        localObject5 = new StringBuilder();
        ((StringBuilder)localObject5).append(P);
        ((StringBuilder)localObject5).append(" COLLATE NOCASE ASC");
        localObject5 = ((StringBuilder)localObject5).toString();
        localObject2 = ((SQLiteDatabase)localObject2).query((String)localObject3, new String[] { str1, str2, str3, str4, str5, str6, str7, str8, str9, str10, str11, str12, str13, str14, str15, str16, str17, str18, str19, str20, str21, str22, str23, str24, str25, str26, str27, str28 }, (String)localObject4, null, null, null, (String)localObject5);
        if (localObject2 != null)
        {
          if (((Cursor)localObject2).moveToFirst())
          {
            localObject3 = new u();
            ((u)localObject3).j(((Cursor)localObject2).getString(0));
            ((u)localObject3).o(((Cursor)localObject2).getString(1));
            ((u)localObject3).a(((Cursor)localObject2).getString(2));
            ((u)localObject3).k(((Cursor)localObject2).getString(3));
            ((u)localObject3).f(((Cursor)localObject2).getString(4));
            ((u)localObject3).w(((Cursor)localObject2).getString(5));
            ((u)localObject3).t(((Cursor)localObject2).getString(6));
            ((u)localObject3).y(((Cursor)localObject2).getString(7));
            ((u)localObject3).v(((Cursor)localObject2).getString(8));
            ((u)localObject3).b(((Cursor)localObject2).getString(9));
            ((u)localObject3).c(((Cursor)localObject2).getString(10));
            ((u)localObject3).b(Boolean.parseBoolean(((Cursor)localObject2).getString(11)));
            ((u)localObject3).a(Boolean.parseBoolean(((Cursor)localObject2).getString(12)));
            ((u)localObject3).r(((Cursor)localObject2).getString(13));
            ((u)localObject3).c(Boolean.parseBoolean(((Cursor)localObject2).getString(14)));
            ((u)localObject3).z(((Cursor)localObject2).getString(15));
            ((u)localObject3).i(((Cursor)localObject2).getString(16));
            ((u)localObject3).d(((Cursor)localObject2).getString(17));
            ((u)localObject3).A(((Cursor)localObject2).getString(18));
            ((u)localObject3).l(((Cursor)localObject2).getString(19));
            ((u)localObject3).s(((Cursor)localObject2).getString(20));
            ((u)localObject3).g(((Cursor)localObject2).getString(21));
            ((u)localObject3).u(((Cursor)localObject2).getString(22));
            ((u)localObject3).p(((Cursor)localObject2).getString(23));
            ((u)localObject3).q(((Cursor)localObject2).getString(24));
            ((u)localObject3).x(((Cursor)localObject2).getString(25));
            ((u)localObject3).n(((Cursor)localObject2).getString(26));
            ((u)localObject3).m(((Cursor)localObject2).getString(27));
            localArrayList.add(localObject3);
            if (((Cursor)localObject2).moveToNext()) {
              continue;
            }
          }
          ((Cursor)localObject2).close();
        }
      }
      catch (Exception localException)
      {
        k.a.a.m.b.a(localException);
      }
    }
    a();
    return localArrayList;
  }
  
  public ArrayList<u> x()
    throws SQLException
  {
    for (;;)
    {
      try
      {
        localArrayList = new ArrayList();
        O();
      }
      finally
      {
        ArrayList localArrayList;
        Object localObject2;
        Object localObject3;
        String str1;
        String str2;
        String str3;
        String str4;
        String str5;
        String str6;
        String str7;
        String str8;
        String str9;
        String str10;
        String str11;
        String str12;
        String str13;
        String str14;
        String str15;
        String str16;
        String str17;
        String str18;
        String str19;
        String str20;
        String str21;
        String str22;
        String str23;
        String str24;
        String str25;
        String str26;
        String str27;
        String str28;
        Object localObject4;
        Object localObject5;
        continue;
        throw localObject1;
        continue;
        continue;
      }
      try
      {
        localObject2 = oc;
        localObject3 = f;
        str1 = O;
        str2 = P;
        str3 = Q;
        str4 = R;
        str5 = T;
        str6 = U;
        str7 = V;
        str8 = W;
        str9 = X;
        str10 = Y;
        str11 = Z;
        str12 = aa;
        str13 = ba;
        str14 = ca;
        str15 = da;
        str16 = ea;
        str17 = fa;
        str18 = ga;
        str19 = ha;
        str20 = ia;
        str21 = ja;
        str22 = S;
        str23 = ka;
        str24 = oa;
        str25 = pa;
        str26 = qa;
        str27 = ta;
        str28 = ua;
        localObject4 = new StringBuilder();
        ((StringBuilder)localObject4).append("(");
        ((StringBuilder)localObject4).append(X);
        ((StringBuilder)localObject4).append("!=\"99\" OR ");
        ((StringBuilder)localObject4).append(oa);
        ((StringBuilder)localObject4).append("!=\"\") AND ");
        ((StringBuilder)localObject4).append(qa);
        ((StringBuilder)localObject4).append("!=\"I\"");
        localObject4 = ((StringBuilder)localObject4).toString();
        localObject5 = new StringBuilder();
        ((StringBuilder)localObject5).append(P);
        ((StringBuilder)localObject5).append(" COLLATE NOCASE ASC");
        localObject5 = ((StringBuilder)localObject5).toString();
        localObject2 = ((SQLiteDatabase)localObject2).query((String)localObject3, new String[] { str1, str2, str3, str4, str5, str6, str7, str8, str9, str10, str11, str12, str13, str14, str15, str16, str17, str18, str19, str20, str21, str22, str23, str24, str25, str26, str27, str28 }, (String)localObject4, null, null, null, (String)localObject5);
        if (localObject2 != null)
        {
          if (((Cursor)localObject2).moveToFirst())
          {
            localObject3 = new u();
            ((u)localObject3).j(((Cursor)localObject2).getString(0));
            ((u)localObject3).o(((Cursor)localObject2).getString(1));
            ((u)localObject3).a(((Cursor)localObject2).getString(2));
            ((u)localObject3).k(((Cursor)localObject2).getString(3));
            ((u)localObject3).f(((Cursor)localObject2).getString(4));
            ((u)localObject3).w(((Cursor)localObject2).getString(5));
            ((u)localObject3).t(((Cursor)localObject2).getString(6));
            ((u)localObject3).y(((Cursor)localObject2).getString(7));
            ((u)localObject3).v(((Cursor)localObject2).getString(8));
            ((u)localObject3).b(((Cursor)localObject2).getString(9));
            ((u)localObject3).c(((Cursor)localObject2).getString(10));
            ((u)localObject3).b(Boolean.parseBoolean(((Cursor)localObject2).getString(11)));
            ((u)localObject3).a(Boolean.parseBoolean(((Cursor)localObject2).getString(12)));
            ((u)localObject3).r(((Cursor)localObject2).getString(13));
            ((u)localObject3).c(Boolean.parseBoolean(((Cursor)localObject2).getString(14)));
            ((u)localObject3).z(((Cursor)localObject2).getString(15));
            ((u)localObject3).i(((Cursor)localObject2).getString(16));
            ((u)localObject3).d(((Cursor)localObject2).getString(17));
            ((u)localObject3).A(((Cursor)localObject2).getString(18));
            ((u)localObject3).l(((Cursor)localObject2).getString(19));
            ((u)localObject3).s(((Cursor)localObject2).getString(20));
            ((u)localObject3).g(((Cursor)localObject2).getString(21));
            ((u)localObject3).u(((Cursor)localObject2).getString(22));
            ((u)localObject3).p(((Cursor)localObject2).getString(23));
            ((u)localObject3).q(((Cursor)localObject2).getString(24));
            ((u)localObject3).x(((Cursor)localObject2).getString(25));
            ((u)localObject3).n(((Cursor)localObject2).getString(26));
            ((u)localObject3).m(((Cursor)localObject2).getString(27));
            localArrayList.add(localObject3);
            if (((Cursor)localObject2).moveToNext()) {
              continue;
            }
          }
          ((Cursor)localObject2).close();
        }
      }
      catch (Exception localException)
      {
        k.a.a.m.b.a(localException);
      }
    }
    a();
    return localArrayList;
  }
  
  public S x(String paramString)
    throws SQLException
  {
    try
    {
      O();
      try
      {
        Object localObject = oc;
        String str1 = s;
        String str2 = t;
        String str3 = vb;
        String str4 = wb;
        String str5 = xb;
        String str6 = yb;
        String str7 = zb;
        String str8 = Ab;
        String str9 = Bb;
        String str10 = Cb;
        String str11 = Db;
        String str12 = Eb;
        String str13 = Fb;
        String str14 = Gb;
        String str15 = Hb;
        String str16 = Ib;
        String str17 = Jb;
        String str18 = Kb;
        String str19 = Lb;
        String str20 = Mb;
        String str21 = Nb;
        String str22 = Ob;
        String str23 = Pb;
        String str24 = Qb;
        String str25 = Rb;
        String str26 = Sb;
        String str27 = Tb;
        String str28 = Ub;
        String str29 = Vb;
        String str30 = Wb;
        String str31 = Xb;
        String str32 = Yb;
        String str33 = Zb;
        String str34 = _b;
        String str35 = ac;
        String str36 = bc;
        String str37 = cc;
        String str38 = dc;
        String str39 = ec;
        String str40 = fc;
        String str41 = gc;
        String str42 = hc;
        String str43 = ic;
        String str44 = jc;
        String str45 = kc;
        String str46 = lc;
        StringBuilder localStringBuilder = new StringBuilder();
        localStringBuilder.append(t);
        localStringBuilder.append("=\"");
        localStringBuilder.append(paramString);
        localStringBuilder.append("\"");
        paramString = localStringBuilder.toString();
        localObject = ((SQLiteDatabase)localObject).query(str1, new String[] { str2, str3, str4, str5, str6, str7, str8, str9, str10, str11, str12, str13, str14, str15, str16, str17, str18, str19, str20, str21, str22, str23, str24, str25, str26, str27, str28, str29, str30, str31, str32, str33, str34, str35, str36, str37, str38, str39, str40, str41, str42, str43, str44, str45, str46 }, paramString, null, null, null, null);
        if (localObject != null)
        {
          if (((Cursor)localObject).moveToFirst())
          {
            paramString = new S();
            try
            {
              paramString.f(((Cursor)localObject).getString(0));
              paramString.B(((Cursor)localObject).getString(1));
              paramString.g(((Cursor)localObject).getString(2));
              paramString.y(((Cursor)localObject).getString(3));
              paramString.F(((Cursor)localObject).getString(4));
              paramString.i(((Cursor)localObject).getString(5));
              paramString.L(((Cursor)localObject).getString(6));
              paramString.M(((Cursor)localObject).getString(7));
              paramString.p(((Cursor)localObject).getString(8));
              paramString.q(((Cursor)localObject).getString(9));
              paramString.H(((Cursor)localObject).getString(10));
              paramString.k(((Cursor)localObject).getString(11));
              paramString.O(((Cursor)localObject).getString(12));
              paramString.N(((Cursor)localObject).getString(13));
              paramString.s(((Cursor)localObject).getString(14));
              paramString.r(((Cursor)localObject).getString(15));
              paramString.P(((Cursor)localObject).getString(16));
              paramString.t(((Cursor)localObject).getString(17));
              paramString.c(((Cursor)localObject).getString(18));
              paramString.C(((Cursor)localObject).getString(19));
              paramString.e(((Cursor)localObject).getString(20));
              paramString.A(((Cursor)localObject).getString(21));
              paramString.G(((Cursor)localObject).getString(22));
              paramString.j(((Cursor)localObject).getString(23));
              paramString.Q(((Cursor)localObject).getString(24));
              paramString.u(((Cursor)localObject).getString(25));
              paramString.R(((Cursor)localObject).getString(26));
              paramString.I(((Cursor)localObject).getString(27));
              paramString.n(((Cursor)localObject).getString(28));
              paramString.l(((Cursor)localObject).getString(29));
              paramString.K(((Cursor)localObject).getString(30));
              paramString.n(((Cursor)localObject).getString(31));
              paramString.J(((Cursor)localObject).getString(32));
              paramString.m(((Cursor)localObject).getString(33));
              paramString.E(((Cursor)localObject).getString(34));
              paramString.b(((Cursor)localObject).getString(35));
              paramString.x(((Cursor)localObject).getString(36));
              paramString.w(((Cursor)localObject).getString(37));
              paramString.d(((Cursor)localObject).getString(38));
              paramString.D(((Cursor)localObject).getString(39));
              paramString.S(((Cursor)localObject).getString(40));
              paramString.a(((Cursor)localObject).getString(41));
              paramString.h(((Cursor)localObject).getString(42));
              paramString.v(((Cursor)localObject).getString(43));
              paramString.z(((Cursor)localObject).getString(44));
            }
            catch (Exception localException1)
            {
              break label1155;
            }
          }
          else
          {
            paramString = null;
          }
          try
          {
            localException1.close();
          }
          catch (Exception localException2)
          {
            break label1155;
          }
        }
        else
        {
          paramString = null;
        }
      }
      catch (Exception localException3)
      {
        paramString = null;
        label1155:
        k.a.a.m.b.a(localException3);
      }
      a();
      return paramString;
    }
    finally {}
  }
  
  public String y(String paramString)
    throws SQLException
  {
    String str2 = "";
    try
    {
      O();
      String str1 = str2;
      try
      {
        Object localObject = oc;
        str1 = str2;
        String str3 = s;
        str1 = str2;
        String str4 = t;
        str1 = str2;
        StringBuilder localStringBuilder = new StringBuilder();
        str1 = str2;
        localStringBuilder.append(vb);
        str1 = str2;
        localStringBuilder.append("=\"");
        str1 = str2;
        localStringBuilder.append(paramString);
        str1 = str2;
        localStringBuilder.append("\"");
        str1 = str2;
        paramString = localStringBuilder.toString();
        str1 = str2;
        localObject = ((SQLiteDatabase)localObject).query(str3, new String[] { str4 }, paramString, null, null, null, null);
        paramString = str2;
        if (localObject != null)
        {
          paramString = str2;
          str1 = str2;
          if (((Cursor)localObject).moveToLast())
          {
            str1 = str2;
            paramString = ((Cursor)localObject).getString(0);
          }
          str1 = paramString;
          ((Cursor)localObject).close();
        }
      }
      catch (Exception paramString)
      {
        k.a.a.m.b.a(paramString);
        paramString = str1;
      }
      a();
      return paramString;
    }
    finally {}
  }
  
  public ArrayList<String> y()
    throws SQLException
  {
    try
    {
      ArrayList localArrayList = new ArrayList();
      O();
      try
      {
        Cursor localCursor = oc.query(f, new String[] { O }, null, null, null, null, null);
        if (localCursor != null)
        {
          if (localCursor.moveToFirst()) {
            do
            {
              localArrayList.add(localCursor.getString(0));
            } while (localCursor.moveToNext());
          }
          localCursor.close();
        }
      }
      catch (Exception localException)
      {
        k.a.a.m.b.a(localException);
      }
      a();
      return localArrayList;
    }
    finally {}
    for (;;)
    {
      throw localObject;
    }
  }
  
  public ArrayList<String> z()
    throws SQLException
  {
    try
    {
      ArrayList localArrayList = new ArrayList();
      O();
      try
      {
        Cursor localCursor = oc.query(m, new String[] { Ea }, null, null, null, null, null);
        if (localCursor != null)
        {
          if (localCursor.moveToLast()) {
            do
            {
              localArrayList.add(localCursor.getString(0));
            } while (localCursor.moveToPrevious());
          }
          localCursor.close();
        }
      }
      catch (Exception localException)
      {
        k.a.a.m.b.a(localException);
      }
      a();
      return localArrayList;
    }
    finally {}
    for (;;)
    {
      throw localObject;
    }
  }
  
  public ArrayList<f> z(String paramString)
    throws SQLException
  {
    for (;;)
    {
      try
      {
        localArrayList = new ArrayList();
        O();
      }
      finally
      {
        ArrayList localArrayList;
        Object localObject1;
        String str1;
        String str2;
        String str3;
        String str4;
        String str5;
        String str6;
        String str7;
        String str8;
        String str9;
        String str10;
        String str11;
        String str12;
        String str13;
        String str14;
        String str15;
        String str16;
        String str17;
        String str18;
        String str19;
        Object localObject2;
        continue;
        throw paramString;
        continue;
        continue;
      }
      try
      {
        localObject1 = oc;
        str1 = q;
        str2 = Sa;
        str3 = Ta;
        str4 = Ua;
        str5 = Va;
        str6 = Wa;
        str7 = Xa;
        str8 = Ya;
        str9 = Za;
        str10 = _a;
        str11 = ab;
        str12 = bb;
        str13 = cb;
        str14 = db;
        str15 = eb;
        str16 = fb;
        str17 = gb;
        str18 = hb;
        str19 = ib;
        localObject2 = new StringBuilder();
        ((StringBuilder)localObject2).append(L);
        ((StringBuilder)localObject2).append("=\"");
        ((StringBuilder)localObject2).append(paramString);
        ((StringBuilder)localObject2).append("\"");
        paramString = ((StringBuilder)localObject2).toString();
        localObject2 = Sa;
        paramString = ((SQLiteDatabase)localObject1).query(str1, new String[] { str2, str3, str4, str5, str6, str7, str8, str9, str10, str11, str12, str13, str14, str15, str16, str17, str18, str19 }, paramString, null, (String)localObject2, null, null);
        if (paramString != null)
        {
          if (paramString.moveToFirst())
          {
            localObject1 = new f();
            ((f)localObject1).c(paramString.getString(0));
            ((f)localObject1).b(paramString.getString(1));
            ((f)localObject1).d(paramString.getString(2));
            ((f)localObject1).e(paramString.getString(3));
            ((f)localObject1).f(paramString.getString(4));
            ((f)localObject1).g(paramString.getString(5));
            ((f)localObject1).o(paramString.getString(6));
            ((f)localObject1).j(paramString.getString(7));
            ((f)localObject1).m(paramString.getString(8));
            ((f)localObject1).r(paramString.getString(9));
            ((f)localObject1).p(paramString.getString(10));
            ((f)localObject1).k(paramString.getString(11));
            ((f)localObject1).i(paramString.getString(12));
            ((f)localObject1).l(paramString.getString(13));
            ((f)localObject1).n(paramString.getString(14));
            ((f)localObject1).q(paramString.getString(15));
            ((f)localObject1).a(paramString.getString(16));
            ((f)localObject1).h(paramString.getString(17));
            localArrayList.add(localObject1);
            if (paramString.moveToNext()) {
              continue;
            }
          }
          paramString.close();
        }
      }
      catch (Exception paramString)
      {
        k.a.a.m.b.a(paramString);
      }
    }
    a();
    return localArrayList;
  }
}
