package org.json;

import f.a.a.a.a;
import java.io.IOException;
import java.io.Writer;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.lang.reflect.Modifier;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;
import java.util.TreeSet;

public class JSONObject
{
  public static final Object NULL = new JSONObject.Null(null);
  public Map map;
  
  public JSONObject()
  {
    map = new HashMap();
  }
  
  public JSONObject(Object paramObject)
  {
    this();
    populateInternalMap(paramObject, false);
  }
  
  public JSONObject(Object paramObject, boolean paramBoolean)
  {
    this();
    populateInternalMap(paramObject, paramBoolean);
  }
  
  public JSONObject(Object paramObject, String[] paramArrayOfString)
  {
    this();
    Class localClass = paramObject.getClass();
    int i = 0;
    for (;;)
    {
      if (i >= paramArrayOfString.length) {
        return;
      }
      String str = paramArrayOfString[i];
      try
      {
        putOpt(str, localClass.getField(str).get(paramObject));
        i += 1;
      }
      catch (Exception localException)
      {
        for (;;) {}
      }
    }
  }
  
  public JSONObject(String paramString)
    throws JSONException
  {
    this(new JSONTokener(paramString));
  }
  
  public JSONObject(Map paramMap)
  {
    Object localObject = paramMap;
    if (paramMap == null) {
      localObject = new HashMap();
    }
    map = ((Map)localObject);
  }
  
  public JSONObject(Map paramMap, boolean paramBoolean)
  {
    map = new HashMap();
    if (paramMap != null)
    {
      paramMap = paramMap.entrySet().iterator();
      for (;;)
      {
        if (!paramMap.hasNext()) {
          return;
        }
        Map.Entry localEntry = (Map.Entry)paramMap.next();
        if (isStandardProperty(localEntry.getValue().getClass())) {
          map.put(localEntry.getKey(), localEntry.getValue());
        } else {
          map.put(localEntry.getKey(), new JSONObject(localEntry.getValue(), paramBoolean));
        }
      }
    }
  }
  
  public JSONObject(JSONObject paramJSONObject, String[] paramArrayOfString)
    throws JSONException
  {
    this();
    int i = 0;
    for (;;)
    {
      if (i >= paramArrayOfString.length) {
        return;
      }
      putOnce(paramArrayOfString[i], paramJSONObject.opt(paramArrayOfString[i]));
      i += 1;
    }
  }
  
  public JSONObject(JSONTokener paramJSONTokener)
    throws JSONException
  {
    this();
    if (paramJSONTokener.nextClean() == '{')
    {
      for (;;)
      {
        int i = paramJSONTokener.nextClean();
        if (i == 0) {
          break label139;
        }
        if (i == 125) {
          break label138;
        }
        paramJSONTokener.back();
        String str = paramJSONTokener.nextValue().toString();
        i = paramJSONTokener.nextClean();
        if (i == 61)
        {
          if (paramJSONTokener.next() != '>') {
            paramJSONTokener.back();
          }
        }
        else {
          if (i != 58) {
            break;
          }
        }
        putOnce(str, paramJSONTokener.nextValue());
        i = paramJSONTokener.nextClean();
        if ((i != 44) && (i != 59))
        {
          if (i == 125) {
            return;
          }
          throw paramJSONTokener.syntaxError("Expected a ',' or '}'");
        }
        if (paramJSONTokener.nextClean() == '}') {
          return;
        }
        paramJSONTokener.back();
      }
      throw paramJSONTokener.syntaxError("Expected a ':' after a key");
      label138:
      return;
      label139:
      throw paramJSONTokener.syntaxError("A JSONObject text must end with '}'");
    }
    paramJSONTokener = paramJSONTokener.syntaxError("A JSONObject text must begin with '{'");
    for (;;)
    {
      throw paramJSONTokener;
    }
  }
  
  public static String doubleToString(double paramDouble)
  {
    if ((!Double.isInfinite(paramDouble)) && (!Double.isNaN(paramDouble)))
    {
      String str1 = Double.toString(paramDouble);
      String str2 = str1;
      if (str1.indexOf('.') > 0)
      {
        str2 = str1;
        if (str1.indexOf('e') < 0)
        {
          str2 = str1;
          if (str1.indexOf('E') < 0) {
            for (;;)
            {
              if (!str1.endsWith("0"))
              {
                str2 = str1;
                if (!str1.endsWith(".")) {
                  break;
                }
                return a.b(str1, -1, 0);
              }
              str1 = a.b(str1, -1, 0);
            }
          }
        }
      }
      return str2;
    }
    return "null";
  }
  
  public static String[] getNames(Object paramObject)
  {
    if (paramObject == null) {
      return null;
    }
    paramObject = paramObject.getClass().getFields();
    int j = paramObject.length;
    if (j == 0) {
      return null;
    }
    String[] arrayOfString = new String[j];
    int i = 0;
    for (;;)
    {
      if (i >= j) {
        return arrayOfString;
      }
      arrayOfString[i] = paramObject[i].getName();
      i += 1;
    }
  }
  
  public static String[] getNames(JSONObject paramJSONObject)
  {
    int i = paramJSONObject.length();
    if (i == 0) {
      return null;
    }
    paramJSONObject = paramJSONObject.keys();
    String[] arrayOfString = new String[i];
    i = 0;
    for (;;)
    {
      if (!paramJSONObject.hasNext()) {
        return arrayOfString;
      }
      arrayOfString[i] = ((String)paramJSONObject.next());
      i += 1;
    }
  }
  
  public static boolean isStandardProperty(Class paramClass)
  {
    return (paramClass.isPrimitive()) || (paramClass.isAssignableFrom(Byte.class)) || (paramClass.isAssignableFrom(Short.class)) || (paramClass.isAssignableFrom(Integer.class)) || (paramClass.isAssignableFrom(Long.class)) || (paramClass.isAssignableFrom(Float.class)) || (paramClass.isAssignableFrom(Double.class)) || (paramClass.isAssignableFrom(Character.class)) || (paramClass.isAssignableFrom(String.class)) || (paramClass.isAssignableFrom(Boolean.class));
  }
  
  public static String numberToString(Number paramNumber)
    throws JSONException
  {
    if (paramNumber != null)
    {
      testValidity(paramNumber);
      paramNumber = paramNumber.toString();
      Number localNumber = paramNumber;
      if (paramNumber.indexOf('.') > 0)
      {
        localNumber = paramNumber;
        if (paramNumber.indexOf('e') < 0)
        {
          localNumber = paramNumber;
          if (paramNumber.indexOf('E') < 0) {
            for (;;)
            {
              if (!paramNumber.endsWith("0"))
              {
                localNumber = paramNumber;
                if (!paramNumber.endsWith(".")) {
                  break;
                }
                return a.b(paramNumber, -1, 0);
              }
              paramNumber = a.b(paramNumber, -1, 0);
            }
          }
        }
      }
      return localNumber;
    }
    paramNumber = new JSONException("Null pointer");
    for (;;)
    {
      throw paramNumber;
    }
  }
  
  private void populateInternalMap(Object paramObject, boolean paramBoolean)
  {
    Object localObject1 = paramObject.getClass();
    if (((Class)localObject1).getClassLoader() == null) {
      paramBoolean = false;
    }
    Method[] arrayOfMethod;
    if (paramBoolean) {
      arrayOfMethod = ((Class)localObject1).getMethods();
    } else {
      arrayOfMethod = ((Class)localObject1).getDeclaredMethods();
    }
    int i = 0;
    for (;;)
    {
      if (i >= arrayOfMethod.length) {
        return;
      }
      Method localMethod = arrayOfMethod[i];
      try
      {
        if (Modifier.isPublic(localMethod.getModifiers()))
        {
          Object localObject2 = localMethod.getName();
          localObject1 = "";
          if (((String)localObject2).startsWith("get")) {
            localObject1 = ((String)localObject2).substring(3);
          } else if (((String)localObject2).startsWith("is")) {
            localObject1 = ((String)localObject2).substring(2);
          }
          if ((((String)localObject1).length() > 0) && (Character.isUpperCase(((String)localObject1).charAt(0))) && (localMethod.getParameterTypes().length == 0))
          {
            if (((String)localObject1).length() == 1)
            {
              localObject2 = ((String)localObject1).toLowerCase();
            }
            else
            {
              localObject2 = localObject1;
              if (!Character.isUpperCase(((String)localObject1).charAt(1)))
              {
                localObject2 = new StringBuilder(String.valueOf(((String)localObject1).substring(0, 1).toLowerCase()));
                ((StringBuilder)localObject2).append(((String)localObject1).substring(1));
                localObject2 = ((StringBuilder)localObject2).toString();
              }
            }
            localObject1 = localMethod.invoke(paramObject, null);
            if (localObject1 == null) {
              map.put(localObject2, NULL);
            } else if (localObject1.getClass().isArray()) {
              map.put(localObject2, new JSONArray(localObject1, paramBoolean));
            } else if ((localObject1 instanceof Collection)) {
              map.put(localObject2, new JSONArray((Collection)localObject1, paramBoolean));
            } else if ((localObject1 instanceof Map)) {
              map.put(localObject2, new JSONObject((Map)localObject1, paramBoolean));
            } else if (isStandardProperty(localObject1.getClass())) {
              map.put(localObject2, localObject1);
            } else if ((!localObject1.getClass().getPackage().getName().startsWith("java")) && (localObject1.getClass().getClassLoader() != null)) {
              map.put(localObject2, new JSONObject(localObject1, paramBoolean));
            } else {
              map.put(localObject2, localObject1.toString());
            }
          }
        }
        i += 1;
      }
      catch (Exception paramObject)
      {
        paramObject = new RuntimeException(paramObject);
      }
    }
    for (;;)
    {
      throw paramObject;
    }
  }
  
  public static String quote(String paramString)
  {
    if ((paramString != null) && (paramString.length() != 0))
    {
      int k = paramString.length();
      StringBuffer localStringBuffer = new StringBuffer(k + 4);
      localStringBuffer.append('"');
      int i = 0;
      char c;
      for (int j = 0;; j = c)
      {
        if (i >= k)
        {
          localStringBuffer.append('"');
          return localStringBuffer.toString();
        }
        c = paramString.charAt(i);
        if (c != '\f')
        {
          if (c != '\r')
          {
            if (c != '"') {
              if (c != '/')
              {
                if (c != '\\') {
                  switch (c)
                  {
                  default: 
                    if ((c >= ' ') && ((c < '?') || (c >= '?')) && ((c < '?') || (c >= '?')))
                    {
                      localStringBuffer.append(c);
                    }
                    else
                    {
                      Object localObject = new StringBuilder("000");
                      ((StringBuilder)localObject).append(Integer.toHexString(c));
                      localObject = ((StringBuilder)localObject).toString();
                      StringBuilder localStringBuilder = new StringBuilder("\\u");
                      localStringBuilder.append(((String)localObject).substring(((String)localObject).length() - 4));
                      localStringBuffer.append(localStringBuilder.toString());
                    }
                    break;
                  case '\n': 
                    localStringBuffer.append("\\n");
                    break;
                  case '\t': 
                    localStringBuffer.append("\\t");
                    break;
                  case '\b': 
                    localStringBuffer.append("\\b");
                    break;
                  }
                }
              }
              else
              {
                if (j == 60) {
                  localStringBuffer.append('\\');
                }
                localStringBuffer.append(c);
                break label347;
              }
            }
            localStringBuffer.append('\\');
            localStringBuffer.append(c);
          }
          else
          {
            localStringBuffer.append("\\r");
          }
        }
        else {
          localStringBuffer.append("\\f");
        }
        label347:
        i += 1;
      }
    }
    return "\"\"";
  }
  
  public static Object stringToValue(String paramString)
  {
    if (paramString.equals("")) {
      return paramString;
    }
    if (paramString.equalsIgnoreCase("true")) {
      return Boolean.TRUE;
    }
    if (paramString.equalsIgnoreCase("false")) {
      return Boolean.FALSE;
    }
    if (paramString.equalsIgnoreCase("null")) {
      return NULL;
    }
    int i = paramString.charAt(0);
    if (((i < 48) || (i > 57)) && (i != 46) && (i != 45))
    {
      localObject = paramString;
      if (i != 43) {}
    }
    else if ((i == 48) && ((paramString.length() <= 2) || ((paramString.charAt(1) != 'x') && (paramString.charAt(1) != 'X')))) {}
    try
    {
      return new Integer(Integer.parseInt(paramString.substring(2), 16));
    }
    catch (Exception localException1)
    {
      for (;;)
      {
        try
        {
          if ((paramString.indexOf('.') <= -1) && (paramString.indexOf('e') <= -1) && (paramString.indexOf('E') <= -1))
          {
            localObject = new Long(paramString);
            if (((Long)localObject).longValue() != ((Long)localObject).intValue()) {
              break;
            }
            return new Integer(((Long)localObject).intValue());
          }
          localObject = Double.valueOf(paramString);
          return localObject;
        }
        catch (Exception localException2)
        {
          return paramString;
        }
        localException1 = localException1;
      }
    }
    Object localObject = new Integer(Integer.parseInt(paramString, 8));
    return localObject;
    return localException2;
  }
  
  public static void testValidity(Object paramObject)
    throws JSONException
  {
    if (paramObject != null)
    {
      if ((paramObject instanceof Double))
      {
        paramObject = (Double)paramObject;
        if ((!paramObject.isInfinite()) && (!paramObject.isNaN())) {
          return;
        }
        throw new JSONException("JSON does not allow non-finite numbers.");
      }
      if ((paramObject instanceof Float))
      {
        paramObject = (Float)paramObject;
        if ((!paramObject.isInfinite()) && (!paramObject.isNaN())) {
          return;
        }
        throw new JSONException("JSON does not allow non-finite numbers.");
      }
    }
  }
  
  public static String valueToString(Object paramObject)
    throws JSONException
  {
    if ((paramObject != null) && (!paramObject.equals(null)))
    {
      if ((paramObject instanceof JSONString)) {
        try
        {
          paramObject = ((JSONString)paramObject).toJSONString();
          if ((paramObject instanceof String)) {
            return paramObject;
          }
          StringBuilder localStringBuilder = new StringBuilder("Bad value from toJSONString: ");
          localStringBuilder.append(paramObject);
          throw new JSONException(localStringBuilder.toString());
        }
        catch (Exception paramObject)
        {
          throw new JSONException(paramObject);
        }
      }
      if ((paramObject instanceof Number)) {
        return numberToString((Number)paramObject);
      }
      if ((!(paramObject instanceof Boolean)) && (!(paramObject instanceof JSONObject)) && (!(paramObject instanceof JSONArray)))
      {
        if ((paramObject instanceof Map)) {
          return new JSONObject((Map)paramObject).toString();
        }
        if ((paramObject instanceof Collection)) {
          return new JSONArray((Collection)paramObject).toString();
        }
        if (paramObject.getClass().isArray()) {
          return new JSONArray(paramObject).toString();
        }
        return quote(paramObject.toString());
      }
      return paramObject.toString();
    }
    return "null";
  }
  
  public static String valueToString(Object paramObject, int paramInt1, int paramInt2)
    throws JSONException
  {
    if ((paramObject != null) && (!paramObject.equals(null))) {}
    try
    {
      if ((paramObject instanceof JSONString))
      {
        String str = ((JSONString)paramObject).toJSONString();
        boolean bool = str instanceof String;
        if (bool) {
          return str;
        }
      }
    }
    catch (Exception localException)
    {
      for (;;) {}
    }
    if ((paramObject instanceof Number)) {
      return numberToString((Number)paramObject);
    }
    if ((paramObject instanceof Boolean)) {
      return paramObject.toString();
    }
    if ((paramObject instanceof JSONObject)) {
      return ((JSONObject)paramObject).toString(paramInt1, paramInt2);
    }
    if ((paramObject instanceof JSONArray)) {
      return ((JSONArray)paramObject).toString(paramInt1, paramInt2);
    }
    if ((paramObject instanceof Map)) {
      return new JSONObject((Map)paramObject).toString(paramInt1, paramInt2);
    }
    if ((paramObject instanceof Collection)) {
      return new JSONArray((Collection)paramObject).toString(paramInt1, paramInt2);
    }
    if (paramObject.getClass().isArray()) {
      return new JSONArray(paramObject).toString(paramInt1, paramInt2);
    }
    return quote(paramObject.toString());
    return "null";
  }
  
  public JSONObject accumulate(String paramString, Object paramObject)
    throws JSONException
  {
    testValidity(paramObject);
    Object localObject = opt(paramString);
    if (localObject == null)
    {
      localObject = paramObject;
      if ((paramObject instanceof JSONArray)) {
        localObject = new JSONArray().put(paramObject);
      }
      put(paramString, localObject);
      return this;
    }
    if ((localObject instanceof JSONArray))
    {
      ((JSONArray)localObject).put(paramObject);
      return this;
    }
    put(paramString, new JSONArray().put(localObject).put(paramObject));
    return this;
  }
  
  public JSONObject append(String paramString, Object paramObject)
    throws JSONException
  {
    testValidity(paramObject);
    Object localObject = opt(paramString);
    if (localObject == null)
    {
      put(paramString, new JSONArray().put(paramObject));
      return this;
    }
    if ((localObject instanceof JSONArray))
    {
      put(paramString, ((JSONArray)localObject).put(paramObject));
      return this;
    }
    paramObject = new StringBuilder("JSONObject[");
    paramObject.append(paramString);
    paramObject.append("] is not a JSONArray.");
    throw new JSONException(paramObject.toString());
  }
  
  public Object get(String paramString)
    throws JSONException
  {
    Object localObject = opt(paramString);
    if (localObject != null) {
      return localObject;
    }
    localObject = new StringBuilder("JSONObject[");
    ((StringBuilder)localObject).append(quote(paramString));
    ((StringBuilder)localObject).append("] not found.");
    throw new JSONException(((StringBuilder)localObject).toString());
  }
  
  public boolean getBoolean(String paramString)
    throws JSONException
  {
    Object localObject = get(paramString);
    if (!localObject.equals(Boolean.FALSE))
    {
      boolean bool = localObject instanceof String;
      if ((!bool) || (!((String)localObject).equalsIgnoreCase("false")))
      {
        if ((!localObject.equals(Boolean.TRUE)) && ((!bool) || (!((String)localObject).equalsIgnoreCase("true"))))
        {
          localObject = new StringBuilder("JSONObject[");
          ((StringBuilder)localObject).append(quote(paramString));
          ((StringBuilder)localObject).append("] is not a Boolean.");
          throw new JSONException(((StringBuilder)localObject).toString());
        }
        return true;
      }
    }
    return false;
  }
  
  public double getDouble(String paramString)
    throws JSONException
  {
    Object localObject = get(paramString);
    try
    {
      if ((localObject instanceof Number)) {
        return ((Number)localObject).doubleValue();
      }
      double d = Double.valueOf((String)localObject).doubleValue();
      return d;
    }
    catch (Exception localException)
    {
      for (;;) {}
    }
    localObject = new StringBuilder("JSONObject[");
    ((StringBuilder)localObject).append(quote(paramString));
    ((StringBuilder)localObject).append("] is not a number.");
    throw new JSONException(((StringBuilder)localObject).toString());
  }
  
  public int getInt(String paramString)
    throws JSONException
  {
    Object localObject = get(paramString);
    if ((localObject instanceof Number)) {
      return ((Number)localObject).intValue();
    }
    return (int)getDouble(paramString);
  }
  
  public JSONArray getJSONArray(String paramString)
    throws JSONException
  {
    Object localObject = get(paramString);
    if ((localObject instanceof JSONArray)) {
      return (JSONArray)localObject;
    }
    localObject = new StringBuilder("JSONObject[");
    ((StringBuilder)localObject).append(quote(paramString));
    ((StringBuilder)localObject).append("] is not a JSONArray.");
    throw new JSONException(((StringBuilder)localObject).toString());
  }
  
  public JSONObject getJSONObject(String paramString)
    throws JSONException
  {
    Object localObject = get(paramString);
    if ((localObject instanceof JSONObject)) {
      return (JSONObject)localObject;
    }
    localObject = new StringBuilder("JSONObject[");
    ((StringBuilder)localObject).append(quote(paramString));
    ((StringBuilder)localObject).append("] is not a JSONObject.");
    throw new JSONException(((StringBuilder)localObject).toString());
  }
  
  public long getLong(String paramString)
    throws JSONException
  {
    Object localObject = get(paramString);
    if ((localObject instanceof Number)) {
      return ((Number)localObject).longValue();
    }
    return getDouble(paramString);
  }
  
  public String getString(String paramString)
    throws JSONException
  {
    return get(paramString).toString();
  }
  
  public boolean has(String paramString)
  {
    return map.containsKey(paramString);
  }
  
  public boolean isNull(String paramString)
  {
    return NULL.equals(opt(paramString));
  }
  
  public Iterator keys()
  {
    return map.keySet().iterator();
  }
  
  public int length()
  {
    return map.size();
  }
  
  public JSONArray names()
  {
    JSONArray localJSONArray = new JSONArray();
    Object localObject = keys();
    for (;;)
    {
      if (!((Iterator)localObject).hasNext())
      {
        localObject = localJSONArray;
        if (localJSONArray.length() == 0) {
          localObject = null;
        }
        return localObject;
      }
      localJSONArray.put(((Iterator)localObject).next());
    }
  }
  
  public Object opt(String paramString)
  {
    if (paramString == null) {
      return null;
    }
    return map.get(paramString);
  }
  
  public boolean optBoolean(String paramString)
  {
    return optBoolean(paramString, false);
  }
  
  public boolean optBoolean(String paramString, boolean paramBoolean)
  {
    try
    {
      boolean bool = getBoolean(paramString);
      return bool;
    }
    catch (Exception paramString) {}
    return paramBoolean;
  }
  
  public double optDouble(String paramString)
  {
    return optDouble(paramString, NaN.0D);
  }
  
  public double optDouble(String paramString, double paramDouble)
  {
    try
    {
      paramString = opt(paramString);
      if ((paramString instanceof Number)) {
        return ((Number)paramString).doubleValue();
      }
      double d = new Double((String)paramString).doubleValue();
      return d;
    }
    catch (Exception paramString) {}
    return paramDouble;
  }
  
  public int optInt(String paramString)
  {
    return optInt(paramString, 0);
  }
  
  public int optInt(String paramString, int paramInt)
  {
    try
    {
      int i = getInt(paramString);
      return i;
    }
    catch (Exception paramString) {}
    return paramInt;
  }
  
  public JSONArray optJSONArray(String paramString)
  {
    paramString = opt(paramString);
    if ((paramString instanceof JSONArray)) {
      return (JSONArray)paramString;
    }
    return null;
  }
  
  public JSONObject optJSONObject(String paramString)
  {
    paramString = opt(paramString);
    if ((paramString instanceof JSONObject)) {
      return (JSONObject)paramString;
    }
    return null;
  }
  
  public long optLong(String paramString)
  {
    return optLong(paramString, 0L);
  }
  
  public long optLong(String paramString, long paramLong)
  {
    try
    {
      long l = getLong(paramString);
      return l;
    }
    catch (Exception paramString) {}
    return paramLong;
  }
  
  public String optString(String paramString)
  {
    return optString(paramString, "");
  }
  
  public String optString(String paramString1, String paramString2)
  {
    paramString1 = opt(paramString1);
    if (paramString1 != null) {
      paramString2 = paramString1.toString();
    }
    return paramString2;
  }
  
  public JSONObject put(String paramString, double paramDouble)
    throws JSONException
  {
    put(paramString, new Double(paramDouble));
    return this;
  }
  
  public JSONObject put(String paramString, int paramInt)
    throws JSONException
  {
    put(paramString, new Integer(paramInt));
    return this;
  }
  
  public JSONObject put(String paramString, long paramLong)
    throws JSONException
  {
    put(paramString, new Long(paramLong));
    return this;
  }
  
  public JSONObject put(String paramString, Object paramObject)
    throws JSONException
  {
    if (paramString != null)
    {
      if (paramObject != null)
      {
        testValidity(paramObject);
        map.put(paramString, paramObject);
        return this;
      }
      remove(paramString);
      return this;
    }
    throw new JSONException("Null key.");
  }
  
  public JSONObject put(String paramString, Collection paramCollection)
    throws JSONException
  {
    put(paramString, new JSONArray(paramCollection));
    return this;
  }
  
  public JSONObject put(String paramString, Map paramMap)
    throws JSONException
  {
    put(paramString, new JSONObject(paramMap));
    return this;
  }
  
  public JSONObject put(String paramString, boolean paramBoolean)
    throws JSONException
  {
    Boolean localBoolean;
    if (paramBoolean) {
      localBoolean = Boolean.TRUE;
    } else {
      localBoolean = Boolean.FALSE;
    }
    put(paramString, localBoolean);
    return this;
  }
  
  public JSONObject putOnce(String paramString, Object paramObject)
    throws JSONException
  {
    if ((paramString != null) && (paramObject != null))
    {
      if (opt(paramString) == null)
      {
        put(paramString, paramObject);
        return this;
      }
      paramObject = new StringBuilder("Duplicate key \"");
      paramObject.append(paramString);
      paramObject.append("\"");
      throw new JSONException(paramObject.toString());
    }
    return this;
  }
  
  public JSONObject putOpt(String paramString, Object paramObject)
    throws JSONException
  {
    if ((paramString != null) && (paramObject != null)) {
      put(paramString, paramObject);
    }
    return this;
  }
  
  public Object remove(String paramString)
  {
    return map.remove(paramString);
  }
  
  public Iterator sortedKeys()
  {
    return new TreeSet(map.keySet()).iterator();
  }
  
  public JSONArray toJSONArray(JSONArray paramJSONArray)
    throws JSONException
  {
    if ((paramJSONArray != null) && (paramJSONArray.length() != 0))
    {
      JSONArray localJSONArray = new JSONArray();
      int i = 0;
      for (;;)
      {
        if (i >= paramJSONArray.length()) {
          return localJSONArray;
        }
        localJSONArray.put(opt(paramJSONArray.getString(i)));
        i += 1;
      }
    }
    return null;
  }
  
  public String toString()
  {
    try
    {
      Iterator localIterator = keys();
      StringBuffer localStringBuffer = new StringBuffer("{");
      for (;;)
      {
        if (!localIterator.hasNext())
        {
          localStringBuffer.append('}');
          return localStringBuffer.toString();
        }
        if (localStringBuffer.length() > 1) {
          localStringBuffer.append(',');
        }
        Object localObject = localIterator.next();
        localStringBuffer.append(quote(localObject.toString()));
        localStringBuffer.append(':');
        localStringBuffer.append(valueToString(map.get(localObject)));
      }
    }
    catch (Exception localException)
    {
      for (;;) {}
    }
    return null;
  }
  
  public String toString(int paramInt)
    throws JSONException
  {
    return toString(paramInt, 0);
  }
  
  public String toString(int paramInt1, int paramInt2)
    throws JSONException
  {
    int i = length();
    if (i == 0) {
      return "{}";
    }
    Object localObject1 = sortedKeys();
    StringBuffer localStringBuffer = new StringBuffer("{");
    int k = paramInt2 + paramInt1;
    int j;
    if (i == 1)
    {
      localObject1 = ((Iterator)localObject1).next();
      localStringBuffer.append(quote(localObject1.toString()));
      localStringBuffer.append(": ");
      localStringBuffer.append(valueToString(map.get(localObject1), paramInt1, paramInt2));
    }
    else
    {
      boolean bool = ((Iterator)localObject1).hasNext();
      j = 0;
      i = 0;
      if (bool) {
        break label173;
      }
      if (localStringBuffer.length() > 1)
      {
        localStringBuffer.append('\n');
        paramInt1 = i;
        while (paramInt1 < paramInt2)
        {
          localStringBuffer.append(' ');
          paramInt1 += 1;
        }
      }
    }
    localStringBuffer.append('}');
    return localStringBuffer.toString();
    label173:
    Object localObject2 = ((Iterator)localObject1).next();
    if (localStringBuffer.length() > 1)
    {
      localStringBuffer.append(",\n");
      i = j;
    }
    else
    {
      localStringBuffer.append('\n');
      i = j;
    }
    for (;;)
    {
      if (i >= k)
      {
        localStringBuffer.append(quote(localObject2.toString()));
        localStringBuffer.append(": ");
        localStringBuffer.append(valueToString(map.get(localObject2), paramInt1, k));
        break;
      }
      localStringBuffer.append(' ');
      i += 1;
    }
  }
  
  public Writer write(Writer paramWriter)
    throws JSONException
  {
    int i = 0;
    try
    {
      Iterator localIterator = keys();
      paramWriter.write(123);
      for (;;)
      {
        if (!localIterator.hasNext())
        {
          paramWriter.write(125);
          return paramWriter;
        }
        if (i != 0) {
          paramWriter.write(44);
        }
        Object localObject = localIterator.next();
        paramWriter.write(quote(localObject.toString()));
        paramWriter.write(58);
        localObject = map.get(localObject);
        if ((localObject instanceof JSONObject)) {
          ((JSONObject)localObject).write(paramWriter);
        } else if ((localObject instanceof JSONArray)) {
          ((JSONArray)localObject).write(paramWriter);
        } else {
          paramWriter.write(valueToString(localObject));
        }
        i = 1;
      }
      throw paramWriter;
    }
    catch (IOException paramWriter)
    {
      paramWriter = new JSONException(paramWriter);
    }
    for (;;) {}
  }
}
