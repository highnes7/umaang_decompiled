package f.c.a.c;

import android.os.Looper;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Future;
import java.util.concurrent.RejectedExecutionException;
import java.util.concurrent.TimeUnit;
import l.a.a.a.g;
import l.a.a.a.q;

public class u
{
  public final ExecutorService a;
  
  public u(ExecutorService paramExecutorService)
  {
    a = paramExecutorService;
  }
  
  public Future<?> a(Runnable paramRunnable)
  {
    try
    {
      paramRunnable = a.submit(new s(this, paramRunnable));
      return paramRunnable;
    }
    catch (RejectedExecutionException paramRunnable)
    {
      for (;;) {}
    }
    g.h().d("CrashlyticsCore", "Executor is shut down because we're handling a fatal crash.");
    return null;
  }
  
  public <T> Future<T> a(Callable<T> paramCallable)
  {
    try
    {
      paramCallable = a.submit(new t(this, paramCallable));
      return paramCallable;
    }
    catch (RejectedExecutionException paramCallable)
    {
      for (;;) {}
    }
    g.h().d("CrashlyticsCore", "Executor is shut down because we're handling a fatal crash.");
    return null;
  }
  
  public <T> T b(Callable<T> paramCallable)
  {
    try
    {
      if (Looper.getMainLooper() == Looper.myLooper()) {
        return a.submit(paramCallable).get(4L, TimeUnit.SECONDS);
      }
      paramCallable = a.submit(paramCallable).get();
      return paramCallable;
    }
    catch (Exception paramCallable)
    {
      g.h().c("CrashlyticsCore", "Failed to execute task.", paramCallable);
      return null;
      g.h().d("CrashlyticsCore", "Executor is shut down because we're handling a fatal crash.");
      return null;
    }
    catch (RejectedExecutionException paramCallable)
    {
      for (;;) {}
    }
  }
}
