package f.c.a.c;

import android.content.Context;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageManager;
import android.content.pm.PackageManager.NameNotFoundException;
import android.os.Build.VERSION;
import f.a.a.a.a;
import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import l.a.a.a.g;
import l.a.a.a.q;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

public class c
{
  public static final String a = "/data";
  public final Context b;
  public final a c;
  
  public c(Context paramContext, a paramA)
  {
    b = paramContext;
    c = paramA;
  }
  
  private File a(File paramFile)
  {
    int i = Build.VERSION.SDK_INT;
    if (paramFile.getAbsolutePath().startsWith("/data")) {
      try
      {
        File localFile = new File(b.getPackageManager().getApplicationInfo(b.getPackageName(), 0).nativeLibraryDir, paramFile.getName());
        return localFile;
      }
      catch (PackageManager.NameNotFoundException localNameNotFoundException)
      {
        g.h().c("CrashlyticsCore", "Error getting ApplicationInfo", localNameNotFoundException);
      }
    }
    return paramFile;
  }
  
  public static JSONObject a(String paramString, Ja paramJa)
    throws JSONException
  {
    JSONObject localJSONObject = new JSONObject();
    localJSONObject.put("base_address", a);
    localJSONObject.put("size", b);
    localJSONObject.put("name", d);
    localJSONObject.put("uuid", paramString);
    return localJSONObject;
  }
  
  public static boolean a(Ja paramJa)
  {
    return (c.indexOf('x') != -1) && (d.indexOf('/') != -1);
  }
  
  public static byte[] a(JSONArray paramJSONArray)
  {
    JSONObject localJSONObject = new JSONObject();
    try
    {
      localJSONObject.put("binary_images", paramJSONArray);
      return localJSONObject.toString().getBytes();
    }
    catch (JSONException paramJSONArray)
    {
      g.h().b("CrashlyticsCore", "Binary images string is null", paramJSONArray);
    }
    return new byte[0];
  }
  
  private File b(String paramString)
  {
    File localFile = new File(paramString);
    paramString = localFile;
    if (!localFile.exists()) {
      paramString = a(localFile);
    }
    return paramString;
  }
  
  public static String b(JSONArray paramJSONArray)
    throws JSONException
  {
    StringBuilder localStringBuilder = new StringBuilder();
    int i = 0;
    while (i < paramJSONArray.length())
    {
      localStringBuilder.append(paramJSONArray.getString(i));
      i += 1;
    }
    return localStringBuilder.toString();
  }
  
  private JSONArray b(BufferedReader paramBufferedReader)
    throws IOException
  {
    JSONArray localJSONArray = new JSONArray();
    for (;;)
    {
      Object localObject = paramBufferedReader.readLine();
      if (localObject == null) {
        break;
      }
      localObject = c((String)localObject);
      if (localObject != null) {
        localJSONArray.put(localObject);
      }
    }
    return localJSONArray;
  }
  
  private JSONObject c(String paramString)
  {
    paramString = Ka.a(paramString);
    if (paramString != null)
    {
      if (!a(paramString)) {
        return null;
      }
      Object localObject = b(d);
      try
      {
        localObject = c.a((File)localObject);
        try
        {
          paramString = a((String)localObject, paramString);
          return paramString;
        }
        catch (JSONException paramString)
        {
          g.h().a("CrashlyticsCore", "Could not create a binary image json string", paramString);
          return null;
        }
        q localQ;
        StringBuilder localStringBuilder;
        return null;
      }
      catch (IOException localIOException)
      {
        localQ = g.h();
        localStringBuilder = a.b("Could not generate ID for file ");
        localStringBuilder.append(d);
        localQ.a("CrashlyticsCore", localStringBuilder.toString(), localIOException);
      }
    }
  }
  
  private JSONArray d(String paramString)
  {
    JSONArray localJSONArray = new JSONArray();
    try
    {
      paramString = b(new JSONObject(paramString).getJSONArray("maps"));
      paramString = paramString.split("\\|");
      int i = 0;
      while (i < paramString.length)
      {
        JSONObject localJSONObject = c(paramString[i]);
        if (localJSONObject != null) {
          localJSONArray.put(localJSONObject);
        }
        i += 1;
      }
      return localJSONArray;
    }
    catch (JSONException paramString)
    {
      g.h().b("CrashlyticsCore", "Unable to parse proc maps string", paramString);
    }
    return localJSONArray;
  }
  
  public byte[] a(BufferedReader paramBufferedReader)
    throws IOException
  {
    return a(b(paramBufferedReader));
  }
  
  public byte[] a(String paramString)
    throws IOException
  {
    return a(d(paramString));
  }
  
  public static abstract interface a
  {
    public abstract String a(File paramFile)
      throws IOException;
  }
}
