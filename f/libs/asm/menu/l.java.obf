package f.c.a.c;

import android.content.Context;
import android.os.Bundle;
import f.a.a.a.a;
import java.lang.reflect.Method;
import java.lang.reflect.Proxy;
import java.util.Arrays;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import l.a.a.a.g;
import l.a.a.a.n;
import l.a.a.a.q;
import org.json.JSONException;
import org.json.JSONObject;

public class pa
  implements b
{
  public static final String a = "crash";
  public static final String b = "com.google.android.gms.measurement.AppMeasurement";
  public static final String c = "com.google.android.gms.measurement.AppMeasurement$OnEventListener";
  public static final String d = "getInstance";
  public static final String e = "registerOnMeasurementEventListener";
  public static final String f = "name";
  public static final String g = "parameters";
  public static final String h = "equals";
  public static final String i = "toString";
  public static final String j = "hashCode";
  public static final String k = "onEvent";
  public static final List<Class<?>> l = Collections.unmodifiableList(Arrays.asList(new Class[] { String.class, String.class, Bundle.class, Long.class }));
  public static final String m = "Cannot register AppMeasurement Listener for Crashlytics breadcrumbs: ";
  public final fa n;
  public Object o;
  
  public pa(fa paramFa)
  {
    n = paramFa;
  }
  
  private Class<?> a(String paramString)
  {
    try
    {
      paramString = n.d().getClassLoader().loadClass(paramString);
      return paramString;
    }
    catch (Exception paramString)
    {
      for (;;) {}
    }
    return null;
  }
  
  public static String a(String paramString, Bundle paramBundle)
    throws JSONException
  {
    JSONObject localJSONObject1 = new JSONObject();
    JSONObject localJSONObject2 = new JSONObject();
    Iterator localIterator = paramBundle.keySet().iterator();
    while (localIterator.hasNext())
    {
      String str = (String)localIterator.next();
      localJSONObject2.put(str, paramBundle.get(str));
    }
    localJSONObject1.put("name", paramString);
    localJSONObject1.put("parameters", localJSONObject2);
    return localJSONObject1.toString();
  }
  
  public static boolean a(Object[] paramArrayOfObject)
  {
    if (paramArrayOfObject.length != l.size()) {
      return false;
    }
    Iterator localIterator = l.iterator();
    int i2 = paramArrayOfObject.length;
    int i1 = 0;
    while (i1 < i2)
    {
      if (!paramArrayOfObject[i1].getClass().equals(localIterator.next())) {
        return false;
      }
      i1 += 1;
    }
    return true;
  }
  
  private Object b(Class<?> paramClass)
  {
    try
    {
      paramClass = paramClass.getDeclaredMethod("getInstance", new Class[] { Context.class }).invoke(paramClass, new Object[] { n.d() });
      return paramClass;
    }
    catch (Exception paramClass)
    {
      for (;;) {}
    }
    return null;
  }
  
  public static void b(fa paramFa, String paramString, Bundle paramBundle)
  {
    try
    {
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append("$A$:");
      localStringBuilder.append(a(paramString, paramBundle));
      paramFa.b(localStringBuilder.toString());
      return;
    }
    catch (JSONException paramFa)
    {
      for (;;) {}
    }
    paramFa = g.h();
    paramBundle = new StringBuilder();
    paramBundle.append("Unable to serialize Firebase Analytics event; ");
    paramBundle.append(paramString);
    paramFa.a("CrashlyticsCore", paramBundle.toString());
  }
  
  public Object a(Class paramClass)
  {
    try
    {
      if (o == null)
      {
        ClassLoader localClassLoader = n.d().getClassLoader();
        oa localOa = new oa(this);
        o = Proxy.newProxyInstance(localClassLoader, new Class[] { paramClass }, localOa);
      }
      paramClass = o;
      return paramClass;
    }
    finally {}
  }
  
  public boolean a()
  {
    Class localClass = a("com.google.android.gms.measurement.AppMeasurement");
    if (localClass == null)
    {
      g.h().d("CrashlyticsCore", "Firebase Analytics is not present; you will not see automatic logging of events before a crash occurs.");
      return false;
    }
    Object localObject1 = b(localClass);
    if (localObject1 == null)
    {
      g.h().a("CrashlyticsCore", "Cannot register AppMeasurement Listener for Crashlytics breadcrumbs: Could not create an instance of Firebase Analytics.");
      return false;
    }
    Object localObject2 = a("com.google.android.gms.measurement.AppMeasurement$OnEventListener");
    if (localObject2 == null)
    {
      g.h().a("CrashlyticsCore", "Cannot register AppMeasurement Listener for Crashlytics breadcrumbs: Could not get class com.google.android.gms.measurement.AppMeasurement$OnEventListener");
      return false;
    }
    try
    {
      localClass.getDeclaredMethod("registerOnMeasurementEventListener", new Class[] { localObject2 }).invoke(localObject1, new Object[] { a((Class)localObject2) });
      return true;
    }
    catch (Exception localException)
    {
      localObject1 = g.h();
      localObject2 = a.b("Cannot register AppMeasurement Listener for Crashlytics breadcrumbs: ");
      ((StringBuilder)localObject2).append(localException.getMessage());
      ((q)localObject1).b("CrashlyticsCore", ((StringBuilder)localObject2).toString(), localException);
      return true;
    }
    catch (NoSuchMethodException localNoSuchMethodException)
    {
      g.h().b("CrashlyticsCore", "Cannot register AppMeasurement Listener for Crashlytics breadcrumbs: Method registerOnMeasurementEventListener not found.", localNoSuchMethodException);
    }
    return false;
  }
}
