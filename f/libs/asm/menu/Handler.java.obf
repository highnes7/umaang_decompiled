package f.c.a.c;

import android.app.ActivityManager.RunningAppProcessInfo;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;
import l.a.a.a.a.b.y.a;
import l.a.a.a.g;
import l.a.a.a.q;

public class Sa
{
  public static final String a = "0";
  public static final f b = f.a("0");
  public static final f c = f.a("Unity");
  
  public Sa() {}
  
  public static int a()
  {
    int i = j.a(1, b);
    int j = j.a(2, b);
    return j.e(3, 0L) + (j + (i + 0));
  }
  
  public static int a(int paramInt1, f paramF1, int paramInt2, long paramLong1, long paramLong2, boolean paramBoolean, Map<y.a, String> paramMap, int paramInt3, f paramF2, f paramF3)
  {
    int j = j.a(3, paramInt1);
    int i = 0;
    if (paramF1 == null) {
      paramInt1 = 0;
    } else {
      paramInt1 = j.a(4, paramF1);
    }
    paramInt2 = j.f(5, paramInt2);
    int k = j.e(6, paramLong1);
    int m = j.e(7, paramLong2);
    paramInt1 = j.a(10, paramBoolean) + (m + (k + (paramInt2 + (j + 0 + paramInt1))));
    paramInt2 = paramInt1;
    if (paramMap != null)
    {
      paramF1 = paramMap.entrySet().iterator();
      for (;;)
      {
        paramInt2 = paramInt1;
        if (!paramF1.hasNext()) {
          break;
        }
        paramMap = (Map.Entry)paramF1.next();
        paramInt2 = a((y.a)paramMap.getKey(), (String)paramMap.getValue());
        j = j.k(11);
        paramInt1 += j.h(paramInt2) + j + paramInt2;
      }
    }
    j = j.f(12, paramInt3);
    if (paramF2 == null) {
      paramInt1 = 0;
    } else {
      paramInt1 = j.a(13, paramF2);
    }
    if (paramF3 == null) {
      paramInt3 = i;
    } else {
      paramInt3 = j.a(14, paramF3);
    }
    return j + paramInt2 + paramInt1 + paramInt3;
  }
  
  public static int a(long paramLong1, String paramString, Wa paramWa, Thread paramThread, StackTraceElement[] paramArrayOfStackTraceElement, Thread[] paramArrayOfThread, List<StackTraceElement[]> paramList, int paramInt1, Map<String, String> paramMap, ActivityManager.RunningAppProcessInfo paramRunningAppProcessInfo, int paramInt2, f paramF1, f paramF2, Float paramFloat, int paramInt3, boolean paramBoolean, long paramLong2, long paramLong3, f paramF3)
  {
    int i = j.e(1, paramLong1);
    int j = j.a(2, f.a(paramString));
    paramInt1 = a(paramWa, paramThread, paramArrayOfStackTraceElement, paramArrayOfThread, paramList, paramInt1, paramF1, paramF2, paramMap, paramRunningAppProcessInfo, paramInt2);
    int k = j.k(3);
    int m = j.h(paramInt1);
    paramInt2 = a(paramFloat, paramInt3, paramBoolean, paramInt2, paramLong2, paramLong3);
    paramInt3 = j.k(5);
    paramInt2 = j.h(paramInt2) + paramInt3 + paramInt2 + (m + k + paramInt1 + (j + (i + 0)));
    paramInt1 = paramInt2;
    if (paramF3 != null)
    {
      paramInt1 = a(paramF3);
      paramInt3 = j.k(6);
      paramInt1 = paramInt2 + (j.h(paramInt1) + paramInt3 + paramInt1);
    }
    return paramInt1;
  }
  
  public static int a(Wa paramWa, int paramInt1, int paramInt2)
  {
    int i = j.a(1, f.a(b));
    int k = 0;
    int j = i + 0;
    Object localObject = a;
    i = j;
    if (localObject != null) {
      i = j + j.a(3, f.a((String)localObject));
    }
    localObject = c;
    int m = localObject.length;
    j = 0;
    while (j < m)
    {
      int n = a(localObject[j], true);
      int i1 = j.k(4);
      i += j.h(n) + i1 + n;
      j += 1;
    }
    localObject = d;
    j = i;
    if (localObject != null)
    {
      j = k;
      paramWa = (Wa)localObject;
      if (paramInt1 < paramInt2)
      {
        paramInt1 = a((Wa)localObject, paramInt1 + 1, paramInt2);
        paramInt2 = j.k(6);
        return i + (j.h(paramInt1) + paramInt2 + paramInt1);
      }
      while (paramWa != null)
      {
        paramWa = d;
        j += 1;
      }
      j = i + j.f(7, j);
    }
    return j;
  }
  
  public static int a(Wa paramWa, Thread paramThread, StackTraceElement[] paramArrayOfStackTraceElement, Thread[] paramArrayOfThread, List<StackTraceElement[]> paramList, int paramInt, f paramF1, f paramF2)
  {
    int i = a(paramThread, paramArrayOfStackTraceElement, 4, true);
    int j = j.k(1);
    int m = j.h(i);
    int k = paramArrayOfThread.length;
    i = m + j + i + 0;
    j = 0;
    while (j < k)
    {
      m = a(paramArrayOfThread[j], (StackTraceElement[])paramList.get(j), 0, false);
      n = j.k(1);
      i += j.h(m) + n + m;
      j += 1;
    }
    paramInt = a(paramWa, 1, paramInt);
    j = j.k(2);
    k = j.h(paramInt);
    m = a();
    int n = j.k(3);
    int i1 = j.h(m);
    int i2 = a(paramF1, paramF2);
    int i3 = j.k(3);
    return j.h(i2) + i3 + i2 + (i1 + n + m + (k + j + paramInt + i));
  }
  
  public static int a(Wa paramWa, Thread paramThread, StackTraceElement[] paramArrayOfStackTraceElement, Thread[] paramArrayOfThread, List<StackTraceElement[]> paramList, int paramInt1, f paramF1, f paramF2, Map<String, String> paramMap, ActivityManager.RunningAppProcessInfo paramRunningAppProcessInfo, int paramInt2)
  {
    paramInt1 = a(paramWa, paramThread, paramArrayOfStackTraceElement, paramArrayOfThread, paramList, paramInt1, paramF1, paramF2);
    int i = j.k(1);
    int j = j.h(paramInt1);
    boolean bool = false;
    paramInt1 = j + i + paramInt1 + 0;
    i = paramInt1;
    if (paramMap != null)
    {
      paramWa = paramMap.entrySet().iterator();
      for (;;)
      {
        i = paramInt1;
        if (!paramWa.hasNext()) {
          break;
        }
        paramThread = (Map.Entry)paramWa.next();
        i = a((String)paramThread.getKey(), (String)paramThread.getValue());
        j = j.k(2);
        paramInt1 += j.h(i) + j + i;
      }
    }
    paramInt1 = i;
    if (paramRunningAppProcessInfo != null)
    {
      if (importance != 100) {
        bool = true;
      }
      paramInt1 = i + j.a(3, bool);
    }
    return j.f(4, paramInt2) + paramInt1;
  }
  
  public static int a(f paramF)
  {
    return j.a(1, paramF);
  }
  
  public static int a(f paramF1, f paramF2)
  {
    int i = j.e(1, 0L);
    int j = j.e(2, 0L);
    j = j.a(3, paramF1) + (j + (i + 0));
    i = j;
    if (paramF2 != null) {
      i = j + j.a(4, paramF2);
    }
    return i;
  }
  
  public static int a(f paramF1, f paramF2, f paramF3, f paramF4, f paramF5, int paramInt, f paramF6)
  {
    int i = j.a(1, paramF1);
    int j = j.a(2, paramF3);
    int k = j.a(3, paramF4);
    int m = b(paramF2);
    int n = j.k(5);
    int i1 = j.h(m);
    j = j.a(6, paramF5) + (i1 + n + m + (k + (j + (i + 0))));
    i = j;
    if (paramF6 != null)
    {
      i = j.a(8, c);
      i = j.a(9, paramF6) + (i + j);
    }
    return j.a(10, paramInt) + i;
  }
  
  public static int a(f paramF1, f paramF2, boolean paramBoolean)
  {
    int i = j.a(1, 3);
    int j = j.a(2, paramF1);
    int k = j.a(3, paramF2);
    return j.a(4, paramBoolean) + (k + (j + (i + 0)));
  }
  
  public static int a(Float paramFloat, int paramInt1, boolean paramBoolean, int paramInt2, long paramLong1, long paramLong2)
  {
    int i = 0;
    if (paramFloat != null) {
      i = 0 + j.a(1, paramFloat.floatValue());
    }
    paramInt1 = j.e(2, paramInt1);
    int j = j.a(3, paramBoolean);
    paramInt2 = j.f(4, paramInt2);
    int k = j.e(5, paramLong1);
    return j.e(6, paramLong2) + (k + (paramInt2 + (j + (paramInt1 + i))));
  }
  
  public static int a(StackTraceElement paramStackTraceElement, boolean paramBoolean)
  {
    boolean bool = paramStackTraceElement.isNativeMethod();
    int k = 0;
    if (bool) {
      i = j.e(1, Math.max(paramStackTraceElement.getLineNumber(), 0));
    } else {
      i = j.e(1, 0L);
    }
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append(paramStackTraceElement.getClassName());
    localStringBuilder.append(".");
    localStringBuilder.append(paramStackTraceElement.getMethodName());
    int j = j.a(2, f.a(localStringBuilder.toString())) + (i + 0);
    int i = j;
    if (paramStackTraceElement.getFileName() != null) {
      i = j + j.a(3, f.a(paramStackTraceElement.getFileName()));
    }
    j = i;
    if (!paramStackTraceElement.isNativeMethod())
    {
      j = i;
      if (paramStackTraceElement.getLineNumber() > 0) {
        j = i + j.e(4, paramStackTraceElement.getLineNumber());
      }
    }
    i = k;
    if (paramBoolean) {
      i = 2;
    }
    return j.f(5, i) + j;
  }
  
  public static int a(String paramString1, String paramString2)
  {
    int i = j.a(1, f.a(paramString1));
    paramString1 = paramString2;
    if (paramString2 == null) {
      paramString1 = "";
    }
    return j.a(2, f.a(paramString1)) + i;
  }
  
  public static int a(Thread paramThread, StackTraceElement[] paramArrayOfStackTraceElement, int paramInt, boolean paramBoolean)
  {
    int i = j.a(1, f.a(paramThread.getName()));
    i = j.f(2, paramInt) + i;
    int j = paramArrayOfStackTraceElement.length;
    paramInt = 0;
    while (paramInt < j)
    {
      int k = a(paramArrayOfStackTraceElement[paramInt], paramBoolean);
      int m = j.k(3);
      i += j.h(k) + m + k;
      paramInt += 1;
    }
    return i;
  }
  
  public static int a(y.a paramA, String paramString)
  {
    int i = j.a(1, paramA.i);
    return j.a(2, f.a(paramString)) + i;
  }
  
  public static f a(String paramString)
  {
    if (paramString == null) {
      return null;
    }
    return f.a(paramString);
  }
  
  public static void a(j paramJ, int paramInt, StackTraceElement paramStackTraceElement, boolean paramBoolean)
    throws Exception
  {
    paramJ.l(paramInt, 2);
    paramJ.s(a(paramStackTraceElement, paramBoolean));
    if (paramStackTraceElement.isNativeMethod()) {
      paramJ.j(1, Math.max(paramStackTraceElement.getLineNumber(), 0));
    } else {
      paramJ.j(1, 0L);
    }
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append(paramStackTraceElement.getClassName());
    localStringBuilder.append(".");
    localStringBuilder.append(paramStackTraceElement.getMethodName());
    paramJ.c(2, f.a(localStringBuilder.toString()));
    if (paramStackTraceElement.getFileName() != null) {
      paramJ.c(3, f.a(paramStackTraceElement.getFileName()));
    }
    boolean bool = paramStackTraceElement.isNativeMethod();
    paramInt = 4;
    if ((!bool) && (paramStackTraceElement.getLineNumber() > 0)) {
      paramJ.j(4, paramStackTraceElement.getLineNumber());
    }
    if (!paramBoolean) {
      paramInt = 0;
    }
    paramJ.m(5, paramInt);
  }
  
  public static void a(j paramJ, int paramInt1, String paramString1, int paramInt2, long paramLong1, long paramLong2, boolean paramBoolean, Map<y.a, String> paramMap, int paramInt3, String paramString2, String paramString3)
    throws Exception
  {
    f localF = a(paramString1);
    paramString1 = a(paramString3);
    paramString2 = a(paramString2);
    paramJ.l(9, 2);
    paramJ.s(a(paramInt1, localF, paramInt2, paramLong1, paramLong2, paramBoolean, paramMap, paramInt3, paramString2, paramString1));
    paramJ.g(3, paramInt1);
    paramJ.c(4, localF);
    paramJ.m(5, paramInt2);
    paramJ.j(6, paramLong1);
    paramJ.j(7, paramLong2);
    paramJ.b(10, paramBoolean);
    paramMap = paramMap.entrySet().iterator();
    while (paramMap.hasNext())
    {
      paramString3 = (Map.Entry)paramMap.next();
      paramJ.l(11, 2);
      paramJ.s(a((y.a)paramString3.getKey(), (String)paramString3.getValue()));
      paramJ.g(1, getKeyi);
      paramJ.c(2, f.a((String)paramString3.getValue()));
    }
    paramJ.m(12, paramInt3);
    if (paramString2 != null) {
      paramJ.c(13, paramString2);
    }
    if (paramString1 != null) {
      paramJ.c(14, paramString1);
    }
  }
  
  public static void a(j paramJ, long paramLong1, String paramString1, Wa paramWa, Thread paramThread, StackTraceElement[] paramArrayOfStackTraceElement, Thread[] paramArrayOfThread, List<StackTraceElement[]> paramList, Map<String, String> paramMap, ya paramYa, ActivityManager.RunningAppProcessInfo paramRunningAppProcessInfo, int paramInt1, String paramString2, String paramString3, Float paramFloat, int paramInt2, boolean paramBoolean, long paramLong2, long paramLong3)
    throws Exception
  {
    f localF = f.a(paramString2);
    if (paramString3 == null) {
      paramString2 = null;
    } else {
      paramString2 = f.a(paramString3.replace("-", ""));
    }
    paramString3 = paramYa.b();
    if (paramString3 == null) {
      g.h().d("CrashlyticsCore", "No log data to include with this event.");
    }
    paramYa.a();
    paramJ.l(10, 2);
    paramJ.s(a(paramLong1, paramString1, paramWa, paramThread, paramArrayOfStackTraceElement, paramArrayOfThread, paramList, 8, paramMap, paramRunningAppProcessInfo, paramInt1, localF, paramString2, paramFloat, paramInt2, paramBoolean, paramLong2, paramLong3, paramString3));
    paramJ.j(1, paramLong1);
    paramJ.c(2, f.a(paramString1));
    a(paramJ, paramWa, paramThread, paramArrayOfStackTraceElement, paramArrayOfThread, paramList, 8, localF, paramString2, paramMap, paramRunningAppProcessInfo, paramInt1);
    a(paramJ, paramFloat, paramInt2, paramBoolean, paramInt1, paramLong2, paramLong3);
    a(paramJ, paramString3);
  }
  
  public static void a(j paramJ, Wa paramWa, int paramInt1, int paramInt2, int paramInt3)
    throws Exception
  {
    paramJ.l(paramInt3, 2);
    paramJ.s(a(paramWa, 1, paramInt2));
    paramJ.c(1, f.a(b));
    Object localObject = a;
    if (localObject != null) {
      paramJ.c(3, f.a((String)localObject));
    }
    localObject = c;
    int j = localObject.length;
    int i = 0;
    paramInt3 = 0;
    while (paramInt3 < j)
    {
      a(paramJ, 4, localObject[paramInt3], true);
      paramInt3 += 1;
    }
    localObject = d;
    if (localObject != null)
    {
      paramInt3 = i;
      paramWa = (Wa)localObject;
      if (paramInt1 < paramInt2)
      {
        a(paramJ, (Wa)localObject, paramInt1 + 1, paramInt2, 6);
        return;
      }
      while (paramWa != null)
      {
        paramWa = d;
        paramInt3 += 1;
      }
      paramJ.m(7, paramInt3);
    }
  }
  
  public static void a(j paramJ, Wa paramWa, Thread paramThread, StackTraceElement[] paramArrayOfStackTraceElement, Thread[] paramArrayOfThread, List<StackTraceElement[]> paramList, int paramInt, f paramF1, f paramF2)
    throws Exception
  {
    paramJ.l(1, 2);
    paramJ.s(a(paramWa, paramThread, paramArrayOfStackTraceElement, paramArrayOfThread, paramList, paramInt, paramF1, paramF2));
    a(paramJ, paramThread, paramArrayOfStackTraceElement, 4, true);
    int j = paramArrayOfThread.length;
    int i = 0;
    while (i < j)
    {
      a(paramJ, paramArrayOfThread[i], (StackTraceElement[])paramList.get(i), 0, false);
      i += 1;
    }
    a(paramJ, paramWa, 1, paramInt, 2);
    paramJ.l(3, 2);
    paramJ.s(a());
    paramJ.c(1, b);
    paramJ.c(2, b);
    paramJ.j(3, 0L);
    paramJ.l(4, 2);
    paramJ.s(a(paramF1, paramF2));
    paramJ.j(1, 0L);
    paramJ.j(2, 0L);
    paramJ.c(3, paramF1);
    if (paramF2 != null) {
      paramJ.c(4, paramF2);
    }
  }
  
  public static void a(j paramJ, Wa paramWa, Thread paramThread, StackTraceElement[] paramArrayOfStackTraceElement, Thread[] paramArrayOfThread, List<StackTraceElement[]> paramList, int paramInt1, f paramF1, f paramF2, Map<String, String> paramMap, ActivityManager.RunningAppProcessInfo paramRunningAppProcessInfo, int paramInt2)
    throws Exception
  {
    paramJ.l(3, 2);
    paramJ.s(a(paramWa, paramThread, paramArrayOfStackTraceElement, paramArrayOfThread, paramList, paramInt1, paramF1, paramF2, paramMap, paramRunningAppProcessInfo, paramInt2));
    a(paramJ, paramWa, paramThread, paramArrayOfStackTraceElement, paramArrayOfThread, paramList, paramInt1, paramF1, paramF2);
    if ((paramMap != null) && (!paramMap.isEmpty())) {
      a(paramJ, paramMap);
    }
    if (paramRunningAppProcessInfo != null)
    {
      boolean bool;
      if (importance != 100) {
        bool = true;
      } else {
        bool = false;
      }
      paramJ.b(3, bool);
    }
    paramJ.m(4, paramInt2);
  }
  
  public static void a(j paramJ, f paramF)
    throws Exception
  {
    if (paramF != null)
    {
      paramJ.l(6, 2);
      paramJ.s(a(paramF));
      paramJ.c(1, paramF);
    }
  }
  
  public static void a(j paramJ, Float paramFloat, int paramInt1, boolean paramBoolean, int paramInt2, long paramLong1, long paramLong2)
    throws Exception
  {
    paramJ.l(5, 2);
    paramJ.s(a(paramFloat, paramInt1, paramBoolean, paramInt2, paramLong1, paramLong2));
    if (paramFloat != null) {
      paramJ.b(1, paramFloat.floatValue());
    }
    paramJ.k(2, paramInt1);
    paramJ.b(3, paramBoolean);
    paramJ.m(4, paramInt2);
    paramJ.j(5, paramLong1);
    paramJ.j(6, paramLong2);
  }
  
  public static void a(j paramJ, String paramString1, String paramString2, long paramLong)
    throws Exception
  {
    paramJ.c(1, f.a(paramString2));
    paramJ.c(2, f.a(paramString1));
    paramJ.j(3, paramLong);
  }
  
  public static void a(j paramJ, String paramString1, String paramString2, String paramString3)
    throws Exception
  {
    Object localObject = paramString1;
    if (paramString1 == null) {
      localObject = "";
    }
    paramString1 = f.a((String)localObject);
    localObject = a(paramString2);
    f localF = a(paramString3);
    int j = j.a(1, paramString1) + 0;
    int i = j;
    if (paramString2 != null) {
      i = j + j.a(2, (f)localObject);
    }
    j = i;
    if (paramString3 != null) {
      j = i + j.a(3, localF);
    }
    paramJ.l(6, 2);
    paramJ.s(j);
    paramJ.c(1, paramString1);
    if (paramString2 != null) {
      paramJ.c(2, (f)localObject);
    }
    if (paramString3 != null) {
      paramJ.c(3, localF);
    }
  }
  
  public static void a(j paramJ, String paramString1, String paramString2, String paramString3, String paramString4, String paramString5, int paramInt, String paramString6)
    throws Exception
  {
    f localF = f.a(paramString1);
    paramString2 = f.a(paramString2);
    paramString3 = f.a(paramString3);
    paramString4 = f.a(paramString4);
    paramString5 = f.a(paramString5);
    if (paramString6 != null) {
      paramString1 = f.a(paramString6);
    } else {
      paramString1 = null;
    }
    paramJ.l(7, 2);
    paramJ.s(a(localF, paramString2, paramString3, paramString4, paramString5, paramInt, paramString1));
    paramJ.c(1, localF);
    paramJ.c(2, paramString3);
    paramJ.c(3, paramString4);
    paramJ.l(5, 2);
    paramJ.s(b(paramString2));
    paramJ.c(1, paramString2);
    paramJ.c(6, paramString5);
    if (paramString1 != null)
    {
      paramJ.c(8, c);
      paramJ.c(9, paramString1);
    }
    paramJ.g(10, paramInt);
  }
  
  public static void a(j paramJ, String paramString1, String paramString2, boolean paramBoolean)
    throws Exception
  {
    paramString1 = f.a(paramString1);
    paramString2 = f.a(paramString2);
    paramJ.l(8, 2);
    paramJ.s(a(paramString1, paramString2, paramBoolean));
    paramJ.g(1, 3);
    paramJ.c(2, paramString1);
    paramJ.c(3, paramString2);
    paramJ.b(4, paramBoolean);
  }
  
  public static void a(j paramJ, Thread paramThread, StackTraceElement[] paramArrayOfStackTraceElement, int paramInt, boolean paramBoolean)
    throws Exception
  {
    paramJ.l(1, 2);
    paramJ.s(a(paramThread, paramArrayOfStackTraceElement, paramInt, paramBoolean));
    paramJ.c(1, f.a(paramThread.getName()));
    paramJ.m(2, paramInt);
    int i = paramArrayOfStackTraceElement.length;
    paramInt = 0;
    while (paramInt < i)
    {
      a(paramJ, 3, paramArrayOfStackTraceElement[paramInt], paramBoolean);
      paramInt += 1;
    }
  }
  
  public static void a(j paramJ, Map<String, String> paramMap)
    throws Exception
  {
    Iterator localIterator = paramMap.entrySet().iterator();
    while (localIterator.hasNext())
    {
      paramMap = (Map.Entry)localIterator.next();
      paramJ.l(2, 2);
      paramJ.s(a((String)paramMap.getKey(), (String)paramMap.getValue()));
      paramJ.c(1, f.a((String)paramMap.getKey()));
      String str = (String)paramMap.getValue();
      paramMap = str;
      if (str == null) {
        paramMap = "";
      }
      paramJ.c(2, f.a(paramMap));
    }
  }
  
  public static int b(f paramF)
  {
    return j.a(1, paramF) + 0;
  }
}
