package f.c.a.a;

import java.util.Random;
import l.a.a.a.a.c.a.b;

public class L
  implements b
{
  public final b a;
  public final Random b;
  public final double c;
  
  public L(b paramB, double paramDouble)
  {
    this(paramB, paramDouble, new Random());
  }
  
  public L(b paramB, double paramDouble, Random paramRandom)
  {
    if ((paramDouble >= 0.0D) && (paramDouble <= 1.0D))
    {
      if (paramB != null)
      {
        if (paramRandom != null)
        {
          a = paramB;
          c = paramDouble;
          b = paramRandom;
          return;
        }
        throw new NullPointerException("random must not be null");
      }
      throw new NullPointerException("backoff must not be null");
    }
    throw new IllegalArgumentException("jitterPercent must be between 0.0 and 1.0");
  }
  
  public double a()
  {
    double d1 = c;
    double d2 = 1.0D - d1;
    return (d1 + 1.0D - d2) * b.nextDouble() + d2;
  }
  
  public long a(int paramInt)
  {
    double d1 = a();
    double d2 = a.a(paramInt);
    Double.isNaN(d2);
    return (d1 * d2);
  }
}
