package f.c.a.a;

import android.annotation.SuppressLint;
import android.content.Context;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.os.Build.VERSION;
import l.a.a.a.a.b.l;
import l.a.a.a.a.b.m;
import l.a.a.a.a.b.m.a;
import l.a.a.a.a.b.m.b;
import l.a.a.a.a.b.o;
import l.a.a.a.a.b.x;
import l.a.a.a.a.g.s;
import l.a.a.a.g;
import l.a.a.a.q;

public class b
  extends l.a.a.a.n<Boolean>
{
  public static final String g = "Answers";
  public static final String h = "com.crashlytics.ApiEndpoint";
  public boolean i = false;
  public U j;
  
  public b() {}
  
  private void a(String paramString)
  {
    q localQ = g.h();
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append("Method ");
    localStringBuilder.append(paramString);
    localStringBuilder.append(" is not supported when using Crashlytics through Firebase.");
    localQ.a("Answers", localStringBuilder.toString());
  }
  
  public static b n()
  {
    return (b)g.a(b.class);
  }
  
  public void a(D paramD)
  {
    if (paramD != null)
    {
      if (i)
      {
        a("logInvite");
        return;
      }
      U localU = j;
      if (localU != null) {
        localU.a(paramD);
      }
      return;
    }
    throw new NullPointerException("event must not be null");
  }
  
  public void a(F paramF)
  {
    if (paramF != null)
    {
      if (i)
      {
        a("logLevelEnd");
        return;
      }
      U localU = j;
      if (localU != null) {
        localU.a(paramF);
      }
      return;
    }
    throw new NullPointerException("event must not be null");
  }
  
  public void a(G paramG)
  {
    if (paramG != null)
    {
      if (i)
      {
        a("logLevelStart");
        return;
      }
      U localU = j;
      if (localU != null) {
        localU.a(paramG);
      }
      return;
    }
    throw new NullPointerException("event must not be null");
  }
  
  public void a(H paramH)
  {
    if (paramH != null)
    {
      if (i)
      {
        a("logLogin");
        return;
      }
      U localU = j;
      if (localU != null) {
        localU.a(paramH);
      }
      return;
    }
    throw new NullPointerException("event must not be null");
  }
  
  public void a(J paramJ)
  {
    if (paramJ != null)
    {
      if (i)
      {
        a("logPurchase");
        return;
      }
      U localU = j;
      if (localU != null) {
        localU.a(paramJ);
      }
      return;
    }
    throw new NullPointerException("event must not be null");
  }
  
  public void a(M paramM)
  {
    if (paramM != null)
    {
      if (i)
      {
        a("logRating");
        return;
      }
      U localU = j;
      if (localU != null) {
        localU.a(paramM);
      }
      return;
    }
    throw new NullPointerException("event must not be null");
  }
  
  public void a(Q paramQ)
  {
    if (paramQ != null)
    {
      if (i)
      {
        a("logSearch");
        return;
      }
      U localU = j;
      if (localU != null) {
        localU.a(paramQ);
      }
      return;
    }
    throw new NullPointerException("event must not be null");
  }
  
  public void a(a paramA)
  {
    if (paramA != null)
    {
      if (i)
      {
        a("logAddToCart");
        return;
      }
      U localU = j;
      if (localU != null) {
        localU.a(paramA);
      }
      return;
    }
    throw new NullPointerException("event must not be null");
  }
  
  public void a(ba paramBa)
  {
    if (paramBa != null)
    {
      if (i)
      {
        a("logShare");
        return;
      }
      U localU = j;
      if (localU != null) {
        localU.a(paramBa);
      }
      return;
    }
    throw new NullPointerException("event must not be null");
  }
  
  public void a(ca paramCa)
  {
    if (paramCa != null)
    {
      if (i)
      {
        a("logSignUp");
        return;
      }
      U localU = j;
      if (localU != null) {
        localU.a(paramCa);
      }
      return;
    }
    throw new NullPointerException("event must not be null");
  }
  
  public void a(da paramDa)
  {
    if (paramDa != null)
    {
      if (i)
      {
        a("logStartCheckout");
        return;
      }
      U localU = j;
      if (localU != null) {
        localU.a(paramDa);
      }
      return;
    }
    throw new NullPointerException("event must not be null");
  }
  
  public void a(u paramU)
  {
    if (paramU != null)
    {
      if (i)
      {
        a("logContentView");
        return;
      }
      U localU = j;
      if (localU != null) {
        localU.a(paramU);
      }
      return;
    }
    throw new NullPointerException("event must not be null");
  }
  
  public void a(v paramV)
  {
    if (paramV != null)
    {
      if (i)
      {
        a("logCustom");
        return;
      }
      U localU = j;
      if (localU != null) {
        localU.a(paramV);
      }
      return;
    }
    throw new NullPointerException("event must not be null");
  }
  
  public void a(m.a paramA)
  {
    U localU = j;
    if (localU != null) {
      localU.a(paramA.b(), paramA.a());
    }
  }
  
  public void a(m.b paramB)
  {
    U localU = j;
    if (localU != null) {
      localU.a(paramB.b());
    }
  }
  
  public Boolean c()
  {
    boolean bool = o.a(d()).a();
    Boolean localBoolean = Boolean.valueOf(false);
    if (!bool)
    {
      g.h().d("Fabric", "Analytics collection disabled, because data collection is disabled by Firebase.");
      j.b();
      return localBoolean;
    }
    try
    {
      l.a.a.a.a.g.v localV = s.c().a();
      if (localV == null)
      {
        g.h().b("Answers", "Failed to retrieve settings");
        return localBoolean;
      }
      if (d.d)
      {
        g.h().d("Answers", "Analytics collection enabled");
        j.a(e, o());
        return Boolean.valueOf(true);
      }
      g.h().d("Answers", "Analytics collection disabled");
      j.b();
      return localBoolean;
    }
    catch (Exception localException)
    {
      g.h().c("Answers", "Error dealing with settings", localException);
    }
    return localBoolean;
  }
  
  public String h()
  {
    return "com.crashlytics.sdk.android:answers";
  }
  
  public String j()
  {
    return "1.4.7.32";
  }
  
  @SuppressLint({"NewApi"})
  public boolean m()
  {
    try
    {
      Context localContext = d();
      PackageInfo localPackageInfo = localContext.getPackageManager().getPackageInfo(localContext.getPackageName(), 0);
      String str3 = Integer.toString(versionCode);
      String str2 = versionName;
      String str1 = str2;
      if (str2 == null) {
        str1 = "0.0";
      }
      int k = Build.VERSION.SDK_INT;
      long l = firstInstallTime;
      j = U.a(this, localContext, g(), str3, str1, l);
      j.c();
      i = new x().e(localContext);
      return true;
    }
    catch (Exception localException)
    {
      g.h().c("Answers", "Error retrieving app properties", localException);
    }
    return false;
  }
  
  public String o()
  {
    return l.b(d(), "com.crashlytics.ApiEndpoint");
  }
}
