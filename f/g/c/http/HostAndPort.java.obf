package f.g.c.i;

import f.g.c.b.U;
import f.g.c.b.ba;
import java.io.Serializable;
import java.util.Arrays;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import m.a.a.b;

@f.g.c.a.a
@b
public final class a
  implements Serializable
{
  public static final int a = -1;
  public static final Pattern b = Pattern.compile("^\\[(.*:.*)\\](?::(\\d*))?$");
  public static final long c = 0L;
  public final String d;
  public final int e;
  public final boolean f;
  
  public a(String paramString, int paramInt, boolean paramBoolean)
  {
    d = paramString;
    e = paramInt;
    f = paramBoolean;
  }
  
  public static a a(String paramString)
  {
    Object localObject;
    boolean bool;
    int i;
    String str;
    if (paramString != null)
    {
      localObject = null;
      bool = paramString.startsWith("[");
      i = -1;
      if (bool)
      {
        localObject = b.matcher(paramString);
        ba.a(((Matcher)localObject).matches(), "Invalid bracketed host/port: %s", new Object[] { paramString });
        str = ((Matcher)localObject).group(1);
        localObject = ((Matcher)localObject).group(2);
        bool = false;
      }
      else
      {
        int j = paramString.indexOf(':');
        if (j >= 0)
        {
          int k = j + 1;
          if (paramString.indexOf(':', k) == -1)
          {
            str = paramString.substring(0, j);
            localObject = paramString.substring(k);
            bool = false;
            break label134;
          }
        }
        if (j >= 0) {
          bool = true;
        } else {
          bool = false;
        }
        str = paramString;
      }
      label134:
      if (localObject != null) {
        ba.a(((String)localObject).startsWith("+") ^ true, "Unparseable port number: %s", new Object[] { paramString });
      }
    }
    try
    {
      i = Integer.parseInt((String)localObject);
      ba.a(b(i), "Port number out of range: %s", new Object[] { paramString });
    }
    catch (NumberFormatException localNumberFormatException)
    {
      for (;;) {}
    }
    throw new IllegalArgumentException(f.a.a.a.a.c("Unparseable port number: ", paramString));
    return new a(str, i, bool);
    throw new NullPointerException();
  }
  
  public static a a(String paramString, int paramInt)
  {
    ba.a(b(paramInt));
    paramString = a(paramString);
    ba.a(paramString.c() ^ true);
    return new a(d, paramInt, f);
  }
  
  public static boolean b(int paramInt)
  {
    return (paramInt >= 0) && (paramInt <= 65535);
  }
  
  public int a(int paramInt)
  {
    if (c()) {
      paramInt = e;
    }
    return paramInt;
  }
  
  public String a()
  {
    return d;
  }
  
  public int b()
  {
    ba.b(c());
    return e;
  }
  
  public a c(int paramInt)
  {
    ba.a(b(paramInt));
    if (!c())
    {
      if (e == paramInt) {
        return this;
      }
      return new a(d, paramInt, f);
    }
    return this;
  }
  
  public boolean c()
  {
    return e >= 0;
  }
  
  public a d()
  {
    ba.a(f ^ true, "Possible bracketless IPv6 literal: %s", new Object[] { d });
    return this;
  }
  
  public boolean equals(Object paramObject)
  {
    if (this == paramObject) {
      return true;
    }
    if ((paramObject instanceof a))
    {
      paramObject = (a)paramObject;
      return (U.a(d, d)) && (e == e) && (f == f);
    }
    return false;
  }
  
  public int hashCode()
  {
    return Arrays.hashCode(new Object[] { d, Integer.valueOf(e), Boolean.valueOf(f) });
  }
  
  public String toString()
  {
    StringBuilder localStringBuilder = new StringBuilder(d.length() + 7);
    if (d.indexOf(':') >= 0)
    {
      localStringBuilder.append('[');
      localStringBuilder.append(d);
      localStringBuilder.append(']');
    }
    else
    {
      localStringBuilder.append(d);
    }
    if (c())
    {
      localStringBuilder.append(':');
      localStringBuilder.append(e);
    }
    return localStringBuilder.toString();
  }
}
