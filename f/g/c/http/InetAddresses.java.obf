package f.g.c.i;

import f.g.c.b.U;
import f.g.c.b.ba;
import f.g.c.f.l;
import f.g.c.f.n;
import f.g.c.f.p;
import f.g.c.g.b;
import f.g.c.g.i;
import f.g.c.g.i.a;
import f.g.c.j.g;
import java.net.Inet4Address;
import java.net.Inet6Address;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.nio.ByteBuffer;
import java.util.Arrays;
import m.a.h;

@f.g.c.a.a
public final class d
{
  public static final int a = 4;
  public static final int b = 8;
  public static final Inet4Address c = (Inet4Address)b("127.0.0.1");
  public static final Inet4Address d = (Inet4Address)b("0.0.0.0");
  
  public d() {}
  
  public static int a(InetAddress paramInetAddress)
  {
    return new i.a(b(paramInetAddress).getAddress()).readInt();
  }
  
  public static String a(String paramString)
  {
    int i = paramString.lastIndexOf(':') + 1;
    String str = paramString.substring(0, i);
    Object localObject = j(paramString.substring(i));
    if (localObject == null) {
      return null;
    }
    paramString = Integer.toHexString((localObject[0] & 0xFF) << 8 | localObject[1] & 0xFF);
    i = localObject[2];
    localObject = Integer.toHexString(localObject[3] & 0xFF | (i & 0xFF) << 8);
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append(str);
    localStringBuilder.append(paramString);
    localStringBuilder.append(":");
    localStringBuilder.append((String)localObject);
    return localStringBuilder.toString();
  }
  
  public static Inet4Address a(int paramInt)
  {
    return c(g.b(paramInt));
  }
  
  public static Inet4Address a(Inet6Address paramInet6Address)
  {
    ba.a(g(paramInet6Address), "Address '%s' is not a 6to4 address.", new Object[] { e(paramInet6Address) });
    return c(a(paramInet6Address.getAddress(), 2, 6));
  }
  
  public static InetAddress a(byte[] paramArrayOfByte)
  {
    try
    {
      paramArrayOfByte = InetAddress.getByAddress(paramArrayOfByte);
      return paramArrayOfByte;
    }
    catch (UnknownHostException paramArrayOfByte)
    {
      throw new AssertionError(paramArrayOfByte);
    }
  }
  
  public static void a(int[] paramArrayOfInt)
  {
    int i = 0;
    int k = -1;
    int m = -1;
    int i1;
    for (int j = -1; i < paramArrayOfInt.length + 1; j = i1)
    {
      int n;
      int i2;
      if ((i < paramArrayOfInt.length) && (paramArrayOfInt[i] == 0))
      {
        n = k;
        i2 = m;
        i1 = j;
        if (j < 0)
        {
          i1 = i;
          n = k;
          i2 = m;
        }
      }
      else
      {
        n = k;
        i2 = m;
        i1 = j;
        if (j >= 0)
        {
          i1 = i - j;
          n = k;
          if (i1 > k)
          {
            n = i1;
            m = j;
          }
          i1 = -1;
          i2 = m;
        }
      }
      i += 1;
      k = n;
      m = i2;
    }
    if (k >= 2) {
      Arrays.fill(paramArrayOfInt, m, k + m, -1);
    }
  }
  
  public static byte[] a(byte[] paramArrayOfByte, int paramInt1, int paramInt2)
  {
    paramInt2 -= paramInt1;
    byte[] arrayOfByte = new byte[paramInt2];
    System.arraycopy(paramArrayOfByte, paramInt1, arrayOfByte, 0, paramInt2);
    return arrayOfByte;
  }
  
  public static String b(int[] paramArrayOfInt)
  {
    StringBuilder localStringBuilder = new StringBuilder(39);
    int j = 0;
    int i;
    for (int k = 0; j < paramArrayOfInt.length; k = i)
    {
      if (paramArrayOfInt[j] >= 0) {
        i = 1;
      } else {
        i = 0;
      }
      if (i != 0)
      {
        if (k != 0) {
          localStringBuilder.append(':');
        }
        localStringBuilder.append(Integer.toHexString(paramArrayOfInt[j]));
      }
      else if ((j == 0) || (k != 0))
      {
        localStringBuilder.append("::");
      }
      j += 1;
    }
    return localStringBuilder.toString();
  }
  
  public static Inet4Address b(Inet6Address paramInet6Address)
  {
    ba.a(h(paramInet6Address), "Address '%s' is not IPv4-compatible.", new Object[] { e(paramInet6Address) });
    return c(a(paramInet6Address.getAddress(), 12, 16));
  }
  
  public static Inet4Address b(InetAddress paramInetAddress)
  {
    if ((paramInetAddress instanceof Inet4Address)) {
      return (Inet4Address)paramInetAddress;
    }
    byte[] arrayOfByte = paramInetAddress.getAddress();
    int i = 0;
    while (i < 15)
    {
      if (arrayOfByte[i] != 0)
      {
        i = 0;
        break label47;
      }
      i += 1;
    }
    i = 1;
    label47:
    if ((i != 0) && (arrayOfByte[15] == 1)) {
      return c;
    }
    if ((i != 0) && (arrayOfByte[15] == 0)) {
      return d;
    }
    paramInetAddress = (Inet6Address)paramInetAddress;
    long l;
    if (f(paramInetAddress)) {
      l = c(paramInetAddress).hashCode();
    } else {
      l = ByteBuffer.wrap(paramInetAddress.getAddress(), 0, 8).getLong();
    }
    int j = p.d.a(l).b() | 0xE0000000;
    i = j;
    if (j == -1) {
      i = -2;
    }
    return c(g.b(i));
  }
  
  public static InetAddress b(String paramString)
  {
    byte[] arrayOfByte = d(paramString);
    if (arrayOfByte != null) {
      return a(arrayOfByte);
    }
    throw new IllegalArgumentException(String.format("'%s' is not an IP string literal.", new Object[] { paramString }));
  }
  
  public static InetAddress b(byte[] paramArrayOfByte)
    throws UnknownHostException
  {
    byte[] arrayOfByte = new byte[paramArrayOfByte.length];
    int i = 0;
    while (i < paramArrayOfByte.length)
    {
      arrayOfByte[i] = paramArrayOfByte[(paramArrayOfByte.length - i - 1)];
      i += 1;
    }
    return InetAddress.getByAddress(arrayOfByte);
  }
  
  public static Inet4Address c(Inet6Address paramInet6Address)
  {
    if (h(paramInet6Address)) {
      return b(paramInet6Address);
    }
    if (g(paramInet6Address)) {
      return a(paramInet6Address);
    }
    if (j(paramInet6Address)) {
      return e(paramInet6Address).a();
    }
    throw new IllegalArgumentException(String.format("'%s' has no embedded IPv4 address.", new Object[] { e(paramInet6Address) }));
  }
  
  public static Inet4Address c(byte[] paramArrayOfByte)
  {
    boolean bool;
    if (paramArrayOfByte.length == 4) {
      bool = true;
    } else {
      bool = false;
    }
    ba.a(bool, "Byte array has invalid length for an IPv4 address: %s != 4.", new Object[] { Integer.valueOf(paramArrayOfByte.length) });
    return (Inet4Address)a(paramArrayOfByte);
  }
  
  public static InetAddress c(String paramString)
  {
    if (paramString != null)
    {
      int i;
      if ((paramString.startsWith("[")) && (paramString.endsWith("]")))
      {
        localObject = f.a.a.a.a.c(paramString, 1, 1);
        i = 16;
      }
      else
      {
        i = 4;
        localObject = paramString;
      }
      Object localObject = d((String)localObject);
      if ((localObject != null) && (localObject.length == i)) {
        return a((byte[])localObject);
      }
      throw new IllegalArgumentException(String.format("Not a valid URI IP literal: '%s'", new Object[] { paramString }));
    }
    throw new NullPointerException();
  }
  
  public static InetAddress c(InetAddress paramInetAddress)
  {
    byte[] arrayOfByte = paramInetAddress.getAddress();
    int i = arrayOfByte.length - 1;
    while ((i >= 0) && (arrayOfByte[i] == -1))
    {
      arrayOfByte[i] = 0;
      i -= 1;
    }
    boolean bool;
    if (i >= 0) {
      bool = true;
    } else {
      bool = false;
    }
    ba.a(bool, "Incrementing %s would wrap.", new Object[] { paramInetAddress });
    arrayOfByte[i] = ((byte)(arrayOfByte[i] + 1));
    return a(arrayOfByte);
  }
  
  public static Inet4Address d(Inet6Address paramInet6Address)
  {
    ba.a(i(paramInet6Address), "Address '%s' is not an ISATAP address.", new Object[] { e(paramInet6Address) });
    return c(a(paramInet6Address.getAddress(), 12, 16));
  }
  
  public static boolean d(InetAddress paramInetAddress)
  {
    paramInetAddress = paramInetAddress.getAddress();
    int i = 0;
    while (i < paramInetAddress.length)
    {
      if (paramInetAddress[i] != -1) {
        return false;
      }
      i += 1;
    }
    return true;
  }
  
  public static byte[] d(String paramString)
  {
    int i = 0;
    int k = 0;
    int j = 0;
    while (i < paramString.length())
    {
      char c1 = paramString.charAt(i);
      if (c1 == '.')
      {
        j = 1;
      }
      else if (c1 == ':')
      {
        if (j != 0) {
          return null;
        }
        k = 1;
      }
      else if (Character.digit(c1, 16) == -1)
      {
        return null;
      }
      i += 1;
    }
    if (k != 0)
    {
      String str = paramString;
      if (j != 0)
      {
        paramString = a(paramString);
        str = paramString;
        if (paramString == null) {
          return null;
        }
      }
      return k(str);
    }
    if (j != 0) {
      return j(paramString);
    }
    return null;
  }
  
  public static a e(Inet6Address paramInet6Address)
  {
    boolean bool = j(paramInet6Address);
    Object localObject = e(paramInet6Address);
    int i = 0;
    ba.a(bool, "Address '%s' is not a Teredo address.", new Object[] { localObject });
    localObject = paramInet6Address.getAddress();
    paramInet6Address = c(a((byte[])localObject, 4, 8));
    int j = i.a((byte[])localObject, 8).readShort();
    ba.d(10, localObject.length, "index");
    int k = new i.a((byte[])localObject, 10).readShort();
    localObject = a((byte[])localObject, 12, 16);
    while (i < localObject.length)
    {
      localObject[i] = ((byte)(localObject[i] ^ 0xFFFFFFFF));
      i += 1;
    }
    return new a(paramInet6Address, c((byte[])localObject), 0xFFFF & (k ^ 0xFFFFFFFF), j & 0xFFFF);
  }
  
  public static String e(InetAddress paramInetAddress)
  {
    if (paramInetAddress != null)
    {
      if ((paramInetAddress instanceof Inet4Address)) {
        return paramInetAddress.getHostAddress();
      }
      ba.a(paramInetAddress instanceof Inet6Address);
      paramInetAddress = paramInetAddress.getAddress();
      int[] arrayOfInt = new int[8];
      int i = 0;
      while (i < arrayOfInt.length)
      {
        int j = i * 2;
        arrayOfInt[i] = g.a(0, 0, paramInetAddress[j], paramInetAddress[(j + 1)]);
        i += 1;
      }
      a(arrayOfInt);
      return b(arrayOfInt);
    }
    paramInetAddress = new NullPointerException();
    for (;;)
    {
      throw paramInetAddress;
    }
  }
  
  public static boolean e(String paramString)
  {
    return d(paramString) != null;
  }
  
  public static String f(InetAddress paramInetAddress)
  {
    if ((paramInetAddress instanceof Inet6Address))
    {
      StringBuilder localStringBuilder = f.a.a.a.a.b("[");
      localStringBuilder.append(e(paramInetAddress));
      localStringBuilder.append("]");
      return localStringBuilder.toString();
    }
    return e(paramInetAddress);
  }
  
  public static boolean f(String paramString)
  {
    paramString = d(paramString);
    if ((paramString != null) && (paramString.length == 16))
    {
      int i = 0;
      int j;
      for (;;)
      {
        j = 10;
        if (i >= 10) {
          break;
        }
        if (paramString[i] != 0) {
          return false;
        }
        i += 1;
      }
      while (j < 12)
      {
        if (paramString[j] != -1) {
          return false;
        }
        j += 1;
      }
      return true;
    }
    return false;
  }
  
  public static boolean f(Inet6Address paramInet6Address)
  {
    return (h(paramInet6Address)) || (g(paramInet6Address)) || (j(paramInet6Address));
  }
  
  public static boolean g(String paramString)
  {
    try
    {
      c(paramString);
      return true;
    }
    catch (IllegalArgumentException paramString)
    {
      for (;;) {}
    }
    return false;
  }
  
  public static boolean g(Inet6Address paramInet6Address)
  {
    paramInet6Address = paramInet6Address.getAddress();
    boolean bool2 = false;
    boolean bool1 = bool2;
    if (paramInet6Address[0] == 32)
    {
      bool1 = bool2;
      if (paramInet6Address[1] == 2) {
        bool1 = true;
      }
    }
    return bool1;
  }
  
  public static short h(String paramString)
  {
    int i = Integer.parseInt(paramString, 16);
    if (i <= 65535) {
      return (short)i;
    }
    throw new NumberFormatException();
  }
  
  public static boolean h(Inet6Address paramInet6Address)
  {
    if (!paramInet6Address.isIPv4CompatibleAddress()) {
      return false;
    }
    paramInet6Address = paramInet6Address.getAddress();
    return (paramInet6Address[12] != 0) || (paramInet6Address[13] != 0) || (paramInet6Address[14] != 0) || ((paramInet6Address[15] != 0) && (paramInet6Address[15] != 1));
  }
  
  public static byte i(String paramString)
  {
    int i = Integer.parseInt(paramString);
    if ((i <= 255) && ((!paramString.startsWith("0")) || (paramString.length() <= 1))) {
      return (byte)i;
    }
    throw new NumberFormatException();
  }
  
  public static boolean i(Inet6Address paramInet6Address)
  {
    boolean bool1 = j(paramInet6Address);
    boolean bool2 = false;
    if (bool1) {
      return false;
    }
    paramInet6Address = paramInet6Address.getAddress();
    if ((paramInet6Address[8] | 0x3) != 3) {
      return false;
    }
    bool1 = bool2;
    if (paramInet6Address[9] == 0)
    {
      bool1 = bool2;
      if (paramInet6Address[10] == 94)
      {
        bool1 = bool2;
        if (paramInet6Address[11] == -2) {
          bool1 = true;
        }
      }
    }
    return bool1;
  }
  
  public static boolean j(Inet6Address paramInet6Address)
  {
    paramInet6Address = paramInet6Address.getAddress();
    boolean bool2 = false;
    boolean bool1 = bool2;
    if (paramInet6Address[0] == 32)
    {
      bool1 = bool2;
      if (paramInet6Address[1] == 1)
      {
        bool1 = bool2;
        if (paramInet6Address[2] == 0)
        {
          bool1 = bool2;
          if (paramInet6Address[3] == 0) {
            bool1 = true;
          }
        }
      }
    }
    return bool1;
  }
  
  public static byte[] j(String paramString)
  {
    paramString = paramString.split("\\.", 5);
    if (paramString.length != 4) {
      return null;
    }
    byte[] arrayOfByte = new byte[4];
    int i = 0;
    try
    {
      while (i < arrayOfByte.length)
      {
        arrayOfByte[i] = i(paramString[i]);
        i += 1;
      }
      return arrayOfByte;
    }
    catch (NumberFormatException paramString) {}
    return null;
  }
  
  public static byte[] k(String paramString)
  {
    paramString = paramString.split(":", 10);
    int i;
    int j;
    int k;
    int n;
    ByteBuffer localByteBuffer;
    if (paramString.length >= 3)
    {
      if (paramString.length > 9) {
        return null;
      }
      i = 1;
      for (j = -1; i < paramString.length - 1; j = k)
      {
        k = j;
        if (paramString[i].length() == 0)
        {
          if (j >= 0) {
            return null;
          }
          k = i;
        }
        i += 1;
      }
      int m;
      if (j >= 0)
      {
        n = paramString.length - j - 1;
        if (paramString[0].length() == 0)
        {
          i = j - 1;
          k = i;
          if (i != 0) {
            return null;
          }
        }
        else
        {
          k = j;
        }
        i = n;
        m = k;
        if (paramString[(paramString.length - 1)].length() == 0)
        {
          n -= 1;
          i = n;
          m = k;
          if (n != 0) {
            return null;
          }
        }
      }
      else
      {
        m = paramString.length;
        i = 0;
      }
      n = 8 - (m + i);
      if (j >= 0 ? n < 1 : n != 0) {
        return null;
      }
      localByteBuffer = ByteBuffer.allocate(16);
      j = 0;
      if (j >= m) {
        break label264;
      }
    }
    for (;;)
    {
      try
      {
        localByteBuffer.putShort(h(paramString[j]));
        j += 1;
      }
      catch (NumberFormatException paramString)
      {
        return null;
      }
      k = i;
      if (j < n)
      {
        localByteBuffer.putShort((short)0);
        j += 1;
      }
      else if (k > 0)
      {
        localByteBuffer.putShort(h(paramString[(paramString.length - k)]));
        k -= 1;
      }
      else
      {
        return localByteBuffer.array();
        return null;
        label264:
        j = 0;
      }
    }
  }
  
  @f.g.c.a.a
  public static final class a
  {
    public final Inet4Address a;
    public final Inet4Address b;
    public final int c;
    public final int d;
    
    public a(@h Inet4Address paramInet4Address1, @h Inet4Address paramInet4Address2, int paramInt1, int paramInt2)
    {
      boolean bool;
      if ((paramInt1 >= 0) && (paramInt1 <= 65535)) {
        bool = true;
      } else {
        bool = false;
      }
      ba.a(bool, "port '%s' is out of range (0 <= port <= 0xffff)", new Object[] { Integer.valueOf(paramInt1) });
      if ((paramInt2 >= 0) && (paramInt2 <= 65535)) {
        bool = true;
      } else {
        bool = false;
      }
      ba.a(bool, "flags '%s' is out of range (0 <= flags <= 0xffff)", new Object[] { Integer.valueOf(paramInt2) });
      a = ((Inet4Address)U.b(paramInet4Address1, d.d));
      b = ((Inet4Address)U.b(paramInet4Address2, d.d));
      c = paramInt1;
      d = paramInt2;
    }
    
    public Inet4Address a()
    {
      return b;
    }
    
    public int b()
    {
      return d;
    }
    
    public int c()
    {
      return c;
    }
    
    public Inet4Address d()
    {
      return a;
    }
  }
}
