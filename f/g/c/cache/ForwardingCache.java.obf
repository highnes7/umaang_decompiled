package f.g.c.c;

import f.g.c.a.a;
import f.g.c.d.Ab;
import f.g.c.d.Wa;
import java.util.Map;
import java.util.concurrent.Callable;
import java.util.concurrent.ConcurrentMap;
import java.util.concurrent.ExecutionException;
import m.a.h;

@a
public abstract class l<K, V>
  extends Wa
  implements c<K, V>
{
  public l() {}
  
  public V a(K paramK, Callable<? extends V> paramCallable)
    throws ExecutionException
  {
    return q().a(paramK, paramCallable);
  }
  
  public ConcurrentMap<K, V> a()
  {
    return q().a();
  }
  
  public void b(Iterable<?> paramIterable)
  {
    q().b(paramIterable);
  }
  
  public Ab<K, V> c(Iterable<?> paramIterable)
  {
    return q().c(paramIterable);
  }
  
  public void i(Object paramObject)
  {
    q().i(paramObject);
  }
  
  @h
  public V j(Object paramObject)
  {
    return q().j(paramObject);
  }
  
  public void n()
  {
    q().n();
  }
  
  public k o()
  {
    return q().o();
  }
  
  public void p()
  {
    q().p();
  }
  
  public void put(K paramK, V paramV)
  {
    q().put(paramK, paramV);
  }
  
  public void putAll(Map<? extends K, ? extends V> paramMap)
  {
    q().putAll(paramMap);
  }
  
  public abstract c<K, V> q();
  
  public long size()
  {
    return q().size();
  }
  
  @a
  public static abstract class a<K, V>
    extends l<K, V>
  {
    public final c<K, V> a;
    
    public a(c<K, V> paramC)
    {
      if (paramC != null)
      {
        a = paramC;
        return;
      }
      throw new NullPointerException();
    }
    
    public final c<K, V> q()
    {
      return a;
    }
  }
}
