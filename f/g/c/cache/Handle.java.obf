package f.g.c.c;

import f.g.c.a.a;
import f.g.c.a.b;
import f.g.c.b.U;
import f.g.c.b.U.a;
import f.g.c.b.ba;
import java.util.Arrays;
import m.a.h;

@a
@b
public final class k
{
  public final long a;
  public final long b;
  public final long c;
  public final long d;
  public final long e;
  public final long f;
  
  public k(long paramLong1, long paramLong2, long paramLong3, long paramLong4, long paramLong5, long paramLong6)
  {
    boolean bool2 = true;
    boolean bool1;
    if (paramLong1 >= 0L) {
      bool1 = true;
    } else {
      bool1 = false;
    }
    ba.a(bool1);
    if (paramLong2 >= 0L) {
      bool1 = true;
    } else {
      bool1 = false;
    }
    ba.a(bool1);
    if (paramLong3 >= 0L) {
      bool1 = true;
    } else {
      bool1 = false;
    }
    ba.a(bool1);
    if (paramLong4 >= 0L) {
      bool1 = true;
    } else {
      bool1 = false;
    }
    ba.a(bool1);
    if (paramLong5 >= 0L) {
      bool1 = true;
    } else {
      bool1 = false;
    }
    ba.a(bool1);
    if (paramLong6 >= 0L) {
      bool1 = bool2;
    } else {
      bool1 = false;
    }
    ba.a(bool1);
    a = paramLong1;
    b = paramLong2;
    c = paramLong3;
    d = paramLong4;
    e = paramLong5;
    f = paramLong6;
  }
  
  public double a()
  {
    long l = c + d;
    if (l == 0L) {
      return 0.0D;
    }
    double d1 = e;
    double d2 = l;
    Double.isNaN(d1);
    Double.isNaN(d2);
    return d1 / d2;
  }
  
  public k a(k paramK)
  {
    return new k(Math.max(0L, a - a), Math.max(0L, b - b), Math.max(0L, c - c), Math.max(0L, d - d), Math.max(0L, e - e), Math.max(0L, f - f));
  }
  
  public long b()
  {
    return f;
  }
  
  public k b(k paramK)
  {
    return new k(a + a, b + b, c + c, d + d, e + e, f + f);
  }
  
  public long c()
  {
    return a;
  }
  
  public double d()
  {
    long l = k();
    if (l == 0L) {
      return 1.0D;
    }
    double d1 = a;
    double d2 = l;
    Double.isNaN(d1);
    Double.isNaN(d2);
    return d1 / d2;
  }
  
  public long e()
  {
    return c + d;
  }
  
  public boolean equals(@h Object paramObject)
  {
    boolean bool3 = paramObject instanceof k;
    boolean bool2 = false;
    boolean bool1 = bool2;
    if (bool3)
    {
      paramObject = (k)paramObject;
      bool1 = bool2;
      if (a == a)
      {
        bool1 = bool2;
        if (b == b)
        {
          bool1 = bool2;
          if (c == c)
          {
            bool1 = bool2;
            if (d == d)
            {
              bool1 = bool2;
              if (e == e)
              {
                bool1 = bool2;
                if (f == f) {
                  bool1 = true;
                }
              }
            }
          }
        }
      }
    }
    return bool1;
  }
  
  public long f()
  {
    return d;
  }
  
  public double g()
  {
    long l2 = c;
    long l1 = d;
    l2 += l1;
    if (l2 == 0L) {
      return 0.0D;
    }
    double d1 = l1;
    double d2 = l2;
    Double.isNaN(d1);
    Double.isNaN(d2);
    return d1 / d2;
  }
  
  public long h()
  {
    return c;
  }
  
  public int hashCode()
  {
    return Arrays.hashCode(new Object[] { Long.valueOf(a), Long.valueOf(b), Long.valueOf(c), Long.valueOf(d), Long.valueOf(e), Long.valueOf(f) });
  }
  
  public long i()
  {
    return b;
  }
  
  public double j()
  {
    long l = k();
    if (l == 0L) {
      return 0.0D;
    }
    double d1 = b;
    double d2 = l;
    Double.isNaN(d1);
    Double.isNaN(d2);
    return d1 / d2;
  }
  
  public long k()
  {
    return a + b;
  }
  
  public long l()
  {
    return e;
  }
  
  public String toString()
  {
    return U.a(this).a("hitCount", a).a("missCount", b).a("loadSuccessCount", c).a("loadExceptionCount", d).a("totalLoadTime", e).a("evictionCount", f).toString();
  }
}
