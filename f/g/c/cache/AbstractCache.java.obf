package f.g.c.c;

import f.g.c.a.b;
import f.g.c.d.Ab;
import f.g.c.d.fe;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;
import java.util.concurrent.Callable;
import java.util.concurrent.ConcurrentMap;
import java.util.concurrent.ExecutionException;

@f.g.c.a.a
@b
public abstract class a<K, V>
  implements c<K, V>
{
  public a() {}
  
  public V a(K paramK, Callable<? extends V> paramCallable)
    throws ExecutionException
  {
    throw new UnsupportedOperationException();
  }
  
  public ConcurrentMap<K, V> a()
  {
    throw new UnsupportedOperationException();
  }
  
  public void b(Iterable<?> paramIterable)
  {
    paramIterable = paramIterable.iterator();
    while (paramIterable.hasNext()) {
      i(paramIterable.next());
    }
  }
  
  public Ab<K, V> c(Iterable<?> paramIterable)
  {
    LinkedHashMap localLinkedHashMap = fe.d();
    paramIterable = paramIterable.iterator();
    while (paramIterable.hasNext())
    {
      Object localObject = paramIterable.next();
      if (!localLinkedHashMap.containsKey(localObject)) {
        localLinkedHashMap.put(localObject, j(localObject));
      }
    }
    return Ab.a(localLinkedHashMap);
  }
  
  public void i(Object paramObject)
  {
    throw new UnsupportedOperationException();
  }
  
  public void n() {}
  
  public k o()
  {
    throw new UnsupportedOperationException();
  }
  
  public void p()
  {
    throw new UnsupportedOperationException();
  }
  
  public void put(K paramK, V paramV)
  {
    throw new UnsupportedOperationException();
  }
  
  public void putAll(Map<? extends K, ? extends V> paramMap)
  {
    paramMap = paramMap.entrySet().iterator();
    while (paramMap.hasNext())
    {
      Map.Entry localEntry = (Map.Entry)paramMap.next();
      put(localEntry.getKey(), localEntry.getValue());
    }
  }
  
  public long size()
  {
    throw new UnsupportedOperationException();
  }
  
  @f.g.c.a.a
  public static final class a
    implements a.b
  {
    public final I a = new I();
    public final I b = new I();
    public final I c = new I();
    public final I d = new I();
    public final I e = new I();
    public final I f = new I();
    
    public a() {}
    
    public void a()
    {
      f.e();
    }
    
    public void a(int paramInt)
    {
      a.b(paramInt);
    }
    
    public void a(long paramLong)
    {
      d.e();
      e.b(paramLong);
    }
    
    public void a(a.b paramB)
    {
      paramB = paramB.b();
      a.b(paramB.c());
      b.b(paramB.i());
      c.b(paramB.h());
      d.b(paramB.f());
      e.b(paramB.l());
      f.b(paramB.b());
    }
    
    public k b()
    {
      return new k(a.g(), b.g(), c.g(), d.g(), e.g(), f.g());
    }
    
    public void b(int paramInt)
    {
      b.b(paramInt);
    }
    
    public void b(long paramLong)
    {
      c.e();
      e.b(paramLong);
    }
  }
  
  @f.g.c.a.a
  public static abstract interface b
  {
    public abstract void a();
    
    public abstract void a(int paramInt);
    
    public abstract void a(long paramLong);
    
    public abstract k b();
    
    public abstract void b(int paramInt);
    
    public abstract void b(long paramLong);
  }
}
