package f.g.c.c;

import f.g.c.a.a;
import f.g.c.d.Ab;
import java.util.concurrent.ExecutionException;

@a
public abstract class m<K, V>
  extends l<K, V>
  implements n<K, V>
{
  public m() {}
  
  public Ab<K, V> a(Iterable<? extends K> paramIterable)
    throws ExecutionException
  {
    return q().a(paramIterable);
  }
  
  public V apply(K paramK)
  {
    return q().apply(paramK);
  }
  
  public V b(K paramK)
  {
    return q().b(paramK);
  }
  
  public void c(K paramK)
  {
    q().c(paramK);
  }
  
  public V get(K paramK)
    throws ExecutionException
  {
    return q().get(paramK);
  }
  
  public abstract n<K, V> q();
  
  @a
  public static abstract class a<K, V>
    extends m<K, V>
  {
    public final n<K, V> a;
    
    public a(n<K, V> paramN)
    {
      if (paramN != null)
      {
        a = paramN;
        return;
      }
      throw new NullPointerException();
    }
    
    public final n<K, V> q()
    {
      return a;
    }
  }
}
