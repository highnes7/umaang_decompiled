package f.g.c.d;

import f.g.c.a.b;
import java.util.concurrent.ConcurrentMap;

@b
public abstract class Ka<K, V>
  extends Sa<K, V>
  implements ConcurrentMap<K, V>
{
  public Ka() {}
  
  public V putIfAbsent(K paramK, V paramV)
  {
    return q().putIfAbsent(paramK, paramV);
  }
  
  public abstract ConcurrentMap<K, V> q();
  
  public boolean remove(Object paramObject1, Object paramObject2)
  {
    return q().remove(paramObject1, paramObject2);
  }
  
  public V replace(K paramK, V paramV)
  {
    return q().replace(paramK, paramV);
  }
  
  public boolean replace(K paramK, V paramV1, V paramV2)
  {
    return q().replace(paramK, paramV1, paramV2);
  }
}
