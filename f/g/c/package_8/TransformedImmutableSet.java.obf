package f.g.c.d;

import f.g.c.a.b;
import f.g.c.a.c;
import java.util.Collection;

@b(emulated=true)
public abstract class fh<D, E>
  extends Nb<E>
{
  public final rb<D> f;
  public final int g;
  
  public fh(rb<D> paramRb)
  {
    f = paramRb;
    g = gg.a(this);
  }
  
  public fh(rb<D> paramRb, int paramInt)
  {
    f = paramRb;
    g = paramInt;
  }
  
  public abstract E c(D paramD);
  
  @c("unused")
  public boolean f()
  {
    return true;
  }
  
  public final int hashCode()
  {
    return g;
  }
  
  public boolean isEmpty()
  {
    return false;
  }
  
  public th<E> iterator()
  {
    return new eh(this, f.iterator());
  }
  
  public int size()
  {
    return f.size();
  }
  
  public Object[] toArray()
  {
    return toArray(new Object[size()]);
  }
  
  public <T> T[] toArray(T[] paramArrayOfT)
  {
    return kf.a(this, paramArrayOfT);
  }
}
