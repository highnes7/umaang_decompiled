package f.g.c.d;

import f.g.c.a.a;
import f.g.c.a.b;
import f.g.c.a.c;
import f.g.c.b.ba;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.Comparator;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;
import m.a.h;

@b(emulated=true)
public abstract class Ib<K, V>
  implements ve<K, V>, Serializable
{
  public static final long a = 0L;
  public final transient Ab<K, ? extends rb<V>> b;
  public final transient int c;
  public transient rb<Map.Entry<K, V>> d;
  public transient Mb<K> e;
  public transient rb<V> f;
  
  public Ib(Ab<K, ? extends rb<V>> paramAb, int paramInt)
  {
    b = paramAb;
    c = paramInt;
  }
  
  public static <K, V> Ib<K, V> a(K paramK, V paramV)
  {
    return xb.a(paramK, paramV);
  }
  
  public static <K, V> Ib<K, V> a(K paramK1, V paramV1, K paramK2, V paramV2)
  {
    return xb.a(paramK1, paramV1, paramK2, paramV2);
  }
  
  public static <K, V> Ib<K, V> a(K paramK1, V paramV1, K paramK2, V paramV2, K paramK3, V paramV3)
  {
    return xb.a(paramK1, paramV1, paramK2, paramV2, paramK3, paramV3);
  }
  
  public static <K, V> Ib<K, V> a(K paramK1, V paramV1, K paramK2, V paramV2, K paramK3, V paramV3, K paramK4, V paramV4)
  {
    return xb.a(paramK1, paramV1, paramK2, paramV2, paramK3, paramV3, paramK4, paramV4);
  }
  
  public static <K, V> Ib<K, V> a(K paramK1, V paramV1, K paramK2, V paramV2, K paramK3, V paramV3, K paramK4, V paramV4, K paramK5, V paramV5)
  {
    return xb.a(paramK1, paramV1, paramK2, paramV2, paramK3, paramV3, paramK4, paramV4, paramK5, paramV5);
  }
  
  public static <K, V> Ib<K, V> b(ve<? extends K, ? extends V> paramVe)
  {
    if ((paramVe instanceof Ib))
    {
      Ib localIb = (Ib)paramVe;
      if (!localIb.f()) {
        return localIb;
      }
    }
    return xb.b(paramVe);
  }
  
  public static <K, V> a<K, V> c()
  {
    return new a();
  }
  
  public static <K, V> Ib<K, V> g()
  {
    return ua.i;
  }
  
  private Mb<K> h()
  {
    return new e();
  }
  
  public Ab<K, Collection<V>> a()
  {
    return b;
  }
  
  public boolean a(ve<? extends K, ? extends V> paramVe)
  {
    throw new UnsupportedOperationException();
  }
  
  public boolean a(K paramK, Iterable<? extends V> paramIterable)
  {
    throw new UnsupportedOperationException();
  }
  
  public Mb<K> b()
  {
    Mb localMb = e;
    Object localObject = localMb;
    if (localMb == null)
    {
      localObject = new e();
      e = ((Mb)localObject);
    }
    return localObject;
  }
  
  public rb<V> b(K paramK, Iterable<? extends V> paramIterable)
  {
    throw new UnsupportedOperationException();
  }
  
  public boolean b(@h Object paramObject1, @h Object paramObject2)
  {
    paramObject1 = (Collection)b.get(paramObject1);
    return (paramObject1 != null) && (paramObject1.contains(paramObject2));
  }
  
  public void clear()
  {
    throw new UnsupportedOperationException();
  }
  
  public boolean containsKey(@h Object paramObject)
  {
    return b.containsKey(paramObject);
  }
  
  public boolean containsValue(@h Object paramObject)
  {
    Iterator localIterator = b.values().iterator();
    while (localIterator.hasNext()) {
      if (((rb)localIterator.next()).contains(paramObject)) {
        return true;
      }
    }
    return false;
  }
  
  public rb<V> d(Object paramObject)
  {
    throw new UnsupportedOperationException();
  }
  
  @a
  public abstract Ib<V, K> e();
  
  public rb<Map.Entry<K, V>> entries()
  {
    rb localRb = d;
    Object localObject = localRb;
    if (localRb == null)
    {
      localObject = new c(this);
      d = ((rb)localObject);
    }
    return localObject;
  }
  
  public boolean equals(@h Object paramObject)
  {
    if ((paramObject instanceof ve))
    {
      paramObject = (ve)paramObject;
      return b.equals(paramObject.a());
    }
    return false;
  }
  
  public boolean f()
  {
    return b.e();
  }
  
  public abstract rb<V> get(K paramK);
  
  public int hashCode()
  {
    return b.hashCode();
  }
  
  public boolean isEmpty()
  {
    return c == 0;
  }
  
  public Nb<K> keySet()
  {
    return b.keySet();
  }
  
  public boolean put(K paramK, V paramV)
  {
    throw new UnsupportedOperationException();
  }
  
  public boolean remove(Object paramObject1, Object paramObject2)
  {
    throw new UnsupportedOperationException();
  }
  
  public int size()
  {
    return c;
  }
  
  public String toString()
  {
    return b.toString();
  }
  
  public rb<V> values()
  {
    rb localRb = f;
    Object localObject = localRb;
    if (localRb == null)
    {
      localObject = new f(this);
      f = ((rb)localObject);
    }
    return localObject;
  }
  
  public static class a<K, V>
  {
    public ve<K, V> a = new Ib.b();
    public Comparator<? super K> b;
    public Comparator<? super V> c;
    
    public a() {}
    
    public a<K, V> a(ve<? extends K, ? extends V> paramVe)
    {
      paramVe = paramVe.a().entrySet().iterator();
      while (paramVe.hasNext())
      {
        Map.Entry localEntry = (Map.Entry)paramVe.next();
        a(localEntry.getKey(), (Iterable)localEntry.getValue());
      }
      return this;
    }
    
    public a<K, V> a(K paramK, Iterable<? extends V> paramIterable)
    {
      Object localObject = a;
      if (paramK != null)
      {
        paramK = ((ve)localObject).get(paramK);
        paramIterable = paramIterable.iterator();
        while (paramIterable.hasNext())
        {
          localObject = paramIterable.next();
          ba.a(localObject);
          paramK.add(localObject);
        }
        return this;
      }
      paramK = new NullPointerException();
      for (;;)
      {
        throw paramK;
      }
    }
    
    public a<K, V> a(K paramK, V paramV)
    {
      ve localVe = a;
      if (paramK != null)
      {
        if (paramV != null)
        {
          localVe.put(paramK, paramV);
          return this;
        }
        throw new NullPointerException();
      }
      throw new NullPointerException();
    }
    
    public a<K, V> a(K paramK, V... paramVarArgs)
    {
      return a(paramK, Arrays.asList(paramVarArgs));
    }
    
    @a
    public a<K, V> a(Comparator<? super K> paramComparator)
    {
      if (paramComparator != null)
      {
        b = paramComparator;
        return this;
      }
      throw new NullPointerException();
    }
    
    public a<K, V> a(Map.Entry<? extends K, ? extends V> paramEntry)
    {
      ve localVe = a;
      Object localObject = paramEntry.getKey();
      ba.a(localObject);
      paramEntry = paramEntry.getValue();
      ba.a(paramEntry);
      localVe.put(localObject, paramEntry);
      return this;
    }
    
    public Ib<K, V> a()
    {
      Object localObject1;
      if (c != null)
      {
        localObject1 = a.a().values().iterator();
        while (((Iterator)localObject1).hasNext()) {
          Collections.sort((List)((Iterator)localObject1).next(), c);
        }
      }
      if (b != null)
      {
        localObject1 = new Ib.b();
        Object localObject2 = fd.b(a.a().entrySet());
        Collections.sort((List)localObject2, mf.b(b).a(new Hb(this)));
        localObject2 = ((List)localObject2).iterator();
        while (((Iterator)localObject2).hasNext())
        {
          Map.Entry localEntry = (Map.Entry)((Iterator)localObject2).next();
          ((ve)localObject1).a(localEntry.getKey(), (Iterable)localEntry.getValue());
        }
        a = ((ve)localObject1);
      }
      return Ib.b(a);
    }
    
    @a
    public a<K, V> b(Comparator<? super V> paramComparator)
    {
      if (paramComparator != null)
      {
        c = paramComparator;
        return this;
      }
      throw new NullPointerException();
    }
  }
  
  private static class b<K, V>
    extends r<K, V>
  {
    public static final long i = 0L;
    
    public b()
    {
      super();
    }
    
    public Collection<V> e()
    {
      return new ArrayList();
    }
  }
  
  private static class c<K, V>
    extends rb<Map.Entry<K, V>>
  {
    public static final long c = 0L;
    public final Ib<K, V> d;
    
    public c(Ib<K, V> paramIb)
    {
      d = paramIb;
    }
    
    public boolean c()
    {
      return d.f();
    }
    
    public boolean contains(Object paramObject)
    {
      if ((paramObject instanceof Map.Entry))
      {
        paramObject = (Map.Entry)paramObject;
        return d.b(paramObject.getKey(), paramObject.getValue());
      }
      return false;
    }
    
    public th<Map.Entry<K, V>> iterator()
    {
      return new Jb(this, d.b.entrySet().iterator());
    }
    
    public int size()
    {
      return d.size();
    }
  }
  
  @c("java serialization is not supported")
  public static class d
  {
    public static final ag.a<Ib> a = ag.a(Ib.class, "map");
    public static final ag.a<Ib> b = ag.a(Ib.class, "size");
    
    public d() {}
  }
  
  public class e
    extends Mb<K>
  {
    public e() {}
    
    public int a(@h Object paramObject)
    {
      paramObject = (Collection)b.get(paramObject);
      if (paramObject == null) {
        return 0;
      }
      return paramObject.size();
    }
    
    public boolean c()
    {
      return true;
    }
    
    public boolean contains(@h Object paramObject)
    {
      return containsKey(paramObject);
    }
    
    public Nb<Ye.a<K>> f()
    {
      return new a(null);
    }
    
    public int size()
    {
      return Ib.this.size();
    }
    
    public Set<K> u()
    {
      return keySet();
    }
    
    private class a
      extends Mb.b
    {
      public a()
      {
        super();
      }
      
      public vb<Ye.a<K>> b()
      {
        return new Kb(this, b.entrySet().a());
      }
      
      public th<Ye.a<K>> iterator()
      {
        return a().iterator();
      }
      
      public int size()
      {
        return keySet().size();
      }
    }
  }
  
  private static class f<V>
    extends rb<V>
  {
    public static final long c = 0L;
    public final Ib<?, V> d;
    
    public f(Ib<?, V> paramIb)
    {
      d = paramIb;
    }
    
    public boolean c()
    {
      return true;
    }
    
    public th<V> iterator()
    {
      return fe.a(d.entries().iterator());
    }
    
    public int size()
    {
      return d.size();
    }
  }
}
