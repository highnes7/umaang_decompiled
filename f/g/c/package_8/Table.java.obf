package f.g.c.d;

import f.g.c.a.b;
import java.util.Collection;
import java.util.Map;
import java.util.Set;
import m.a.h;

@b
public abstract interface Yg<R, C, V>
{
  public abstract V a(R paramR, C paramC, V paramV);
  
  public abstract void a(Yg<? extends R, ? extends C, ? extends V> paramYg);
  
  public abstract V c(@h Object paramObject1, @h Object paramObject2);
  
  public abstract void clear();
  
  public abstract boolean containsValue(@h Object paramObject);
  
  public abstract boolean d(@h Object paramObject1, @h Object paramObject2);
  
  public abstract Map<C, Map<R, V>> e();
  
  public abstract boolean e(@h Object paramObject);
  
  public abstract boolean equals(@h Object paramObject);
  
  public abstract Map<R, V> f(C paramC);
  
  public abstract Set<R> g();
  
  public abstract boolean g(@h Object paramObject);
  
  public abstract Map<C, V> h(R paramR);
  
  public abstract Set<a<R, C, V>> h();
  
  public abstract int hashCode();
  
  public abstract Set<C> i();
  
  public abstract boolean isEmpty();
  
  public abstract Map<R, Map<C, V>> j();
  
  public abstract V remove(@h Object paramObject1, @h Object paramObject2);
  
  public abstract int size();
  
  public abstract Collection<V> values();
  
  public static abstract interface a<R, C, V>
  {
    public abstract R a();
    
    public abstract C b();
    
    public abstract boolean equals(@h Object paramObject);
    
    public abstract V getValue();
    
    public abstract int hashCode();
  }
}
