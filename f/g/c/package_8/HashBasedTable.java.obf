package f.g.c.d;

import f.g.c.a.b;
import f.g.c.b.ba;
import f.g.c.b.ya;
import java.io.Serializable;
import java.util.HashMap;
import java.util.Map;
import m.a.h;

@b(serializable=true)
public class hb<R, C, V>
  extends Ig<R, C, V>
{
  public static final long j = 0L;
  
  public hb(Map<R, Map<C, V>> paramMap, a<C, V> paramA)
  {
    super(paramMap, paramA);
  }
  
  public static <R, C, V> hb<R, C, V> a(int paramInt1, int paramInt2)
  {
    boolean bool;
    if (paramInt2 >= 0) {
      bool = true;
    } else {
      bool = false;
    }
    ba.a(bool);
    return new hb(fe.b(paramInt1), new a(paramInt2));
  }
  
  public static <R, C, V> hb<R, C, V> b()
  {
    return new hb(new HashMap(), new a(0));
  }
  
  public static <R, C, V> hb<R, C, V> b(Yg<? extends R, ? extends C, ? extends V> paramYg)
  {
    hb localHb = b();
    localHb.a(paramYg);
    return localHb;
  }
  
  public V c(@h Object paramObject1, @h Object paramObject2)
  {
    return super.c(paramObject1, paramObject2);
  }
  
  public void clear()
  {
    b.clear();
  }
  
  public boolean containsValue(@h Object paramObject)
  {
    return super.containsValue(paramObject);
  }
  
  public boolean d(@h Object paramObject1, @h Object paramObject2)
  {
    return super.d(paramObject1, paramObject2);
  }
  
  public boolean e(@h Object paramObject)
  {
    return super.e(paramObject);
  }
  
  public boolean equals(@h Object paramObject)
  {
    return super.equals(paramObject);
  }
  
  public Map f(Object paramObject)
  {
    return new Ig.c(this, paramObject);
  }
  
  public boolean g(@h Object paramObject)
  {
    return super.g(paramObject);
  }
  
  public Map h(Object paramObject)
  {
    return new Ig.g(this, paramObject);
  }
  
  public V remove(@h Object paramObject1, @h Object paramObject2)
  {
    return super.remove(paramObject1, paramObject2);
  }
  
  private static class a<C, V>
    implements ya<Map<C, V>>, Serializable
  {
    public static final long a = 0L;
    public final int b;
    
    public a(int paramInt)
    {
      b = paramInt;
    }
    
    public Map<C, V> get()
    {
      return fe.b(b);
    }
  }
}
