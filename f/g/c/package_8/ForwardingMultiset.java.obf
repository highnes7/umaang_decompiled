package f.g.c.d;

import f.g.c.a.a;
import f.g.c.a.b;
import f.g.c.b.U;
import java.util.Collection;
import java.util.Iterator;
import java.util.Set;
import m.a.h;

@b
public abstract class Va<E>
  extends Ja<E>
  implements Ye<E>
{
  public Va() {}
  
  public int a(Object paramObject)
  {
    return q().a(paramObject);
  }
  
  public int a(E paramE, int paramInt)
  {
    return q().a(paramE, paramInt);
  }
  
  public boolean a(E paramE, int paramInt1, int paramInt2)
  {
    return q().a(paramE, paramInt1, paramInt2);
  }
  
  @a
  public boolean a(Collection<? extends E> paramCollection)
  {
    return bf.a(this, paramCollection);
  }
  
  public int b(Object paramObject, int paramInt)
  {
    return q().b(paramObject, paramInt);
  }
  
  @a
  public boolean b(E paramE, int paramInt1, int paramInt2)
  {
    return bf.a(this, paramE, paramInt1, paramInt2);
  }
  
  public int c(E paramE, int paramInt)
  {
    return q().c(paramE, paramInt);
  }
  
  @a
  public boolean c(Collection<?> paramCollection)
  {
    return bf.b(this, paramCollection);
  }
  
  @a
  public int d(E paramE, int paramInt)
  {
    return bf.a(this, paramE, paramInt);
  }
  
  @a
  public boolean d(Collection<?> paramCollection)
  {
    return bf.c(this, paramCollection);
  }
  
  public Set<Ye.a<E>> entrySet()
  {
    return q().entrySet();
  }
  
  public boolean equals(@h Object paramObject)
  {
    return (paramObject == this) || (q().equals(paramObject));
  }
  
  public int hashCode()
  {
    return q().hashCode();
  }
  
  @a
  public boolean k(@h Object paramObject)
  {
    return a(paramObject) > 0;
  }
  
  @a
  public boolean l(Object paramObject)
  {
    return b(paramObject, 1) > 0;
  }
  
  @a
  public boolean m(E paramE)
  {
    c(paramE, 1);
    return true;
  }
  
  @a
  public int n(@h Object paramObject)
  {
    Iterator localIterator = entrySet().iterator();
    while (localIterator.hasNext())
    {
      Ye.a localA = (Ye.a)localIterator.next();
      if (U.a(localA.a(), paramObject)) {
        return localA.getCount();
      }
    }
    return 0;
  }
  
  @a
  public boolean o(@h Object paramObject)
  {
    return bf.a(this, paramObject);
  }
  
  public abstract Ye<E> q();
  
  @a
  public void r()
  {
    Iterator localIterator = entrySet().iterator();
    while (localIterator.hasNext())
    {
      localIterator.next();
      localIterator.remove();
    }
  }
  
  public Set<E> u()
  {
    return q().u();
  }
  
  @a
  public String w()
  {
    return entrySet().toString();
  }
  
  @a
  public int x()
  {
    return entrySet().hashCode();
  }
  
  @a
  public Iterator<E> y()
  {
    return bf.b(this);
  }
  
  @a
  public int z()
  {
    return bf.c(this);
  }
  
  @a
  protected class a
    extends bf.b<E>
  {
    public a() {}
    
    public Ye<E> c()
    {
      return Va.this;
    }
  }
}
