package f.g.c.d;

import f.g.c.a.b;
import f.g.c.b.J;
import f.g.c.b.Q;
import f.g.c.b.ba;
import f.g.c.b.ca;
import f.g.c.b.ea;
import f.g.c.h.i;
import java.util.AbstractCollection;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.Comparator;
import java.util.Iterator;
import java.util.List;
import m.a.h;

@b
public final class V
{
  public static final Q a = new Q(", ").b("null");
  
  public V() {}
  
  public static StringBuilder a(int paramInt)
  {
    boolean bool;
    if (paramInt >= 0) {
      bool = true;
    } else {
      bool = false;
    }
    ba.a(bool, "size must be non-negative");
    return new StringBuilder((int)Math.min(paramInt * 8L, 1073741824L));
  }
  
  public static <T> Collection<T> a(Iterable<T> paramIterable)
  {
    return (Collection)paramIterable;
  }
  
  @f.g.c.a.a
  public static <E> Collection<List<E>> a(Iterable<E> paramIterable, Comparator<? super E> paramComparator)
  {
    return new b(paramIterable, paramComparator);
  }
  
  @f.g.c.a.a
  public static <E> Collection<List<E>> a(Collection<E> paramCollection)
  {
    return new d(vb.b(paramCollection));
  }
  
  public static <F, T> Collection<T> a(Collection<F> paramCollection, J<? super F, T> paramJ)
  {
    return new f(paramCollection, paramJ);
  }
  
  public static <E> Collection<E> a(Collection<E> paramCollection, ca<? super E> paramCa)
  {
    if ((paramCollection instanceof a)) {
      return ((a)paramCollection).a(paramCa);
    }
    if (paramCollection != null)
    {
      if (paramCa != null) {
        return new a(paramCollection, paramCa);
      }
      throw new NullPointerException();
    }
    throw new NullPointerException();
  }
  
  public static boolean a(Collection<?> paramCollection, Object paramObject)
  {
    try
    {
      boolean bool = paramCollection.contains(paramObject);
      return bool;
    }
    catch (ClassCastException paramCollection)
    {
      for (;;) {}
    }
    return false;
  }
  
  public static boolean a(Collection<?> paramCollection1, Collection<?> paramCollection2)
  {
    if (paramCollection1 != null)
    {
      paramCollection2 = paramCollection2.iterator();
      while (paramCollection2.hasNext()) {
        if (!paramCollection1.contains(paramCollection2.next())) {
          return false;
        }
      }
      return true;
    }
    paramCollection1 = new NullPointerException();
    for (;;)
    {
      throw paramCollection1;
    }
  }
  
  public static String b(Collection<?> paramCollection)
  {
    StringBuilder localStringBuilder = a(paramCollection.size());
    localStringBuilder.append('[');
    a.a(localStringBuilder, new pc(paramCollection, new S(paramCollection)));
    localStringBuilder.append(']');
    return localStringBuilder.toString();
  }
  
  @f.g.c.a.a
  public static <E extends Comparable<? super E>> Collection<List<E>> b(Iterable<E> paramIterable)
  {
    return new b(paramIterable, mf.d());
  }
  
  public static boolean b(long paramLong)
  {
    return (paramLong >= 0L) && (paramLong <= 2147483647L);
  }
  
  public static boolean b(List<?> paramList1, List<?> paramList2)
  {
    if (paramList1.size() != paramList2.size()) {
      return false;
    }
    return kb.a(paramList1).equals(kb.a(paramList2));
  }
  
  public static class a<E>
    implements Collection<E>
  {
    public final Collection<E> a;
    public final ca<? super E> b;
    
    public a(Collection<E> paramCollection, ca<? super E> paramCa)
    {
      a = paramCollection;
      b = paramCa;
    }
    
    public a<E> a(ca<? super E> paramCa)
    {
      return new a(a, ea.a(b, paramCa));
    }
    
    public boolean add(E paramE)
    {
      ba.a(b.apply(paramE));
      return a.add(paramE);
    }
    
    public boolean addAll(Collection<? extends E> paramCollection)
    {
      Iterator localIterator = paramCollection.iterator();
      while (localIterator.hasNext())
      {
        Object localObject = localIterator.next();
        ba.a(b.apply(localObject));
      }
      return a.addAll(paramCollection);
    }
    
    public void clear()
    {
      rc.f(a, b);
    }
    
    public boolean contains(Object paramObject)
    {
      boolean bool2 = false;
      boolean bool1 = bool2;
      try
      {
        if (b.apply(paramObject))
        {
          boolean bool3 = a.contains(paramObject);
          bool1 = bool2;
          if (bool3) {
            bool1 = true;
          }
        }
        return bool1;
      }
      catch (NullPointerException|ClassCastException paramObject) {}
      return false;
    }
    
    public boolean containsAll(Collection<?> paramCollection)
    {
      paramCollection = paramCollection.iterator();
      while (paramCollection.hasNext()) {
        if (!contains(paramCollection.next())) {
          return false;
        }
      }
      return true;
    }
    
    public boolean isEmpty()
    {
      return Jc.b(a.iterator(), b) ^ true;
    }
    
    public Iterator<E> iterator()
    {
      return Jc.c(a.iterator(), b);
    }
    
    public boolean remove(Object paramObject)
    {
      boolean bool2 = false;
      boolean bool1 = bool2;
      try
      {
        if (b.apply(paramObject))
        {
          boolean bool3 = a.remove(paramObject);
          bool1 = bool2;
          if (bool3) {
            bool1 = true;
          }
        }
        return bool1;
      }
      catch (NullPointerException|ClassCastException paramObject) {}
      return false;
    }
    
    public boolean removeAll(Collection<?> paramCollection)
    {
      if (paramCollection != null)
      {
        paramCollection = new T(this, paramCollection);
        return rc.f(a, paramCollection);
      }
      throw new NullPointerException();
    }
    
    public boolean retainAll(Collection<?> paramCollection)
    {
      if (paramCollection != null)
      {
        paramCollection = new U(this, paramCollection);
        return rc.f(a, paramCollection);
      }
      throw new NullPointerException();
    }
    
    public int size()
    {
      return Jc.i(iterator());
    }
    
    public Object[] toArray()
    {
      return fd.a(iterator()).toArray();
    }
    
    public <T> T[] toArray(T[] paramArrayOfT)
    {
      return fd.a(iterator()).toArray(paramArrayOfT);
    }
    
    public String toString()
    {
      return Jc.j(iterator());
    }
  }
  
  private static final class b<E>
    extends AbstractCollection<List<E>>
  {
    public final vb<E> a;
    public final Comparator<? super E> b;
    public final int c;
    
    public b(Iterable<E> paramIterable, Comparator<? super E> paramComparator)
    {
      a = mf.b(paramComparator).b(paramIterable);
      b = paramComparator;
      c = a(a, paramComparator);
    }
    
    public static <E> int a(List<E> paramList, Comparator<? super E> paramComparator)
    {
      long l1 = 1L;
      int j = 1;
      int i = 1;
      while (j < paramList.size())
      {
        if (paramComparator.compare(paramList.get(j - 1), paramList.get(j)) < 0)
        {
          long l2 = i.a(j, i) * l1;
          i = 0;
          l1 = l2;
          if (!V.b(l2)) {
            return Integer.MAX_VALUE;
          }
        }
        j += 1;
        i += 1;
      }
      l1 = i.a(j, i) * l1;
      if (!V.b(l1)) {
        return Integer.MAX_VALUE;
      }
      return (int)l1;
    }
    
    public boolean contains(@h Object paramObject)
    {
      if ((paramObject instanceof List))
      {
        paramObject = (List)paramObject;
        return V.b(a, paramObject);
      }
      return false;
    }
    
    public boolean isEmpty()
    {
      return false;
    }
    
    public Iterator<List<E>> iterator()
    {
      return new V.c(a, b);
    }
    
    public int size()
    {
      return c;
    }
    
    public String toString()
    {
      return f.a.a.a.a.a(f.a.a.a.a.b("orderedPermutationCollection("), a, ")");
    }
  }
  
  private static final class c<E>
    extends g<List<E>>
  {
    public List<E> c;
    public final Comparator<? super E> d;
    
    public c(List<E> paramList, Comparator<? super E> paramComparator)
    {
      c = fd.b(paramList);
      d = paramComparator;
    }
    
    public int a(int paramInt)
    {
      Object localObject = c.get(paramInt);
      int i = c.size() - 1;
      while (i > paramInt)
      {
        if (d.compare(localObject, c.get(i)) < 0) {
          return i;
        }
        i -= 1;
      }
      localObject = new AssertionError("this statement should be unreachable");
      for (;;)
      {
        throw ((Throwable)localObject);
      }
    }
    
    public List<E> a()
    {
      Object localObject = c;
      if (localObject == null) {
        return (List)b();
      }
      localObject = vb.b((Collection)localObject);
      c();
      return localObject;
    }
    
    public void c()
    {
      int i = d();
      if (i == -1)
      {
        c = null;
        return;
      }
      int j = a(i);
      Collections.swap(c, i, j);
      j = c.size();
      Collections.reverse(c.subList(i + 1, j));
    }
    
    public int d()
    {
      int i = c.size() - 2;
      while (i >= 0)
      {
        if (d.compare(c.get(i), c.get(i + 1)) < 0) {
          return i;
        }
        i -= 1;
      }
      return -1;
    }
  }
  
  private static final class d<E>
    extends AbstractCollection<List<E>>
  {
    public final vb<E> a;
    
    public d(vb<E> paramVb)
    {
      a = paramVb;
    }
    
    public boolean contains(@h Object paramObject)
    {
      if ((paramObject instanceof List))
      {
        paramObject = (List)paramObject;
        return V.b(a, paramObject);
      }
      return false;
    }
    
    public boolean isEmpty()
    {
      return false;
    }
    
    public Iterator<List<E>> iterator()
    {
      return new V.e(a);
    }
    
    public int size()
    {
      return f.g.c.h.g.a(a.size());
    }
    
    public String toString()
    {
      return f.a.a.a.a.a(f.a.a.a.a.b("permutations("), a, ")");
    }
  }
  
  private static class e<E>
    extends g<List<E>>
  {
    public final List<E> c;
    public final int[] d;
    public final int[] e;
    public int f;
    
    public e(List<E> paramList)
    {
      c = new ArrayList(paramList);
      int j = paramList.size();
      d = new int[j];
      e = new int[j];
      int i = 0;
      while (i < j)
      {
        d[i] = 0;
        e[i] = 1;
        i += 1;
      }
      f = Integer.MAX_VALUE;
    }
    
    public List<E> a()
    {
      if (f <= 0) {
        return (List)b();
      }
      vb localVb = vb.b(c);
      c();
      return localVb;
    }
    
    public void c()
    {
      f = (c.size() - 1);
      if (f == -1) {
        return;
      }
      int i = 0;
      int[] arrayOfInt;
      int j;
      int k;
      for (;;)
      {
        arrayOfInt = d;
        j = f;
        k = arrayOfInt[j] + e[j];
        if (k < 0)
        {
          d();
        }
        else
        {
          if (k != j + 1) {
            break;
          }
          if (j == 0) {
            return;
          }
          i += 1;
          d();
        }
      }
      Collections.swap(c, j - arrayOfInt[j] + i, j - k + i);
      d[f] = k;
    }
    
    public void d()
    {
      int[] arrayOfInt = e;
      int i = f;
      arrayOfInt[i] = (-arrayOfInt[i]);
      f = (i - 1);
    }
  }
  
  public static class f<F, T>
    extends AbstractCollection<T>
  {
    public final Collection<F> a;
    public final J<? super F, ? extends T> b;
    
    public f(Collection<F> paramCollection, J<? super F, ? extends T> paramJ)
    {
      if (paramCollection != null)
      {
        a = paramCollection;
        if (paramJ != null)
        {
          b = paramJ;
          return;
        }
        throw new NullPointerException();
      }
      throw new NullPointerException();
    }
    
    public void clear()
    {
      a.clear();
    }
    
    public boolean isEmpty()
    {
      return a.isEmpty();
    }
    
    public Iterator<T> iterator()
    {
      return Jc.a(a.iterator(), b);
    }
    
    public int size()
    {
      return a.size();
    }
  }
}
