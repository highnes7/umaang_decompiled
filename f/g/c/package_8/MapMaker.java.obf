package f.g.c.d;

import f.g.c.a.b;
import f.g.c.a.c;
import f.g.c.b.C;
import f.g.c.b.Ca;
import f.g.c.b.J;
import f.g.c.b.U;
import f.g.c.b.U.a;
import f.g.c.b.ba;
import f.g.c.b.d;
import java.io.Serializable;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.Map.Entry;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;
import java.util.concurrent.TimeUnit;
import m.a.h;

@b(emulated=true)
public final class ud
  extends fb<Object, Object>
{
  public static final int b = 16;
  public static final int c = 4;
  public static final int d = 0;
  public static final int e = -1;
  public boolean f;
  public int g = -1;
  public int h = -1;
  public int i = -1;
  public Cd.u j;
  public Cd.u k;
  public long l = -1L;
  public long m = -1L;
  public c n;
  public C<Object> o;
  public Ca p;
  
  public ud() {}
  
  private void c(long paramLong, TimeUnit paramTimeUnit)
  {
    boolean bool;
    if (l == -1L) {
      bool = true;
    } else {
      bool = false;
    }
    ba.b(bool, "expireAfterWrite was already set to %s ns", new Object[] { Long.valueOf(l) });
    if (m == -1L) {
      bool = true;
    } else {
      bool = false;
    }
    ba.b(bool, "expireAfterAccess was already set to %s ns", new Object[] { Long.valueOf(m) });
    if (paramLong >= 0L) {
      bool = true;
    } else {
      bool = false;
    }
    ba.a(bool, "duration cannot be negative: %s %s", new Object[] { Long.valueOf(paramLong), paramTimeUnit });
  }
  
  @Deprecated
  @c("To be supported")
  public <K, V> fb<K, V> a(d<K, V> paramD)
  {
    boolean bool;
    if (a == null) {
      bool = true;
    } else {
      bool = false;
    }
    ba.b(bool);
    if (paramD != null)
    {
      a = paramD;
      f = true;
      return this;
    }
    throw new NullPointerException();
  }
  
  public ud a(int paramInt)
  {
    int i1 = h;
    boolean bool2 = true;
    boolean bool1;
    if (i1 == -1) {
      bool1 = true;
    } else {
      bool1 = false;
    }
    ba.b(bool1, "concurrency level was already set to %s", new Object[] { Integer.valueOf(h) });
    if (paramInt > 0) {
      bool1 = bool2;
    } else {
      bool1 = false;
    }
    ba.a(bool1);
    h = paramInt;
    return this;
  }
  
  @Deprecated
  @c("To be supported")
  public ud a(long paramLong, TimeUnit paramTimeUnit)
  {
    c(paramLong, paramTimeUnit);
    m = paramTimeUnit.toNanos(paramLong);
    if ((paramLong == 0L) && (n == null)) {
      n = c.d;
    }
    f = true;
    return this;
  }
  
  @c("To be supported")
  public ud a(C<Object> paramC)
  {
    boolean bool;
    if (o == null) {
      bool = true;
    } else {
      bool = false;
    }
    ba.b(bool, "key equivalence was already set to %s", new Object[] { o });
    if (paramC != null)
    {
      o = paramC;
      f = true;
      return this;
    }
    throw new NullPointerException();
  }
  
  public ud a(Cd.u paramU)
  {
    boolean bool;
    if (j == null) {
      bool = true;
    } else {
      bool = false;
    }
    ba.b(bool, "Key strength was already set to %s", new Object[] { j });
    if (paramU != null)
    {
      j = paramU;
      if (paramU != Cd.u.a) {
        f = true;
      }
      return this;
    }
    throw new NullPointerException();
  }
  
  @Deprecated
  public <K, V> ConcurrentMap<K, V> a(J<? super K, ? extends V> paramJ)
  {
    if (n == null) {
      return new ba.c(this, paramJ);
    }
    return new a(this, paramJ);
  }
  
  @c("MapMakerInternalMap")
  public <K, V> Cd<K, V> b()
  {
    return new Cd(this);
  }
  
  public ud b(int paramInt)
  {
    int i1 = g;
    boolean bool2 = true;
    boolean bool1;
    if (i1 == -1) {
      bool1 = true;
    } else {
      bool1 = false;
    }
    ba.b(bool1, "initial capacity was already set to %s", new Object[] { Integer.valueOf(g) });
    if (paramInt >= 0) {
      bool1 = bool2;
    } else {
      bool1 = false;
    }
    ba.a(bool1);
    g = paramInt;
    return this;
  }
  
  @Deprecated
  public ud b(long paramLong, TimeUnit paramTimeUnit)
  {
    c(paramLong, paramTimeUnit);
    l = paramTimeUnit.toNanos(paramLong);
    if ((paramLong == 0L) && (n == null)) {
      n = c.d;
    }
    f = true;
    return this;
  }
  
  public ud b(Cd.u paramU)
  {
    boolean bool;
    if (k == null) {
      bool = true;
    } else {
      bool = false;
    }
    ba.b(bool, "Value strength was already set to %s", new Object[] { k });
    if (paramU != null)
    {
      k = paramU;
      if (paramU != Cd.u.a) {
        f = true;
      }
      return this;
    }
    throw new NullPointerException();
  }
  
  @Deprecated
  public ud c(int paramInt)
  {
    int i1 = i;
    boolean bool2 = false;
    if (i1 == -1) {
      bool1 = true;
    } else {
      bool1 = false;
    }
    ba.b(bool1, "maximum size was already set to %s", new Object[] { Integer.valueOf(i) });
    boolean bool1 = bool2;
    if (paramInt >= 0) {
      bool1 = true;
    }
    ba.a(bool1, "maximum size must not be negative");
    i = paramInt;
    f = true;
    if (i == 0) {
      n = c.e;
    }
    return this;
  }
  
  public <K, V> ConcurrentMap<K, V> c()
  {
    if (!f) {
      return new ConcurrentHashMap(k(), 0.75F, h());
    }
    if (n == null) {
      return new Cd(this);
    }
    return new b(this);
  }
  
  @Deprecated
  @c("java.lang.ref.SoftReference")
  public ud d()
  {
    return a(Cd.u.b);
  }
  
  @c("java.lang.ref.SoftReference")
  public ud e()
  {
    return b(Cd.u.b);
  }
  
  @c("java.lang.ref.WeakReference")
  public ud f()
  {
    return a(Cd.u.c);
  }
  
  @c("java.lang.ref.WeakReference")
  public ud g()
  {
    return b(Cd.u.c);
  }
  
  public int h()
  {
    int i2 = h;
    int i1 = i2;
    if (i2 == -1) {
      i1 = 4;
    }
    return i1;
  }
  
  public long i()
  {
    long l2 = m;
    long l1 = l2;
    if (l2 == -1L) {
      l1 = 0L;
    }
    return l1;
  }
  
  public long j()
  {
    long l2 = l;
    long l1 = l2;
    if (l2 == -1L) {
      l1 = 0L;
    }
    return l1;
  }
  
  public int k()
  {
    int i2 = g;
    int i1 = i2;
    if (i2 == -1) {
      i1 = 16;
    }
    return i1;
  }
  
  public C<Object> l()
  {
    return (C)U.b(o, m().a());
  }
  
  public Cd.u m()
  {
    return (Cd.u)U.b(j, Cd.u.a);
  }
  
  public Ca n()
  {
    return (Ca)U.b(p, Ca.a);
  }
  
  public Cd.u o()
  {
    return (Cd.u)U.b(k, Cd.u.a);
  }
  
  public String toString()
  {
    U.a localA = U.a(this);
    int i1 = g;
    if (i1 != -1) {
      localA.a("initialCapacity", i1);
    }
    i1 = h;
    if (i1 != -1) {
      localA.a("concurrencyLevel", i1);
    }
    i1 = i;
    if (i1 != -1) {
      localA.a("maximumSize", i1);
    }
    if (l != -1L)
    {
      localObject = new StringBuilder();
      ((StringBuilder)localObject).append(l);
      ((StringBuilder)localObject).append("ns");
      localA.a("expireAfterWrite", ((StringBuilder)localObject).toString());
    }
    if (m != -1L)
    {
      localObject = new StringBuilder();
      ((StringBuilder)localObject).append(m);
      ((StringBuilder)localObject).append("ns");
      localA.a("expireAfterAccess", ((StringBuilder)localObject).toString());
    }
    Object localObject = j;
    if (localObject != null) {
      localA.a("keyStrength", d.a(((Enum)localObject).toString()));
    }
    localObject = k;
    if (localObject != null) {
      localA.a("valueStrength", d.a(((Enum)localObject).toString()));
    }
    if (o != null) {
      localA.a("keyEquivalence");
    }
    if (a != null) {
      localA.a("removalListener");
    }
    return localA.toString();
  }
  
  public static final class a<K, V>
    extends ud.b<K, V>
  {
    public static final long d = 0L;
    public final J<? super K, ? extends V> e;
    
    public a(ud paramUd, J<? super K, ? extends V> paramJ)
    {
      super();
      if (paramJ != null)
      {
        e = paramJ;
        return;
      }
      throw new NullPointerException();
    }
    
    private V a(K paramK)
    {
      if (paramK != null) {
        try
        {
          paramK = e.apply(paramK);
          return paramK;
        }
        catch (Throwable paramK)
        {
          throw new aa(paramK);
        }
        catch (aa paramK)
        {
          throw paramK;
        }
      }
      throw new NullPointerException();
    }
    
    public V get(Object paramObject)
    {
      Object localObject = a(paramObject);
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append(e);
      localStringBuilder.append(" returned null for key ");
      localStringBuilder.append(paramObject);
      localStringBuilder.append(".");
      ba.a(localObject, localStringBuilder.toString());
      b(paramObject, localObject);
      return localObject;
    }
  }
  
  public static class b<K, V>
    extends AbstractMap<K, V>
    implements ConcurrentMap<K, V>, Serializable
  {
    public static final long a = 0L;
    public final ud.d<K, V> b;
    public final ud.c c;
    
    public b(ud paramUd)
    {
      b = paramUd.a();
      c = n;
    }
    
    public void b(K paramK, V paramV)
    {
      paramK = new ud.e(paramK, paramV, c);
      b.a(paramK);
    }
    
    public boolean containsKey(@h Object paramObject)
    {
      return false;
    }
    
    public boolean containsValue(@h Object paramObject)
    {
      return false;
    }
    
    public Set<Map.Entry<K, V>> entrySet()
    {
      return Collections.emptySet();
    }
    
    public V get(@h Object paramObject)
    {
      return null;
    }
    
    public V put(K paramK, V paramV)
    {
      if (paramK != null)
      {
        if (paramV != null)
        {
          b(paramK, paramV);
          return null;
        }
        throw new NullPointerException();
      }
      throw new NullPointerException();
    }
    
    public V putIfAbsent(K paramK, V paramV)
    {
      return put(paramK, paramV);
    }
    
    public V remove(@h Object paramObject)
    {
      return null;
    }
    
    public boolean remove(@h Object paramObject1, @h Object paramObject2)
    {
      return false;
    }
    
    public V replace(K paramK, V paramV)
    {
      if (paramK != null)
      {
        if (paramV != null) {
          return null;
        }
        throw new NullPointerException();
      }
      throw new NullPointerException();
    }
    
    public boolean replace(K paramK, @h V paramV1, V paramV2)
    {
      if (paramK != null)
      {
        if (paramV2 != null) {
          return false;
        }
        throw new NullPointerException();
      }
      throw new NullPointerException();
    }
  }
  
  public static abstract enum c
  {
    public c() {}
    
    public abstract boolean a();
  }
  
  public static abstract interface d<K, V>
  {
    public abstract void a(ud.e<K, V> paramE);
  }
  
  public static final class e<K, V>
    extends sb<K, V>
  {
    public static final long d = 0L;
    public final ud.c e;
    
    public e(@h K paramK, @h V paramV, ud.c paramC)
    {
      super(paramV);
      e = paramC;
    }
    
    public ud.c c()
    {
      return e;
    }
    
    public boolean d()
    {
      return e.a();
    }
  }
}
