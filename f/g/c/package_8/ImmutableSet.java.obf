package f.g.c.d;

import f.g.c.a.b;
import f.g.c.a.d;
import f.g.c.b.ba;
import java.io.Serializable;
import java.util.Arrays;
import java.util.Collection;
import java.util.Iterator;
import java.util.Set;
import m.a.h;

@b(emulated=true, serializable=true)
public abstract class Nb<E>
  extends rb<E>
  implements Set<E>
{
  public static final int c = 1073741824;
  public static final double d = 0.7D;
  public static final int e = (int)Math.floor(7.516192768E8D);
  
  public Nb() {}
  
  @d
  public static int a(int paramInt)
  {
    int i = e;
    boolean bool = true;
    if (paramInt < i)
    {
      i = Integer.highestOneBit(paramInt - 1) << 1;
      for (;;)
      {
        double d1 = i;
        Double.isNaN(d1);
        if (d1 * 0.7D >= paramInt) {
          break;
        }
        i <<= 1;
      }
      return i;
    }
    if (paramInt >= 1073741824) {
      bool = false;
    }
    ba.a(bool, "collection too large");
    return 1073741824;
  }
  
  public static <E> Nb<E> a(Iterable<? extends E> paramIterable)
  {
    if ((paramIterable instanceof Collection)) {
      return b(V.a(paramIterable));
    }
    return a(paramIterable.iterator());
  }
  
  public static <E> Nb<E> a(E paramE1, E paramE2)
  {
    return b(2, new Object[] { paramE1, paramE2 });
  }
  
  public static <E> Nb<E> a(E paramE1, E paramE2, E paramE3)
  {
    return b(3, new Object[] { paramE1, paramE2, paramE3 });
  }
  
  public static <E> Nb<E> a(E paramE1, E paramE2, E paramE3, E paramE4)
  {
    return b(4, new Object[] { paramE1, paramE2, paramE3, paramE4 });
  }
  
  public static <E> Nb<E> a(E paramE1, E paramE2, E paramE3, E paramE4, E paramE5)
  {
    return b(5, new Object[] { paramE1, paramE2, paramE3, paramE4, paramE5 });
  }
  
  public static <E> Nb<E> a(E paramE1, E paramE2, E paramE3, E paramE4, E paramE5, E paramE6, E... paramVarArgs)
  {
    Object[] arrayOfObject = new Object[paramVarArgs.length + 6];
    arrayOfObject[0] = paramE1;
    arrayOfObject[1] = paramE2;
    arrayOfObject[2] = paramE3;
    arrayOfObject[3] = paramE4;
    arrayOfObject[4] = paramE5;
    arrayOfObject[5] = paramE6;
    System.arraycopy(paramVarArgs, 0, arrayOfObject, 6, paramVarArgs.length);
    return b(arrayOfObject.length, arrayOfObject);
  }
  
  public static <E> Nb<E> a(Collection<? extends E> paramCollection)
  {
    paramCollection = paramCollection.toArray();
    int i = paramCollection.length;
    if (i != 0)
    {
      if (i != 1) {
        return b(paramCollection.length, paramCollection);
      }
      return new lg(paramCollection[0]);
    }
    return xa.f;
  }
  
  public static <E> Nb<E> a(Iterator<? extends E> paramIterator)
  {
    if (!paramIterator.hasNext()) {
      return xa.f;
    }
    Object localObject = paramIterator.next();
    if (!paramIterator.hasNext()) {
      return new lg(localObject);
    }
    return new b(4).a(localObject).a(paramIterator).a();
  }
  
  public static <E> Nb<E> a(E[] paramArrayOfE)
  {
    int i = paramArrayOfE.length;
    if (i != 0)
    {
      if (i != 1) {
        return b(paramArrayOfE.length, (Object[])paramArrayOfE.clone());
      }
      return new lg(paramArrayOfE[0]);
    }
    return xa.f;
  }
  
  public static <E> Nb<E> b(int paramInt, Object... paramVarArgs)
  {
    if (paramInt != 0)
    {
      if (paramInt != 1)
      {
        int n = a(paramInt);
        Object[] arrayOfObject = new Object[n];
        int i1 = n - 1;
        int i = 0;
        int j = 0;
        int k = 0;
        if (i < paramInt)
        {
          localObject1 = paramVarArgs[i];
          kf.a(localObject1, i);
          int i2 = localObject1.hashCode();
          int m = lb.a(i2);
          for (;;)
          {
            int i3 = m & i1;
            Object localObject2 = arrayOfObject[i3];
            if (localObject2 == null)
            {
              paramVarArgs[j] = localObject1;
              arrayOfObject[i3] = localObject1;
              k += i2;
              j += 1;
            }
            else
            {
              if (!localObject2.equals(localObject1)) {
                break label128;
              }
            }
            i += 1;
            break;
            label128:
            m += 1;
          }
        }
        Arrays.fill(paramVarArgs, j, paramInt, null);
        if (j == 1) {
          return new lg(paramVarArgs[0], k);
        }
        if (n != a(j)) {
          return b(j, paramVarArgs);
        }
        Object localObject1 = paramVarArgs;
        if (j < paramVarArgs.length) {
          localObject1 = kf.a(paramVarArgs, j);
        }
        return new Hf((Object[])localObject1, k, arrayOfObject, i1);
      }
      return new lg(paramVarArgs[0]);
    }
    return xa.f;
  }
  
  public static <E> Nb<E> b(E paramE)
  {
    return new lg(paramE);
  }
  
  public static <E> Nb<E> b(Collection<? extends E> paramCollection)
  {
    if (((paramCollection instanceof Nb)) && (!(paramCollection instanceof Wb)))
    {
      Nb localNb = (Nb)paramCollection;
      if (!localNb.c()) {
        return localNb;
      }
    }
    return a(paramCollection);
  }
  
  public static <E> b<E> e()
  {
    return new b(4);
  }
  
  public static <E> Nb<E> g()
  {
    return xa.f;
  }
  
  public Object d()
  {
    return new c(toArray());
  }
  
  public boolean equals(@h Object paramObject)
  {
    if (paramObject == this) {
      return true;
    }
    if (((paramObject instanceof Nb)) && (f()) && (((Nb)paramObject).f()) && (hashCode() != paramObject.hashCode())) {
      return false;
    }
    return gg.a(this, paramObject);
  }
  
  public boolean f()
  {
    return false;
  }
  
  public int hashCode()
  {
    return gg.a(this);
  }
  
  public abstract th<E> iterator();
  
  public static abstract class a<E>
    extends Nb<E>
  {
    public final transient Object[] f;
    
    public a(Object[] paramArrayOfObject)
    {
      f = paramArrayOfObject;
    }
    
    public vb<E> b()
    {
      return new zf(this, f);
    }
    
    public boolean c()
    {
      return false;
    }
    
    public boolean containsAll(Collection<?> paramCollection)
    {
      if (paramCollection == this) {
        return true;
      }
      if (!(paramCollection instanceof a)) {
        return V.a(this, paramCollection);
      }
      if (paramCollection.size() > size()) {
        return false;
      }
      paramCollection = f;
      int j = paramCollection.length;
      int i = 0;
      while (i < j)
      {
        if (!contains(paramCollection[i])) {
          return false;
        }
        i += 1;
      }
      return true;
    }
    
    public boolean isEmpty()
    {
      return false;
    }
    
    public th<E> iterator()
    {
      return a().iterator();
    }
    
    public int size()
    {
      return f.length;
    }
    
    public Object[] toArray()
    {
      return a().toArray();
    }
    
    public <T> T[] toArray(T[] paramArrayOfT)
    {
      return a().toArray(paramArrayOfT);
    }
  }
  
  public static class b<E>
    extends rb.b<E>
  {
    public Object[] b;
    public int c;
    
    public b()
    {
      this(4);
    }
    
    public b(int paramInt)
    {
      boolean bool;
      if (paramInt >= 0) {
        bool = true;
      } else {
        bool = false;
      }
      ba.a(bool, "capacity must be >= 0 but was %s", new Object[] { Integer.valueOf(paramInt) });
      b = new Object[paramInt];
      c = 0;
    }
    
    public b<E> a(int paramInt)
    {
      paramInt = c + paramInt;
      Object[] arrayOfObject = b;
      if (arrayOfObject.length < paramInt) {
        b = kf.a(arrayOfObject, rb.b.a(arrayOfObject.length, paramInt));
      }
      return this;
    }
    
    public b<E> a(Iterable<? extends E> paramIterable)
    {
      if ((paramIterable instanceof Collection)) {
        a(((Collection)paramIterable).size());
      }
      super.a(paramIterable);
      return this;
    }
    
    public b<E> a(E paramE)
    {
      a(1);
      Object[] arrayOfObject = b;
      int i = c;
      c = (i + 1);
      if (paramE != null)
      {
        arrayOfObject[i] = paramE;
        return this;
      }
      throw new NullPointerException();
    }
    
    public b<E> a(Iterator<? extends E> paramIterator)
    {
      super.a(paramIterator);
      return this;
    }
    
    public b<E> a(E... paramVarArgs)
    {
      int i = 0;
      while (i < paramVarArgs.length)
      {
        kf.a(paramVarArgs[i], i);
        i += 1;
      }
      a(paramVarArgs.length);
      System.arraycopy(paramVarArgs, 0, b, c, paramVarArgs.length);
      c += paramVarArgs.length;
      return this;
    }
    
    public Nb<E> a()
    {
      Nb localNb = Nb.b(c, b);
      c = localNb.size();
      return localNb;
    }
  }
  
  private static class c
    implements Serializable
  {
    public static final long a = 0L;
    public final Object[] b;
    
    public c(Object[] paramArrayOfObject)
    {
      b = paramArrayOfObject;
    }
    
    public Object a()
    {
      return Nb.a(b);
    }
  }
}
