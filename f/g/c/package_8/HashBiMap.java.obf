package f.g.c.d;

import f.g.c.a.b;
import f.g.c.a.c;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.HashMap;
import java.util.Map;
import m.a.h;

@b(emulated=true)
public final class ib<K, V>
  extends d<K, V>
{
  @c("Not needed in emulated source")
  public static final long g = 0L;
  
  public ib()
  {
    super(new HashMap(), new HashMap());
  }
  
  public ib(int paramInt)
  {
    super(fe.b(paramInt), fe.b(paramInt));
  }
  
  public static <K, V> ib<K, V> a(int paramInt)
  {
    return new ib(paramInt);
  }
  
  @c("java.io.ObjectInputStream")
  private void a(ObjectInputStream paramObjectInputStream)
    throws IOException, ClassNotFoundException
  {
    paramObjectInputStream.defaultReadObject();
    int i = paramObjectInputStream.readInt();
    a(fe.b(i), fe.b(i));
    ag.a(this, paramObjectInputStream, i);
  }
  
  @c("java.io.ObjectOutputStream")
  private void a(ObjectOutputStream paramObjectOutputStream)
    throws IOException
  {
    paramObjectOutputStream.defaultWriteObject();
    ag.a(this, paramObjectOutputStream);
  }
  
  public static <K, V> ib<K, V> b(Map<? extends K, ? extends V> paramMap)
  {
    ib localIb = new ib(paramMap.size());
    localIb.putAll(paramMap);
    return localIb;
  }
  
  public static <K, V> ib<K, V> x()
  {
    return new ib();
  }
  
  public V a(@h K paramK, @h V paramV)
  {
    return super.a(paramK, paramV);
  }
  
  public boolean containsValue(Object paramObject)
  {
    return c.containsKey(paramObject);
  }
  
  public L f()
  {
    return c;
  }
  
  public V put(@h K paramK, @h V paramV)
  {
    return super.put(paramK, paramV);
  }
}
