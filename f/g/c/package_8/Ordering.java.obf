package f.g.c.d;

import f.g.c.a.b;
import f.g.c.a.d;
import f.g.c.b.J;
import f.g.c.b.ba;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import m.a.h;

@b
public abstract class mf<T>
  implements Comparator<T>
{
  public static final int a = 1;
  public static final int b = -1;
  
  public mf() {}
  
  private <E extends T> int a(E[] paramArrayOfE, int paramInt1, int paramInt2, int paramInt3)
  {
    E ? = paramArrayOfE[paramInt3];
    paramArrayOfE[paramInt3] = paramArrayOfE[paramInt2];
    paramArrayOfE[paramInt2] = ?;
    int i;
    for (paramInt3 = paramInt1; paramInt1 < paramInt2; paramInt3 = i)
    {
      i = paramInt3;
      if (compare(paramArrayOfE[paramInt1], ?) < 0)
      {
        kf.a(paramArrayOfE, paramInt3, paramInt1);
        i = paramInt3 + 1;
      }
      paramInt1 += 1;
    }
    kf.a(paramArrayOfE, paramInt2, paramInt3);
    return paramInt3;
  }
  
  @b(serializable=true)
  public static mf<Object> a()
  {
    return A.c;
  }
  
  @Deprecated
  @b(serializable=true)
  public static <T> mf<T> a(mf<T> paramMf)
  {
    if (paramMf != null) {
      return paramMf;
    }
    throw new NullPointerException();
  }
  
  @b(serializable=true)
  public static <T> mf<T> a(Iterable<? extends Comparator<? super T>> paramIterable)
  {
    return new Z(paramIterable);
  }
  
  @b(serializable=true)
  public static <T> mf<T> a(T paramT, T... paramVarArgs)
  {
    return new Ga(new fd.c(paramT, paramVarArgs));
  }
  
  @b(serializable=true)
  public static <T> mf<T> a(List<T> paramList)
  {
    return new Ga(paramList);
  }
  
  public static mf<Object> b()
  {
    return b.a;
  }
  
  @b(serializable=true)
  public static <T> mf<T> b(Comparator<T> paramComparator)
  {
    if ((paramComparator instanceof mf)) {
      return (mf)paramComparator;
    }
    return new W(paramComparator);
  }
  
  private <E extends T> void b(E[] paramArrayOfE, int paramInt1, int paramInt2, int paramInt3)
  {
    if (paramInt2 > paramInt1)
    {
      int i = a(paramArrayOfE, paramInt1, paramInt2, paramInt1 + paramInt2 >>> 1);
      b(paramArrayOfE, paramInt1, i - 1, paramInt3);
      if (i < paramInt3) {
        b(paramArrayOfE, i + 1, paramInt2, paramInt3);
      }
    }
  }
  
  @b(serializable=true)
  public static <C extends Comparable> mf<C> d()
  {
    return hf.c;
  }
  
  @b(serializable=true)
  public static mf<Object> h()
  {
    return vh.c;
  }
  
  public int a(List<? extends T> paramList, @h T paramT)
  {
    return Collections.binarySearch(paramList, paramT, this);
  }
  
  @b(serializable=true)
  public <F> mf<F> a(J<F, ? extends T> paramJ)
  {
    return new P(paramJ, this);
  }
  
  @b(serializable=true)
  public <U extends T> mf<U> a(Comparator<? super U> paramComparator)
  {
    if (paramComparator != null) {
      return new Z(this, paramComparator);
    }
    throw new NullPointerException();
  }
  
  public <E extends T> E a(@h E paramE1, @h E paramE2)
  {
    if (compare(paramE1, paramE2) >= 0) {
      return paramE1;
    }
    return paramE2;
  }
  
  public <E extends T> E a(@h E paramE1, @h E paramE2, @h E paramE3, E... paramVarArgs)
  {
    paramE1 = a(a(paramE1, paramE2), paramE3);
    int j = paramVarArgs.length;
    int i = 0;
    while (i < j)
    {
      paramE1 = a(paramE1, paramVarArgs[i]);
      i += 1;
    }
    return paramE1;
  }
  
  @f.g.c.a.a
  public <E extends T> E a(Iterator<E> paramIterator)
  {
    for (Object localObject = paramIterator.next(); paramIterator.hasNext(); localObject = a(localObject, paramIterator.next())) {}
    return localObject;
  }
  
  @f.g.c.a.a
  public <E extends T> List<E> a(Iterable<E> paramIterable, int paramInt)
  {
    return g().b(paramIterable, paramInt);
  }
  
  public <E extends T> vb<E> b(Iterable<E> paramIterable)
  {
    paramIterable = rc.j(paramIterable);
    int j = paramIterable.length;
    int i = 0;
    while (i < j)
    {
      ba.a(paramIterable[i]);
      i += 1;
    }
    Arrays.sort(paramIterable, this);
    return vb.a(paramIterable);
  }
  
  public <E extends T> E b(@h E paramE1, @h E paramE2)
  {
    if (compare(paramE1, paramE2) <= 0) {
      return paramE1;
    }
    return paramE2;
  }
  
  public <E extends T> E b(@h E paramE1, @h E paramE2, @h E paramE3, E... paramVarArgs)
  {
    paramE1 = b(b(paramE1, paramE2), paramE3);
    int j = paramVarArgs.length;
    int i = 0;
    while (i < j)
    {
      paramE1 = b(paramE1, paramVarArgs[i]);
      i += 1;
    }
    return paramE1;
  }
  
  @f.g.c.a.a
  public <E extends T> E b(Iterator<E> paramIterator)
  {
    for (Object localObject = paramIterator.next(); paramIterator.hasNext(); localObject = b(localObject, paramIterator.next())) {}
    return localObject;
  }
  
  @f.g.c.a.a
  public <E extends T> List<E> b(Iterable<E> paramIterable, int paramInt)
  {
    boolean bool;
    if (paramInt >= 0) {
      bool = true;
    } else {
      bool = false;
    }
    ba.a(bool, "%d is negative", new Object[] { Integer.valueOf(paramInt) });
    paramIterable = rc.j(paramIterable);
    if (paramIterable.length <= paramInt)
    {
      Arrays.sort(paramIterable, this);
    }
    else
    {
      b(paramIterable, 0, paramIterable.length - 1, paramInt);
      Object[] arrayOfObject = new Object[paramInt];
      System.arraycopy(paramIterable, 0, arrayOfObject, 0, paramInt);
      paramIterable = arrayOfObject;
    }
    return Collections.unmodifiableList(Arrays.asList(paramIterable));
  }
  
  @b(serializable=true)
  public <S extends T> mf<Iterable<S>> c()
  {
    return new Kc(this);
  }
  
  public boolean c(Iterable<? extends T> paramIterable)
  {
    Iterator localIterator = paramIterable.iterator();
    if (localIterator.hasNext())
    {
      Object localObject;
      for (paramIterable = localIterator.next(); localIterator.hasNext(); paramIterable = localObject)
      {
        localObject = localIterator.next();
        if (compare(paramIterable, localObject) > 0) {
          return false;
        }
      }
    }
    return true;
  }
  
  public abstract int compare(@h T paramT1, @h T paramT2);
  
  public boolean d(Iterable<? extends T> paramIterable)
  {
    Iterator localIterator = paramIterable.iterator();
    if (localIterator.hasNext())
    {
      Object localObject;
      for (paramIterable = localIterator.next(); localIterator.hasNext(); paramIterable = localObject)
      {
        localObject = localIterator.next();
        if (compare(paramIterable, localObject) >= 0) {
          return false;
        }
      }
    }
    return true;
  }
  
  @b(serializable=true)
  public <S extends T> mf<S> e()
  {
    return new if(this);
  }
  
  public <E extends T> E e(Iterable<E> paramIterable)
  {
    return a(paramIterable.iterator());
  }
  
  @b(serializable=true)
  public <S extends T> mf<S> f()
  {
    return new jf(this);
  }
  
  public <E extends T> E f(Iterable<E> paramIterable)
  {
    return b(paramIterable.iterator());
  }
  
  @b(serializable=true)
  public <S extends T> mf<S> g()
  {
    return new Yf(this);
  }
  
  public <E extends T> List<E> g(Iterable<E> paramIterable)
  {
    paramIterable = rc.j(paramIterable);
    Arrays.sort(paramIterable, this);
    return fd.b(Arrays.asList(paramIterable));
  }
  
  @d
  public static class a
    extends mf<Object>
  {
    public Map<Object, Integer> c = new ud().f().a(new lf(this));
    
    public a() {}
    
    public int a(Object paramObject)
    {
      return System.identityHashCode(paramObject);
    }
    
    public int compare(Object paramObject1, Object paramObject2)
    {
      if (paramObject1 == paramObject2) {
        return 0;
      }
      if (paramObject1 == null) {
        return -1;
      }
      if (paramObject2 == null) {
        return 1;
      }
      int i = a(paramObject1);
      int j = a(paramObject2);
      if (i != j)
      {
        if (i < j) {
          return -1;
        }
        return 1;
      }
      i = ((Integer)c.get(paramObject1)).compareTo((Integer)c.get(paramObject2));
      if (i != 0) {
        return i;
      }
      throw new AssertionError();
    }
    
    public String toString()
    {
      return "Ordering.arbitrary()";
    }
  }
  
  private static class b
  {
    public static final mf<Object> a = new mf.a();
    
    public b() {}
  }
  
  @d
  public static class c
    extends ClassCastException
  {
    public static final long a = 0L;
    public final Object b;
    
    public c(Object paramObject)
    {
      super();
      b = paramObject;
    }
  }
}
