package f.g.c.d;

import f.g.c.a.b;
import java.util.Collection;
import java.util.Map;
import java.util.Set;

@b
public abstract class cb<R, C, V>
  extends Wa
  implements Yg<R, C, V>
{
  public cb() {}
  
  public V a(R paramR, C paramC, V paramV)
  {
    return q().a(paramR, paramC, paramV);
  }
  
  public void a(Yg<? extends R, ? extends C, ? extends V> paramYg)
  {
    q().a(paramYg);
  }
  
  public V c(Object paramObject1, Object paramObject2)
  {
    return q().c(paramObject1, paramObject2);
  }
  
  public void clear()
  {
    q().clear();
  }
  
  public boolean containsValue(Object paramObject)
  {
    return q().containsValue(paramObject);
  }
  
  public boolean d(Object paramObject1, Object paramObject2)
  {
    return q().d(paramObject1, paramObject2);
  }
  
  public Map<C, Map<R, V>> e()
  {
    return q().e();
  }
  
  public boolean e(Object paramObject)
  {
    return q().e(paramObject);
  }
  
  public boolean equals(Object paramObject)
  {
    return (paramObject == this) || (q().equals(paramObject));
  }
  
  public Map<R, V> f(C paramC)
  {
    return q().f(paramC);
  }
  
  public Set<R> g()
  {
    return q().g();
  }
  
  public boolean g(Object paramObject)
  {
    return q().g(paramObject);
  }
  
  public Map<C, V> h(R paramR)
  {
    return q().h(paramR);
  }
  
  public Set<Yg.a<R, C, V>> h()
  {
    return q().h();
  }
  
  public int hashCode()
  {
    return q().hashCode();
  }
  
  public Set<C> i()
  {
    return q().i();
  }
  
  public boolean isEmpty()
  {
    return q().isEmpty();
  }
  
  public Map<R, Map<C, V>> j()
  {
    return q().j();
  }
  
  public abstract Yg<R, C, V> q();
  
  public V remove(Object paramObject1, Object paramObject2)
  {
    return q().remove(paramObject1, paramObject2);
  }
  
  public int size()
  {
    return q().size();
  }
  
  public Collection<V> values()
  {
    return q().values();
  }
}
