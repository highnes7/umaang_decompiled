package f.g.c.d;

import f.g.c.a.b;
import java.util.Collection;
import java.util.Iterator;
import java.util.Set;
import m.a.h;

@b
public abstract interface Ye<E>
  extends Collection<E>
{
  public abstract int a(@h Object paramObject);
  
  public abstract int a(E paramE, int paramInt);
  
  public abstract boolean a(E paramE, int paramInt1, int paramInt2);
  
  public abstract boolean add(E paramE);
  
  public abstract int b(@h Object paramObject, int paramInt);
  
  public abstract int c(@h E paramE, int paramInt);
  
  public abstract boolean contains(@h Object paramObject);
  
  public abstract boolean containsAll(Collection<?> paramCollection);
  
  public abstract Set<a<E>> entrySet();
  
  public abstract boolean equals(@h Object paramObject);
  
  public abstract int hashCode();
  
  public abstract Iterator<E> iterator();
  
  public abstract boolean remove(@h Object paramObject);
  
  public abstract boolean removeAll(Collection<?> paramCollection);
  
  public abstract boolean retainAll(Collection<?> paramCollection);
  
  public abstract String toString();
  
  public abstract Set<E> u();
  
  public static abstract interface a<E>
  {
    public abstract E a();
    
    public abstract boolean equals(Object paramObject);
    
    public abstract int getCount();
    
    public abstract int hashCode();
    
    public abstract String toString();
  }
}
