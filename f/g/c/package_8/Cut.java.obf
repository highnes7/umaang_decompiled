package f.g.c.d;

import java.io.Serializable;
import java.util.NoSuchElementException;
import m.a.h;

@f.g.c.a.b
public abstract class la<C extends Comparable>
  implements Comparable<la<C>>, Serializable
{
  public static final long a = 0L;
  public final C b;
  
  public la(@h C paramC)
  {
    b = paramC;
  }
  
  public static <C extends Comparable> la<C> a()
  {
    return a.c;
  }
  
  public static <C extends Comparable> la<C> a(C paramC)
  {
    return new b(paramC);
  }
  
  public static <C extends Comparable> la<C> b()
  {
    return c.c;
  }
  
  public static <C extends Comparable> la<C> b(C paramC)
  {
    return new d(paramC);
  }
  
  public int a(la<C> paramLa)
  {
    if (paramLa == c.c) {
      return 1;
    }
    if (paramLa == a.c) {
      return -1;
    }
    int i = b.compareTo(b);
    if (i != 0) {
      return i;
    }
    return f.g.c.j.b.a(this instanceof b, paramLa instanceof b);
  }
  
  public abstract la<C> a(O paramO, oa<C> paramOa);
  
  public la<C> a(oa<C> paramOa)
  {
    return this;
  }
  
  public abstract void a(StringBuilder paramStringBuilder);
  
  public abstract la<C> b(O paramO, oa<C> paramOa);
  
  public abstract C b(oa<C> paramOa);
  
  public abstract void b(StringBuilder paramStringBuilder);
  
  public C c()
  {
    return b;
  }
  
  public abstract C c(oa<C> paramOa);
  
  public abstract boolean c(C paramC);
  
  public abstract O d();
  
  public abstract O e();
  
  public boolean equals(Object paramObject)
  {
    boolean bool3 = paramObject instanceof la;
    boolean bool2 = false;
    boolean bool1 = bool2;
    if (bool3) {
      paramObject = (la)paramObject;
    }
    try
    {
      int i = a(paramObject);
      bool1 = bool2;
      if (i == 0) {
        bool1 = true;
      }
      return bool1;
    }
    catch (ClassCastException paramObject) {}
    return false;
  }
  
  private static final class a
    extends la<Comparable<?>>
  {
    public static final a c = new a();
    public static final long d = 0L;
    
    public a()
    {
      super();
    }
    
    private Object g()
    {
      return c;
    }
    
    public int a(la<Comparable<?>> paramLa)
    {
      if (paramLa == this) {
        return 0;
      }
      return 1;
    }
    
    public la<Comparable<?>> a(O paramO, oa<Comparable<?>> paramOa)
    {
      throw new AssertionError("this statement should be unreachable");
    }
    
    public void a(StringBuilder paramStringBuilder)
    {
      throw new AssertionError();
    }
    
    public la<Comparable<?>> b(O paramO, oa<Comparable<?>> paramOa)
    {
      throw new IllegalStateException();
    }
    
    public Comparable<?> b(oa<Comparable<?>> paramOa)
    {
      return paramOa.a();
    }
    
    public void b(StringBuilder paramStringBuilder)
    {
      paramStringBuilder.append("+?)");
    }
    
    public Comparable<?> c()
    {
      throw new IllegalStateException("range unbounded on this side");
    }
    
    public Comparable<?> c(oa<Comparable<?>> paramOa)
    {
      throw new AssertionError();
    }
    
    public boolean c(Comparable<?> paramComparable)
    {
      return false;
    }
    
    public O d()
    {
      throw new AssertionError("this statement should be unreachable");
    }
    
    public O e()
    {
      throw new IllegalStateException();
    }
  }
  
  private static final class b<C extends Comparable>
    extends la<C>
  {
    public static final long c = 0L;
    
    public b(C paramC) {}
    
    public la<C> a(O paramO, oa<C> paramOa)
    {
      int i = paramO.ordinal();
      if (i != 0)
      {
        if (i == 1)
        {
          paramO = paramOa.a(b);
          if (paramO == null) {
            return la.b();
          }
          return la.b(paramO);
        }
        throw new AssertionError();
      }
      return this;
    }
    
    public la<C> a(oa<C> paramOa)
    {
      paramOa = c(paramOa);
      if (paramOa != null) {
        return la.b(paramOa);
      }
      return la.a();
    }
    
    public void a(StringBuilder paramStringBuilder)
    {
      paramStringBuilder.append('(');
      paramStringBuilder.append(b);
    }
    
    public la<C> b(O paramO, oa<C> paramOa)
    {
      int i = paramO.ordinal();
      if (i != 0)
      {
        if (i == 1) {
          return this;
        }
        throw new AssertionError();
      }
      paramO = paramOa.a(b);
      if (paramO == null) {
        return la.a();
      }
      return la.b(paramO);
    }
    
    public C b(oa<C> paramOa)
    {
      return b;
    }
    
    public void b(StringBuilder paramStringBuilder)
    {
      paramStringBuilder.append(b);
      paramStringBuilder.append(']');
    }
    
    public C c(oa<C> paramOa)
    {
      return paramOa.a(b);
    }
    
    public boolean c(C paramC)
    {
      return b.compareTo(paramC) < 0;
    }
    
    public O d()
    {
      return O.a;
    }
    
    public O e()
    {
      return O.b;
    }
    
    public int hashCode()
    {
      return b.hashCode() ^ 0xFFFFFFFF;
    }
  }
  
  private static final class c
    extends la<Comparable<?>>
  {
    public static final c c = new c();
    public static final long d = 0L;
    
    public c()
    {
      super();
    }
    
    private Object g()
    {
      return c;
    }
    
    public int a(la<Comparable<?>> paramLa)
    {
      if (paramLa == this) {
        return 0;
      }
      return -1;
    }
    
    public la<Comparable<?>> a(O paramO, oa<Comparable<?>> paramOa)
    {
      throw new IllegalStateException();
    }
    
    public la<Comparable<?>> a(oa<Comparable<?>> paramOa)
    {
      try
      {
        paramOa = la.b(paramOa.b());
        return paramOa;
      }
      catch (NoSuchElementException paramOa) {}
      return this;
    }
    
    public void a(StringBuilder paramStringBuilder)
    {
      paramStringBuilder.append("(-?");
    }
    
    public la<Comparable<?>> b(O paramO, oa<Comparable<?>> paramOa)
    {
      throw new AssertionError("this statement should be unreachable");
    }
    
    public Comparable<?> b(oa<Comparable<?>> paramOa)
    {
      throw new AssertionError();
    }
    
    public void b(StringBuilder paramStringBuilder)
    {
      throw new AssertionError();
    }
    
    public Comparable<?> c()
    {
      throw new IllegalStateException("range unbounded on this side");
    }
    
    public Comparable<?> c(oa<Comparable<?>> paramOa)
    {
      return paramOa.b();
    }
    
    public boolean c(Comparable<?> paramComparable)
    {
      return true;
    }
    
    public O d()
    {
      throw new IllegalStateException();
    }
    
    public O e()
    {
      throw new AssertionError("this statement should be unreachable");
    }
  }
  
  private static final class d<C extends Comparable>
    extends la<C>
  {
    public static final long c = 0L;
    
    public d(C paramC) {}
    
    public la<C> a(O paramO, oa<C> paramOa)
    {
      int i = paramO.ordinal();
      if (i != 0)
      {
        if (i == 1) {
          return this;
        }
        throw new AssertionError();
      }
      paramO = paramOa.b(b);
      if (paramO == null) {
        return la.b();
      }
      return new la.b(paramO);
    }
    
    public void a(StringBuilder paramStringBuilder)
    {
      paramStringBuilder.append('[');
      paramStringBuilder.append(b);
    }
    
    public la<C> b(O paramO, oa<C> paramOa)
    {
      int i = paramO.ordinal();
      if (i != 0)
      {
        if (i == 1)
        {
          paramO = paramOa.b(b);
          if (paramO == null) {
            return la.a();
          }
          return new la.b(paramO);
        }
        throw new AssertionError();
      }
      return this;
    }
    
    public C b(oa<C> paramOa)
    {
      return paramOa.b(b);
    }
    
    public void b(StringBuilder paramStringBuilder)
    {
      paramStringBuilder.append(b);
      paramStringBuilder.append(')');
    }
    
    public C c(oa<C> paramOa)
    {
      return b;
    }
    
    public boolean c(C paramC)
    {
      return b.compareTo(paramC) <= 0;
    }
    
    public O d()
    {
      return O.b;
    }
    
    public O e()
    {
      return O.a;
    }
    
    public int hashCode()
    {
      return b.hashCode();
    }
  }
}
