package f.g.c.d;

import f.g.c.j.j;
import java.util.Iterator;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

public final class pb<B>
  extends Sa<Class<? extends B>, B>
  implements Q<B>
{
  public final Ab<Class<? extends B>, B> a;
  
  public pb(Ab<Class<? extends B>, B> paramAb)
  {
    a = paramAb;
  }
  
  public static <B, S extends B> pb<B> b(Map<? extends Class<? extends S>, ? extends S> paramMap)
  {
    if ((paramMap instanceof pb)) {
      return (pb)paramMap;
    }
    return new a().a(paramMap).a();
  }
  
  public static <B> a<B> x()
  {
    return new a();
  }
  
  public <T extends B> T a(Class<T> paramClass)
  {
    return a.get(paramClass);
  }
  
  public <T extends B> T a(Class<T> paramClass, T paramT)
  {
    throw new UnsupportedOperationException();
  }
  
  public Map<Class<? extends B>, B> q()
  {
    return a;
  }
  
  public static final class a<B>
  {
    public final Ab.a<Class<? extends B>, B> a = Ab.a();
    
    public a() {}
    
    public static <B, T extends B> T a(Class<T> paramClass, B paramB)
    {
      return j.c(paramClass).cast(paramB);
    }
    
    public <T extends B> a<B> a(Map<? extends Class<? extends T>, ? extends T> paramMap)
    {
      paramMap = paramMap.entrySet().iterator();
      while (paramMap.hasNext())
      {
        Object localObject = (Map.Entry)paramMap.next();
        Class localClass = (Class)((Map.Entry)localObject).getKey();
        localObject = ((Map.Entry)localObject).getValue();
        a.a(localClass, a(localClass, localObject));
      }
      return this;
    }
    
    public pb<B> a()
    {
      return new pb(a.a(), null);
    }
    
    public <T extends B> a<B> b(Class<T> paramClass, T paramT)
    {
      a.a(paramClass, paramT);
      return this;
    }
  }
}
