package f.g.c.d;

import f.g.c.a.b;
import java.util.Collection;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;
import m.a.h;

@b
public abstract class Ua<K, V>
  extends Wa
  implements ve<K, V>
{
  public Ua() {}
  
  public Map<K, Collection<V>> a()
  {
    return q().a();
  }
  
  public boolean a(ve<? extends K, ? extends V> paramVe)
  {
    return q().a(paramVe);
  }
  
  public boolean a(K paramK, Iterable<? extends V> paramIterable)
  {
    return q().a(paramK, paramIterable);
  }
  
  public Ye<K> b()
  {
    return q().b();
  }
  
  public Collection<V> b(K paramK, Iterable<? extends V> paramIterable)
  {
    return q().b(paramK, paramIterable);
  }
  
  public boolean b(@h Object paramObject1, @h Object paramObject2)
  {
    return q().b(paramObject1, paramObject2);
  }
  
  public void clear()
  {
    q().clear();
  }
  
  public boolean containsKey(@h Object paramObject)
  {
    return q().containsKey(paramObject);
  }
  
  public boolean containsValue(@h Object paramObject)
  {
    return q().containsValue(paramObject);
  }
  
  public Collection<V> d(@h Object paramObject)
  {
    return q().d(paramObject);
  }
  
  public Collection<Map.Entry<K, V>> entries()
  {
    return q().entries();
  }
  
  public boolean equals(@h Object paramObject)
  {
    return (paramObject == this) || (q().equals(paramObject));
  }
  
  public Collection<V> get(@h K paramK)
  {
    return q().get(paramK);
  }
  
  public int hashCode()
  {
    return q().hashCode();
  }
  
  public boolean isEmpty()
  {
    return q().isEmpty();
  }
  
  public Set<K> keySet()
  {
    return q().keySet();
  }
  
  public boolean put(K paramK, V paramV)
  {
    return q().put(paramK, paramV);
  }
  
  public abstract ve<K, V> q();
  
  public boolean remove(@h Object paramObject1, @h Object paramObject2)
  {
    return q().remove(paramObject1, paramObject2);
  }
  
  public int size()
  {
    return q().size();
  }
  
  public Collection<V> values()
  {
    return q().values();
  }
}
