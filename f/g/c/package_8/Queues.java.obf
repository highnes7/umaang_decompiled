package f.g.c.d;

import f.g.c.a.a;
import java.util.Collection;
import java.util.PriorityQueue;
import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.PriorityBlockingQueue;
import java.util.concurrent.SynchronousQueue;
import java.util.concurrent.TimeUnit;

@a
public final class pf
{
  public pf() {}
  
  public static <E> int a(BlockingQueue<E> paramBlockingQueue, Collection<? super E> paramCollection, int paramInt, long paramLong, TimeUnit paramTimeUnit)
    throws InterruptedException
  {
    if (paramCollection != null)
    {
      long l = System.nanoTime();
      paramLong = paramTimeUnit.toNanos(paramLong);
      int i = 0;
      while (i < paramInt)
      {
        int j = i + paramBlockingQueue.drainTo(paramCollection, paramInt - i);
        i = j;
        if (j < paramInt)
        {
          paramTimeUnit = paramBlockingQueue.poll(paramLong + l - System.nanoTime(), TimeUnit.NANOSECONDS);
          if (paramTimeUnit == null) {
            return j;
          }
          paramCollection.add(paramTimeUnit);
          i = j + 1;
        }
      }
      return i;
    }
    paramBlockingQueue = new NullPointerException();
    for (;;)
    {
      throw paramBlockingQueue;
    }
  }
  
  public static <E> ArrayBlockingQueue<E> a(int paramInt)
  {
    return new ArrayBlockingQueue(paramInt);
  }
  
  public static <E> ConcurrentLinkedQueue<E> a()
  {
    return new ConcurrentLinkedQueue();
  }
  
  public static <E> ConcurrentLinkedQueue<E> a(Iterable<? extends E> paramIterable)
  {
    if ((paramIterable instanceof Collection)) {
      return new ConcurrentLinkedQueue(V.a(paramIterable));
    }
    ConcurrentLinkedQueue localConcurrentLinkedQueue = new ConcurrentLinkedQueue();
    rc.a(localConcurrentLinkedQueue, paramIterable);
    return localConcurrentLinkedQueue;
  }
  
  public static <E> int b(BlockingQueue<E> paramBlockingQueue, Collection<? super E> paramCollection, int paramInt, long paramLong, TimeUnit paramTimeUnit)
  {
    if (paramCollection != null)
    {
      long l = System.nanoTime();
      paramLong = paramTimeUnit.toNanos(paramLong);
      int j = 0;
      int i = 0;
      int m = i;
      int k = j;
      if (j < paramInt)
      {
        m = i;
        for (;;)
        {
          try
          {
            k = paramBlockingQueue.drainTo(paramCollection, paramInt - j);
            k = j + k;
            j = k;
            if (k >= paramInt) {
              break;
            }
            m = i;
          }
          finally
          {
            if (m != 0) {
              Thread.currentThread().interrupt();
            }
          }
          try
          {
            paramTimeUnit = paramBlockingQueue.poll(paramLong + l - System.nanoTime(), TimeUnit.NANOSECONDS);
            if (paramTimeUnit == null)
            {
              m = i;
              break label147;
            }
            m = i;
            paramCollection.add(paramTimeUnit);
            j = k + 1;
          }
          catch (InterruptedException paramTimeUnit)
          {
            continue;
          }
          i = 1;
        }
      }
      label147:
      if (m != 0) {
        Thread.currentThread().interrupt();
      }
      return k;
    }
    paramBlockingQueue = new NullPointerException();
    for (;;)
    {
      throw paramBlockingQueue;
    }
  }
  
  public static <E> LinkedBlockingQueue<E> b()
  {
    return new LinkedBlockingQueue();
  }
  
  public static <E> LinkedBlockingQueue<E> b(int paramInt)
  {
    return new LinkedBlockingQueue(paramInt);
  }
  
  public static <E> LinkedBlockingQueue<E> b(Iterable<? extends E> paramIterable)
  {
    if ((paramIterable instanceof Collection)) {
      return new LinkedBlockingQueue(V.a(paramIterable));
    }
    LinkedBlockingQueue localLinkedBlockingQueue = new LinkedBlockingQueue();
    rc.a(localLinkedBlockingQueue, paramIterable);
    return localLinkedBlockingQueue;
  }
  
  public static <E> PriorityBlockingQueue<E> c()
  {
    return new PriorityBlockingQueue();
  }
  
  public static <E> PriorityBlockingQueue<E> c(Iterable<? extends E> paramIterable)
  {
    if ((paramIterable instanceof Collection)) {
      return new PriorityBlockingQueue(V.a(paramIterable));
    }
    PriorityBlockingQueue localPriorityBlockingQueue = new PriorityBlockingQueue();
    rc.a(localPriorityBlockingQueue, paramIterable);
    return localPriorityBlockingQueue;
  }
  
  public static <E> PriorityQueue<E> d()
  {
    return new PriorityQueue();
  }
  
  public static <E> PriorityQueue<E> d(Iterable<? extends E> paramIterable)
  {
    if ((paramIterable instanceof Collection)) {
      return new PriorityQueue(V.a(paramIterable));
    }
    PriorityQueue localPriorityQueue = new PriorityQueue();
    rc.a(localPriorityQueue, paramIterable);
    return localPriorityQueue;
  }
  
  public static <E> SynchronousQueue<E> e()
  {
    return new SynchronousQueue();
  }
}
