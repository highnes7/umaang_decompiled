package f.g.c.d;

import f.g.c.a.a;
import f.g.c.a.b;
import f.g.c.a.c;
import f.g.c.a.d;
import f.g.c.b.J;
import f.g.c.b.U;
import f.g.c.b.ba;
import f.g.c.j.g;
import java.io.Serializable;
import java.util.AbstractList;
import java.util.AbstractSequentialList;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.RandomAccess;
import java.util.concurrent.CopyOnWriteArrayList;
import m.a.h;

@b(emulated=true)
public final class fd
{
  public fd() {}
  
  @d
  public static int a(int paramInt)
  {
    boolean bool;
    if (paramInt >= 0) {
      bool = true;
    } else {
      bool = false;
    }
    ba.a(bool);
    return g.b(paramInt + 5L + paramInt / 10);
  }
  
  public static int a(List<?> paramList)
  {
    paramList = paramList.iterator();
    int j;
    for (int i = 1; paramList.hasNext(); i = i * 31 + j)
    {
      Object localObject = paramList.next();
      if (localObject == null) {
        j = 0;
      } else {
        j = localObject.hashCode();
      }
    }
    return i;
  }
  
  @a
  public static vb<Character> a(String paramString)
  {
    if (paramString != null) {
      return new i(paramString);
    }
    throw new NullPointerException();
  }
  
  @b(serializable=true)
  public static <E> ArrayList<E> a()
  {
    return new ArrayList();
  }
  
  @b(serializable=true)
  public static <E> ArrayList<E> a(Iterator<? extends E> paramIterator)
  {
    if (paramIterator != null)
    {
      ArrayList localArrayList = new ArrayList();
      while (paramIterator.hasNext()) {
        localArrayList.add(paramIterator.next());
      }
      return localArrayList;
    }
    paramIterator = new NullPointerException();
    for (;;)
    {
      throw paramIterator;
    }
  }
  
  @b(serializable=true)
  public static <E> ArrayList<E> a(E... paramVarArgs)
  {
    if (paramVarArgs != null)
    {
      ArrayList localArrayList = new ArrayList(a(paramVarArgs.length));
      Collections.addAll(localArrayList, paramVarArgs);
      return localArrayList;
    }
    throw new NullPointerException();
  }
  
  @a
  public static List<Character> a(CharSequence paramCharSequence)
  {
    if (paramCharSequence != null) {
      return new b(paramCharSequence);
    }
    throw new NullPointerException();
  }
  
  public static <T> List<T> a(Iterable<T> paramIterable)
  {
    return (List)paramIterable;
  }
  
  public static <E> List<E> a(@h E paramE1, @h E paramE2, E[] paramArrayOfE)
  {
    return new l(paramE1, paramE2, paramArrayOfE);
  }
  
  public static <E> List<E> a(@h E paramE, E[] paramArrayOfE)
  {
    return new c(paramE, paramArrayOfE);
  }
  
  public static <E> List<E> a(List<E> paramList, int paramInt1, int paramInt2)
  {
    if ((paramList instanceof RandomAccess)) {
      paramList = new dd(paramList);
    } else {
      paramList = new ed(paramList);
    }
    return paramList.subList(paramInt1, paramInt2);
  }
  
  public static <F, T> List<T> a(List<F> paramList, J<? super F, ? extends T> paramJ)
  {
    if ((paramList instanceof RandomAccess)) {
      return new j(paramList, paramJ);
    }
    return new k(paramList, paramJ);
  }
  
  public static <E> ListIterator<E> a(List<E> paramList, int paramInt)
  {
    return new a(paramList).listIterator(paramInt);
  }
  
  public static <E> boolean a(List<E> paramList, int paramInt, Iterable<? extends E> paramIterable)
  {
    paramList = paramList.listIterator(paramInt);
    paramIterable = paramIterable.iterator();
    for (boolean bool = false; paramIterable.hasNext(); bool = true) {
      paramList.add(paramIterable.next());
    }
    return bool;
  }
  
  public static boolean a(List<?> paramList, @h Object paramObject)
  {
    if (paramList != null)
    {
      if (paramObject == paramList) {
        return true;
      }
      if (!(paramObject instanceof List)) {
        return false;
      }
      paramObject = (List)paramObject;
      return (paramList.size() == paramObject.size()) && (Jc.b(paramList.iterator(), paramObject.iterator()));
    }
    throw new NullPointerException();
  }
  
  public static int b(List<?> paramList, @h Object paramObject)
  {
    paramList = paramList.listIterator();
    while (paramList.hasNext()) {
      if (U.a(paramObject, paramList.next())) {
        return paramList.previousIndex();
      }
    }
    return -1;
  }
  
  @b(serializable=true)
  public static <E> ArrayList<E> b(int paramInt)
  {
    boolean bool;
    if (paramInt >= 0) {
      bool = true;
    } else {
      bool = false;
    }
    ba.a(bool);
    return new ArrayList(paramInt);
  }
  
  @b(serializable=true)
  public static <E> ArrayList<E> b(Iterable<? extends E> paramIterable)
  {
    if (paramIterable != null)
    {
      if ((paramIterable instanceof Collection)) {
        return new ArrayList(V.a(paramIterable));
      }
      return a(paramIterable.iterator());
    }
    throw new NullPointerException();
  }
  
  public static <T> List<T> b(List<T> paramList)
  {
    if ((paramList instanceof h)) {
      return ((h)paramList).a();
    }
    if ((paramList instanceof RandomAccess)) {
      return new g(paramList);
    }
    return new h(paramList);
  }
  
  public static <T> List<List<T>> b(List<T> paramList, int paramInt)
  {
    if (paramList != null)
    {
      boolean bool;
      if (paramInt > 0) {
        bool = true;
      } else {
        bool = false;
      }
      ba.a(bool);
      if ((paramList instanceof RandomAccess)) {
        return new f(paramList, paramInt);
      }
      return new d(paramList, paramInt);
    }
    throw new NullPointerException();
  }
  
  @c("CopyOnWriteArrayList")
  public static <E> CopyOnWriteArrayList<E> b()
  {
    return new CopyOnWriteArrayList();
  }
  
  public static int c(List<?> paramList, @h Object paramObject)
  {
    paramList = paramList.listIterator(paramList.size());
    while (paramList.hasPrevious()) {
      if (U.a(paramObject, paramList.previous())) {
        return paramList.nextIndex();
      }
    }
    return -1;
  }
  
  @b(serializable=true)
  public static <E> ArrayList<E> c(int paramInt)
  {
    return new ArrayList(a(paramInt));
  }
  
  @b(serializable=true)
  public static <E> LinkedList<E> c()
  {
    return new LinkedList();
  }
  
  @c("CopyOnWriteArrayList")
  public static <E> CopyOnWriteArrayList<E> c(Iterable<? extends E> paramIterable)
  {
    if ((paramIterable instanceof Collection)) {
      paramIterable = V.a(paramIterable);
    } else {
      paramIterable = b(paramIterable);
    }
    return new CopyOnWriteArrayList(paramIterable);
  }
  
  @b(serializable=true)
  public static <E> LinkedList<E> d(Iterable<? extends E> paramIterable)
  {
    LinkedList localLinkedList = new LinkedList();
    paramIterable = paramIterable.iterator();
    while (paramIterable.hasNext()) {
      localLinkedList.add(paramIterable.next());
    }
    return localLinkedList;
  }
  
  private static class a<E>
    extends AbstractList<E>
  {
    public final List<E> a;
    
    public a(List<E> paramList)
    {
      if (paramList != null)
      {
        a = paramList;
        return;
      }
      throw new NullPointerException();
    }
    
    public void add(int paramInt, E paramE)
    {
      a.add(paramInt, paramE);
    }
    
    public boolean addAll(int paramInt, Collection<? extends E> paramCollection)
    {
      return a.addAll(paramInt, paramCollection);
    }
    
    public boolean contains(Object paramObject)
    {
      return a.contains(paramObject);
    }
    
    public E get(int paramInt)
    {
      return a.get(paramInt);
    }
    
    public E remove(int paramInt)
    {
      return a.remove(paramInt);
    }
    
    public E set(int paramInt, E paramE)
    {
      return a.set(paramInt, paramE);
    }
    
    public int size()
    {
      return a.size();
    }
  }
  
  private static final class b
    extends AbstractList<Character>
  {
    public final CharSequence a;
    
    public b(CharSequence paramCharSequence)
    {
      a = paramCharSequence;
    }
    
    public boolean contains(@h Object paramObject)
    {
      return indexOf(paramObject) >= 0;
    }
    
    public boolean equals(@h Object paramObject)
    {
      if (!(paramObject instanceof List)) {
        return false;
      }
      paramObject = (List)paramObject;
      int j = a.length();
      if (j != paramObject.size()) {
        return false;
      }
      paramObject = paramObject.iterator();
      int i = 0;
      while (i < j)
      {
        Object localObject = paramObject.next();
        if ((localObject instanceof Character))
        {
          if (((Character)localObject).charValue() != a.charAt(i)) {
            return false;
          }
          i += 1;
        }
        else
        {
          return false;
        }
      }
      return true;
    }
    
    public Character get(int paramInt)
    {
      ba.c(paramInt, size(), "index");
      return Character.valueOf(a.charAt(paramInt));
    }
    
    public int hashCode()
    {
      int j = 1;
      int i = 0;
      while (i < a.length())
      {
        j = j * 31 + a.charAt(i);
        i += 1;
      }
      return j;
    }
    
    public int indexOf(@h Object paramObject)
    {
      if ((paramObject instanceof Character))
      {
        int j = ((Character)paramObject).charValue();
        int i = 0;
        while (i < a.length())
        {
          if (a.charAt(i) == j) {
            return i;
          }
          i += 1;
        }
      }
      return -1;
    }
    
    public int lastIndexOf(@h Object paramObject)
    {
      if ((paramObject instanceof Character))
      {
        int j = ((Character)paramObject).charValue();
        int i = a.length() - 1;
        while (i >= 0)
        {
          if (a.charAt(i) == j) {
            return i;
          }
          i -= 1;
        }
      }
      return -1;
    }
    
    public int size()
    {
      return a.length();
    }
    
    public List<Character> subList(int paramInt1, int paramInt2)
    {
      ba.b(paramInt1, paramInt2, size());
      return fd.a(a.subSequence(paramInt1, paramInt2));
    }
  }
  
  private static class c<E>
    extends AbstractList<E>
    implements Serializable, RandomAccess
  {
    public static final long a = 0L;
    public final E b;
    public final E[] c;
    
    public c(@h E paramE, E[] paramArrayOfE)
    {
      b = paramE;
      if (paramArrayOfE != null)
      {
        c = paramArrayOfE;
        return;
      }
      throw new NullPointerException();
    }
    
    public E get(int paramInt)
    {
      ba.c(paramInt, size(), "index");
      if (paramInt == 0) {
        return b;
      }
      return c[(paramInt - 1)];
    }
    
    public int size()
    {
      return c.length + 1;
    }
  }
  
  private static class d<T>
    extends AbstractList<List<T>>
  {
    public final List<T> a;
    public final int b;
    
    public d(List<T> paramList, int paramInt)
    {
      a = paramList;
      b = paramInt;
    }
    
    public List<T> get(int paramInt)
    {
      ba.c(paramInt, size(), "index");
      int i = b;
      paramInt *= i;
      i = Math.min(i + paramInt, a.size());
      return a.subList(paramInt, i);
    }
    
    public boolean isEmpty()
    {
      return a.isEmpty();
    }
    
    public int size()
    {
      int i = a.size();
      int k = b;
      int j = i / k;
      i = j;
      if (k * j != a.size()) {
        i = j + 1;
      }
      return i;
    }
  }
  
  private static class e<E>
    extends fd.a<E>
    implements RandomAccess
  {
    public e(List<E> paramList)
    {
      super();
    }
  }
  
  private static class f<T>
    extends fd.d<T>
    implements RandomAccess
  {
    public f(List<T> paramList, int paramInt)
    {
      super(paramInt);
    }
  }
  
  private static class g<T>
    extends fd.h<T>
    implements RandomAccess
  {
    public g(List<T> paramList)
    {
      super();
    }
  }
  
  private static class h<T>
    extends AbstractList<T>
  {
    public final List<T> a;
    
    public h(List<T> paramList)
    {
      if (paramList != null)
      {
        a = paramList;
        return;
      }
      throw new NullPointerException();
    }
    
    private int a(int paramInt)
    {
      int i = size();
      ba.c(paramInt, i, "index");
      return i - 1 - paramInt;
    }
    
    private int b(int paramInt)
    {
      int i = size();
      ba.d(paramInt, i, "index");
      return i - paramInt;
    }
    
    public List<T> a()
    {
      return a;
    }
    
    public void add(int paramInt, @h T paramT)
    {
      List localList = a;
      int i = size();
      ba.d(paramInt, i, "index");
      localList.add(i - paramInt, paramT);
    }
    
    public void clear()
    {
      a.clear();
    }
    
    public boolean contains(@h Object paramObject)
    {
      return a.contains(paramObject);
    }
    
    public boolean containsAll(Collection<?> paramCollection)
    {
      return a.containsAll(paramCollection);
    }
    
    public T get(int paramInt)
    {
      List localList = a;
      int i = size();
      ba.c(paramInt, i, "index");
      return localList.get(i - 1 - paramInt);
    }
    
    public int indexOf(@h Object paramObject)
    {
      int i = a.lastIndexOf(paramObject);
      if (i >= 0) {
        return a(i);
      }
      return -1;
    }
    
    public boolean isEmpty()
    {
      return a.isEmpty();
    }
    
    public Iterator<T> iterator()
    {
      return listIterator();
    }
    
    public int lastIndexOf(@h Object paramObject)
    {
      int i = a.indexOf(paramObject);
      if (i >= 0) {
        return a(i);
      }
      return -1;
    }
    
    public ListIterator<T> listIterator(int paramInt)
    {
      int i = size();
      ba.d(paramInt, i, "index");
      return new gd(this, a.listIterator(i - paramInt));
    }
    
    public T remove(int paramInt)
    {
      List localList = a;
      int i = size();
      ba.c(paramInt, i, "index");
      return localList.remove(i - 1 - paramInt);
    }
    
    public void removeRange(int paramInt1, int paramInt2)
    {
      subList(paramInt1, paramInt2).clear();
    }
    
    public T set(int paramInt, @h T paramT)
    {
      List localList = a;
      int i = size();
      ba.c(paramInt, i, "index");
      return localList.set(i - 1 - paramInt, paramT);
    }
    
    public int size()
    {
      return a.size();
    }
    
    public List<T> subList(int paramInt1, int paramInt2)
    {
      ba.b(paramInt1, paramInt2, size());
      List localList = a;
      int i = size();
      ba.d(paramInt2, i, "index");
      int j = size();
      ba.d(paramInt1, j, "index");
      return fd.b(localList.subList(i - paramInt2, j - paramInt1));
    }
  }
  
  private static final class i
    extends vb<Character>
  {
    public final String c;
    public int d = 0;
    
    public i(String paramString)
    {
      c = paramString;
    }
    
    public boolean c()
    {
      return false;
    }
    
    public boolean equals(@h Object paramObject)
    {
      if (!(paramObject instanceof List)) {
        return false;
      }
      paramObject = (List)paramObject;
      int j = c.length();
      if (j != paramObject.size()) {
        return false;
      }
      paramObject = paramObject.iterator();
      int i = 0;
      while (i < j)
      {
        Object localObject = paramObject.next();
        if ((localObject instanceof Character))
        {
          if (((Character)localObject).charValue() != c.charAt(i)) {
            return false;
          }
          i += 1;
        }
        else
        {
          return false;
        }
      }
      return true;
    }
    
    public Character get(int paramInt)
    {
      ba.c(paramInt, size(), "index");
      return Character.valueOf(c.charAt(paramInt));
    }
    
    public int hashCode()
    {
      int j = d;
      int i = j;
      if (j == 0)
      {
        j = 0;
        i = 1;
        while (j < c.length())
        {
          i = i * 31 + c.charAt(j);
          j += 1;
        }
        d = i;
      }
      return i;
    }
    
    public int indexOf(@h Object paramObject)
    {
      if ((paramObject instanceof Character)) {
        return c.indexOf(((Character)paramObject).charValue());
      }
      return -1;
    }
    
    public int lastIndexOf(@h Object paramObject)
    {
      if ((paramObject instanceof Character)) {
        return c.lastIndexOf(((Character)paramObject).charValue());
      }
      return -1;
    }
    
    public int size()
    {
      return c.length();
    }
    
    public vb<Character> subList(int paramInt1, int paramInt2)
    {
      ba.b(paramInt1, paramInt2, size());
      return fd.a(c.substring(paramInt1, paramInt2));
    }
  }
  
  private static class j<F, T>
    extends AbstractList<T>
    implements RandomAccess, Serializable
  {
    public static final long a = 0L;
    public final List<F> b;
    public final J<? super F, ? extends T> c;
    
    public j(List<F> paramList, J<? super F, ? extends T> paramJ)
    {
      if (paramList != null)
      {
        b = paramList;
        if (paramJ != null)
        {
          c = paramJ;
          return;
        }
        throw new NullPointerException();
      }
      throw new NullPointerException();
    }
    
    public void clear()
    {
      b.clear();
    }
    
    public T get(int paramInt)
    {
      return c.apply(b.get(paramInt));
    }
    
    public boolean isEmpty()
    {
      return b.isEmpty();
    }
    
    public T remove(int paramInt)
    {
      return c.apply(b.remove(paramInt));
    }
    
    public int size()
    {
      return b.size();
    }
  }
  
  private static class k<F, T>
    extends AbstractSequentialList<T>
    implements Serializable
  {
    public static final long a = 0L;
    public final List<F> b;
    public final J<? super F, ? extends T> c;
    
    public k(List<F> paramList, J<? super F, ? extends T> paramJ)
    {
      if (paramList != null)
      {
        b = paramList;
        if (paramJ != null)
        {
          c = paramJ;
          return;
        }
        throw new NullPointerException();
      }
      throw new NullPointerException();
    }
    
    public void clear()
    {
      b.clear();
    }
    
    public ListIterator<T> listIterator(int paramInt)
    {
      return new hd(this, b.listIterator(paramInt));
    }
    
    public int size()
    {
      return b.size();
    }
  }
  
  private static class l<E>
    extends AbstractList<E>
    implements Serializable, RandomAccess
  {
    public static final long a = 0L;
    public final E b;
    public final E c;
    public final E[] d;
    
    public l(@h E paramE1, @h E paramE2, E[] paramArrayOfE)
    {
      b = paramE1;
      c = paramE2;
      if (paramArrayOfE != null)
      {
        d = paramArrayOfE;
        return;
      }
      throw new NullPointerException();
    }
    
    public E get(int paramInt)
    {
      if (paramInt != 0)
      {
        if (paramInt != 1)
        {
          ba.c(paramInt, size(), "index");
          return d[(paramInt - 2)];
        }
        return c;
      }
      return b;
    }
    
    public int size()
    {
      return d.length + 2;
    }
  }
}
