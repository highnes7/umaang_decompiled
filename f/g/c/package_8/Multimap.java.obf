package f.g.c.d;

import f.g.c.a.b;
import java.util.Collection;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;
import m.a.h;

@b
public abstract interface ve<K, V>
{
  public abstract Map<K, Collection<V>> a();
  
  public abstract boolean a(ve<? extends K, ? extends V> paramVe);
  
  public abstract boolean a(@h K paramK, Iterable<? extends V> paramIterable);
  
  public abstract Ye<K> b();
  
  public abstract Collection<V> b(@h K paramK, Iterable<? extends V> paramIterable);
  
  public abstract boolean b(@h Object paramObject1, @h Object paramObject2);
  
  public abstract void clear();
  
  public abstract boolean containsKey(@h Object paramObject);
  
  public abstract boolean containsValue(@h Object paramObject);
  
  public abstract Collection<V> d(@h Object paramObject);
  
  public abstract Collection<Map.Entry<K, V>> entries();
  
  public abstract boolean equals(@h Object paramObject);
  
  public abstract Collection<V> get(@h K paramK);
  
  public abstract int hashCode();
  
  public abstract boolean isEmpty();
  
  public abstract Set<K> keySet();
  
  public abstract boolean put(@h K paramK, @h V paramV);
  
  public abstract boolean remove(@h Object paramObject1, @h Object paramObject2);
  
  public abstract int size();
  
  public abstract Collection<V> values();
}
