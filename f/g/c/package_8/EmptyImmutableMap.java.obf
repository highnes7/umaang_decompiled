package f.g.c.d;

import f.g.c.a.b;
import java.util.Map;
import java.util.Map.Entry;
import m.a.h;

@b(emulated=true, serializable=true)
public final class va
  extends Ab<Object, Object>
{
  public static final va d = new va();
  public static final long e = 0L;
  
  public va() {}
  
  public Nb<Map.Entry<Object, Object>> b()
  {
    throw new AssertionError("should never be called");
  }
  
  public boolean containsKey(@h Object paramObject)
  {
    return false;
  }
  
  public boolean containsValue(@h Object paramObject)
  {
    return false;
  }
  
  public boolean e()
  {
    return false;
  }
  
  public Nb<Map.Entry<Object, Object>> entrySet()
  {
    return Nb.g();
  }
  
  public boolean equals(@h Object paramObject)
  {
    if ((paramObject instanceof Map)) {
      return ((Map)paramObject).isEmpty();
    }
    return false;
  }
  
  public Object get(@h Object paramObject)
  {
    return null;
  }
  
  public int hashCode()
  {
    return 0;
  }
  
  public Object i()
  {
    return d;
  }
  
  public boolean isEmpty()
  {
    return true;
  }
  
  public Nb<Object> keySet()
  {
    return Nb.g();
  }
  
  public int size()
  {
    return 0;
  }
  
  public String toString()
  {
    return "{}";
  }
  
  public rb<Object> values()
  {
    return rb.a;
  }
}
