package f.g.c.d;

import f.g.c.a.b;
import f.g.c.a.c;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;

@b(emulated=true, serializable=true)
public final class kb<E>
  extends l<E>
{
  @c("Not needed in emulated source.")
  public static final long f = 0L;
  
  public kb()
  {
    super(new HashMap());
  }
  
  public kb(int paramInt)
  {
    super(fe.b(paramInt));
  }
  
  public static <E> kb<E> a(int paramInt)
  {
    return new kb(paramInt);
  }
  
  public static <E> kb<E> a(Iterable<? extends E> paramIterable)
  {
    kb localKb = new kb(bf.b(paramIterable));
    rc.a(localKb, paramIterable);
    return localKb;
  }
  
  @c("java.io.ObjectInputStream")
  private void a(ObjectInputStream paramObjectInputStream)
    throws IOException, ClassNotFoundException
  {
    paramObjectInputStream.defaultReadObject();
    int i = paramObjectInputStream.readInt();
    a(fe.b(i));
    ag.a(this, paramObjectInputStream, i);
  }
  
  @c("java.io.ObjectOutputStream")
  private void a(ObjectOutputStream paramObjectOutputStream)
    throws IOException
  {
    paramObjectOutputStream.defaultWriteObject();
    ag.a(this, paramObjectOutputStream);
  }
  
  public static <E> kb<E> f()
  {
    return new kb();
  }
  
  public boolean a(Object paramObject, int paramInt1, int paramInt2)
  {
    return bf.a(this, paramObject, paramInt1, paramInt2);
  }
  
  public boolean add(Object paramObject)
  {
    c(paramObject, 1);
    return true;
  }
  
  public boolean addAll(Collection paramCollection)
  {
    return bf.a(this, paramCollection);
  }
  
  public boolean contains(Object paramObject)
  {
    return a(paramObject) > 0;
  }
  
  public boolean equals(Object paramObject)
  {
    return bf.a(this, paramObject);
  }
  
  public Iterator iterator()
  {
    return new l.b(this);
  }
  
  public boolean remove(Object paramObject)
  {
    return b(paramObject, 1) > 0;
  }
  
  public boolean removeAll(Collection paramCollection)
  {
    return bf.b(this, paramCollection);
  }
  
  public boolean retainAll(Collection paramCollection)
  {
    return bf.c(this, paramCollection);
  }
}
