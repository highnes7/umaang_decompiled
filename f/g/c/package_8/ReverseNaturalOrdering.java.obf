package f.g.c.d;

import f.g.c.a.b;
import java.io.Serializable;
import java.util.Iterator;

@b(serializable=true)
public final class Xf
  extends mf<Comparable>
  implements Serializable
{
  public static final Xf c = new Xf();
  public static final long d = 0L;
  
  public Xf() {}
  
  private Object i()
  {
    return c;
  }
  
  public int a(Comparable paramComparable1, Comparable paramComparable2)
  {
    if (paramComparable1 != null)
    {
      if (paramComparable1 == paramComparable2) {
        return 0;
      }
      return paramComparable2.compareTo(paramComparable1);
    }
    throw new NullPointerException();
  }
  
  public <E extends Comparable> E a(E paramE1, E paramE2, E paramE3, E... paramVarArgs)
  {
    return (Comparable)hf.c.b(paramE1, paramE2, paramE3, paramVarArgs);
  }
  
  public <E extends Comparable> E a(Iterator<E> paramIterator)
  {
    return (Comparable)hf.c.b(paramIterator);
  }
  
  public <E extends Comparable> E b(E paramE1, E paramE2)
  {
    return (Comparable)hf.c.b(paramE1, paramE2);
  }
  
  public <E extends Comparable> E b(E paramE1, E paramE2, E paramE3, E... paramVarArgs)
  {
    return (Comparable)hf.c.a(paramE1, paramE2, paramE3, paramVarArgs);
  }
  
  public <E extends Comparable> E b(Iterator<E> paramIterator)
  {
    return (Comparable)hf.c.a(paramIterator);
  }
  
  public <E extends Comparable> E c(E paramE1, E paramE2)
  {
    return (Comparable)hf.c.a(paramE1, paramE2);
  }
  
  public <E extends Comparable> E e(Iterable<E> paramIterable)
  {
    return (Comparable)hf.c.f(paramIterable);
  }
  
  public <E extends Comparable> E f(Iterable<E> paramIterable)
  {
    return (Comparable)hf.c.e(paramIterable);
  }
  
  public <S extends Comparable> mf<S> g()
  {
    return mf.d();
  }
  
  public String toString()
  {
    return "Ordering.natural().reverse()";
  }
}
