package f.g.c.d;

import java.util.Map;
import m.a.h;

@f.g.c.a.b
@m.a.a.b
public final class Ca
  extends Yb<Object, Object, Object>
{
  public static final Ca a = new Ca();
  public static final long b = 0L;
  
  public Ca() {}
  
  public Object c()
  {
    return a;
  }
  
  public Object c(@h Object paramObject1, @h Object paramObject2)
  {
    return null;
  }
  
  public boolean containsValue(@h Object paramObject)
  {
    return false;
  }
  
  public boolean d(@h Object paramObject1, @h Object paramObject2)
  {
    return false;
  }
  
  public Ab<Object, Map<Object, Object>> e()
  {
    return Ab.g();
  }
  
  public boolean e(@h Object paramObject)
  {
    return false;
  }
  
  public boolean equals(@h Object paramObject)
  {
    if (paramObject == this) {
      return true;
    }
    if ((paramObject instanceof Yg)) {
      return ((Yg)paramObject).isEmpty();
    }
    return false;
  }
  
  public Ab<Object, Object> f(Object paramObject)
  {
    if (paramObject != null) {
      return Ab.g();
    }
    throw new NullPointerException();
  }
  
  public Nb<Object> g()
  {
    return Nb.g();
  }
  
  public boolean g(@h Object paramObject)
  {
    return false;
  }
  
  public Ab<Object, Object> h(Object paramObject)
  {
    if (paramObject != null) {
      return Ab.g();
    }
    throw new NullPointerException();
  }
  
  public Nb<Yg.a<Object, Object, Object>> h()
  {
    return Nb.g();
  }
  
  public int hashCode()
  {
    return 0;
  }
  
  public Nb<Object> i()
  {
    return Nb.g();
  }
  
  public boolean isEmpty()
  {
    return true;
  }
  
  public Ab<Object, Map<Object, Object>> j()
  {
    return Ab.g();
  }
  
  public int size()
  {
    return 0;
  }
  
  public String toString()
  {
    return "{}";
  }
  
  public rb<Object> values()
  {
    return Nb.g();
  }
}
