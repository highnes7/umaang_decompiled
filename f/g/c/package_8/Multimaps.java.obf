package f.g.c.d;

import f.g.c.a.b;
import f.g.c.a.c;
import f.g.c.b.J;
import f.g.c.b.Q;
import f.g.c.b.Q.a;
import f.g.c.b.U;
import f.g.c.b.ba;
import f.g.c.b.ca;
import f.g.c.b.ea;
import f.g.c.b.ya;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import java.util.AbstractCollection;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;
import java.util.SortedSet;
import m.a.h;

@b(emulated=true)
public final class Be
{
  public Be() {}
  
  public static <K, V> Eg<K, V> a(Eg<K, V> paramEg)
  {
    return Ug.a(paramEg, null);
  }
  
  @Deprecated
  public static <K, V> bg<K, V> a(Pb<K, V> paramPb)
  {
    if (paramPb != null) {
      return paramPb;
    }
    throw new NullPointerException();
  }
  
  public static <K, V> bg<K, V> a(bg<K, V> paramBg)
  {
    return Ug.a(paramBg, null);
  }
  
  public static <K, V> bg<K, V> a(Map<K, V> paramMap)
  {
    return new j(paramMap);
  }
  
  public static <K, V> cd<K, V> a(cd<K, V> paramCd)
  {
    return Ug.a(paramCd, null);
  }
  
  public static <K, V1, V2> cd<K, V2> a(cd<K, V1> paramCd, J<? super V1, V2> paramJ)
  {
    if (paramJ != null) {
      return new k(paramCd, new ye(paramJ));
    }
    throw new NullPointerException();
  }
  
  public static <K, V1, V2> cd<K, V2> a(cd<K, V1> paramCd, fe.d<? super K, ? super V1, V2> paramD)
  {
    return new k(paramCd, paramD);
  }
  
  @Deprecated
  public static <K, V> cd<K, V> a(xb<K, V> paramXb)
  {
    if (paramXb != null) {
      return paramXb;
    }
    throw new NullPointerException();
  }
  
  public static <K, V> cd<K, V> a(Map<K, Collection<V>> paramMap, ya<? extends List<V>> paramYa)
  {
    return new b(paramMap, paramYa);
  }
  
  public static <K, V> ve<K, V> a(h<K, V> paramH, ca<? super Map.Entry<K, V>> paramCa)
  {
    paramCa = ea.a(c, paramCa);
    return new h(b, paramCa);
  }
  
  @Deprecated
  public static <K, V> ve<K, V> a(Ib<K, V> paramIb)
  {
    if (paramIb != null) {
      return paramIb;
    }
    throw new NullPointerException();
  }
  
  public static <K, V> ve<K, V> a(ve<K, V> paramVe)
  {
    return Ug.a(paramVe, null);
  }
  
  public static <K, V1, V2> ve<K, V2> a(ve<K, V1> paramVe, J<? super V1, V2> paramJ)
  {
    if (paramJ != null) {
      return new l(paramVe, new xe(paramJ));
    }
    throw new NullPointerException();
  }
  
  @c("untested")
  public static <K, V> ve<K, V> a(ve<K, V> paramVe, ca<? super Map.Entry<K, V>> paramCa)
  {
    if (paramCa != null)
    {
      if ((paramVe instanceof h)) {
        return a((h)paramVe, paramCa);
      }
      if (paramVe != null) {
        return new h(paramVe, paramCa);
      }
      throw new NullPointerException();
    }
    throw new NullPointerException();
  }
  
  public static <K, V1, V2> ve<K, V2> a(ve<K, V1> paramVe, fe.d<? super K, ? super V1, V2> paramD)
  {
    return new l(paramVe, paramD);
  }
  
  public static <K, V, M extends ve<K, V>> M a(ve<? extends V, ? extends K> paramVe, M paramM)
  {
    if (paramM != null)
    {
      paramVe = paramVe.entries().iterator();
      while (paramVe.hasNext())
      {
        Map.Entry localEntry = (Map.Entry)paramVe.next();
        paramM.put(localEntry.getValue(), localEntry.getKey());
      }
      return paramM;
    }
    paramVe = new NullPointerException();
    for (;;)
    {
      throw paramVe;
    }
  }
  
  public static <K, V> xb<K, V> a(Iterable<V> paramIterable, J<? super V, K> paramJ)
  {
    return a(paramIterable.iterator(), paramJ);
  }
  
  public static <K, V> xb<K, V> a(Iterator<V> paramIterator, J<? super V, K> paramJ)
  {
    if (paramJ != null)
    {
      xb.a localA = new xb.a();
      while (paramIterator.hasNext())
      {
        Object localObject = paramIterator.next();
        ba.a(localObject, paramIterator);
        localA.a(paramJ.apply(localObject), localObject);
      }
      return localA.a();
    }
    paramIterator = new NullPointerException();
    for (;;)
    {
      throw paramIterator;
    }
  }
  
  public static <K, V> Eg<K, V> b(Eg<K, V> paramEg)
  {
    if ((paramEg instanceof r)) {
      return paramEg;
    }
    return new r(paramEg);
  }
  
  public static <K, V> bg<K, V> b(bg<K, V> paramBg)
  {
    if (!(paramBg instanceof q))
    {
      if ((paramBg instanceof Pb)) {
        return paramBg;
      }
      return new q(paramBg);
    }
    return paramBg;
  }
  
  public static <K, V> cd<K, V> b(cd<K, V> paramCd)
  {
    if (!(paramCd instanceof o))
    {
      if ((paramCd instanceof xb)) {
        return paramCd;
      }
      return new o(paramCd);
    }
    return paramCd;
  }
  
  public static <K, V> ve<K, V> b(ve<K, V> paramVe)
  {
    if (!(paramVe instanceof p))
    {
      if ((paramVe instanceof Ib)) {
        return paramVe;
      }
      return new p(paramVe);
    }
    return paramVe;
  }
  
  @c("untested")
  public static <K, V> ve<K, V> b(ve<K, V> paramVe, ca<? super K> paramCa)
  {
    if (paramCa != null) {
      return a(paramVe, new ze(paramCa));
    }
    throw new NullPointerException();
  }
  
  public static <K, V> ve<K, V> b(Map<K, Collection<V>> paramMap, ya<? extends Collection<V>> paramYa)
  {
    return new c(paramMap, paramYa);
  }
  
  public static <K, V> Map.Entry<K, Collection<V>> b(Map.Entry<K, Collection<V>> paramEntry)
  {
    if (paramEntry != null) {
      return new we(paramEntry);
    }
    throw new NullPointerException();
  }
  
  public static <K, V> Set<Map.Entry<K, Collection<V>>> b(Set<Map.Entry<K, Collection<V>>> paramSet)
  {
    return new m(Collections.unmodifiableSet(paramSet));
  }
  
  public static <K, V> bg<K, V> c(Map<K, Collection<V>> paramMap, ya<? extends Set<V>> paramYa)
  {
    return new d(paramMap, paramYa);
  }
  
  @c("untested")
  public static <K, V> ve<K, V> c(ve<K, V> paramVe, ca<? super V> paramCa)
  {
    if (paramCa != null) {
      return a(paramVe, new Ae(paramCa));
    }
    throw new NullPointerException();
  }
  
  public static <K, V> Collection<Map.Entry<K, V>> c(Collection<Map.Entry<K, V>> paramCollection)
  {
    if ((paramCollection instanceof Set)) {
      return fe.a((Set)paramCollection);
    }
    return new fe.p(Collections.unmodifiableCollection(paramCollection));
  }
  
  public static <K, V> Eg<K, V> d(Map<K, Collection<V>> paramMap, ya<? extends SortedSet<V>> paramYa)
  {
    return new e(paramMap, paramYa);
  }
  
  public static <V> Collection<V> d(Collection<V> paramCollection)
  {
    if ((paramCollection instanceof SortedSet)) {
      return Collections.unmodifiableSortedSet((SortedSet)paramCollection);
    }
    if ((paramCollection instanceof Set)) {
      return Collections.unmodifiableSet((Set)paramCollection);
    }
    if ((paramCollection instanceof List)) {
      return Collections.unmodifiableList((List)paramCollection);
    }
    return Collections.unmodifiableCollection(paramCollection);
  }
  
  public static abstract class a<K, V>
    extends fe.h<K, Collection<V>>
  {
    public a() {}
    
    public Set<Map.Entry<K, Collection<V>>> a()
    {
      return new a();
    }
    
    public void a(Object paramObject)
    {
      c().d(paramObject);
    }
    
    public abstract Iterator<Map.Entry<K, Collection<V>>> b();
    
    public abstract ve<K, V> c();
    
    public void clear()
    {
      c().clear();
    }
    
    public boolean containsKey(Object paramObject)
    {
      return c().containsKey(paramObject);
    }
    
    public Collection<V> get(Object paramObject)
    {
      if (containsKey(paramObject)) {
        return c().get(paramObject);
      }
      return null;
    }
    
    public boolean isEmpty()
    {
      return c().isEmpty();
    }
    
    public Set<K> keySet()
    {
      return c().keySet();
    }
    
    public Collection<V> remove(Object paramObject)
    {
      if (containsKey(paramObject)) {
        return c().d(paramObject);
      }
      return null;
    }
    
    public abstract int size();
    
    public class a
      extends fe.c<K, Collection<V>>
    {
      public a() {}
      
      public Map<K, Collection<V>> c()
      {
        return Be.a.this;
      }
      
      public Iterator<Map.Entry<K, Collection<V>>> iterator()
      {
        return b();
      }
      
      public boolean remove(Object paramObject)
      {
        if (!contains(paramObject)) {
          return false;
        }
        paramObject = (Map.Entry)paramObject;
        a(paramObject.getKey());
        return true;
      }
    }
  }
  
  private static class b<K, V>
    extends i<K, V>
  {
    @c("java serialization not supported")
    public static final long j = 0L;
    public transient ya<? extends List<V>> k;
    
    public b(Map<K, Collection<V>> paramMap, ya<? extends List<V>> paramYa)
    {
      super();
      if (paramYa != null)
      {
        k = paramYa;
        return;
      }
      throw new NullPointerException();
    }
    
    @c("java.io.ObjectInputStream")
    private void a(ObjectInputStream paramObjectInputStream)
      throws IOException, ClassNotFoundException
    {
      paramObjectInputStream.defaultReadObject();
      k = ((ya)paramObjectInputStream.readObject());
      a((Map)paramObjectInputStream.readObject());
    }
    
    @c("java.io.ObjectOutputStream")
    private void a(ObjectOutputStream paramObjectOutputStream)
      throws IOException
    {
      paramObjectOutputStream.defaultWriteObject();
      paramObjectOutputStream.writeObject(k);
      paramObjectOutputStream.writeObject(c());
    }
    
    public List<V> e()
    {
      return (List)k.get();
    }
  }
  
  private static class c<K, V>
    extends r<K, V>
  {
    @c("java serialization not supported")
    public static final long i = 0L;
    public transient ya<? extends Collection<V>> j;
    
    public c(Map<K, Collection<V>> paramMap, ya<? extends Collection<V>> paramYa)
    {
      super();
      if (paramYa != null)
      {
        j = paramYa;
        return;
      }
      throw new NullPointerException();
    }
    
    @c("java.io.ObjectInputStream")
    private void a(ObjectInputStream paramObjectInputStream)
      throws IOException, ClassNotFoundException
    {
      paramObjectInputStream.defaultReadObject();
      j = ((ya)paramObjectInputStream.readObject());
      a((Map)paramObjectInputStream.readObject());
    }
    
    @c("java.io.ObjectOutputStream")
    private void a(ObjectOutputStream paramObjectOutputStream)
      throws IOException
    {
      paramObjectOutputStream.defaultWriteObject();
      paramObjectOutputStream.writeObject(j);
      paramObjectOutputStream.writeObject(c());
    }
    
    public Collection<V> e()
    {
      return (Collection)j.get();
    }
  }
  
  private static class d<K, V>
    extends v<K, V>
  {
    @c("not needed in emulated source")
    public static final long j = 0L;
    public transient ya<? extends Set<V>> k;
    
    public d(Map<K, Collection<V>> paramMap, ya<? extends Set<V>> paramYa)
    {
      super();
      if (paramYa != null)
      {
        k = paramYa;
        return;
      }
      throw new NullPointerException();
    }
    
    @c("java.io.ObjectInputStream")
    private void a(ObjectInputStream paramObjectInputStream)
      throws IOException, ClassNotFoundException
    {
      paramObjectInputStream.defaultReadObject();
      k = ((ya)paramObjectInputStream.readObject());
      a((Map)paramObjectInputStream.readObject());
    }
    
    @c("java.io.ObjectOutputStream")
    private void a(ObjectOutputStream paramObjectOutputStream)
      throws IOException
    {
      paramObjectOutputStream.defaultWriteObject();
      paramObjectOutputStream.writeObject(k);
      paramObjectOutputStream.writeObject(c());
    }
    
    public Set<V> e()
    {
      return (Set)k.get();
    }
  }
  
  private static class e<K, V>
    extends z<K, V>
  {
    @c("not needed in emulated source")
    public static final long k = 0L;
    public transient ya<? extends SortedSet<V>> l;
    public transient Comparator<? super V> m;
    
    public e(Map<K, Collection<V>> paramMap, ya<? extends SortedSet<V>> paramYa)
    {
      super();
      if (paramYa != null)
      {
        l = paramYa;
        m = ((SortedSet)paramYa.get()).comparator();
        return;
      }
      throw new NullPointerException();
    }
    
    @c("java.io.ObjectInputStream")
    private void a(ObjectInputStream paramObjectInputStream)
      throws IOException, ClassNotFoundException
    {
      paramObjectInputStream.defaultReadObject();
      l = ((ya)paramObjectInputStream.readObject());
      m = ((SortedSet)l.get()).comparator();
      a((Map)paramObjectInputStream.readObject());
    }
    
    @c("java.io.ObjectOutputStream")
    private void a(ObjectOutputStream paramObjectOutputStream)
      throws IOException
    {
      paramObjectOutputStream.defaultWriteObject();
      paramObjectOutputStream.writeObject(l);
      paramObjectOutputStream.writeObject(c());
    }
    
    public Comparator<? super V> d()
    {
      return m;
    }
    
    public SortedSet<V> e()
    {
      return (SortedSet)l.get();
    }
  }
  
  public static abstract class f<K, V>
    extends AbstractCollection<Map.Entry<K, V>>
  {
    public f() {}
    
    public abstract ve<K, V> a();
    
    public void clear()
    {
      a().clear();
    }
    
    public boolean contains(@h Object paramObject)
    {
      if ((paramObject instanceof Map.Entry))
      {
        paramObject = (Map.Entry)paramObject;
        return a().b(paramObject.getKey(), paramObject.getValue());
      }
      return false;
    }
    
    public boolean remove(@h Object paramObject)
    {
      if ((paramObject instanceof Map.Entry))
      {
        paramObject = (Map.Entry)paramObject;
        return a().remove(paramObject.getKey(), paramObject.getValue());
      }
      return false;
    }
    
    public int size()
    {
      return a().size();
    }
  }
  
  public static abstract class g<K, V>
    extends Be.f<K, V>
    implements Set<Map.Entry<K, V>>
  {
    public g() {}
    
    public boolean equals(@h Object paramObject)
    {
      return gg.a(this, paramObject);
    }
    
    public int hashCode()
    {
      return gg.a(this);
    }
  }
  
  private static class h<K, V>
    implements ve<K, V>
  {
    public static final ca<Collection<?>> a = new Ce();
    public final ve<K, V> b;
    public final ca<? super Map.Entry<K, V>> c;
    public Collection<V> d;
    public Collection<Map.Entry<K, V>> e;
    public Map<K, Collection<V>> f;
    public t<K> g;
    
    public h(ve<K, V> paramVe, ca<? super Map.Entry<K, V>> paramCa)
    {
      b = paramVe;
      c = paramCa;
    }
    
    public Collection<V> a(Collection<V> paramCollection, ca<V> paramCa)
    {
      if ((paramCollection instanceof Set)) {
        return gg.a((Set)paramCollection, paramCa);
      }
      return V.a(paramCollection, paramCa);
    }
    
    public Map<K, Collection<V>> a()
    {
      Map localMap2 = f;
      Map localMap1 = localMap2;
      if (localMap2 == null)
      {
        localMap1 = c();
        f = localMap1;
      }
      return localMap1;
    }
    
    public boolean a(ca<Map.Entry<K, Collection<V>>> paramCa)
    {
      Iterator localIterator = b.a().entrySet().iterator();
      boolean bool = false;
      while (localIterator.hasNext())
      {
        Object localObject2 = (Map.Entry)localIterator.next();
        Object localObject1 = ((Map.Entry)localObject2).getKey();
        localObject2 = (Collection)((Map.Entry)localObject2).getValue();
        c localC = new c(localObject1);
        Collection localCollection = a((Collection)localObject2, localC);
        if ((paramCa.apply(fe.a(localObject1, localCollection))) && (!localCollection.isEmpty()))
        {
          bool = true;
          if (rc.a((Iterable)localObject2, localC)) {
            localIterator.remove();
          } else {
            localCollection.clear();
          }
        }
      }
      return bool;
    }
    
    public boolean a(ve<? extends K, ? extends V> paramVe)
    {
      Iterator localIterator = paramVe.entries().iterator();
      while (localIterator.hasNext())
      {
        Map.Entry localEntry = (Map.Entry)localIterator.next();
        ba.a(a(localEntry.getKey(), localEntry.getValue()));
      }
      return b.a(paramVe);
    }
    
    public boolean a(K paramK, Iterable<? extends V> paramIterable)
    {
      Iterator localIterator = paramIterable.iterator();
      while (localIterator.hasNext()) {
        ba.a(a(paramK, localIterator.next()));
      }
      return b.a(paramK, paramIterable);
    }
    
    public boolean a(Object paramObject1, Object paramObject2)
    {
      return c.apply(fe.a(paramObject1, paramObject2));
    }
    
    public Ye<K> b()
    {
      t localT = g;
      Object localObject = localT;
      if (localT == null)
      {
        localObject = new b();
        g = ((t)localObject);
      }
      return localObject;
    }
    
    public Collection<V> b(K paramK, Iterable<? extends V> paramIterable)
    {
      Object localObject = paramIterable.iterator();
      while (((Iterator)localObject).hasNext()) {
        ba.a(a(paramK, ((Iterator)localObject).next()));
      }
      localObject = d(paramK);
      b.a(paramK, paramIterable);
      return localObject;
    }
    
    public boolean b(Object paramObject1, Object paramObject2)
    {
      return (b.b(paramObject1, paramObject2)) && (a(paramObject1, paramObject2));
    }
    
    public Map<K, Collection<V>> c()
    {
      De localDe = new De(this);
      return new a(fe.c(fe.a(b.a(), localDe), a));
    }
    
    public void clear()
    {
      entries().clear();
    }
    
    public boolean containsKey(Object paramObject)
    {
      return a().containsKey(paramObject);
    }
    
    public boolean containsValue(Object paramObject)
    {
      return values().contains(paramObject);
    }
    
    public Collection<V> d(Object paramObject)
    {
      ArrayList localArrayList = new ArrayList();
      Object localObject1 = (Collection)b.a().get(paramObject);
      if (localObject1 != null)
      {
        localObject1 = ((Collection)localObject1).iterator();
        while (((Iterator)localObject1).hasNext())
        {
          Object localObject2 = ((Iterator)localObject1).next();
          if (a(paramObject, localObject2))
          {
            localArrayList.add(localObject2);
            ((Iterator)localObject1).remove();
          }
        }
      }
      if ((b instanceof bg)) {
        return Collections.unmodifiableSet(gg.e(localArrayList));
      }
      return Collections.unmodifiableList(localArrayList);
    }
    
    public Collection<Map.Entry<K, V>> entries()
    {
      Collection localCollection2 = e;
      Collection localCollection1 = localCollection2;
      if (localCollection2 == null)
      {
        localCollection1 = V.a(b.entries(), c);
        e = localCollection1;
      }
      return localCollection1;
    }
    
    public boolean equals(@h Object paramObject)
    {
      if (paramObject == this) {
        return true;
      }
      if ((paramObject instanceof ve))
      {
        paramObject = (ve)paramObject;
        return a().equals(paramObject.a());
      }
      return false;
    }
    
    public Collection<V> get(K paramK)
    {
      return a(b.get(paramK), new c(paramK));
    }
    
    public int hashCode()
    {
      return a().hashCode();
    }
    
    public boolean isEmpty()
    {
      return entries().isEmpty();
    }
    
    public Set<K> keySet()
    {
      return a().keySet();
    }
    
    public boolean put(K paramK, V paramV)
    {
      ba.a(a(paramK, paramV));
      return b.put(paramK, paramV);
    }
    
    public boolean remove(Object paramObject1, Object paramObject2)
    {
      if (b(paramObject1, paramObject2)) {
        return b.remove(paramObject1, paramObject2);
      }
      return false;
    }
    
    public int size()
    {
      return entries().size();
    }
    
    public String toString()
    {
      return a().toString();
    }
    
    public Collection<V> values()
    {
      Collection localCollection = d;
      Object localObject = localCollection;
      if (localCollection == null)
      {
        localObject = new d();
        d = ((Collection)localObject);
      }
      return localObject;
    }
    
    public class a
      extends Sa<K, Collection<V>>
    {
      public final Map<K, Collection<V>> a;
      public Set<K> b;
      public Be.h<K, V>.a.c c;
      public Be.h<K, V>.a.a d;
      
      public a()
      {
        Object localObject;
        a = localObject;
      }
      
      public void clear()
      {
        Be.h.this.clear();
      }
      
      public Set<Map.Entry<K, Collection<V>>> entrySet()
      {
        a localA2 = d;
        a localA1 = localA2;
        if (localA2 == null)
        {
          localA1 = new a(super.entrySet());
          d = localA1;
        }
        return localA1;
      }
      
      public Set<K> keySet()
      {
        Set localSet = b;
        Object localObject = localSet;
        if (localSet == null)
        {
          localObject = new b();
          b = ((Set)localObject);
        }
        return localObject;
      }
      
      public Map<K, Collection<V>> q()
      {
        return a;
      }
      
      public Collection<V> remove(Object paramObject)
      {
        Collection localCollection = d(paramObject);
        paramObject = localCollection;
        if (localCollection.isEmpty()) {
          paramObject = null;
        }
        return paramObject;
      }
      
      public Collection<Collection<V>> values()
      {
        c localC2 = c;
        c localC1 = localC2;
        if (localC2 == null)
        {
          localC1 = new c();
          c = localC1;
        }
        return localC1;
      }
      
      public class a
        extends fe.c<K, Collection<V>>
      {
        public Set<Map.Entry<K, Collection<V>>> a;
        
        public a()
        {
          Object localObject;
          a = localObject;
        }
        
        public Map<K, Collection<V>> c()
        {
          return Be.h.a.this;
        }
        
        public Iterator<Map.Entry<K, Collection<V>>> iterator()
        {
          return a.iterator();
        }
        
        public boolean remove(Object paramObject)
        {
          if ((paramObject instanceof Map.Entry))
          {
            paramObject = (Map.Entry)paramObject;
            Collection localCollection = (Collection)a.get(paramObject.getKey());
            if ((localCollection != null) && (localCollection.equals(paramObject.getValue())))
            {
              localCollection.clear();
              return true;
            }
          }
          return false;
        }
        
        public boolean removeAll(Collection<?> paramCollection)
        {
          return gg.a(this, paramCollection);
        }
        
        public boolean retainAll(Collection<?> paramCollection)
        {
          paramCollection = new Ee(this, paramCollection);
          return a(paramCollection);
        }
      }
      
      public class b
        extends fe.i<K, Collection<V>>
      {
        public b() {}
        
        public Map<K, Collection<V>> c()
        {
          return Be.h.a.this;
        }
        
        public boolean remove(Object paramObject)
        {
          paramObject = (Collection)a.get(paramObject);
          if (paramObject == null) {
            return false;
          }
          paramObject.clear();
          return true;
        }
        
        public boolean removeAll(Collection<?> paramCollection)
        {
          return gg.a(this, paramCollection.iterator());
        }
        
        public boolean retainAll(Collection<?> paramCollection)
        {
          paramCollection = new Fe(this, paramCollection);
          return a(paramCollection);
        }
      }
      
      public class c
        extends fe.s<K, Collection<V>>
      {
        public c() {}
        
        public Map<K, Collection<V>> a()
        {
          return Be.h.a.this;
        }
        
        public boolean remove(Object paramObject)
        {
          Iterator localIterator = iterator();
          while (localIterator.hasNext())
          {
            Collection localCollection = (Collection)localIterator.next();
            if (localCollection.equals(paramObject))
            {
              localCollection.clear();
              return true;
            }
          }
          return false;
        }
        
        public boolean removeAll(Collection<?> paramCollection)
        {
          paramCollection = new Ge(this, paramCollection);
          return a(paramCollection);
        }
        
        public boolean retainAll(Collection<?> paramCollection)
        {
          paramCollection = new He(this, paramCollection);
          return a(paramCollection);
        }
      }
    }
    
    public class b
      extends Be.i<K, V>
    {
      public b() {}
      
      public int b(Object paramObject, int paramInt)
      {
        int i = 0;
        boolean bool;
        if (paramInt >= 0) {
          bool = true;
        } else {
          bool = false;
        }
        ba.a(bool);
        Object localObject = (Collection)b.a().get(paramObject);
        if (localObject == null) {
          return 0;
        }
        localObject = ((Collection)localObject).iterator();
        int j = 0;
        while (((Iterator)localObject).hasNext()) {
          if (a(paramObject, ((Iterator)localObject).next()))
          {
            int k = i + 1;
            i = k;
            if (j < paramInt)
            {
              ((Iterator)localObject).remove();
              j += 1;
              i = k;
            }
          }
        }
        return i;
      }
      
      public Set<Ye.a<K>> b()
      {
        return new a();
      }
      
      public ve<K, V> e()
      {
        return Be.h.this;
      }
      
      public class a
        extends Be.i.a
      {
        public a()
        {
          super();
        }
        
        public boolean removeAll(Collection<?> paramCollection)
        {
          return gg.a(this, paramCollection.iterator());
        }
        
        public boolean retainAll(Collection<?> paramCollection)
        {
          paramCollection = new Ie(this, paramCollection);
          return a(paramCollection);
        }
      }
    }
    
    public class c
      implements ca<V>
    {
      public final K a;
      
      public c()
      {
        Object localObject;
        a = localObject;
      }
      
      public boolean apply(V paramV)
      {
        return a(a, paramV);
      }
    }
    
    public class d
      extends Be.s<K, V>
    {
      public d() {}
      
      public ve<K, V> a()
      {
        return Be.h.this;
      }
      
      public boolean contains(@h Object paramObject)
      {
        return Jc.a(iterator(), paramObject);
      }
      
      public boolean remove(Object paramObject)
      {
        Iterator localIterator = b.entries().iterator();
        while (localIterator.hasNext())
        {
          Map.Entry localEntry = (Map.Entry)localIterator.next();
          if ((U.a(paramObject, localEntry.getValue())) && (c.apply(localEntry)))
          {
            localIterator.remove();
            return true;
          }
        }
        return false;
      }
      
      public boolean removeAll(Collection<?> paramCollection)
      {
        Iterator localIterator = b.entries().iterator();
        for (boolean bool = false; localIterator.hasNext(); bool = true)
        {
          label20:
          Map.Entry localEntry = (Map.Entry)localIterator.next();
          if ((!paramCollection.contains(localEntry.getValue())) || (!c.apply(localEntry))) {
            break label20;
          }
          localIterator.remove();
        }
        return bool;
      }
      
      public boolean retainAll(Collection<?> paramCollection)
      {
        Iterator localIterator = b.entries().iterator();
        for (boolean bool = false; localIterator.hasNext(); bool = true)
        {
          label20:
          Map.Entry localEntry = (Map.Entry)localIterator.next();
          if ((paramCollection.contains(localEntry.getValue())) || (!c.apply(localEntry))) {
            break label20;
          }
          localIterator.remove();
        }
        return bool;
      }
    }
  }
  
  public static abstract class i<K, V>
    extends t<K>
  {
    public i() {}
    
    public int a(@h Object paramObject)
    {
      int i = 0;
      try
      {
        if (e().containsKey(paramObject))
        {
          paramObject = (Collection)e().a().get(paramObject);
          if (paramObject == null) {
            return 0;
          }
          i = paramObject.size();
        }
        return i;
      }
      catch (ClassCastException|NullPointerException paramObject) {}
      return 0;
    }
    
    public int b(@h Object paramObject, int paramInt)
    {
      int i = 0;
      boolean bool;
      if (paramInt >= 0) {
        bool = true;
      } else {
        bool = false;
      }
      ba.a(bool);
      if (paramInt == 0) {
        return a(paramObject);
      }
      try
      {
        paramObject = (Collection)e().a().get(paramObject);
        if (paramObject == null) {
          return 0;
        }
        int j = paramObject.size();
        if (paramInt >= j)
        {
          paramObject.clear();
          return j;
        }
        paramObject = paramObject.iterator();
        while (i < paramInt)
        {
          paramObject.next();
          paramObject.remove();
          i += 1;
        }
        return j;
      }
      catch (ClassCastException|NullPointerException paramObject) {}
      return 0;
    }
    
    public Set<Ye.a<K>> b()
    {
      return new a();
    }
    
    public int c()
    {
      return e().a().size();
    }
    
    public void clear()
    {
      e().clear();
    }
    
    public boolean contains(@h Object paramObject)
    {
      return e().containsKey(paramObject);
    }
    
    public Iterator<Ye.a<K>> d()
    {
      return new Ke(this, e().a().entrySet().iterator());
    }
    
    public abstract ve<K, V> e();
    
    public Iterator<K> iterator()
    {
      return fe.a(e().entries().iterator());
    }
    
    public Set<K> u()
    {
      return e().keySet();
    }
    
    public class a
      extends bf.c<K>
    {
      public a() {}
      
      public Ye<K> c()
      {
        return Be.i.this;
      }
      
      public boolean contains(@h Object paramObject)
      {
        boolean bool3 = paramObject instanceof Ye.a;
        boolean bool2 = false;
        boolean bool1 = bool2;
        if (bool3)
        {
          paramObject = (Ye.a)paramObject;
          Collection localCollection = (Collection)e().a().get(paramObject.a());
          bool1 = bool2;
          if (localCollection != null)
          {
            bool1 = bool2;
            if (localCollection.size() == paramObject.getCount()) {
              bool1 = true;
            }
          }
        }
        return bool1;
      }
      
      public boolean isEmpty()
      {
        return e().isEmpty();
      }
      
      public Iterator<Ye.a<K>> iterator()
      {
        return d();
      }
      
      public boolean remove(@h Object paramObject)
      {
        if ((paramObject instanceof Ye.a))
        {
          paramObject = (Ye.a)paramObject;
          Collection localCollection = (Collection)e().a().get(paramObject.a());
          if ((localCollection != null) && (localCollection.size() == paramObject.getCount()))
          {
            localCollection.clear();
            return true;
          }
        }
        return false;
      }
      
      public int size()
      {
        return c();
      }
    }
  }
  
  private static class j<K, V>
    implements bg<K, V>, Serializable
  {
    public static final Q.a a = new Q("], ").c("=[").a("null");
    public static final long b = 7845222491160860175L;
    public final Map<K, V> c;
    public transient Map<K, Collection<V>> d;
    
    public j(Map<K, V> paramMap)
    {
      if (paramMap != null)
      {
        c = paramMap;
        return;
      }
      throw new NullPointerException();
    }
    
    public Map<K, Collection<V>> a()
    {
      Map localMap = d;
      Object localObject = localMap;
      if (localMap == null)
      {
        localObject = new a();
        d = ((Map)localObject);
      }
      return localObject;
    }
    
    public boolean a(ve<? extends K, ? extends V> paramVe)
    {
      throw new UnsupportedOperationException();
    }
    
    public boolean a(K paramK, Iterable<? extends V> paramIterable)
    {
      throw new UnsupportedOperationException();
    }
    
    public Ye<K> b()
    {
      return bf.a(c.keySet());
    }
    
    public Set<V> b(K paramK, Iterable<? extends V> paramIterable)
    {
      throw new UnsupportedOperationException();
    }
    
    public boolean b(Object paramObject1, Object paramObject2)
    {
      return c.entrySet().contains(fe.a(paramObject1, paramObject2));
    }
    
    public void clear()
    {
      c.clear();
    }
    
    public boolean containsKey(Object paramObject)
    {
      return c.containsKey(paramObject);
    }
    
    public boolean containsValue(Object paramObject)
    {
      return c.containsValue(paramObject);
    }
    
    public Set<V> d(Object paramObject)
    {
      HashSet localHashSet = new HashSet(2);
      if (!c.containsKey(paramObject)) {
        return localHashSet;
      }
      localHashSet.add(c.remove(paramObject));
      return localHashSet;
    }
    
    public Set<Map.Entry<K, V>> entries()
    {
      return c.entrySet();
    }
    
    public boolean equals(@h Object paramObject)
    {
      if (paramObject == this) {
        return true;
      }
      if ((paramObject instanceof ve))
      {
        paramObject = (ve)paramObject;
        return (size() == paramObject.size()) && (a().equals(paramObject.a()));
      }
      return false;
    }
    
    public Set<V> get(K paramK)
    {
      return new Me(this, paramK);
    }
    
    public int hashCode()
    {
      return c.hashCode();
    }
    
    public boolean isEmpty()
    {
      return c.isEmpty();
    }
    
    public Set<K> keySet()
    {
      return c.keySet();
    }
    
    public boolean put(K paramK, V paramV)
    {
      throw new UnsupportedOperationException();
    }
    
    public boolean remove(Object paramObject1, Object paramObject2)
    {
      return c.entrySet().remove(fe.a(paramObject1, paramObject2));
    }
    
    public int size()
    {
      return c.size();
    }
    
    public String toString()
    {
      if (c.isEmpty()) {
        return "{}";
      }
      StringBuilder localStringBuilder = V.a(c.size());
      localStringBuilder.append('{');
      a.a(localStringBuilder, c);
      localStringBuilder.append("]}");
      return localStringBuilder.toString();
    }
    
    public Collection<V> values()
    {
      return c.values();
    }
    
    public class a
      extends fe.h<K, Collection<V>>
    {
      public a() {}
      
      public Set<Map.Entry<K, Collection<V>>> a()
      {
        return new Be.j.b(Be.j.this);
      }
      
      public boolean containsKey(Object paramObject)
      {
        return c.containsKey(paramObject);
      }
      
      public Collection<V> get(Object paramObject)
      {
        Set localSet = get(paramObject);
        paramObject = localSet;
        if (localSet.isEmpty()) {
          paramObject = null;
        }
        return paramObject;
      }
      
      public Collection<V> remove(Object paramObject)
      {
        Set localSet = d(paramObject);
        paramObject = localSet;
        if (localSet.isEmpty()) {
          paramObject = null;
        }
        return paramObject;
      }
    }
    
    public class b
      extends gg.d<Map.Entry<K, Collection<V>>>
    {
      public b() {}
      
      public boolean contains(Object paramObject)
      {
        boolean bool1 = paramObject instanceof Map.Entry;
        boolean bool2 = false;
        if (!bool1) {
          return false;
        }
        paramObject = (Map.Entry)paramObject;
        if (!(paramObject.getValue() instanceof Set)) {
          return false;
        }
        Set localSet = (Set)paramObject.getValue();
        bool1 = bool2;
        if (localSet.size() == 1)
        {
          bool1 = bool2;
          if (b(paramObject.getKey(), localSet.iterator().next())) {
            bool1 = true;
          }
        }
        return bool1;
      }
      
      public Iterator<Map.Entry<K, Collection<V>>> iterator()
      {
        return new Oe(this, c.keySet().iterator());
      }
      
      public boolean remove(Object paramObject)
      {
        boolean bool1 = paramObject instanceof Map.Entry;
        boolean bool2 = false;
        if (!bool1) {
          return false;
        }
        paramObject = (Map.Entry)paramObject;
        if (!(paramObject.getValue() instanceof Set)) {
          return false;
        }
        Set localSet = (Set)paramObject.getValue();
        bool1 = bool2;
        if (localSet.size() == 1)
        {
          bool1 = bool2;
          if (c.entrySet().remove(fe.a(paramObject.getKey(), localSet.iterator().next()))) {
            bool1 = true;
          }
        }
        return bool1;
      }
      
      public int size()
      {
        return c.size();
      }
    }
  }
  
  private static final class k<K, V1, V2>
    extends Be.l<K, V1, V2>
    implements cd<K, V2>
  {
    public k(cd<K, V1> paramCd, fe.d<? super K, ? super V1, V2> paramD)
    {
      super(paramD);
    }
    
    public List<V2> a(K paramK, Collection<V1> paramCollection)
    {
      return fd.a((List)paramCollection, new Pe(this, paramK));
    }
    
    public List<V2> b(K paramK, Iterable<? extends V2> paramIterable)
    {
      throw new UnsupportedOperationException();
    }
    
    public List<V2> d(Object paramObject)
    {
      return a(paramObject, a.d(paramObject));
    }
    
    public List<V2> get(K paramK)
    {
      return a(paramK, a.get(paramK));
    }
  }
  
  private static class l<K, V1, V2>
    implements ve<K, V2>
  {
    public final ve<K, V1> a;
    public final fe.d<? super K, ? super V1, V2> b;
    public transient Map<K, Collection<V2>> c;
    public transient Collection<Map.Entry<K, V2>> d;
    public transient Collection<V2> e;
    
    public l(ve<K, V1> paramVe, fe.d<? super K, ? super V1, V2> paramD)
    {
      if (paramVe != null)
      {
        a = paramVe;
        if (paramD != null)
        {
          b = paramD;
          return;
        }
        throw new NullPointerException();
      }
      throw new NullPointerException();
    }
    
    public Collection<V2> a(K paramK, Collection<V1> paramCollection)
    {
      return V.a(paramCollection, new Qe(this, paramK));
    }
    
    public Map<K, Collection<V2>> a()
    {
      Map localMap2 = c;
      Map localMap1 = localMap2;
      if (localMap2 == null)
      {
        localMap1 = fe.a(a.a(), new Re(this));
        c = localMap1;
      }
      return localMap1;
    }
    
    public boolean a(ve<? extends K, ? extends V2> paramVe)
    {
      throw new UnsupportedOperationException();
    }
    
    public boolean a(K paramK, Iterable<? extends V2> paramIterable)
    {
      throw new UnsupportedOperationException();
    }
    
    public Ye<K> b()
    {
      return a.b();
    }
    
    public Collection<V2> b(K paramK, Iterable<? extends V2> paramIterable)
    {
      throw new UnsupportedOperationException();
    }
    
    public boolean b(Object paramObject1, Object paramObject2)
    {
      return get(paramObject1).contains(paramObject2);
    }
    
    public void clear()
    {
      a.clear();
    }
    
    public boolean containsKey(Object paramObject)
    {
      return a.containsKey(paramObject);
    }
    
    public boolean containsValue(Object paramObject)
    {
      return values().contains(paramObject);
    }
    
    public Collection<V2> d(Object paramObject)
    {
      return a(paramObject, a.d(paramObject));
    }
    
    public Collection<Map.Entry<K, V2>> entries()
    {
      Collection localCollection = d;
      Object localObject = localCollection;
      if (localCollection == null)
      {
        localObject = new a(b);
        d = ((Collection)localObject);
      }
      return localObject;
    }
    
    public boolean equals(Object paramObject)
    {
      if ((paramObject instanceof ve))
      {
        paramObject = (ve)paramObject;
        return a().equals(paramObject.a());
      }
      return false;
    }
    
    public Collection<V2> get(K paramK)
    {
      return a(paramK, a.get(paramK));
    }
    
    public int hashCode()
    {
      return a().hashCode();
    }
    
    public boolean isEmpty()
    {
      return a.isEmpty();
    }
    
    public Set<K> keySet()
    {
      return a.keySet();
    }
    
    public boolean put(K paramK, V2 paramV2)
    {
      throw new UnsupportedOperationException();
    }
    
    public boolean remove(Object paramObject1, Object paramObject2)
    {
      return get(paramObject1).remove(paramObject2);
    }
    
    public int size()
    {
      return a.size();
    }
    
    public String toString()
    {
      return a().toString();
    }
    
    public Collection<V2> values()
    {
      Collection localCollection2 = e;
      Collection localCollection1 = localCollection2;
      if (localCollection2 == null)
      {
        localCollection1 = V.a(a.entries(), new Se(this));
        e = localCollection1;
      }
      return localCollection1;
    }
    
    private class a
      extends V.f<Map.Entry<K, V1>, Map.Entry<K, V2>>
    {
      public a()
      {
        super(new Ue(Be.l.this, localD));
      }
      
      public boolean contains(Object paramObject)
      {
        if ((paramObject instanceof Map.Entry))
        {
          paramObject = (Map.Entry)paramObject;
          return b(paramObject.getKey(), paramObject.getValue());
        }
        return false;
      }
      
      public boolean remove(Object paramObject)
      {
        if ((paramObject instanceof Map.Entry))
        {
          paramObject = (Map.Entry)paramObject;
          return get(paramObject.getKey()).remove(paramObject.getValue());
        }
        return false;
      }
    }
  }
  
  public static class m<K, V>
    extends Ya<Map.Entry<K, Collection<V>>>
  {
    public final Set<Map.Entry<K, Collection<V>>> a;
    
    public m(Set<Map.Entry<K, Collection<V>>> paramSet)
    {
      a = paramSet;
    }
    
    public boolean contains(Object paramObject)
    {
      return fe.a(q(), paramObject);
    }
    
    public boolean containsAll(Collection<?> paramCollection)
    {
      return b(paramCollection);
    }
    
    public boolean equals(@h Object paramObject)
    {
      return m(paramObject);
    }
    
    public Iterator<Map.Entry<K, Collection<V>>> iterator()
    {
      return new Ve(this, a.iterator());
    }
    
    public Set<Map.Entry<K, Collection<V>>> q()
    {
      return a;
    }
    
    public Object[] toArray()
    {
      return t();
    }
    
    public <T> T[] toArray(T[] paramArrayOfT)
    {
      return a(paramArrayOfT);
    }
  }
  
  private static class n<V>
    extends Ja<Collection<V>>
  {
    public final Collection<Collection<V>> a;
    
    public n(Collection<Collection<V>> paramCollection)
    {
      a = Collections.unmodifiableCollection(paramCollection);
    }
    
    public boolean contains(Object paramObject)
    {
      return k(paramObject);
    }
    
    public boolean containsAll(Collection<?> paramCollection)
    {
      return b(paramCollection);
    }
    
    public Iterator<Collection<V>> iterator()
    {
      return new We(this, a.iterator());
    }
    
    public Collection<Collection<V>> q()
    {
      return a;
    }
    
    public Object[] toArray()
    {
      return t();
    }
    
    public <T> T[] toArray(T[] paramArrayOfT)
    {
      return a(paramArrayOfT);
    }
  }
  
  private static class o<K, V>
    extends Be.p<K, V>
    implements cd<K, V>
  {
    public static final long h = 0L;
    
    public o(cd<K, V> paramCd)
    {
      super();
    }
    
    public List<V> b(K paramK, Iterable<? extends V> paramIterable)
    {
      throw new UnsupportedOperationException();
    }
    
    public List<V> d(Object paramObject)
    {
      throw new UnsupportedOperationException();
    }
    
    public List<V> get(K paramK)
    {
      return Collections.unmodifiableList(q().get(paramK));
    }
    
    public cd<K, V> q()
    {
      return (cd)b;
    }
  }
  
  private static class p<K, V>
    extends Ua<K, V>
    implements Serializable
  {
    public static final long a = 0L;
    public final ve<K, V> b;
    public transient Collection<Map.Entry<K, V>> c;
    public transient Ye<K> d;
    public transient Set<K> e;
    public transient Collection<V> f;
    public transient Map<K, Collection<V>> g;
    
    public p(ve<K, V> paramVe)
    {
      if (paramVe != null)
      {
        b = paramVe;
        return;
      }
      throw new NullPointerException();
    }
    
    public Map<K, Collection<V>> a()
    {
      Map localMap = g;
      Object localObject = localMap;
      if (localMap == null)
      {
        localObject = new Xe(this, Collections.unmodifiableMap(b.a()));
        g = ((Map)localObject);
      }
      return localObject;
    }
    
    public boolean a(ve<? extends K, ? extends V> paramVe)
    {
      throw new UnsupportedOperationException();
    }
    
    public boolean a(K paramK, Iterable<? extends V> paramIterable)
    {
      throw new UnsupportedOperationException();
    }
    
    public Ye<K> b()
    {
      Ye localYe2 = d;
      Ye localYe1 = localYe2;
      if (localYe2 == null)
      {
        localYe1 = bf.d(b.b());
        d = localYe1;
      }
      return localYe1;
    }
    
    public Collection<V> b(K paramK, Iterable<? extends V> paramIterable)
    {
      throw new UnsupportedOperationException();
    }
    
    public void clear()
    {
      throw new UnsupportedOperationException();
    }
    
    public Collection<V> d(Object paramObject)
    {
      throw new UnsupportedOperationException();
    }
    
    public Collection<Map.Entry<K, V>> entries()
    {
      Collection localCollection2 = c;
      Collection localCollection1 = localCollection2;
      if (localCollection2 == null)
      {
        localCollection1 = Be.c(b.entries());
        c = localCollection1;
      }
      return localCollection1;
    }
    
    public Collection<V> get(K paramK)
    {
      return Be.d(b.get(paramK));
    }
    
    public Set<K> keySet()
    {
      Set localSet2 = e;
      Set localSet1 = localSet2;
      if (localSet2 == null)
      {
        localSet1 = Collections.unmodifiableSet(b.keySet());
        e = localSet1;
      }
      return localSet1;
    }
    
    public boolean put(K paramK, V paramV)
    {
      throw new UnsupportedOperationException();
    }
    
    public ve<K, V> q()
    {
      return b;
    }
    
    public boolean remove(Object paramObject1, Object paramObject2)
    {
      throw new UnsupportedOperationException();
    }
    
    public Collection<V> values()
    {
      Collection localCollection2 = f;
      Collection localCollection1 = localCollection2;
      if (localCollection2 == null)
      {
        localCollection1 = Collections.unmodifiableCollection(b.values());
        f = localCollection1;
      }
      return localCollection1;
    }
  }
  
  private static class q<K, V>
    extends Be.p<K, V>
    implements bg<K, V>
  {
    public static final long h = 0L;
    
    public q(bg<K, V> paramBg)
    {
      super();
    }
    
    public Set<V> b(K paramK, Iterable<? extends V> paramIterable)
    {
      throw new UnsupportedOperationException();
    }
    
    public Set<V> d(Object paramObject)
    {
      throw new UnsupportedOperationException();
    }
    
    public Set<Map.Entry<K, V>> entries()
    {
      return fe.a(q().entries());
    }
    
    public Set<V> get(K paramK)
    {
      return Collections.unmodifiableSet(q().get(paramK));
    }
    
    public bg<K, V> q()
    {
      return (bg)b;
    }
  }
  
  private static class r<K, V>
    extends Be.q<K, V>
    implements Eg<K, V>
  {
    public static final long i = 0L;
    
    public r(Eg<K, V> paramEg)
    {
      super();
    }
    
    public SortedSet<V> b(K paramK, Iterable<? extends V> paramIterable)
    {
      throw new UnsupportedOperationException();
    }
    
    public Comparator<? super V> d()
    {
      return q().d();
    }
    
    public SortedSet<V> d(Object paramObject)
    {
      throw new UnsupportedOperationException();
    }
    
    public SortedSet<V> get(K paramK)
    {
      return Collections.unmodifiableSortedSet(q().get(paramK));
    }
    
    public Eg<K, V> q()
    {
      return (Eg)b;
    }
  }
  
  public static abstract class s<K, V>
    extends AbstractCollection<V>
  {
    public s() {}
    
    public abstract ve<K, V> a();
    
    public void clear()
    {
      a().clear();
    }
    
    public boolean contains(@h Object paramObject)
    {
      return a().containsValue(paramObject);
    }
    
    public Iterator<V> iterator()
    {
      return fe.b(a().entries().iterator());
    }
    
    public int size()
    {
      return a().size();
    }
  }
}
