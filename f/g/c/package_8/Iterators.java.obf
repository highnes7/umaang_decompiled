package f.g.c.d;

import f.g.c.a.b;
import f.g.c.a.c;
import f.g.c.b.J;
import f.g.c.b.Q;
import f.g.c.b.U;
import f.g.c.b.X;
import f.g.c.b.ba;
import f.g.c.b.ca;
import f.g.c.b.ea;
import java.util.Arrays;
import java.util.Collection;
import java.util.Comparator;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.List;
import java.util.ListIterator;
import java.util.PriorityQueue;
import java.util.Queue;
import m.a.h;

@b(emulated=true)
public final class Jc
{
  public static final uh<Object> a = new zc();
  public static final Iterator<Object> b = new Ac();
  
  public Jc() {}
  
  public static int a(Iterator<?> paramIterator, int paramInt)
  {
    if (paramIterator != null)
    {
      int i = 0;
      boolean bool;
      if (paramInt >= 0) {
        bool = true;
      } else {
        bool = false;
      }
      ba.a(bool, "number to advance cannot be negative");
      while ((i < paramInt) && (paramIterator.hasNext()))
      {
        paramIterator.next();
        i += 1;
      }
      return i;
    }
    paramIterator = new NullPointerException();
    for (;;)
    {
      throw paramIterator;
    }
  }
  
  @Deprecated
  public static <T> nf<T> a(nf<T> paramNf)
  {
    if (paramNf != null) {
      return paramNf;
    }
    throw new NullPointerException();
  }
  
  public static <T> th<T> a()
  {
    return a;
  }
  
  @Deprecated
  public static <T> th<T> a(th<T> paramTh)
  {
    if (paramTh != null) {
      return paramTh;
    }
    throw new NullPointerException();
  }
  
  @f.g.c.a.a
  public static <T> th<T> a(Iterable<? extends Iterator<? extends T>> paramIterable, Comparator<? super T> paramComparator)
  {
    ba.a(paramIterable, "iterators");
    ba.a(paramComparator, "comparator");
    return new a(paramIterable, paramComparator);
  }
  
  public static <T> th<T> a(@h T paramT)
  {
    return new wc(paramT);
  }
  
  public static <T> th<T> a(Enumeration<T> paramEnumeration)
  {
    if (paramEnumeration != null) {
      return new xc(paramEnumeration);
    }
    throw new NullPointerException();
  }
  
  public static <T> th<List<T>> a(Iterator<T> paramIterator, int paramInt, boolean paramBoolean)
  {
    if (paramIterator != null)
    {
      boolean bool;
      if (paramInt > 0) {
        bool = true;
      } else {
        bool = false;
      }
      ba.a(bool);
      return new Fc(paramIterator, paramInt, paramBoolean);
    }
    throw new NullPointerException();
  }
  
  @c("Class.isInstance")
  public static <T> th<T> a(Iterator<?> paramIterator, Class<T> paramClass)
  {
    paramClass = ea.b(paramClass);
    if (paramIterator != null) {
      return new Gc(paramIterator, paramClass);
    }
    throw new NullPointerException();
  }
  
  public static <T> uh<T> a(ListIterator<T> paramListIterator)
  {
    if (paramListIterator != null)
    {
      if ((paramListIterator instanceof uh)) {
        return (uh)paramListIterator;
      }
      return new Cc(paramListIterator);
    }
    throw new NullPointerException();
  }
  
  public static <T> uh<T> a(T[] paramArrayOfT, int paramInt1, int paramInt2, int paramInt3)
  {
    boolean bool;
    if (paramInt2 >= 0) {
      bool = true;
    } else {
      bool = false;
    }
    ba.a(bool);
    ba.b(paramInt1, paramInt1 + paramInt2, paramArrayOfT.length);
    return new vc(paramInt2, paramInt3, paramArrayOfT, paramInt1);
  }
  
  public static <T> T a(Iterator<? extends T> paramIterator, int paramInt, @h T paramT)
  {
    a(paramInt);
    try
    {
      paramIterator = b(paramIterator, paramInt);
      return paramIterator;
    }
    catch (IndexOutOfBoundsException paramIterator) {}
    return paramT;
  }
  
  public static <T> T a(Iterator<? extends T> paramIterator, ca<? super T> paramCa, @h T paramT)
  {
    if (paramIterator != null)
    {
      if (paramCa != null)
      {
        paramIterator = new Gc(paramIterator, paramCa);
        if (paramIterator.hasNext()) {
          paramT = paramIterator.next();
        }
        return paramT;
      }
      throw new NullPointerException();
    }
    throw new NullPointerException();
  }
  
  public static <T> Enumeration<T> a(Iterator<T> paramIterator)
  {
    if (paramIterator != null) {
      return new yc(paramIterator);
    }
    throw new NullPointerException();
  }
  
  public static <T> Iterator<T> a(Iterable<T> paramIterable)
  {
    if (paramIterable != null) {
      return new Dc(paramIterable);
    }
    throw new NullPointerException();
  }
  
  public static <F, T> Iterator<T> a(Iterator<F> paramIterator, J<? super F, ? extends T> paramJ)
  {
    if (paramJ != null) {
      return new Hc(paramIterator, paramJ);
    }
    throw new NullPointerException();
  }
  
  public static <T> Iterator<T> a(Iterator<? extends T> paramIterator1, Iterator<? extends T> paramIterator2)
  {
    if (paramIterator1 != null)
    {
      if (paramIterator2 != null) {
        return d(Arrays.asList(new Iterator[] { paramIterator1, paramIterator2 }).iterator());
      }
      throw new NullPointerException();
    }
    throw new NullPointerException();
  }
  
  public static <T> Iterator<T> a(Iterator<? extends T> paramIterator1, Iterator<? extends T> paramIterator2, Iterator<? extends T> paramIterator3)
  {
    if (paramIterator1 != null)
    {
      if (paramIterator2 != null)
      {
        if (paramIterator3 != null) {
          return d(Arrays.asList(new Iterator[] { paramIterator1, paramIterator2, paramIterator3 }).iterator());
        }
        throw new NullPointerException();
      }
      throw new NullPointerException();
    }
    throw new NullPointerException();
  }
  
  public static <T> Iterator<T> a(Iterator<? extends T> paramIterator1, Iterator<? extends T> paramIterator2, Iterator<? extends T> paramIterator3, Iterator<? extends T> paramIterator4)
  {
    if (paramIterator1 != null)
    {
      if (paramIterator2 != null)
      {
        if (paramIterator3 != null)
        {
          if (paramIterator4 != null) {
            return d(Arrays.asList(new Iterator[] { paramIterator1, paramIterator2, paramIterator3, paramIterator4 }).iterator());
          }
          throw new NullPointerException();
        }
        throw new NullPointerException();
      }
      throw new NullPointerException();
    }
    throw new NullPointerException();
  }
  
  public static <T> Iterator<T> a(T... paramVarArgs)
  {
    return new Dc(fd.a(paramVarArgs));
  }
  
  public static <T> Iterator<T> a(Iterator<? extends T>... paramVarArgs)
  {
    return d(vb.c(paramVarArgs).iterator());
  }
  
  public static void a(int paramInt)
  {
    if (paramInt >= 0) {
      return;
    }
    throw new IndexOutOfBoundsException(f.a.a.a.a.a("position (", paramInt, ") must not be negative"));
  }
  
  public static void a(boolean paramBoolean)
  {
    ba.b(paramBoolean, "no calls to next() since the last call to remove()");
  }
  
  public static <T> boolean a(Collection<T> paramCollection, Iterator<? extends T> paramIterator)
  {
    if (paramCollection != null)
    {
      boolean bool = false;
      while (paramIterator.hasNext()) {
        bool |= paramCollection.add(paramIterator.next());
      }
      return bool;
    }
    paramCollection = new NullPointerException();
    for (;;)
    {
      throw paramCollection;
    }
  }
  
  public static <T> boolean a(Iterator<T> paramIterator, ca<? super T> paramCa)
  {
    if (paramCa != null)
    {
      while (paramIterator.hasNext()) {
        if (!paramCa.apply(paramIterator.next())) {
          return false;
        }
      }
      return true;
    }
    paramIterator = new NullPointerException();
    for (;;)
    {
      throw paramIterator;
    }
  }
  
  public static boolean a(Iterator<?> paramIterator, @h Object paramObject)
  {
    if (paramObject == null)
    {
      do
      {
        if (!paramIterator.hasNext()) {
          break;
        }
      } while (paramIterator.next() != null);
      return true;
    }
    while (paramIterator.hasNext()) {
      if (paramObject.equals(paramIterator.next())) {
        return true;
      }
    }
    return false;
  }
  
  public static boolean a(Iterator<?> paramIterator, Collection<?> paramCollection)
  {
    if (paramCollection != null)
    {
      boolean bool = false;
      while (paramIterator.hasNext()) {
        if (paramCollection.contains(paramIterator.next()))
        {
          paramIterator.remove();
          bool = true;
        }
      }
      return bool;
    }
    paramIterator = new NullPointerException();
    for (;;)
    {
      throw paramIterator;
    }
  }
  
  public static int b(Iterator<?> paramIterator, @h Object paramObject)
  {
    int i = 0;
    int j = 0;
    if (paramObject == null)
    {
      i = j;
      for (;;)
      {
        j = i;
        if (!paramIterator.hasNext()) {
          break;
        }
        if (paramIterator.next() == null) {
          i += 1;
        }
      }
    }
    for (;;)
    {
      j = i;
      if (!paramIterator.hasNext()) {
        break;
      }
      if (paramObject.equals(paramIterator.next())) {
        i += 1;
      }
    }
    return j;
  }
  
  public static <T> th<T> b(T... paramVarArgs)
  {
    if (paramVarArgs != null) {
      return new uc(paramVarArgs.length, paramVarArgs);
    }
    throw new NullPointerException();
  }
  
  public static <T> uh<T> b()
  {
    return a;
  }
  
  public static <T> T b(Iterator<T> paramIterator, int paramInt)
  {
    a(paramInt);
    int i = 0;
    while (paramIterator.hasNext())
    {
      Object localObject = paramIterator.next();
      if (i == paramInt) {
        return localObject;
      }
      i += 1;
    }
    paramIterator = new StringBuilder();
    paramIterator.append("position (");
    paramIterator.append(paramInt);
    paramIterator.append(") must be less than the number of elements that remained (");
    paramIterator.append(i);
    paramIterator.append(")");
    paramIterator = new IndexOutOfBoundsException(paramIterator.toString());
    for (;;)
    {
      throw paramIterator;
    }
  }
  
  public static <T> ListIterator<T> b(Iterator<T> paramIterator)
  {
    return (ListIterator)paramIterator;
  }
  
  public static <T> boolean b(Iterator<T> paramIterator, ca<? super T> paramCa)
  {
    if (paramCa != null)
    {
      while (paramIterator.hasNext()) {
        if (paramCa.apply(paramIterator.next())) {
          return true;
        }
      }
      return false;
    }
    paramIterator = new NullPointerException();
    for (;;)
    {
      throw paramIterator;
    }
  }
  
  public static boolean b(Iterator<?> paramIterator, Collection<?> paramCollection)
  {
    if (paramCollection != null)
    {
      boolean bool = false;
      while (paramIterator.hasNext()) {
        if (!paramCollection.contains(paramIterator.next()))
        {
          paramIterator.remove();
          bool = true;
        }
      }
      return bool;
    }
    paramIterator = new NullPointerException();
    for (;;)
    {
      throw paramIterator;
    }
  }
  
  public static boolean b(Iterator<?> paramIterator1, Iterator<?> paramIterator2)
  {
    while (paramIterator1.hasNext())
    {
      if (!paramIterator2.hasNext()) {
        return false;
      }
      if (!U.a(paramIterator1.next(), paramIterator2.next())) {
        return false;
      }
    }
    return paramIterator2.hasNext() ^ true;
  }
  
  @c("Array.newInstance(Class, int)")
  public static <T> T[] b(Iterator<? extends T> paramIterator, Class<T> paramClass)
  {
    return rc.b(fd.a(paramIterator), paramClass);
  }
  
  public static <T> th<T> c(Iterator<T> paramIterator, ca<? super T> paramCa)
  {
    if (paramIterator != null)
    {
      if (paramCa != null) {
        return new Gc(paramIterator, paramCa);
      }
      throw new NullPointerException();
    }
    throw new NullPointerException();
  }
  
  public static <T> T c(Iterator<? extends T> paramIterator, @h T paramT)
  {
    if (paramIterator.hasNext()) {
      do
      {
        paramT = paramIterator.next();
      } while (paramIterator.hasNext());
    }
    return paramT;
  }
  
  public static <T> Iterator<T> c()
  {
    return b;
  }
  
  public static <T> Iterator<T> c(Iterator<T> paramIterator, int paramInt)
  {
    if (paramIterator != null)
    {
      boolean bool;
      if (paramInt >= 0) {
        bool = true;
      } else {
        bool = false;
      }
      ba.a(bool, "limit is negative");
      return new sc(paramInt, paramIterator);
    }
    throw new NullPointerException();
  }
  
  public static void c(Iterator<?> paramIterator)
  {
    if (paramIterator != null)
    {
      while (paramIterator.hasNext())
      {
        paramIterator.next();
        paramIterator.remove();
      }
      return;
    }
    paramIterator = new NullPointerException();
    for (;;)
    {
      throw paramIterator;
    }
  }
  
  public static <T> th<List<T>> d(Iterator<T> paramIterator, int paramInt)
  {
    return a(paramIterator, paramInt, true);
  }
  
  public static <T> T d(Iterator<T> paramIterator, ca<? super T> paramCa)
  {
    if (paramIterator != null)
    {
      if (paramCa != null) {
        return new Gc(paramIterator, paramCa).next();
      }
      throw new NullPointerException();
    }
    throw new NullPointerException();
  }
  
  public static <T> T d(Iterator<? extends T> paramIterator, @h T paramT)
  {
    if (paramIterator.hasNext()) {
      paramT = paramIterator.next();
    }
    return paramT;
  }
  
  public static <T> Iterator<T> d(Iterator<? extends Iterator<? extends T>> paramIterator)
  {
    if (paramIterator != null) {
      return new Ec(paramIterator);
    }
    throw new NullPointerException();
  }
  
  public static <T> int e(Iterator<T> paramIterator, ca<? super T> paramCa)
  {
    ba.a(paramCa, "predicate");
    int i = 0;
    while (paramIterator.hasNext())
    {
      if (paramCa.apply(paramIterator.next())) {
        return i;
      }
      i += 1;
    }
    return -1;
  }
  
  public static <T> th<List<T>> e(Iterator<T> paramIterator, int paramInt)
  {
    return a(paramIterator, paramInt, false);
  }
  
  public static <T> T e(Iterator<? extends T> paramIterator, @h T paramT)
  {
    if (paramIterator.hasNext()) {
      paramT = g(paramIterator);
    }
    return paramT;
  }
  
  public static <T> Iterator<T> e(Iterator<T> paramIterator)
  {
    if (paramIterator != null) {
      return new tc(paramIterator);
    }
    throw new NullPointerException();
  }
  
  @Deprecated
  @f.g.c.a.a
  public static int f(Iterator<?> paramIterator, int paramInt)
  {
    return a(paramIterator, paramInt);
  }
  
  public static <T> T f(Iterator<T> paramIterator)
  {
    Object localObject;
    do
    {
      localObject = paramIterator.next();
    } while (paramIterator.hasNext());
    return localObject;
  }
  
  public static <T> boolean f(Iterator<T> paramIterator, ca<? super T> paramCa)
  {
    if (paramCa != null)
    {
      boolean bool = false;
      while (paramIterator.hasNext()) {
        if (paramCa.apply(paramIterator.next()))
        {
          paramIterator.remove();
          bool = true;
        }
      }
      return bool;
    }
    paramIterator = new NullPointerException();
    for (;;)
    {
      throw paramIterator;
    }
  }
  
  public static <T> X<T> g(Iterator<T> paramIterator, ca<? super T> paramCa)
  {
    if (paramIterator != null)
    {
      if (paramCa != null)
      {
        paramIterator = new Gc(paramIterator, paramCa);
        if (paramIterator.hasNext()) {
          return X.b(paramIterator.next());
        }
        return f.g.c.b.a.b;
      }
      throw new NullPointerException();
    }
    throw new NullPointerException();
  }
  
  public static <T> T g(Iterator<T> paramIterator)
  {
    Object localObject = paramIterator.next();
    if (!paramIterator.hasNext()) {
      return localObject;
    }
    StringBuilder localStringBuilder1 = new StringBuilder();
    StringBuilder localStringBuilder2 = new StringBuilder();
    localStringBuilder2.append("expected one element but was: <");
    localStringBuilder2.append(localObject);
    localStringBuilder1.append(localStringBuilder2.toString());
    int i = 0;
    while ((i < 4) && (paramIterator.hasNext()))
    {
      localObject = f.a.a.a.a.b(", ");
      ((StringBuilder)localObject).append(paramIterator.next());
      localStringBuilder1.append(((StringBuilder)localObject).toString());
      i += 1;
    }
    if (paramIterator.hasNext()) {
      localStringBuilder1.append(", ...");
    }
    localStringBuilder1.append('>');
    paramIterator = new IllegalArgumentException(localStringBuilder1.toString());
    for (;;)
    {
      throw paramIterator;
    }
  }
  
  public static <T> nf<T> h(Iterator<? extends T> paramIterator)
  {
    if ((paramIterator instanceof b)) {
      return (b)paramIterator;
    }
    return new b(paramIterator);
  }
  
  public static int i(Iterator<?> paramIterator)
  {
    int i = 0;
    while (paramIterator.hasNext())
    {
      paramIterator.next();
      i += 1;
    }
    return i;
  }
  
  public static String j(Iterator<?> paramIterator)
  {
    Q localQ = new Q(", ").b("null");
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append('[');
    paramIterator = localQ.a(localStringBuilder, paramIterator);
    paramIterator.append(']');
    return paramIterator.toString();
  }
  
  public static <T> th<T> k(Iterator<T> paramIterator)
  {
    if (paramIterator != null)
    {
      if ((paramIterator instanceof th)) {
        return (th)paramIterator;
      }
      return new Bc(paramIterator);
    }
    throw new NullPointerException();
  }
  
  private static class a<T>
    extends g<T>
  {
    public final Queue<nf<T>> c;
    public final Comparator<? super T> d;
    
    public a(Iterable<? extends Iterator<? extends T>> paramIterable, Comparator<? super T> paramComparator)
    {
      d = paramComparator;
      c = new PriorityQueue(2, new Ic(this));
      paramIterable = paramIterable.iterator();
      while (paramIterable.hasNext())
      {
        paramComparator = (Iterator)paramIterable.next();
        if (paramComparator.hasNext()) {
          c.add(Jc.h(paramComparator));
        }
      }
    }
    
    public T a()
    {
      if (c.isEmpty()) {
        return b();
      }
      nf localNf = (nf)c.poll();
      Object localObject = localNf.next();
      if (localNf.hasNext()) {
        c.add(localNf);
      }
      return localObject;
    }
  }
  
  private static class b<E>
    implements nf<E>
  {
    public final Iterator<? extends E> a;
    public boolean b;
    public E c;
    
    public b(Iterator<? extends E> paramIterator)
    {
      if (paramIterator != null)
      {
        a = paramIterator;
        return;
      }
      throw new NullPointerException();
    }
    
    public boolean hasNext()
    {
      return (b) || (a.hasNext());
    }
    
    public E next()
    {
      if (!b) {
        return a.next();
      }
      Object localObject = c;
      b = false;
      c = null;
      return localObject;
    }
    
    public E peek()
    {
      if (!b)
      {
        c = a.next();
        b = true;
      }
      return c;
    }
    
    public void remove()
    {
      ba.b(b ^ true, "Can't remove after you've peeked at next");
      a.remove();
    }
  }
}
