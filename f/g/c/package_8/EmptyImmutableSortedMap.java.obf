package f.g.c.d;

import java.util.Comparator;
import java.util.Map;
import java.util.Map.Entry;
import m.a.h;

public final class za<K, V>
  extends Sb<K, V>
{
  public final transient Wb<K> h;
  
  public za(Comparator<? super K> paramComparator)
  {
    h = Wb.a(paramComparator);
  }
  
  public za(Comparator<? super K> paramComparator, Sb<K, V> paramSb)
  {
    super(paramSb);
    h = Wb.a(paramComparator);
  }
  
  public Nb<Map.Entry<K, V>> b()
  {
    throw new AssertionError("should never be called");
  }
  
  public boolean e()
  {
    return false;
  }
  
  public Nb<Map.Entry<K, V>> entrySet()
  {
    return Nb.g();
  }
  
  public boolean equals(@h Object paramObject)
  {
    if ((paramObject instanceof Map)) {
      return ((Map)paramObject).isEmpty();
    }
    return false;
  }
  
  public V get(@h Object paramObject)
  {
    return null;
  }
  
  public int hashCode()
  {
    return 0;
  }
  
  public Sb<K, V> headMap(K paramK, boolean paramBoolean)
  {
    if (paramK != null) {
      return this;
    }
    throw new NullPointerException();
  }
  
  public Sb<K, V> i()
  {
    return new za(mf.b(comparator()).g(), this);
  }
  
  public boolean isEmpty()
  {
    return true;
  }
  
  public Wb<K> keySet()
  {
    return h;
  }
  
  public int size()
  {
    return 0;
  }
  
  public Sb<K, V> tailMap(K paramK, boolean paramBoolean)
  {
    if (paramK != null) {
      return this;
    }
    throw new NullPointerException();
  }
  
  public String toString()
  {
    return "{}";
  }
  
  public rb<V> values()
  {
    return vb.f();
  }
}
