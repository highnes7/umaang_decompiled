package f.g.c.d;

import f.g.c.j.j;
import java.util.HashMap;
import java.util.Map;

public final class gf<B>
  extends nd.g<Class<? extends B>, B>
  implements Q<B>
{
  public static final id<Class<?>, Object> d = new ff();
  public static final long e = 0L;
  
  public gf(Map<Class<? extends B>, B> paramMap)
  {
    super(paramMap, d);
  }
  
  public static <B> gf<B> b(Map<Class<? extends B>, B> paramMap)
  {
    return new gf(paramMap);
  }
  
  public static <B, T extends B> T c(Class<T> paramClass, B paramB)
  {
    return j.c(paramClass).cast(paramB);
  }
  
  public static <B> gf<B> x()
  {
    return new gf(new HashMap());
  }
  
  public <T extends B> T a(Class<T> paramClass)
  {
    return c(paramClass, get(paramClass));
  }
  
  public <T extends B> T a(Class<T> paramClass, T paramT)
  {
    return c(paramClass, put(paramClass, paramT));
  }
  
  public void putAll(Map paramMap)
  {
    a.putAll(nd.b(paramMap, b));
  }
}
