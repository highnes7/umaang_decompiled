package f.g.c.d;

import f.g.c.a.b;
import java.util.Collection;
import java.util.List;
import java.util.Map;
import m.a.h;

@b
public abstract class i<K, V>
  extends r<K, V>
  implements cd<K, V>
{
  public static final long i = 6588350623831699109L;
  
  public i(Map<K, Collection<V>> paramMap)
  {
    super(paramMap);
  }
  
  public Map<K, Collection<V>> a()
  {
    return super.a();
  }
  
  public List<V> b(@h K paramK, Iterable<? extends V> paramIterable)
  {
    return (List)super.b(paramK, paramIterable);
  }
  
  public List<V> d(@h Object paramObject)
  {
    return (List)super.d(paramObject);
  }
  
  public abstract List<V> e();
  
  public boolean equals(@h Object paramObject)
  {
    return super.equals(paramObject);
  }
  
  public List<V> get(@h K paramK)
  {
    return (List)super.get(paramK);
  }
  
  public boolean put(@h K paramK, @h V paramV)
  {
    return super.put(paramK, paramV);
  }
}
