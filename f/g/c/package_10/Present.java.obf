package f.g.c.b;

import f.a.a.a.a;
import f.g.c.a.b;
import java.util.Collections;
import java.util.Set;
import m.a.h;

@b
public final class ja<T>
  extends X<T>
{
  public static final long b = 0L;
  public final T c;
  
  public ja(T paramT)
  {
    c = paramT;
  }
  
  public <V> X<V> a(J<? super T, V> paramJ)
  {
    paramJ = paramJ.apply(c);
    ba.a(paramJ, "Transformation function cannot return null.");
    return new ja(paramJ);
  }
  
  public X<T> a(X<? extends T> paramX)
  {
    if (paramX != null) {
      return this;
    }
    throw new NullPointerException();
  }
  
  public T a(ya<? extends T> paramYa)
  {
    if (paramYa != null) {
      return c;
    }
    throw new NullPointerException();
  }
  
  public Set<T> b()
  {
    return Collections.singleton(c);
  }
  
  public T c()
  {
    return c;
  }
  
  public T c(T paramT)
  {
    ba.a(paramT, "use orNull() instead of or(null)");
    return c;
  }
  
  public boolean d()
  {
    return true;
  }
  
  public T e()
  {
    return c;
  }
  
  public boolean equals(@h Object paramObject)
  {
    if ((paramObject instanceof ja))
    {
      paramObject = (ja)paramObject;
      return c.equals(c);
    }
    return false;
  }
  
  public int hashCode()
  {
    return c.hashCode() + 1502476572;
  }
  
  public String toString()
  {
    return a.a(a.b("Optional.of("), c, ")");
  }
}
