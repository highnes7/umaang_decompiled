package f.g.c.b;

import f.g.c.a.b;
import java.util.Collections;
import java.util.Set;
import m.a.h;

@b
public final class a
  extends X<Object>
{
  public static final a b = new a();
  public static final long c = 0L;
  
  public a() {}
  
  private Object f()
  {
    return b;
  }
  
  public <V> X<V> a(J<Object, V> paramJ)
  {
    if (paramJ != null) {
      return b;
    }
    throw new NullPointerException();
  }
  
  public X<Object> a(X<?> paramX)
  {
    if (paramX != null) {
      return paramX;
    }
    throw new NullPointerException();
  }
  
  public Object a(ya<?> paramYa)
  {
    paramYa = paramYa.get();
    ba.a(paramYa, "use orNull() instead of a Supplier that returns null");
    return paramYa;
  }
  
  public Set<Object> b()
  {
    return Collections.emptySet();
  }
  
  public Object c()
  {
    throw new IllegalStateException("value is absent");
  }
  
  public Object c(Object paramObject)
  {
    ba.a(paramObject, "use orNull() instead of or(null)");
    return paramObject;
  }
  
  public boolean d()
  {
    return false;
  }
  
  @h
  public Object e()
  {
    return null;
  }
  
  public boolean equals(@h Object paramObject)
  {
    return paramObject == this;
  }
  
  public int hashCode()
  {
    return 1502476572;
  }
  
  public String toString()
  {
    return "Optional.absent()";
  }
}
