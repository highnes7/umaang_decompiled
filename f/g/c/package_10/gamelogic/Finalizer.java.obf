package f.g.c.b.a;

import java.lang.ref.PhantomReference;
import java.lang.ref.Reference;
import java.lang.ref.ReferenceQueue;
import java.lang.ref.WeakReference;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.util.logging.Level;
import java.util.logging.Logger;

public class b
  implements Runnable
{
  public static final Logger a = Logger.getLogger(b.class.getName());
  public static final String b = "com.google.common.base.FinalizableReference";
  public static final Field c = a();
  public final WeakReference<Class<?>> d;
  public final PhantomReference<Object> e;
  public final ReferenceQueue<Object> f = new ReferenceQueue();
  
  public b(Class<?> paramClass, Object paramObject)
  {
    d = new WeakReference(paramClass);
    e = new PhantomReference(paramObject, f);
  }
  
  public static ReferenceQueue<Object> a(Class<?> paramClass, Object paramObject)
  {
    if (paramClass.getName().equals("com.google.common.base.FinalizableReference"))
    {
      paramClass = new b(paramClass, paramObject);
      paramObject = new Thread(paramClass);
      paramObject.setName(b.class.getName());
      paramObject.setDaemon(true);
      try
      {
        if (c != null) {
          c.set(paramObject, null);
        }
      }
      catch (Throwable localThrowable)
      {
        a.log(Level.INFO, "Failed to clear thread local values inherited by reference finalizer thread.", localThrowable);
      }
      paramObject.start();
      return f;
    }
    throw new IllegalArgumentException("Expected com.google.common.base.FinalizableReference.");
  }
  
  public static Field a()
  {
    try
    {
      Field localField = Thread.class.getDeclaredField("inheritableThreadLocals");
      localField.setAccessible(true);
      return localField;
    }
    catch (Throwable localThrowable)
    {
      for (;;) {}
    }
    a.log(Level.INFO, "Couldn't access Thread.inheritableThreadLocals. Reference finalizer threads will inherit thread local values.");
    return null;
  }
  
  private void a(Reference<?> paramReference)
    throws b.a
  {
    Method localMethod = b();
    Reference localReference;
    do
    {
      paramReference.clear();
      if (paramReference == e) {
        break;
      }
      try
      {
        localMethod.invoke(paramReference, new Object[0]);
      }
      catch (Throwable paramReference)
      {
        a.log(Level.SEVERE, "Error cleaning up after reference.", paramReference);
      }
      localReference = f.poll();
      paramReference = localReference;
    } while (localReference != null);
    return;
    paramReference = new a(null);
    for (;;)
    {
      throw paramReference;
    }
  }
  
  private Method b()
    throws b.a
  {
    Object localObject = (Class)d.get();
    if (localObject != null) {
      try
      {
        localObject = ((Class)localObject).getMethod("finalizeReferent", new Class[0]);
        return localObject;
      }
      catch (NoSuchMethodException localNoSuchMethodException)
      {
        throw new AssertionError(localNoSuchMethodException);
      }
    }
    throw new a(null);
  }
  
  public void run()
  {
    try
    {
      for (;;)
      {
        a(f.remove());
      }
    }
    catch (InterruptedException localInterruptedException)
    {
      for (;;) {}
    }
    catch (a localA) {}
  }
  
  private static class a
    extends Exception
  {
    public a() {}
  }
}
