package f.g.c.b;

import f.a.a.a.a;
import f.g.c.a.b;
import f.g.c.a.d;
import m.a.h;

@b
public final class xa
{
  public xa() {}
  
  public static String a(CharSequence paramCharSequence1, CharSequence paramCharSequence2)
  {
    if (paramCharSequence1 != null)
    {
      if (paramCharSequence2 != null)
      {
        int j = Math.min(paramCharSequence1.length(), paramCharSequence2.length());
        int i = 0;
        while ((i < j) && (paramCharSequence1.charAt(i) == paramCharSequence2.charAt(i))) {
          i += 1;
        }
        int k = i - 1;
        if (!a(paramCharSequence1, k))
        {
          j = i;
          if (!a(paramCharSequence2, k)) {}
        }
        else
        {
          j = i - 1;
        }
        return paramCharSequence1.subSequence(0, j).toString();
      }
      throw new NullPointerException();
    }
    paramCharSequence1 = new NullPointerException();
    for (;;)
    {
      throw paramCharSequence1;
    }
  }
  
  @h
  public static String a(@h String paramString)
  {
    String str = paramString;
    if (b(paramString)) {
      str = null;
    }
    return str;
  }
  
  public static String a(String paramString, int paramInt)
  {
    if (paramString != null)
    {
      if (paramInt <= 1)
      {
        boolean bool;
        if (paramInt >= 0) {
          bool = true;
        } else {
          bool = false;
        }
        ba.a(bool, "invalid count: %s", new Object[] { Integer.valueOf(paramInt) });
        if (paramInt == 0) {
          paramString = "";
        }
        return paramString;
      }
      int i = paramString.length();
      long l = i * paramInt;
      int j = (int)l;
      if (j == l)
      {
        char[] arrayOfChar = new char[j];
        paramString.getChars(0, i, arrayOfChar, 0);
        paramInt = i;
        for (;;)
        {
          i = j - paramInt;
          if (paramInt >= i) {
            break;
          }
          System.arraycopy(arrayOfChar, 0, arrayOfChar, paramInt, paramInt);
          paramInt <<= 1;
        }
        System.arraycopy(arrayOfChar, 0, arrayOfChar, paramInt, i);
        return new String(arrayOfChar);
      }
      paramString = a.b("Required array size too large: ");
      paramString.append(String.valueOf(l));
      throw new ArrayIndexOutOfBoundsException(paramString.toString());
    }
    paramString = new NullPointerException();
    for (;;)
    {
      throw paramString;
    }
  }
  
  public static String a(String paramString, int paramInt, char paramChar)
  {
    if (paramString != null)
    {
      if (paramString.length() >= paramInt) {
        return paramString;
      }
      StringBuilder localStringBuilder = new StringBuilder(paramInt);
      localStringBuilder.append(paramString);
      int i = paramString.length();
      while (i < paramInt)
      {
        localStringBuilder.append(paramChar);
        i += 1;
      }
      return localStringBuilder.toString();
    }
    paramString = new NullPointerException();
    for (;;)
    {
      throw paramString;
    }
  }
  
  @d
  public static boolean a(CharSequence paramCharSequence, int paramInt)
  {
    return (paramInt >= 0) && (paramInt <= paramCharSequence.length() - 2) && (Character.isHighSurrogate(paramCharSequence.charAt(paramInt))) && (Character.isLowSurrogate(paramCharSequence.charAt(paramInt + 1)));
  }
  
  public static String b(CharSequence paramCharSequence1, CharSequence paramCharSequence2)
  {
    if (paramCharSequence1 != null)
    {
      if (paramCharSequence2 != null)
      {
        int j = Math.min(paramCharSequence1.length(), paramCharSequence2.length());
        int i = 0;
        while ((i < j) && (paramCharSequence1.charAt(paramCharSequence1.length() - i - 1) == paramCharSequence2.charAt(paramCharSequence2.length() - i - 1))) {
          i += 1;
        }
        if (!a(paramCharSequence1, paramCharSequence1.length() - i - 1))
        {
          j = i;
          if (!a(paramCharSequence2, paramCharSequence2.length() - i - 1)) {}
        }
        else
        {
          j = i - 1;
        }
        return paramCharSequence1.subSequence(paramCharSequence1.length() - j, paramCharSequence1.length()).toString();
      }
      throw new NullPointerException();
    }
    paramCharSequence1 = new NullPointerException();
    for (;;)
    {
      throw paramCharSequence1;
    }
  }
  
  public static String b(String paramString, int paramInt, char paramChar)
  {
    if (paramString != null)
    {
      if (paramString.length() >= paramInt) {
        return paramString;
      }
      StringBuilder localStringBuilder = new StringBuilder(paramInt);
      int i = paramString.length();
      while (i < paramInt)
      {
        localStringBuilder.append(paramChar);
        i += 1;
      }
      localStringBuilder.append(paramString);
      return localStringBuilder.toString();
    }
    paramString = new NullPointerException();
    for (;;)
    {
      throw paramString;
    }
  }
  
  public static boolean b(@h String paramString)
  {
    return (paramString == null) || (paramString.length() == 0);
  }
  
  public static String c(@h String paramString)
  {
    String str = paramString;
    if (paramString == null) {
      str = "";
    }
    return str;
  }
}
