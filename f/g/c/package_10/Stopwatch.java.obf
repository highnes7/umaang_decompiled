package f.g.c.b;

import f.g.c.a.b;
import f.g.c.a.c;
import java.util.concurrent.TimeUnit;

@f.g.c.a.a
@b(emulated=true)
public final class wa
{
  public final Ca a;
  public boolean b;
  public long c;
  public long d;
  
  public wa()
  {
    this(Ca.a);
  }
  
  public wa(Ca paramCa)
  {
    if (paramCa != null)
    {
      a = paramCa;
      return;
    }
    throw new NullPointerException();
  }
  
  public static String a(TimeUnit paramTimeUnit)
  {
    int i = va.a[paramTimeUnit.ordinal()];
    if (i != 1)
    {
      if (i != 2)
      {
        if (i != 3)
        {
          if (i == 4) {
            return "s";
          }
          throw new AssertionError();
        }
        return "ms";
      }
      return "?s";
    }
    return "ns";
  }
  
  public static TimeUnit a(long paramLong)
  {
    if (TimeUnit.SECONDS.convert(paramLong, TimeUnit.NANOSECONDS) > 0L) {
      return TimeUnit.SECONDS;
    }
    if (TimeUnit.MILLISECONDS.convert(paramLong, TimeUnit.NANOSECONDS) > 0L) {
      return TimeUnit.MILLISECONDS;
    }
    if (TimeUnit.MICROSECONDS.convert(paramLong, TimeUnit.NANOSECONDS) > 0L) {
      return TimeUnit.MICROSECONDS;
    }
    return TimeUnit.NANOSECONDS;
  }
  
  private long f()
  {
    if (b) {
      return a.a() - d + c;
    }
    return c;
  }
  
  public long a()
  {
    return b(TimeUnit.MILLISECONDS);
  }
  
  @Deprecated
  @c("String.format()")
  public String a(int paramInt)
  {
    long l = f();
    TimeUnit localTimeUnit = a(l);
    double d1 = l;
    double d2 = TimeUnit.NANOSECONDS.convert(1L, localTimeUnit);
    Double.isNaN(d1);
    Double.isNaN(d2);
    d1 /= d2;
    return String.format(f.a.a.a.a.a("%.", paramInt, "g %s"), new Object[] { Double.valueOf(d1), a(localTimeUnit) });
  }
  
  public long b(TimeUnit paramTimeUnit)
  {
    return paramTimeUnit.convert(f(), TimeUnit.NANOSECONDS);
  }
  
  public boolean b()
  {
    return b;
  }
  
  public wa c()
  {
    c = 0L;
    b = false;
    return this;
  }
  
  public wa d()
  {
    ba.b(b ^ true);
    b = true;
    d = a.a();
    return this;
  }
  
  public wa e()
  {
    long l1 = a.a();
    ba.b(b);
    b = false;
    long l2 = c;
    c = (l1 - d + l2);
    return this;
  }
  
  @c("String.format()")
  public String toString()
  {
    return a(4);
  }
}
