package f.g.c.b;

import f.g.c.a.b;
import f.g.c.a.c;
import java.io.Serializable;
import java.lang.reflect.Field;
import m.a.h;

@f.g.c.a.a
@b(emulated=true)
public final class A
{
  public A() {}
  
  public static <T extends Enum<T>> J<String, T> a(Class<T> paramClass)
  {
    return new a(paramClass, null);
  }
  
  public static <T extends Enum<T>> X<T> a(Class<T> paramClass, String paramString)
  {
    if ((paramClass == null) || (paramString != null)) {}
    try
    {
      paramClass = X.b(Enum.valueOf(paramClass, paramString));
      return paramClass;
    }
    catch (IllegalArgumentException paramClass)
    {
      for (;;) {}
    }
    return a.b;
    throw new NullPointerException();
    throw new NullPointerException();
  }
  
  @c("reflection")
  public static Field a(Enum<?> paramEnum)
  {
    Class localClass = paramEnum.getDeclaringClass();
    try
    {
      paramEnum = localClass.getDeclaredField(paramEnum.name());
      return paramEnum;
    }
    catch (NoSuchFieldException paramEnum)
    {
      throw new AssertionError(paramEnum);
    }
  }
  
  private static final class a<T extends Enum<T>>
    implements J<String, T>, Serializable
  {
    public static final long a = 0L;
    public final Class<T> b;
    
    public a(Class<T> paramClass)
    {
      if (paramClass != null)
      {
        b = paramClass;
        return;
      }
      throw new NullPointerException();
    }
    
    public T a(String paramString)
    {
      try
      {
        paramString = Enum.valueOf(b, paramString);
        return paramString;
      }
      catch (IllegalArgumentException paramString)
      {
        for (;;) {}
      }
      return null;
    }
    
    public boolean equals(@h Object paramObject)
    {
      return ((paramObject instanceof a)) && (b.equals(b));
    }
    
    public int hashCode()
    {
      return b.hashCode();
    }
    
    public String toString()
    {
      return f.a.a.a.a.a(f.a.a.a.a.b("Enums.valueOf("), b, ")");
    }
  }
}
