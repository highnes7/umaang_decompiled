package f.g.c.b;

import f.g.c.a.a;
import f.g.c.a.b;
import java.io.IOException;
import java.util.Arrays;
import java.util.Iterator;
import java.util.Map;
import java.util.Map.Entry;
import m.a.c;
import m.a.h;

@b
public class Q
{
  public final String a;
  
  public Q(Q paramQ)
  {
    a = a;
  }
  
  public Q(String paramString)
  {
    if (paramString != null)
    {
      a = paramString;
      return;
    }
    throw new NullPointerException();
  }
  
  public static Q a(char paramChar)
  {
    return new Q(String.valueOf(paramChar));
  }
  
  public static Q a(String paramString)
  {
    return new Q(paramString);
  }
  
  public static Iterable<Object> a(Object paramObject1, Object paramObject2, Object[] paramArrayOfObject)
  {
    if (paramArrayOfObject != null) {
      return new P(paramArrayOfObject, paramObject1, paramObject2);
    }
    throw new NullPointerException();
  }
  
  @c
  public Q a()
  {
    return new O(this, this);
  }
  
  public <A extends Appendable> A a(A paramA, Iterable<?> paramIterable)
    throws IOException
  {
    return a(paramA, paramIterable.iterator());
  }
  
  @Deprecated
  @a
  public final <A extends Appendable, I,  extends Iterable<?>,  extends Iterator<?>> A a(A paramA, I paramI)
    throws IOException
  {
    return a(paramA, (Iterator)paramI);
  }
  
  public final <A extends Appendable> A a(A paramA, @h Object paramObject1, @h Object paramObject2, Object... paramVarArgs)
    throws IOException
  {
    if (paramVarArgs != null) {
      return a(paramA, new P(paramVarArgs, paramObject1, paramObject2));
    }
    throw new NullPointerException();
  }
  
  public <A extends Appendable> A a(A paramA, Iterator<?> paramIterator)
    throws IOException
  {
    if (paramA != null)
    {
      if (paramIterator.hasNext())
      {
        paramA.append(b(paramIterator.next()));
        while (paramIterator.hasNext())
        {
          paramA.append(a);
          paramA.append(b(paramIterator.next()));
        }
      }
      return paramA;
    }
    paramA = new NullPointerException();
    for (;;)
    {
      throw paramA;
    }
  }
  
  public final <A extends Appendable> A a(A paramA, Object[] paramArrayOfObject)
    throws IOException
  {
    return a(paramA, Arrays.asList(paramArrayOfObject));
  }
  
  public final String a(Iterable<?> paramIterable)
  {
    return a(paramIterable.iterator());
  }
  
  @Deprecated
  @a
  public final <I,  extends Iterable<?>,  extends Iterator<?>> String a(I paramI)
  {
    return a((Iterator)paramI);
  }
  
  public final String a(Iterator<?> paramIterator)
  {
    return a(new StringBuilder(), paramIterator).toString();
  }
  
  public final String a(Object[] paramArrayOfObject)
  {
    return a(Arrays.asList(paramArrayOfObject));
  }
  
  public final StringBuilder a(StringBuilder paramStringBuilder, Iterable<?> paramIterable)
  {
    return a(paramStringBuilder, paramIterable.iterator());
  }
  
  @Deprecated
  @a
  public final <I,  extends Iterable<?>,  extends Iterator<?>> StringBuilder a(StringBuilder paramStringBuilder, I paramI)
  {
    return a(paramStringBuilder, (Iterator)paramI);
  }
  
  public final StringBuilder a(StringBuilder paramStringBuilder, @h Object paramObject1, @h Object paramObject2, Object... paramVarArgs)
  {
    if (paramVarArgs != null) {
      return a(paramStringBuilder, new P(paramVarArgs, paramObject1, paramObject2));
    }
    throw new NullPointerException();
  }
  
  public final StringBuilder a(StringBuilder paramStringBuilder, Iterator<?> paramIterator)
  {
    try
    {
      a(paramStringBuilder, paramIterator);
      return paramStringBuilder;
    }
    catch (IOException paramStringBuilder)
    {
      throw new AssertionError(paramStringBuilder);
    }
  }
  
  public final StringBuilder a(StringBuilder paramStringBuilder, Object[] paramArrayOfObject)
  {
    return a(paramStringBuilder, Arrays.asList(paramArrayOfObject));
  }
  
  @c
  public Q b(String paramString)
  {
    if (paramString != null) {
      return new N(this, this, paramString);
    }
    throw new NullPointerException();
  }
  
  public CharSequence b(Object paramObject)
  {
    if (paramObject != null)
    {
      if ((paramObject instanceof CharSequence)) {
        return (CharSequence)paramObject;
      }
      return paramObject.toString();
    }
    throw new NullPointerException();
  }
  
  public final String b(@h Object paramObject1, @h Object paramObject2, Object... paramVarArgs)
  {
    if (paramVarArgs != null) {
      return a(new P(paramVarArgs, paramObject1, paramObject2));
    }
    throw new NullPointerException();
  }
  
  @c
  public a c(String paramString)
  {
    return new a(this, paramString);
  }
  
  public static final class a
  {
    public final Q a;
    public final String b;
    
    public a(Q paramQ, String paramString)
    {
      a = paramQ;
      if (paramString != null)
      {
        b = paramString;
        return;
      }
      throw new NullPointerException();
    }
    
    @c
    public a a(String paramString)
    {
      return new a(a.b(paramString), b);
    }
    
    @a
    public <A extends Appendable> A a(A paramA, Iterable<? extends Map.Entry<?, ?>> paramIterable)
      throws IOException
    {
      return a(paramA, paramIterable.iterator());
    }
    
    @Deprecated
    @a
    public <A extends Appendable, I,  extends Iterable<? extends Map.Entry<?, ?>>,  extends Iterator<? extends Map.Entry<?, ?>>> A a(A paramA, I paramI)
      throws IOException
    {
      return a(paramA, (Iterator)paramI);
    }
    
    @a
    public <A extends Appendable> A a(A paramA, Iterator<? extends Map.Entry<?, ?>> paramIterator)
      throws IOException
    {
      if (paramA != null)
      {
        if (paramIterator.hasNext())
        {
          Map.Entry localEntry = (Map.Entry)paramIterator.next();
          paramA.append(a.b(localEntry.getKey()));
          paramA.append(b);
          paramA.append(a.b(localEntry.getValue()));
          while (paramIterator.hasNext())
          {
            paramA.append(a.a);
            localEntry = (Map.Entry)paramIterator.next();
            paramA.append(a.b(localEntry.getKey()));
            paramA.append(b);
            paramA.append(a.b(localEntry.getValue()));
          }
        }
        return paramA;
      }
      paramA = new NullPointerException();
      for (;;)
      {
        throw paramA;
      }
    }
    
    public <A extends Appendable> A a(A paramA, Map<?, ?> paramMap)
      throws IOException
    {
      return a(paramA, paramMap.entrySet());
    }
    
    @a
    public String a(Iterable<? extends Map.Entry<?, ?>> paramIterable)
    {
      return a(paramIterable.iterator());
    }
    
    @Deprecated
    @a
    public <I,  extends Iterable<? extends Map.Entry<?, ?>>,  extends Iterator<? extends Map.Entry<?, ?>>> String a(I paramI)
      throws IOException
    {
      return a((Iterator)paramI);
    }
    
    @a
    public String a(Iterator<? extends Map.Entry<?, ?>> paramIterator)
    {
      return a(new StringBuilder(), paramIterator).toString();
    }
    
    public String a(Map<?, ?> paramMap)
    {
      return a(paramMap.entrySet());
    }
    
    @a
    public StringBuilder a(StringBuilder paramStringBuilder, Iterable<? extends Map.Entry<?, ?>> paramIterable)
    {
      return a(paramStringBuilder, paramIterable.iterator());
    }
    
    @Deprecated
    @a
    public <I,  extends Iterable<? extends Map.Entry<?, ?>>,  extends Iterator<? extends Map.Entry<?, ?>>> StringBuilder a(StringBuilder paramStringBuilder, I paramI)
      throws IOException
    {
      return a(paramStringBuilder, (Iterator)paramI);
    }
    
    @a
    public StringBuilder a(StringBuilder paramStringBuilder, Iterator<? extends Map.Entry<?, ?>> paramIterator)
    {
      try
      {
        a(paramStringBuilder, paramIterator);
        return paramStringBuilder;
      }
      catch (IOException paramStringBuilder)
      {
        throw new AssertionError(paramStringBuilder);
      }
    }
    
    public StringBuilder a(StringBuilder paramStringBuilder, Map<?, ?> paramMap)
    {
      return a(paramStringBuilder, paramMap.entrySet());
    }
  }
}
