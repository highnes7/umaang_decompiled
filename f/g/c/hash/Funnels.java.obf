package f.g.c.f;

import java.io.OutputStream;

@f.g.c.a.a
public final class k
{
  public k() {}
  
  public static j<byte[]> a()
  {
    return a.a;
  }
  
  public static OutputStream a(u paramU)
  {
    return new d(paramU);
  }
  
  public static j<Integer> b()
  {
    return b.a;
  }
  
  public static j<Long> c()
  {
    return c.a;
  }
  
  public static j<CharSequence> d()
  {
    return e.a;
  }
  
  private static enum a
    implements j<byte[]>
  {
    public a() {}
    
    public void a(byte[] paramArrayOfByte, u paramU)
    {
      paramU.a(paramArrayOfByte);
    }
    
    public String toString()
    {
      return "Funnels.byteArrayFunnel()";
    }
  }
  
  private static enum b
    implements j<Integer>
  {
    public b() {}
    
    public void a(Integer paramInteger, u paramU)
    {
      paramU.a(paramInteger.intValue());
    }
    
    public String toString()
    {
      return "Funnels.integerFunnel()";
    }
  }
  
  private static enum c
    implements j<Long>
  {
    public c() {}
    
    public void a(Long paramLong, u paramU)
    {
      paramU.a(paramLong.longValue());
    }
    
    public String toString()
    {
      return "Funnels.longFunnel()";
    }
  }
  
  private static class d
    extends OutputStream
  {
    public final u a;
    
    public d(u paramU)
    {
      if (paramU != null)
      {
        a = paramU;
        return;
      }
      throw new NullPointerException();
    }
    
    public String toString()
    {
      return f.a.a.a.a.a(f.a.a.a.a.b("Funnels.asOutputStream("), a, ")");
    }
    
    public void write(int paramInt)
    {
      a.a((byte)paramInt);
    }
    
    public void write(byte[] paramArrayOfByte)
    {
      a.a(paramArrayOfByte);
    }
    
    public void write(byte[] paramArrayOfByte, int paramInt1, int paramInt2)
    {
      a.a(paramArrayOfByte, paramInt1, paramInt2);
    }
  }
  
  private static enum e
    implements j<CharSequence>
  {
    public e() {}
    
    public void a(CharSequence paramCharSequence, u paramU)
    {
      paramU.a(paramCharSequence);
    }
    
    public String toString()
    {
      return "Funnels.stringFunnel()";
    }
  }
}
