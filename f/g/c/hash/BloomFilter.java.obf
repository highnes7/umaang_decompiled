package f.g.c.f;

import f.g.c.a.a;
import f.g.c.a.d;
import f.g.c.b.ba;
import java.io.Serializable;

@a
public final class g<T>
  implements Serializable
{
  public static final double a = Math.log(2.0D);
  public static final double b;
  public final i.a c;
  public final int d;
  public final j<T> e;
  public final b f;
  
  static
  {
    double d1 = a;
    b = d1 * d1;
  }
  
  public g(i.a paramA, int paramInt, j<T> paramJ, b paramB)
  {
    boolean bool;
    if (paramInt > 0) {
      bool = true;
    } else {
      bool = false;
    }
    ba.a(bool, "numHashFunctions zero or negative");
    if (paramA != null)
    {
      c = paramA;
      d = paramInt;
      if (paramJ != null)
      {
        e = paramJ;
        f = paramB;
        if (paramInt <= 255) {
          return;
        }
        throw new AssertionError("Currently we don't allow BloomFilters that would use more than255 hash functions, please contact the guava team");
      }
      throw new NullPointerException();
    }
    throw new NullPointerException();
  }
  
  @d
  public static int a(int paramInt, double paramDouble)
  {
    double d1 = -paramInt;
    paramDouble = Math.log(paramDouble);
    Double.isNaN(d1);
    return (int)(paramDouble * d1 / b);
  }
  
  @d
  public static int a(int paramInt1, int paramInt2)
  {
    double d1 = paramInt2 / paramInt1;
    double d2 = a;
    Double.isNaN(d1);
    return Math.max(1, (int)Math.round(d1 * d2));
  }
  
  public static <T> g<T> a(j<T> paramJ, int paramInt)
  {
    return a(paramJ, paramInt, 0.03D);
  }
  
  public static <T> g<T> a(j<T> paramJ, int paramInt, double paramDouble)
  {
    if (paramJ != null)
    {
      int j = 0;
      boolean bool;
      if (paramInt >= 0) {
        bool = true;
      } else {
        bool = false;
      }
      ba.a(bool, "Expected insertions cannot be negative");
      if (paramDouble > 0.0D) {
        i = 1;
      } else {
        i = 0;
      }
      if (paramDouble < 1.0D) {
        j = 1;
      }
      ba.a(j & i, "False positive probability in (0.0, 1.0)");
      int i = paramInt;
      if (paramInt == 0) {
        i = 1;
      }
      paramInt = a(i, paramDouble);
      i = a(i, paramInt);
      return new g(new i.a(paramInt), i, paramJ, i.a);
    }
    throw new NullPointerException();
  }
  
  private Object d()
  {
    return new a(this);
  }
  
  public g<T> a()
  {
    return new g(c.b(), d, e, f);
  }
  
  public boolean a(T paramT)
  {
    return f.b(paramT, e, d, c);
  }
  
  public double b()
  {
    double d1 = c.a();
    double d2 = c.c();
    Double.isNaN(d1);
    Double.isNaN(d2);
    return Math.pow(d1 / d2, d);
  }
  
  public boolean b(T paramT)
  {
    return f.a(paramT, e, d, c);
  }
  
  @d
  public int c()
  {
    return d;
  }
  
  public boolean equals(Object paramObject)
  {
    boolean bool3 = paramObject instanceof g;
    boolean bool2 = false;
    boolean bool1 = bool2;
    if (bool3)
    {
      paramObject = (g)paramObject;
      bool1 = bool2;
      if (d == d)
      {
        bool1 = bool2;
        if (c.equals(c))
        {
          bool1 = bool2;
          if (e == e)
          {
            bool1 = bool2;
            if (f == f) {
              bool1 = true;
            }
          }
        }
      }
    }
    return bool1;
  }
  
  public int hashCode()
  {
    return c.hashCode();
  }
  
  private static class a<T>
    implements Serializable
  {
    public static final long a = 1L;
    public final long[] b;
    public final int c;
    public final j<T> d;
    public final g.b e;
    
    public a(g<T> paramG)
    {
      b = aa;
      c = g.b(paramG);
      d = g.c(paramG);
      e = g.d(paramG);
    }
    
    public Object a()
    {
      return new g(new i.a(b), c, d, e);
    }
  }
  
  public static abstract interface b
    extends Serializable
  {
    public abstract <T> boolean a(T paramT, j<? super T> paramJ, int paramInt, i.a paramA);
    
    public abstract <T> boolean b(T paramT, j<? super T> paramJ, int paramInt, i.a paramA);
    
    public abstract int ordinal();
  }
}
