package f.g.b.a.e.a.a.a.b;

import f.g.b.a.e.a.a.a.a.a;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import m.a.h;

public final class i
{
  public i() {}
  
  @a
  public static List<Throwable> a(Throwable paramThrowable)
  {
    if (paramThrowable != null)
    {
      ArrayList localArrayList = new ArrayList(4);
      while (paramThrowable != null)
      {
        localArrayList.add(paramThrowable);
        paramThrowable = paramThrowable.getCause();
      }
      return Collections.unmodifiableList(localArrayList);
    }
    paramThrowable = new NullPointerException();
    for (;;)
    {
      throw paramThrowable;
    }
  }
  
  public static <X extends Throwable> void a(@h Throwable paramThrowable, Class<X> paramClass)
    throws Throwable
  {
    if (paramThrowable != null)
    {
      if (!paramClass.isInstance(paramThrowable)) {
        return;
      }
      throw ((Throwable)paramClass.cast(paramThrowable));
    }
  }
  
  public static <X1 extends Throwable, X2 extends Throwable> void a(@h Throwable paramThrowable, Class<X1> paramClass, Class<X2> paramClass1)
    throws Throwable, Throwable
  {
    if (paramClass1 != null)
    {
      a(paramThrowable, paramClass);
      a(paramThrowable, paramClass1);
      e(paramThrowable);
      return;
    }
    throw new NullPointerException();
  }
  
  public static Throwable b(Throwable paramThrowable)
  {
    for (;;)
    {
      Throwable localThrowable = paramThrowable.getCause();
      if (localThrowable == null) {
        break;
      }
      paramThrowable = localThrowable;
    }
    return paramThrowable;
  }
  
  public static <X extends Throwable> void b(@h Throwable paramThrowable, Class<X> paramClass)
    throws Throwable
  {
    a(paramThrowable, paramClass);
    e(paramThrowable);
  }
  
  public static String c(Throwable paramThrowable)
  {
    StringWriter localStringWriter = new StringWriter();
    paramThrowable.printStackTrace(new PrintWriter(localStringWriter));
    return localStringWriter.toString();
  }
  
  public static RuntimeException d(Throwable paramThrowable)
  {
    if (paramThrowable != null)
    {
      e(paramThrowable);
      throw new RuntimeException(paramThrowable);
    }
    throw new NullPointerException();
  }
  
  public static void e(@h Throwable paramThrowable)
  {
    a(paramThrowable, Error.class);
    a(paramThrowable, RuntimeException.class);
  }
}
