package f.g.b.a.e.b.a.a.a.a;

import java.math.BigInteger;

public class a
  extends b
{
  public static final int r = 6;
  public static final int s = 3;
  public static final int t = 4;
  public static final byte[] u = { 13, 10 };
  public static final byte[] v = { 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 43, 47 };
  public static final byte[] w = { 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 45, 95 };
  public static final byte[] x = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1, 62, -1, 63, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -1, -1, -1, -1, -1, -1, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -1, -1, -1, -1, 63, -1, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51 };
  public static final int y = 63;
  public final byte[] A = x;
  public final byte[] B;
  public final int C;
  public final int D;
  public int E;
  public final byte[] z;
  
  public a()
  {
    this(0);
  }
  
  public a(int paramInt)
  {
    this(paramInt, u, false);
  }
  
  public a(int paramInt, byte[] paramArrayOfByte)
  {
    this(paramInt, paramArrayOfByte, false);
  }
  
  public a(int paramInt, byte[] paramArrayOfByte, boolean paramBoolean)
  {
    super(3, 4, paramInt, i);
    if (paramArrayOfByte != null)
    {
      if (!a(paramArrayOfByte))
      {
        if (paramInt > 0)
        {
          D = (paramArrayOfByte.length + 4);
          B = new byte[paramArrayOfByte.length];
          System.arraycopy(paramArrayOfByte, 0, B, 0, paramArrayOfByte.length);
        }
        else
        {
          D = 4;
          B = null;
        }
      }
      else {
        throw new IllegalArgumentException(f.a.a.a.a.a("lineSeparator must not contain base64 characters: [", c.f(paramArrayOfByte), "]"));
      }
    }
    else
    {
      D = 4;
      B = null;
    }
    C = (D - 1);
    if (paramBoolean) {
      paramArrayOfByte = w;
    } else {
      paramArrayOfByte = v;
    }
    z = paramArrayOfByte;
  }
  
  public a(boolean paramBoolean)
  {
    this(76, u, paramBoolean);
  }
  
  public static byte[] a(BigInteger paramBigInteger)
  {
    if (paramBigInteger != null) {
      return b(b(paramBigInteger), false);
    }
    throw new NullPointerException("encodeInteger called with null parameter");
  }
  
  public static byte[] a(byte[] paramArrayOfByte, boolean paramBoolean1, boolean paramBoolean2)
  {
    return a(paramArrayOfByte, paramBoolean1, paramBoolean2, Integer.MAX_VALUE);
  }
  
  public static byte[] a(byte[] paramArrayOfByte, boolean paramBoolean1, boolean paramBoolean2, int paramInt)
  {
    if (paramArrayOfByte != null)
    {
      if (paramArrayOfByte.length == 0) {
        return paramArrayOfByte;
      }
      a localA;
      if (paramBoolean1) {
        localA = new a(paramBoolean2);
      } else {
        localA = new a(0, u, paramBoolean2);
      }
      long l = localA.d(paramArrayOfByte);
      if (l <= paramInt) {
        return localA.encode(paramArrayOfByte);
      }
      paramArrayOfByte = new StringBuilder();
      paramArrayOfByte.append("Input array too big, the output array would be bigger (");
      paramArrayOfByte.append(l);
      paramArrayOfByte.append(") than the specified maximum size of ");
      paramArrayOfByte.append(paramInt);
      throw new IllegalArgumentException(paramArrayOfByte.toString());
    }
    return paramArrayOfByte;
  }
  
  public static byte[] b(BigInteger paramBigInteger)
  {
    int m = paramBigInteger.bitLength() + 7 >> 3 << 3;
    byte[] arrayOfByte = paramBigInteger.toByteArray();
    if ((paramBigInteger.bitLength() % 8 != 0) && (paramBigInteger.bitLength() / 8 + 1 == m / 8)) {
      return arrayOfByte;
    }
    int j = 0;
    int k = arrayOfByte.length;
    int i = k;
    if (paramBigInteger.bitLength() % 8 == 0)
    {
      i = k - 1;
      j = 1;
    }
    k = m / 8;
    paramBigInteger = new byte[k];
    System.arraycopy(arrayOfByte, j, paramBigInteger, k - i, i);
    return paramBigInteger;
  }
  
  public static byte[] b(byte[] paramArrayOfByte, boolean paramBoolean)
  {
    return a(paramArrayOfByte, paramBoolean, false);
  }
  
  public static boolean c(byte paramByte)
  {
    if (paramByte != 61) {
      if (paramByte >= 0)
      {
        byte[] arrayOfByte = x;
        if ((paramByte < arrayOfByte.length) && (arrayOfByte[paramByte] != -1)) {}
      }
      else
      {
        return false;
      }
    }
    return true;
  }
  
  public static byte[] c(String paramString)
  {
    return new a(0).a(paramString);
  }
  
  public static boolean d(String paramString)
  {
    return m(c.f(paramString));
  }
  
  public static byte[] e(byte[] paramArrayOfByte)
  {
    return new a(0).decode(paramArrayOfByte);
  }
  
  public static BigInteger f(byte[] paramArrayOfByte)
  {
    return new BigInteger(1, e(paramArrayOfByte));
  }
  
  public static byte[] g(byte[] paramArrayOfByte)
  {
    return b(paramArrayOfByte, false);
  }
  
  public static byte[] h(byte[] paramArrayOfByte)
  {
    return b(paramArrayOfByte, true);
  }
  
  public static String i(byte[] paramArrayOfByte)
  {
    return c.f(b(paramArrayOfByte, false));
  }
  
  public static byte[] j(byte[] paramArrayOfByte)
  {
    return a(paramArrayOfByte, false, true);
  }
  
  public static String k(byte[] paramArrayOfByte)
  {
    return c.f(a(paramArrayOfByte, false, true));
  }
  
  public static boolean l(byte[] paramArrayOfByte)
  {
    return m(paramArrayOfByte);
  }
  
  public static boolean m(byte[] paramArrayOfByte)
  {
    int i = 0;
    while (i < paramArrayOfByte.length)
    {
      if ((!c(paramArrayOfByte[i])) && (!b.b(paramArrayOfByte[i]))) {
        return false;
      }
      i += 1;
    }
    return true;
  }
  
  public void a(byte[] paramArrayOfByte, int paramInt1, int paramInt2)
  {
    if (o) {
      return;
    }
    if (paramInt2 < 0) {
      o = true;
    }
    int i = 0;
    while (i < paramInt2)
    {
      a(C);
      int j = paramArrayOfByte[paramInt1];
      if (j == 61)
      {
        o = true;
        break;
      }
      if (j >= 0)
      {
        byte[] arrayOfByte = x;
        if (j < arrayOfByte.length)
        {
          j = arrayOfByte[j];
          if (j >= 0)
          {
            q = ((q + 1) % 4);
            E = ((E << 6) + j);
            if (q == 0)
            {
              arrayOfByte = l;
              int k = m;
              m = (k + 1);
              j = E;
              arrayOfByte[k] = ((byte)(j >> 16 & 0xFF));
              k = m;
              m = (k + 1);
              arrayOfByte[k] = ((byte)(j >> 8 & 0xFF));
              k = m;
              m = (k + 1);
              arrayOfByte[k] = ((byte)(j & 0xFF));
            }
          }
        }
      }
      i += 1;
      paramInt1 += 1;
    }
    if ((o) && (q != 0))
    {
      a(C);
      paramInt1 = q;
      if (paramInt1 != 2)
      {
        if (paramInt1 != 3) {
          return;
        }
        E >>= 2;
        paramArrayOfByte = l;
        paramInt2 = m;
        m = (paramInt2 + 1);
        paramInt1 = E;
        paramArrayOfByte[paramInt2] = ((byte)(paramInt1 >> 8 & 0xFF));
        paramInt2 = m;
        m = (paramInt2 + 1);
        paramArrayOfByte[paramInt2] = ((byte)(paramInt1 & 0xFF));
        return;
      }
      E >>= 4;
      paramArrayOfByte = l;
      paramInt1 = m;
      m = (paramInt1 + 1);
      paramArrayOfByte[paramInt1] = ((byte)(E & 0xFF));
    }
  }
  
  public boolean a(byte paramByte)
  {
    if (paramByte >= 0)
    {
      byte[] arrayOfByte = A;
      if ((paramByte < arrayOfByte.length) && (arrayOfByte[paramByte] != -1)) {
        return true;
      }
    }
    return false;
  }
  
  public void b(byte[] paramArrayOfByte, int paramInt1, int paramInt2)
  {
    if (o) {
      return;
    }
    byte[] arrayOfByte1;
    int i;
    if (paramInt2 < 0)
    {
      o = true;
      if ((q == 0) && (this.j == 0)) {
        return;
      }
      a(D);
      paramInt1 = m;
      paramInt2 = q;
      if (paramInt2 != 1)
      {
        if (paramInt2 == 2)
        {
          paramArrayOfByte = l;
          m = (paramInt1 + 1);
          arrayOfByte1 = z;
          paramInt2 = E;
          paramArrayOfByte[paramInt1] = arrayOfByte1[(paramInt2 >> 10 & 0x3F)];
          i = m;
          m = (i + 1);
          paramArrayOfByte[i] = arrayOfByte1[(paramInt2 >> 4 & 0x3F)];
          i = m;
          m = (i + 1);
          paramArrayOfByte[i] = arrayOfByte1[(paramInt2 << 2 & 0x3F)];
          if (arrayOfByte1 == v)
          {
            paramInt2 = m;
            m = (paramInt2 + 1);
            paramArrayOfByte[paramInt2] = 61;
          }
        }
      }
      else
      {
        paramArrayOfByte = l;
        m = (paramInt1 + 1);
        arrayOfByte1 = z;
        paramInt2 = E;
        paramArrayOfByte[paramInt1] = arrayOfByte1[(paramInt2 >> 2 & 0x3F)];
        i = m;
        m = (i + 1);
        paramArrayOfByte[i] = arrayOfByte1[(paramInt2 << 4 & 0x3F)];
        if (arrayOfByte1 == v)
        {
          paramInt2 = m;
          m = (paramInt2 + 1);
          paramArrayOfByte[paramInt2] = 61;
          paramInt2 = m;
          m = (paramInt2 + 1);
          paramArrayOfByte[paramInt2] = 61;
        }
      }
      paramInt2 = p;
      i = m;
      p = (i - paramInt1 + paramInt2);
      if ((this.j > 0) && (p > 0))
      {
        paramArrayOfByte = B;
        System.arraycopy(paramArrayOfByte, 0, l, i, paramArrayOfByte.length);
        m += B.length;
      }
    }
    else
    {
      i = 0;
      while (i < paramInt2)
      {
        a(D);
        q = ((q + 1) % 3);
        int k = paramArrayOfByte[paramInt1];
        int j = k;
        if (k < 0) {
          j = k + 256;
        }
        E = ((E << 8) + j);
        if (q == 0)
        {
          arrayOfByte1 = l;
          k = m;
          m = (k + 1);
          byte[] arrayOfByte2 = z;
          j = E;
          arrayOfByte1[k] = arrayOfByte2[(j >> 18 & 0x3F)];
          k = m;
          m = (k + 1);
          arrayOfByte1[k] = arrayOfByte2[(j >> 12 & 0x3F)];
          k = m;
          m = (k + 1);
          arrayOfByte1[k] = arrayOfByte2[(j >> 6 & 0x3F)];
          k = m;
          m = (k + 1);
          arrayOfByte1[k] = arrayOfByte2[(j & 0x3F)];
          p += 4;
          j = this.j;
          if ((j > 0) && (j <= p))
          {
            arrayOfByte2 = B;
            System.arraycopy(arrayOfByte2, 0, arrayOfByte1, m, arrayOfByte2.length);
            m += B.length;
            p = 0;
          }
        }
        i += 1;
        paramInt1 += 1;
      }
    }
  }
  
  public boolean d()
  {
    return z == w;
  }
}
