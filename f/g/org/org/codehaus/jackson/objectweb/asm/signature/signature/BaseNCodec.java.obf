package f.g.b.a.e.b.a.a.a.a;

import f.g.b.a.e.b.a.a.a.a;
import f.g.b.a.e.b.a.a.a.d;
import f.g.b.a.e.b.a.a.a.f;

public abstract class b
  implements f.g.b.a.e.b.a.a.a.b, a
{
  public static final int a = 76;
  public static final int b = 64;
  public static final int c = 2;
  public static final int d = 8192;
  public static final int e = 255;
  public static final byte f = 61;
  public final byte g = 61;
  public final int h;
  public final int i;
  public final int j;
  public final int k;
  public byte[] l;
  public int m;
  public int n;
  public boolean o;
  public int p;
  public int q;
  
  public b(int paramInt1, int paramInt2, int paramInt3, int paramInt4)
  {
    h = paramInt1;
    i = paramInt2;
    if ((paramInt3 > 0) && (paramInt4 > 0)) {
      paramInt1 = paramInt3 / paramInt2 * paramInt2;
    } else {
      paramInt1 = 0;
    }
    j = paramInt1;
    k = paramInt4;
  }
  
  public static boolean b(byte paramByte)
  {
    return (paramByte == 9) || (paramByte == 10) || (paramByte == 13) || (paramByte == 32);
  }
  
  private void d()
  {
    l = null;
    m = 0;
    n = 0;
    p = 0;
    q = 0;
    o = false;
  }
  
  private void e()
  {
    byte[] arrayOfByte1 = l;
    if (arrayOfByte1 == null)
    {
      l = new byte[b()];
      m = 0;
      n = 0;
      return;
    }
    byte[] arrayOfByte2 = new byte[arrayOfByte1.length * 2];
    System.arraycopy(arrayOfByte1, 0, arrayOfByte2, 0, arrayOfByte1.length);
    l = arrayOfByte2;
  }
  
  public int a()
  {
    if (l != null) {
      return m - n;
    }
    return 0;
  }
  
  public void a(int paramInt)
  {
    byte[] arrayOfByte = l;
    if ((arrayOfByte == null) || (arrayOfByte.length < m + paramInt)) {
      e();
    }
  }
  
  public abstract void a(byte[] paramArrayOfByte, int paramInt1, int paramInt2);
  
  public abstract boolean a(byte paramByte);
  
  public boolean a(byte[] paramArrayOfByte)
  {
    if (paramArrayOfByte == null) {
      return false;
    }
    int i2 = paramArrayOfByte.length;
    int i1 = 0;
    while (i1 < i2)
    {
      byte b1 = paramArrayOfByte[i1];
      if ((61 != b1) && (!a(b1))) {
        i1 += 1;
      } else {
        return true;
      }
    }
    return false;
  }
  
  public boolean a(byte[] paramArrayOfByte, boolean paramBoolean)
  {
    int i1 = 0;
    while (i1 < paramArrayOfByte.length)
    {
      if ((!a(paramArrayOfByte[i1])) && ((!paramBoolean) || ((paramArrayOfByte[i1] != 61) && (!b(paramArrayOfByte[i1]))))) {
        return false;
      }
      i1 += 1;
    }
    return true;
  }
  
  public byte[] a(String paramString)
  {
    return decode(c.f(paramString));
  }
  
  public int b()
  {
    return 8192;
  }
  
  public String b(byte[] paramArrayOfByte)
  {
    return c.f(encode(paramArrayOfByte));
  }
  
  public abstract void b(byte[] paramArrayOfByte, int paramInt1, int paramInt2);
  
  public boolean b(String paramString)
  {
    return a(c.f(paramString), true);
  }
  
  public int c(byte[] paramArrayOfByte, int paramInt1, int paramInt2)
  {
    if (l != null)
    {
      paramInt2 = Math.min(a(), paramInt2);
      System.arraycopy(l, n, paramArrayOfByte, paramInt1, paramInt2);
      n += paramInt2;
      if (n >= m) {
        l = null;
      }
      return paramInt2;
    }
    if (o) {
      return -1;
    }
    return 0;
  }
  
  public String c(byte[] paramArrayOfByte)
  {
    return c.f(encode(paramArrayOfByte));
  }
  
  public boolean c()
  {
    return l != null;
  }
  
  public long d(byte[] paramArrayOfByte)
  {
    int i1 = paramArrayOfByte.length;
    int i2 = h;
    long l2 = (i1 + i2 - 1) / i2 * i;
    i1 = j;
    long l1 = l2;
    if (i1 > 0) {
      l1 = l2 + (i1 + l2 - 1L) / i1 * k;
    }
    return l1;
  }
  
  public Object decode(Object paramObject)
    throws d
  {
    if ((paramObject instanceof byte[])) {
      return decode((byte[])paramObject);
    }
    if ((paramObject instanceof String)) {
      return a((String)paramObject);
    }
    throw new d("Parameter supplied to Base-N decode is not a byte[] or a String");
  }
  
  public byte[] decode(byte[] paramArrayOfByte)
  {
    d();
    byte[] arrayOfByte = paramArrayOfByte;
    if (paramArrayOfByte != null)
    {
      if (paramArrayOfByte.length == 0) {
        return paramArrayOfByte;
      }
      a(paramArrayOfByte, 0, paramArrayOfByte.length);
      a(paramArrayOfByte, 0, -1);
      arrayOfByte = new byte[m];
      c(arrayOfByte, 0, arrayOfByte.length);
    }
    return arrayOfByte;
  }
  
  public Object encode(Object paramObject)
    throws f
  {
    if ((paramObject instanceof byte[])) {
      return encode((byte[])paramObject);
    }
    throw new f("Parameter supplied to Base-N encode is not a byte[]");
  }
  
  public byte[] encode(byte[] paramArrayOfByte)
  {
    d();
    byte[] arrayOfByte = paramArrayOfByte;
    if (paramArrayOfByte != null)
    {
      if (paramArrayOfByte.length == 0) {
        return paramArrayOfByte;
      }
      b(paramArrayOfByte, 0, paramArrayOfByte.length);
      b(paramArrayOfByte, 0, -1);
      arrayOfByte = new byte[m - n];
      c(arrayOfByte, 0, arrayOfByte.length);
    }
    return arrayOfByte;
  }
}
