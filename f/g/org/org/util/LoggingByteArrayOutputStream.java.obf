package f.g.b.a.g;

import f.g.b.a.e.a.a.a.b.g;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.text.NumberFormat;
import java.util.logging.Level;
import java.util.logging.Logger;

public class B
  extends ByteArrayOutputStream
{
  public int a;
  public final int b;
  public boolean c;
  public final Level d;
  public final Logger e;
  
  public B(Logger paramLogger, Level paramLevel, int paramInt)
  {
    if (paramLogger != null)
    {
      e = paramLogger;
      if (paramLevel != null)
      {
        d = paramLevel;
        boolean bool;
        if (paramInt >= 0) {
          bool = true;
        } else {
          bool = false;
        }
        g.a(bool);
        b = paramInt;
        return;
      }
      throw new NullPointerException();
    }
    throw new NullPointerException();
  }
  
  public static void a(StringBuilder paramStringBuilder, int paramInt)
  {
    if (paramInt == 1)
    {
      paramStringBuilder.append("1 byte");
      return;
    }
    paramStringBuilder.append(NumberFormat.getInstance().format(paramInt));
    paramStringBuilder.append(" bytes");
  }
  
  public void close()
    throws IOException
  {
    try
    {
      if (!c)
      {
        if (a != 0)
        {
          StringBuilder localStringBuilder = new StringBuilder();
          localStringBuilder.append("Total: ");
          a(localStringBuilder, a);
          if ((count != 0) && (count < a))
          {
            localStringBuilder.append(" (logging first ");
            a(localStringBuilder, count);
            localStringBuilder.append(")");
          }
          e.config(localStringBuilder.toString());
          if (count != 0) {
            e.log(d, toString("UTF-8").replaceAll("[\\x00-\\x09\\x0B\\x0C\\x0E-\\x1F\\x7F]", " "));
          }
        }
        c = true;
      }
      return;
    }
    finally {}
  }
  
  public final int u()
  {
    try
    {
      int i = a;
      return i;
    }
    finally
    {
      localObject = finally;
      throw localObject;
    }
  }
  
  public final int v()
  {
    return b;
  }
  
  public void write(int paramInt)
  {
    for (;;)
    {
      try
      {
        if (!c)
        {
          bool = true;
          g.a(bool);
          a += 1;
          if (count < b) {
            super.write(paramInt);
          }
          return;
        }
      }
      finally {}
      boolean bool = false;
    }
  }
  
  public void write(byte[] paramArrayOfByte, int paramInt1, int paramInt2)
  {
    for (;;)
    {
      try
      {
        if (!c)
        {
          bool = true;
          g.a(bool);
          a += paramInt2;
          if (count < b)
          {
            int j = count + paramInt2;
            int i = paramInt2;
            if (j > b) {
              i = paramInt2 + (b - j);
            }
            super.write(paramArrayOfByte, paramInt1, i);
          }
          return;
        }
      }
      finally {}
      boolean bool = false;
    }
  }
}
