package f.g.b.a.g;

import f.g.b.a.e.a.a.a.b.g;
import java.io.FilterInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

public final class k
{
  public static final int a = 4096;
  
  public k() {}
  
  public static int a(InputStream paramInputStream, byte[] paramArrayOfByte, int paramInt1, int paramInt2)
    throws IOException
  {
    if (paramInputStream != null)
    {
      if (paramArrayOfByte != null)
      {
        if (paramInt2 >= 0)
        {
          int i = 0;
          while (i < paramInt2)
          {
            int j = paramInputStream.read(paramArrayOfByte, paramInt1 + i, paramInt2 - i);
            if (j == -1) {
              return i;
            }
            i += j;
          }
          return i;
        }
        throw new IndexOutOfBoundsException("len is negative");
      }
      throw new NullPointerException();
    }
    paramInputStream = new NullPointerException();
    for (;;)
    {
      throw paramInputStream;
    }
  }
  
  public static long a(InputStream paramInputStream, OutputStream paramOutputStream)
    throws IOException
  {
    if (paramInputStream != null)
    {
      if (paramOutputStream != null)
      {
        byte[] arrayOfByte = new byte['?'];
        int i;
        for (long l = 0L;; l += i)
        {
          i = paramInputStream.read(arrayOfByte);
          if (i == -1) {
            return l;
          }
          paramOutputStream.write(arrayOfByte, 0, i);
        }
      }
      throw new NullPointerException();
    }
    paramInputStream = new NullPointerException();
    for (;;)
    {
      throw paramInputStream;
    }
  }
  
  public static InputStream a(InputStream paramInputStream, long paramLong)
  {
    return new a(paramInputStream, paramLong);
  }
  
  private static final class a
    extends FilterInputStream
  {
    public long a;
    public long b = -1L;
    
    public a(InputStream paramInputStream, long paramLong)
    {
      super();
      if (paramInputStream != null)
      {
        boolean bool;
        if (paramLong >= 0L) {
          bool = true;
        } else {
          bool = false;
        }
        g.a(bool, "limit must be non-negative");
        a = paramLong;
        return;
      }
      throw new NullPointerException();
    }
    
    public int available()
      throws IOException
    {
      return (int)Math.min(in.available(), a);
    }
    
    public void mark(int paramInt)
    {
      try
      {
        in.mark(paramInt);
        b = a;
        return;
      }
      finally
      {
        localObject = finally;
        throw localObject;
      }
    }
    
    public int read()
      throws IOException
    {
      if (a == 0L) {
        return -1;
      }
      int i = in.read();
      if (i != -1) {
        a -= 1L;
      }
      return i;
    }
    
    public int read(byte[] paramArrayOfByte, int paramInt1, int paramInt2)
      throws IOException
    {
      long l = a;
      if (l == 0L) {
        return -1;
      }
      paramInt2 = (int)Math.min(paramInt2, l);
      paramInt1 = in.read(paramArrayOfByte, paramInt1, paramInt2);
      if (paramInt1 != -1) {
        a -= paramInt1;
      }
      return paramInt1;
    }
    
    public void reset()
      throws IOException
    {
      try
      {
        if (in.markSupported())
        {
          if (b != -1L)
          {
            in.reset();
            a = b;
            return;
          }
          throw new IOException("Mark not set");
        }
        throw new IOException("Mark not supported");
      }
      finally {}
    }
    
    public long skip(long paramLong)
      throws IOException
    {
      paramLong = Math.min(paramLong, a);
      paramLong = in.skip(paramLong);
      a -= paramLong;
      return paramLong;
    }
  }
}
