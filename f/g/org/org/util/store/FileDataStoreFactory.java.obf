package f.g.b.a.g.b;

import f.g.b.a.e.a.a.a.b.i;
import f.g.b.a.g.x;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.Serializable;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.HashMap;
import java.util.logging.Logger;

public class g
  extends b
{
  public static final Logger d = Logger.getLogger(g.class.getName());
  public final File e;
  
  public g(File paramFile)
    throws IOException
  {
    paramFile = paramFile.getCanonicalFile();
    e = paramFile;
    if (!x.a(paramFile))
    {
      if ((!paramFile.exists()) && (!paramFile.mkdirs()))
      {
        paramFile = String.valueOf(paramFile);
        throw new IOException(f.a.a.a.a.a(new StringBuilder(paramFile.length() + 28), "unable to create directory: ", paramFile));
      }
      a(paramFile);
      return;
    }
    paramFile = String.valueOf(paramFile);
    throw new IOException(f.a.a.a.a.a(new StringBuilder(paramFile.length() + 31), "unable to use a symbolic link: ", paramFile));
  }
  
  public static void a(File paramFile)
    throws IOException
  {
    try
    {
      localObject1 = Boolean.TYPE;
      localObject2 = Boolean.TYPE;
      localObject1 = File.class.getMethod("setReadable", new Class[] { localObject1, localObject2 });
      localObject2 = Boolean.TYPE;
      Object localObject3 = Boolean.TYPE;
      localObject2 = File.class.getMethod("setWritable", new Class[] { localObject2, localObject3 });
      localObject3 = Boolean.TYPE;
      Object localObject4 = Boolean.TYPE;
      localObject3 = File.class.getMethod("setExecutable", new Class[] { localObject3, localObject4 });
      if (((Boolean)((Method)localObject1).invoke(paramFile, new Object[] { Boolean.valueOf(false), Boolean.valueOf(false) })).booleanValue()) {
        if (((Boolean)((Method)localObject2).invoke(paramFile, new Object[] { Boolean.valueOf(false), Boolean.valueOf(false) })).booleanValue()) {
          if (((Boolean)((Method)localObject3).invoke(paramFile, new Object[] { Boolean.valueOf(false), Boolean.valueOf(false) })).booleanValue()) {
            break label236;
          }
        }
      }
      localObject4 = d;
      String str = String.valueOf(paramFile);
      StringBuilder localStringBuilder = new StringBuilder(str.length() + 44);
      localStringBuilder.append("unable to change permissions for everybody: ");
      localStringBuilder.append(str);
      ((Logger)localObject4).warning(localStringBuilder.toString());
      label236:
      if (((Boolean)((Method)localObject1).invoke(paramFile, new Object[] { Boolean.valueOf(true), Boolean.valueOf(true) })).booleanValue()) {
        if (((Boolean)((Method)localObject2).invoke(paramFile, new Object[] { Boolean.valueOf(true), Boolean.valueOf(true) })).booleanValue()) {
          if (((Boolean)((Method)localObject3).invoke(paramFile, new Object[] { Boolean.valueOf(true), Boolean.valueOf(true) })).booleanValue()) {
            break label430;
          }
        }
      }
      localObject1 = d;
      localObject2 = String.valueOf(paramFile);
      localObject3 = new StringBuilder(((String)localObject2).length() + 40);
      ((StringBuilder)localObject3).append("unable to change permissions for owner: ");
      ((StringBuilder)localObject3).append((String)localObject2);
      ((Logger)localObject1).warning(((StringBuilder)localObject3).toString());
      return;
    }
    catch (InvocationTargetException paramFile)
    {
      Object localObject1;
      Object localObject2;
      paramFile = paramFile.getCause();
      i.a(paramFile, IOException.class);
      i.e(paramFile);
      throw new RuntimeException(paramFile);
    }
    catch (NoSuchMethodException localNoSuchMethodException)
    {
      label430:
      for (;;) {}
    }
    catch (SecurityException|IllegalAccessException|IllegalArgumentException paramFile) {}
    localObject1 = d;
    paramFile = String.valueOf(paramFile);
    localObject2 = new StringBuilder(paramFile.length() + 93);
    ((StringBuilder)localObject2).append("Unable to set permissions for ");
    ((StringBuilder)localObject2).append(paramFile);
    ((StringBuilder)localObject2).append(", likely because you are running a version of Java prior to 1.6");
    ((Logger)localObject1).warning(((StringBuilder)localObject2).toString());
    return;
  }
  
  public final File a()
  {
    return e;
  }
  
  public <V extends Serializable> d<V> b(String paramString)
    throws IOException
  {
    return new a(this, e, paramString);
  }
  
  public static class a<V extends Serializable>
    extends c<V>
  {
    public final File e;
    
    public a(g paramG, File paramFile, String paramString)
      throws IOException
    {
      super(paramString);
      e = new File(paramFile, paramString);
      if (!x.a(e))
      {
        if (e.createNewFile())
        {
          d = new HashMap();
          b();
          return;
        }
        d = ((HashMap)x.a(new FileInputStream(e)));
        return;
      }
      paramG = String.valueOf(e);
      throw new IOException(f.a.a.a.a.a(new StringBuilder(paramG.length() + 31), "unable to use a symbolic link: ", paramG));
    }
    
    public g a()
    {
      return (g)a;
    }
    
    public void b()
      throws IOException
    {
      x.a(d, new FileOutputStream(e));
    }
  }
}
