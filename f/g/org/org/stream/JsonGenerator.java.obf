package f.g.b.a.d;

import f.g.b.a.e.a.a.a.b.g;
import f.g.b.a.g.ba;
import f.g.b.a.g.n;
import f.g.b.a.g.r;
import f.g.b.a.g.t;
import f.g.b.a.g.v;
import f.g.b.a.g.w;
import java.io.IOException;
import java.lang.reflect.Field;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Iterator;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

public abstract class e
{
  public e() {}
  
  private void a(boolean paramBoolean, Object paramObject)
    throws IOException
  {
    if (paramObject == null) {
      return;
    }
    Object localObject1 = paramObject.getClass();
    if (r.b(paramObject))
    {
      g();
      return;
    }
    if ((paramObject instanceof String))
    {
      c((String)paramObject);
      return;
    }
    boolean bool3 = paramObject instanceof Number;
    boolean bool2 = true;
    boolean bool1 = true;
    if (bool3)
    {
      if (paramBoolean)
      {
        c(paramObject.toString());
        return;
      }
      if ((paramObject instanceof BigDecimal))
      {
        a((BigDecimal)paramObject);
        return;
      }
      if ((paramObject instanceof BigInteger))
      {
        a((BigInteger)paramObject);
        return;
      }
      if ((paramObject instanceof Long))
      {
        a(((Long)paramObject).longValue());
        return;
      }
      if ((paramObject instanceof Float))
      {
        float f = ((Number)paramObject).floatValue();
        if ((!Float.isInfinite(f)) && (!Float.isNaN(f))) {
          paramBoolean = bool1;
        } else {
          paramBoolean = false;
        }
        g.a(paramBoolean);
        a(f);
        return;
      }
      if ((!(paramObject instanceof Integer)) && (!(paramObject instanceof Short)) && (!(paramObject instanceof Byte)))
      {
        double d = ((Number)paramObject).doubleValue();
        if ((!Double.isInfinite(d)) && (!Double.isNaN(d))) {
          paramBoolean = bool2;
        } else {
          paramBoolean = false;
        }
        g.a(paramBoolean);
        a(d);
        return;
      }
      a(((Number)paramObject).intValue());
      return;
    }
    if ((paramObject instanceof Boolean))
    {
      a(((Boolean)paramObject).booleanValue());
      return;
    }
    if ((paramObject instanceof t))
    {
      c(((t)paramObject).d());
      return;
    }
    if ((!(paramObject instanceof Iterable)) && (!((Class)localObject1).isArray()))
    {
      if (((Class)localObject1).isEnum())
      {
        paramObject = v.a((Enum)paramObject).e();
        if (paramObject == null)
        {
          g();
          return;
        }
        c(paramObject);
        return;
      }
      i();
      int i;
      if (((paramObject instanceof Map)) && (!(paramObject instanceof w))) {
        i = 1;
      } else {
        i = 0;
      }
      if (i != 0) {
        localObject1 = null;
      } else {
        localObject1 = n.a((Class)localObject1);
      }
      paramObject = r.d(paramObject).entrySet().iterator();
      while (paramObject.hasNext())
      {
        Object localObject3 = (Map.Entry)paramObject.next();
        Object localObject2 = ((Map.Entry)localObject3).getValue();
        if (localObject2 != null)
        {
          localObject3 = (String)((Map.Entry)localObject3).getKey();
          if (i != 0)
          {
            bool1 = paramBoolean;
          }
          else
          {
            Field localField = ((n)localObject1).a((String)localObject3);
            if ((localField != null) && (localField.getAnnotation(j.class) != null)) {
              bool1 = true;
            } else {
              bool1 = false;
            }
          }
          a((String)localObject3);
          a(bool1, localObject2);
        }
      }
      f();
      return;
    }
    h();
    paramObject = ba.a(paramObject).iterator();
    while (paramObject.hasNext()) {
      a(paramBoolean, paramObject.next());
    }
    e();
  }
  
  public abstract void a()
    throws IOException;
  
  public abstract void a(double paramDouble)
    throws IOException;
  
  public abstract void a(float paramFloat)
    throws IOException;
  
  public abstract void a(int paramInt)
    throws IOException;
  
  public abstract void a(long paramLong)
    throws IOException;
  
  public final void a(Object paramObject)
    throws IOException
  {
    a(false, paramObject);
  }
  
  public abstract void a(String paramString)
    throws IOException;
  
  public abstract void a(BigDecimal paramBigDecimal)
    throws IOException;
  
  public abstract void a(BigInteger paramBigInteger)
    throws IOException;
  
  public abstract void a(boolean paramBoolean)
    throws IOException;
  
  public void b()
    throws IOException
  {}
  
  public abstract void b(String paramString)
    throws IOException;
  
  public abstract void c()
    throws IOException;
  
  public abstract void c(String paramString)
    throws IOException;
  
  public abstract d d();
  
  public abstract void e()
    throws IOException;
  
  public abstract void f()
    throws IOException;
  
  public abstract void g()
    throws IOException;
  
  public abstract void h()
    throws IOException;
  
  public abstract void i()
    throws IOException;
}
