package f.g.b.a.b.g;

import f.g.b.a.c.A;
import f.g.b.a.c.B;
import f.g.b.a.c.F;
import f.g.b.a.c.H;
import f.g.b.a.c.K;
import f.g.b.a.c.f;
import f.g.b.a.c.j;
import f.g.b.a.c.p;
import f.g.b.a.c.t;
import f.g.b.a.c.y;
import f.g.b.a.c.z;
import f.g.b.a.e.a.a.a.b.g;
import f.g.b.a.g.Q;
import f.g.b.a.g.h;
import f.g.b.a.g.k.a;
import f.g.b.a.g.w;
import java.io.BufferedInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.Arrays;

public final class c
{
  public static final String a = "X-Upload-Content-Length";
  public static final String b = "X-Upload-Content-Type";
  public static final int c = 1048576;
  public static final int d = 1024;
  public static final int e = 262144;
  public static final int f = 10485760;
  public boolean A;
  public Q B = Q.a;
  public a g = a.a;
  public final f.g.b.a.c.b h;
  public final z i;
  public final F j;
  public p k;
  public long l;
  public boolean m;
  public String n = "POST";
  public t o = new t();
  public y p;
  public InputStream q;
  public boolean r;
  public d s;
  public String t = "*";
  public long u;
  public int v = 10485760;
  public Byte w;
  public long x;
  public int y;
  public byte[] z;
  
  public c(f.g.b.a.c.b paramB, F paramF, A paramA)
  {
    if (paramB != null)
    {
      h = paramB;
      if (paramF != null)
      {
        j = paramF;
        if (paramA == null) {
          paramB = paramF.b();
        } else {
          paramB = paramF.a(paramA);
        }
        i = paramB;
        return;
      }
      throw new NullPointerException();
    }
    throw new NullPointerException();
  }
  
  private B a(y paramY)
    throws IOException
  {
    if ((!A) && (!(paramY.e() instanceof f))) {
      paramY.a(new j());
    }
    return b(paramY);
  }
  
  private void a(a paramA)
    throws IOException
  {
    g = paramA;
    paramA = s;
    if (paramA != null) {
      paramA.a(this);
    }
  }
  
  private long b(String paramString)
  {
    if (paramString == null) {
      return 0L;
    }
    return Long.parseLong(paramString.substring(paramString.indexOf('-') + 1)) + 1L;
  }
  
  private B b(f.g.b.a.c.k paramK)
    throws IOException
  {
    a(a.d);
    Object localObject1 = h;
    if (k != null)
    {
      localObject1 = new K().a(Arrays.asList(new p[] { k, h }));
      paramK.a("uploadType", "multipart");
    }
    else
    {
      paramK.a("uploadType", "media");
    }
    paramK = i.a(n, paramK, (p)localObject1);
    paramK.i().putAll(o);
    paramK = a(paramK);
    try
    {
      if (p()) {
        u = o();
      }
      a(a.e);
      return paramK;
    }
    finally
    {
      paramK.a();
    }
  }
  
  private B b(y paramY)
    throws IOException
  {
    new f.g.b.a.b.b().a(paramY);
    paramY.f(false);
    return paramY.a();
  }
  
  private B c(f.g.b.a.c.k paramK)
    throws IOException
  {
    a(a.b);
    paramK.a("uploadType", "resumable");
    p localP = k;
    Object localObject1 = localP;
    if (localP == null) {
      localObject1 = new f();
    }
    paramK = i.a(n, paramK, (p)localObject1);
    o.b("X-Upload-Content-Type", h.getType());
    if (p()) {
      o.b("X-Upload-Content-Length", Long.valueOf(o()));
    }
    paramK.i().putAll(o);
    paramK = a(paramK);
    try
    {
      a(a.c);
      return paramK;
    }
    finally
    {
      paramK.a();
    }
  }
  
  private B d(f.g.b.a.c.k paramK)
    throws IOException
  {
    paramK = c(paramK);
    if (!paramK.o()) {
      return paramK;
    }
    for (;;)
    {
      try
      {
        localObject1 = new f.g.b.a.c.k(paramK.g().D());
        paramK.a();
        q = h.c();
        paramK = (f.g.b.a.c.k)localObject1;
        if (!q.markSupported())
        {
          paramK = (f.g.b.a.c.k)localObject1;
          if (p())
          {
            q = new BufferedInputStream(q);
            paramK = (f.g.b.a.c.k)localObject1;
          }
        }
        p = i.c(paramK, null);
        q();
        new e(this, p);
        if (p()) {
          localObject1 = b(p);
        } else {
          localObject1 = a(p);
        }
      }
      finally
      {
        Object localObject1;
        String str;
        long l1;
        long l2;
        boolean bool2;
        long l3;
        paramK.a();
        continue;
        throw localObject2;
        continue;
        boolean bool1 = false;
        continue;
        bool1 = false;
      }
      try
      {
        if (((B)localObject1).o())
        {
          u = o();
          if (h.b()) {
            q.close();
          }
          a(a.e);
          return localObject1;
        }
        if (((B)localObject1).j() != 308) {
          return localObject1;
        }
        str = ((B)localObject1).g().D();
        if (str != null) {
          paramK = new f.g.b.a.c.k(str);
        }
        l1 = b(((B)localObject1).g().F());
        l2 = l1 - u;
        bool2 = true;
        if ((l2 < 0L) || (l2 > y)) {
          continue;
        }
        bool1 = true;
        g.b(bool1);
        l3 = y - l2;
        if (p())
        {
          if (l3 > 0L)
          {
            q.reset();
            if (l2 != q.skip(l2)) {
              continue;
            }
            bool1 = bool2;
            g.b(bool1);
          }
        }
        else if (l3 == 0L) {
          z = null;
        }
        u = l1;
        a(a.d);
        ((B)localObject1).a();
      }
      finally {}
    }
    ((B)localObject1).a();
    throw paramK;
  }
  
  private long o()
    throws IOException
  {
    if (!m)
    {
      l = h.getLength();
      m = true;
    }
    return l;
  }
  
  private boolean p()
    throws IOException
  {
    return o() >= 0L;
  }
  
  private void q()
    throws IOException
  {
    int i1;
    if (p()) {
      i1 = (int)Math.min(v, o() - u);
    } else {
      i1 = v;
    }
    if (p())
    {
      q.mark(i1);
      localObject = q;
      l1 = i1;
      localObject = new k.a((InputStream)localObject, l1);
      localObject = new H(h.getType(), (InputStream)localObject).b(true).a(l1).a(false);
      t = String.valueOf(o());
    }
    else
    {
      localObject = z;
      int i2;
      int i3;
      if (localObject == null)
      {
        if (w == null) {
          i2 = i1 + 1;
        } else {
          i2 = i1;
        }
        z = new byte[i1 + 1];
        localObject = w;
        if (localObject != null) {
          z[0] = ((Byte)localObject).byteValue();
        }
        i3 = 0;
      }
      else
      {
        i3 = (int)(x - u);
        System.arraycopy(localObject, y - i3, localObject, 0, i3);
        localObject = w;
        if (localObject != null) {
          z[i3] = ((Byte)localObject).byteValue();
        }
        i2 = i1 - i3;
      }
      int i4 = f.g.b.a.g.k.a(q, z, i1 + 1 - i2, i2);
      if (i4 < i2)
      {
        i2 = Math.max(0, i4) + i3;
        i1 = i2;
        if (w != null)
        {
          i1 = i2 + 1;
          w = null;
        }
        if (t.equals("*")) {
          t = String.valueOf(u + i1);
        }
      }
      else
      {
        w = Byte.valueOf(z[i1]);
      }
      localObject = new f.g.b.a.c.e(h.getType(), z, 0, i1);
      x = (u + i1);
    }
    y = i1;
    p.a((p)localObject);
    if (i1 == 0)
    {
      p.i().j("bytes */0");
      return;
    }
    Object localObject = p.i();
    long l1 = u;
    long l2 = i1;
    String str = String.valueOf(t);
    StringBuilder localStringBuilder = new StringBuilder(str.length() + 48);
    localStringBuilder.append("bytes ");
    localStringBuilder.append(l1);
    localStringBuilder.append("-");
    localStringBuilder.append(l2 + l1 - 1L);
    localStringBuilder.append("/");
    localStringBuilder.append(str);
    ((t)localObject).j(localStringBuilder.toString());
  }
  
  public int a()
  {
    return v;
  }
  
  public c a(int paramInt)
  {
    boolean bool;
    if ((paramInt > 0) && (paramInt % 262144 == 0)) {
      bool = true;
    } else {
      bool = false;
    }
    g.a(bool, "chunkSize must be a positive multiple of 262144.");
    v = paramInt;
    return this;
  }
  
  public c a(d paramD)
  {
    s = paramD;
    return this;
  }
  
  public c a(p paramP)
  {
    k = paramP;
    return this;
  }
  
  public c a(t paramT)
  {
    o = paramT;
    return this;
  }
  
  public c a(Q paramQ)
  {
    B = paramQ;
    return this;
  }
  
  public c a(String paramString)
  {
    boolean bool;
    if ((!paramString.equals("POST")) && (!paramString.equals("PUT"))) {
      bool = false;
    } else {
      bool = true;
    }
    g.a(bool);
    n = paramString;
    return this;
  }
  
  public c a(boolean paramBoolean)
  {
    r = paramBoolean;
    return this;
  }
  
  public B a(f.g.b.a.c.k paramK)
    throws IOException
  {
    boolean bool;
    if (g == a.a) {
      bool = true;
    } else {
      bool = false;
    }
    g.a(bool);
    if (r) {
      return b(paramK);
    }
    return d(paramK);
  }
  
  public c b(boolean paramBoolean)
  {
    A = paramBoolean;
    return this;
  }
  
  public boolean b()
  {
    return A;
  }
  
  public t c()
  {
    return o;
  }
  
  public String d()
  {
    return n;
  }
  
  public p e()
  {
    return h;
  }
  
  public p f()
  {
    return k;
  }
  
  public long g()
  {
    return u;
  }
  
  public double h()
    throws IOException
  {
    g.a(p(), "Cannot call getProgress() if the specified AbstractInputStreamContent has no content length. Use  getNumBytesUploaded() to denote progress instead.");
    if (o() == 0L) {
      return 0.0D;
    }
    double d1 = u;
    double d2 = o();
    Double.isNaN(d1);
    Double.isNaN(d2);
    return d1 / d2;
  }
  
  public d i()
  {
    return s;
  }
  
  public Q j()
  {
    return B;
  }
  
  public F k()
  {
    return j;
  }
  
  public a l()
  {
    return g;
  }
  
  public boolean m()
  {
    return r;
  }
  
  @h
  public void n()
    throws IOException
  {
    g.a(p, "The current request should not be null");
    p.a(new f());
    t localT = p.i();
    if (p()) {
      localObject = Long.valueOf(o());
    } else {
      localObject = "*";
    }
    Object localObject = String.valueOf(localObject);
    StringBuilder localStringBuilder = new StringBuilder(((String)localObject).length() + 8);
    localStringBuilder.append("bytes */");
    localStringBuilder.append((String)localObject);
    localT.j(localStringBuilder.toString());
  }
  
  public static enum a
  {
    public a() {}
  }
}
