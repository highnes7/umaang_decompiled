package f.g.b.b.a.a;

import f.g.b.a.d.b;
import f.g.b.a.g.r;
import f.g.b.a.g.z;
import java.util.List;
import java.util.Map;

public final class n
  extends b
{
  @z
  public Boolean allowLargeResults;
  @z
  public String createDisposition;
  @z
  public d defaultDataset;
  @z
  public J destinationTable;
  @z
  public Boolean flattenResults;
  @z
  public Boolean preserveNulls;
  @z
  public String priority;
  @z
  public String query;
  @z
  public Map<String, f> tableDefinitions;
  @z
  public Boolean useQueryCache;
  @z
  public List<M> userDefinedFunctionResources;
  @z
  public String writeDisposition;
  
  static
  {
    r.b(f.class);
    r.b(M.class);
  }
  
  public n() {}
  
  public n a(J paramJ)
  {
    destinationTable = paramJ;
    return this;
  }
  
  public n a(d paramD)
  {
    defaultDataset = paramD;
    return this;
  }
  
  public n a(Boolean paramBoolean)
  {
    allowLargeResults = paramBoolean;
    return this;
  }
  
  public n a(String paramString)
  {
    createDisposition = paramString;
    return this;
  }
  
  public n a(List<M> paramList)
  {
    userDefinedFunctionResources = paramList;
    return this;
  }
  
  public n b(Boolean paramBoolean)
  {
    flattenResults = paramBoolean;
    return this;
  }
  
  public n b(String paramString)
  {
    priority = paramString;
    return this;
  }
  
  public n b(String paramString, Object paramObject)
  {
    return (n)super.b(paramString, paramObject);
  }
  
  public n b(Map<String, f> paramMap)
  {
    tableDefinitions = paramMap;
    return this;
  }
  
  public n c(Boolean paramBoolean)
  {
    preserveNulls = paramBoolean;
    return this;
  }
  
  public n c(String paramString)
  {
    query = paramString;
    return this;
  }
  
  public n clone()
  {
    return (n)super.clone();
  }
  
  public n d(Boolean paramBoolean)
  {
    useQueryCache = paramBoolean;
    return this;
  }
  
  public n d(String paramString)
  {
    writeDisposition = paramString;
    return this;
  }
  
  public Boolean i()
  {
    return allowLargeResults;
  }
  
  public String j()
  {
    return createDisposition;
  }
  
  public d k()
  {
    return defaultDataset;
  }
  
  public J l()
  {
    return destinationTable;
  }
  
  public Boolean m()
  {
    return flattenResults;
  }
  
  public Boolean n()
  {
    return preserveNulls;
  }
  
  public String o()
  {
    return priority;
  }
  
  public String p()
  {
    return query;
  }
  
  public Map<String, f> q()
  {
    return tableDefinitions;
  }
  
  public Boolean r()
  {
    return useQueryCache;
  }
  
  public List<M> s()
  {
    return userDefinedFunctionResources;
  }
  
  public String t()
  {
    return writeDisposition;
  }
  
  public boolean u()
  {
    Boolean localBoolean = flattenResults;
    if ((localBoolean != null) && (localBoolean != r.a)) {
      return localBoolean.booleanValue();
    }
    return true;
  }
  
  public boolean v()
  {
    Boolean localBoolean = useQueryCache;
    if ((localBoolean != null) && (localBoolean != r.a)) {
      return localBoolean.booleanValue();
    }
    return true;
  }
}
