package f.g.b.b.a.a;

import f.g.b.a.d.b;
import f.g.b.a.g.z;
import java.util.List;

public final class m
  extends b
{
  @z
  public Boolean allowJaggedRows;
  @z
  public Boolean allowQuotedNewlines;
  @z
  public String createDisposition;
  @z
  public J destinationTable;
  @z
  public String encoding;
  @z
  public String fieldDelimiter;
  @z
  public Boolean ignoreUnknownValues;
  @z
  public Integer maxBadRecords;
  @z
  public List<String> projectionFields;
  @z
  public String quote;
  @z
  public L schema;
  @z
  public String schemaInline;
  @z
  public String schemaInlineFormat;
  @z
  public Integer skipLeadingRows;
  @z
  public String sourceFormat;
  @z
  public List<String> sourceUris;
  @z
  public String writeDisposition;
  
  public m() {}
  
  public m a(J paramJ)
  {
    destinationTable = paramJ;
    return this;
  }
  
  public m a(L paramL)
  {
    schema = paramL;
    return this;
  }
  
  public m a(Boolean paramBoolean)
  {
    allowJaggedRows = paramBoolean;
    return this;
  }
  
  public m a(Integer paramInteger)
  {
    maxBadRecords = paramInteger;
    return this;
  }
  
  public m a(String paramString)
  {
    createDisposition = paramString;
    return this;
  }
  
  public m a(List<String> paramList)
  {
    projectionFields = paramList;
    return this;
  }
  
  public m b(Boolean paramBoolean)
  {
    allowQuotedNewlines = paramBoolean;
    return this;
  }
  
  public m b(Integer paramInteger)
  {
    skipLeadingRows = paramInteger;
    return this;
  }
  
  public m b(String paramString)
  {
    encoding = paramString;
    return this;
  }
  
  public m b(String paramString, Object paramObject)
  {
    return (m)super.b(paramString, paramObject);
  }
  
  public m b(List<String> paramList)
  {
    sourceUris = paramList;
    return this;
  }
  
  public m c(Boolean paramBoolean)
  {
    ignoreUnknownValues = paramBoolean;
    return this;
  }
  
  public m c(String paramString)
  {
    fieldDelimiter = paramString;
    return this;
  }
  
  public m clone()
  {
    return (m)super.clone();
  }
  
  public m d(String paramString)
  {
    quote = paramString;
    return this;
  }
  
  public m e(String paramString)
  {
    schemaInline = paramString;
    return this;
  }
  
  public m f(String paramString)
  {
    schemaInlineFormat = paramString;
    return this;
  }
  
  public m g(String paramString)
  {
    sourceFormat = paramString;
    return this;
  }
  
  public m h(String paramString)
  {
    writeDisposition = paramString;
    return this;
  }
  
  public Boolean i()
  {
    return allowJaggedRows;
  }
  
  public Boolean j()
  {
    return allowQuotedNewlines;
  }
  
  public String k()
  {
    return createDisposition;
  }
  
  public J l()
  {
    return destinationTable;
  }
  
  public String m()
  {
    return encoding;
  }
  
  public String n()
  {
    return fieldDelimiter;
  }
  
  public Boolean o()
  {
    return ignoreUnknownValues;
  }
  
  public Integer p()
  {
    return maxBadRecords;
  }
  
  public List<String> q()
  {
    return projectionFields;
  }
  
  public String r()
  {
    return quote;
  }
  
  public L s()
  {
    return schema;
  }
  
  public String t()
  {
    return schemaInline;
  }
  
  public String u()
  {
    return schemaInlineFormat;
  }
  
  public Integer v()
  {
    return skipLeadingRows;
  }
  
  public String w()
  {
    return sourceFormat;
  }
  
  public List<String> x()
  {
    return sourceUris;
  }
  
  public String y()
  {
    return writeDisposition;
  }
}
