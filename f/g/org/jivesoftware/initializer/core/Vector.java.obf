package f.g.b.b.a.a;

import f.g.b.a.d.b;
import f.g.b.a.g.r;

public final class z
  extends b
{
  @f.g.b.a.g.z
  public d defaultDataset;
  @f.g.b.a.g.z
  public Boolean dryRun;
  @f.g.b.a.g.z
  public String kind;
  @f.g.b.a.g.z
  public Long maxResults;
  @f.g.b.a.g.z
  public Boolean preserveNulls;
  @f.g.b.a.g.z
  public String query;
  @f.g.b.a.g.z
  public Long timeoutMs;
  @f.g.b.a.g.z
  public Boolean useQueryCache;
  
  public z() {}
  
  public z a(d paramD)
  {
    defaultDataset = paramD;
    return this;
  }
  
  public z a(Boolean paramBoolean)
  {
    dryRun = paramBoolean;
    return this;
  }
  
  public z a(Long paramLong)
  {
    maxResults = paramLong;
    return this;
  }
  
  public z a(String paramString)
  {
    kind = paramString;
    return this;
  }
  
  public z b(Boolean paramBoolean)
  {
    preserveNulls = paramBoolean;
    return this;
  }
  
  public z b(Long paramLong)
  {
    timeoutMs = paramLong;
    return this;
  }
  
  public z b(String paramString)
  {
    query = paramString;
    return this;
  }
  
  public z b(String paramString, Object paramObject)
  {
    return (z)super.b(paramString, paramObject);
  }
  
  public z c(Boolean paramBoolean)
  {
    useQueryCache = paramBoolean;
    return this;
  }
  
  public z clone()
  {
    return (z)super.clone();
  }
  
  public d i()
  {
    return defaultDataset;
  }
  
  public Boolean j()
  {
    return dryRun;
  }
  
  public String k()
  {
    return kind;
  }
  
  public Long l()
  {
    return maxResults;
  }
  
  public Boolean m()
  {
    return preserveNulls;
  }
  
  public String n()
  {
    return query;
  }
  
  public Long o()
  {
    return timeoutMs;
  }
  
  public Boolean p()
  {
    return useQueryCache;
  }
  
  public boolean q()
  {
    Boolean localBoolean = useQueryCache;
    if ((localBoolean != null) && (localBoolean != r.a)) {
      return localBoolean.booleanValue();
    }
    return true;
  }
}
