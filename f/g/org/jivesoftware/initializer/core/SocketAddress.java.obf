package f.g.b.b.a.a;

import f.g.b.a.d.b;
import f.g.b.a.g.r;
import f.g.b.a.g.z;
import java.util.List;

public final class k
  extends b
{
  @z
  public String compression;
  @z
  public String destinationFormat;
  @z
  public String destinationUri;
  @z
  public List<String> destinationUris;
  @z
  public String fieldDelimiter;
  @z
  public Boolean printHeader;
  @z
  public J sourceTable;
  
  public k() {}
  
  public k a(J paramJ)
  {
    sourceTable = paramJ;
    return this;
  }
  
  public k a(Boolean paramBoolean)
  {
    printHeader = paramBoolean;
    return this;
  }
  
  public k a(String paramString)
  {
    compression = paramString;
    return this;
  }
  
  public k a(List<String> paramList)
  {
    destinationUris = paramList;
    return this;
  }
  
  public k b(String paramString)
  {
    destinationFormat = paramString;
    return this;
  }
  
  public k b(String paramString, Object paramObject)
  {
    return (k)super.b(paramString, paramObject);
  }
  
  public k c(String paramString)
  {
    destinationUri = paramString;
    return this;
  }
  
  public k clone()
  {
    return (k)super.clone();
  }
  
  public k d(String paramString)
  {
    fieldDelimiter = paramString;
    return this;
  }
  
  public String i()
  {
    return compression;
  }
  
  public String j()
  {
    return destinationFormat;
  }
  
  public String k()
  {
    return destinationUri;
  }
  
  public List<String> l()
  {
    return destinationUris;
  }
  
  public String m()
  {
    return fieldDelimiter;
  }
  
  public Boolean n()
  {
    return printHeader;
  }
  
  public J o()
  {
    return sourceTable;
  }
  
  public boolean p()
  {
    Boolean localBoolean = printHeader;
    if ((localBoolean != null) && (localBoolean != r.a)) {
      return localBoolean.booleanValue();
    }
    return true;
  }
}
