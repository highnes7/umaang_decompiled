package f.g.b.b.a.a;

import f.g.b.a.d.b;
import f.g.b.a.d.j;
import f.g.b.a.g.r;
import f.g.b.a.g.z;
import java.math.BigInteger;
import java.util.List;

public final class A
  extends b
{
  @z
  public Boolean cacheHit;
  @z
  public List<e> errors;
  @z
  public Boolean jobComplete;
  @z
  public q jobReference;
  @z
  public String kind;
  @z
  public String pageToken;
  @z
  public List<K> rows;
  @z
  public L schema;
  @j
  @z
  public Long totalBytesProcessed;
  @j
  @z
  public BigInteger totalRows;
  
  static
  {
    r.b(e.class);
    r.b(K.class);
  }
  
  public A() {}
  
  public A a(L paramL)
  {
    schema = paramL;
    return this;
  }
  
  public A a(q paramQ)
  {
    jobReference = paramQ;
    return this;
  }
  
  public A a(Boolean paramBoolean)
  {
    cacheHit = paramBoolean;
    return this;
  }
  
  public A a(Long paramLong)
  {
    totalBytesProcessed = paramLong;
    return this;
  }
  
  public A a(String paramString)
  {
    kind = paramString;
    return this;
  }
  
  public A a(BigInteger paramBigInteger)
  {
    totalRows = paramBigInteger;
    return this;
  }
  
  public A a(List<e> paramList)
  {
    errors = paramList;
    return this;
  }
  
  public A b(Boolean paramBoolean)
  {
    jobComplete = paramBoolean;
    return this;
  }
  
  public A b(String paramString)
  {
    pageToken = paramString;
    return this;
  }
  
  public A b(String paramString, Object paramObject)
  {
    return (A)super.b(paramString, paramObject);
  }
  
  public A b(List<K> paramList)
  {
    rows = paramList;
    return this;
  }
  
  public A clone()
  {
    return (A)super.clone();
  }
  
  public Boolean i()
  {
    return cacheHit;
  }
  
  public List<e> j()
  {
    return errors;
  }
  
  public Boolean k()
  {
    return jobComplete;
  }
  
  public q l()
  {
    return jobReference;
  }
  
  public String m()
  {
    return kind;
  }
  
  public String n()
  {
    return pageToken;
  }
  
  public List<K> o()
  {
    return rows;
  }
  
  public L p()
  {
    return schema;
  }
  
  public Long q()
  {
    return totalBytesProcessed;
  }
  
  public BigInteger r()
  {
    return totalRows;
  }
}
