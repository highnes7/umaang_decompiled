package f.d.a.a.c;

public final class i
{
  public static final char a = '\000';
  public static int b = 1000000;
  public static int c = 1000000000;
  public static long d = 10000000000L;
  public static long e = 1000L;
  public static long f = -2147483648L;
  public static long g = 2147483647L;
  public static final String h = String.valueOf(Long.MIN_VALUE);
  public static final char[] i = new char['?'];
  public static final char[] j = new char['?'];
  public static final byte[] k;
  public static final String[] l = { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10" };
  public static final String[] m = { "-1", "-2", "-3", "-4", "-5", "-6", "-7", "-8", "-9", "-10" };
  
  static
  {
    int i9 = 0;
    int i6 = 0;
    int i5 = 0;
    while (i6 < 10)
    {
      int i2 = (char)(i6 + 48);
      int n;
      if (i6 == 0) {
        n = 0;
      } else {
        n = i2;
      }
      int i7 = 0;
      while (i7 < 10)
      {
        int i3 = (char)(i7 + 48);
        int i1;
        if ((i6 == 0) && (i7 == 0)) {
          i1 = 0;
        } else {
          i1 = i3;
        }
        int i8 = 0;
        while (i8 < 10)
        {
          int i4 = (char)(i8 + 48);
          char[] arrayOfChar = i;
          arrayOfChar[i5] = n;
          int i10 = i5 + 1;
          arrayOfChar[i10] = i1;
          int i11 = i5 + 2;
          arrayOfChar[i11] = i4;
          arrayOfChar = j;
          arrayOfChar[i5] = i2;
          arrayOfChar[i10] = i3;
          arrayOfChar[i11] = i4;
          i5 += 4;
          i8 += 1;
        }
        i7 += 1;
      }
      i6 += 1;
    }
    k = new byte['?'];
    i5 = i9;
    while (i5 < 4000)
    {
      k[i5] = ((byte)j[i5]);
      i5 += 1;
    }
  }
  
  public i() {}
  
  public static int a(int paramInt1, byte[] paramArrayOfByte, int paramInt2)
  {
    int i1 = paramInt1 << 2;
    paramInt1 = paramInt2 + 1;
    byte[] arrayOfByte = k;
    int n = i1 + 1;
    paramArrayOfByte[paramInt2] = arrayOfByte[i1];
    paramInt2 = paramInt1 + 1;
    paramArrayOfByte[paramInt1] = arrayOfByte[n];
    paramArrayOfByte[paramInt2] = arrayOfByte[(n + 1)];
    return paramInt2 + 1;
  }
  
  public static int a(int paramInt1, char[] paramArrayOfChar, int paramInt2)
  {
    int i1 = paramInt1 << 2;
    paramInt1 = paramInt2 + 1;
    char[] arrayOfChar = j;
    int n = i1 + 1;
    paramArrayOfChar[paramInt2] = arrayOfChar[i1];
    paramInt2 = paramInt1 + 1;
    paramArrayOfChar[paramInt1] = arrayOfChar[n];
    paramArrayOfChar[paramInt2] = arrayOfChar[(n + 1)];
    return paramInt2 + 1;
  }
  
  public static int a(long paramLong)
  {
    long l1 = d;
    int n = 10;
    while (paramLong >= l1)
    {
      if (n == 19) {
        return n;
      }
      n += 1;
      l1 = (l1 << 1) + (l1 << 3);
    }
    return n;
  }
  
  public static int a(long paramLong, byte[] paramArrayOfByte, int paramInt)
  {
    int n;
    long l1;
    if (paramLong < 0L)
    {
      if (paramLong > f) {
        return b((int)paramLong, paramArrayOfByte, paramInt);
      }
      if (paramLong == Long.MIN_VALUE)
      {
        i1 = h.length();
        n = 0;
        while (n < i1)
        {
          paramArrayOfByte[paramInt] = ((byte)h.charAt(n));
          n += 1;
          paramInt += 1;
        }
        return paramInt;
      }
      paramArrayOfByte[paramInt] = 45;
      l1 = -paramLong;
      n = paramInt + 1;
    }
    else
    {
      l1 = paramLong;
      n = paramInt;
      if (paramLong <= g) {
        return b((int)paramLong, paramArrayOfByte, paramInt);
      }
    }
    int i2 = a(l1) + n;
    paramInt = i2;
    while (l1 > g)
    {
      paramInt -= 3;
      long l2 = e;
      paramLong = l1 / l2;
      a((int)(l1 - l2 * paramLong), paramArrayOfByte, paramInt);
      l1 = paramLong;
    }
    int i3;
    for (int i1 = (int)l1; i1 >= 1000; i1 = i3)
    {
      paramInt -= 3;
      i3 = i1 / 1000;
      a(i1 - i3 * 1000, paramArrayOfByte, paramInt);
    }
    c(i1, paramArrayOfByte, n);
    return i2;
  }
  
  public static int a(long paramLong, char[] paramArrayOfChar, int paramInt)
  {
    int n;
    long l1;
    if (paramLong < 0L)
    {
      if (paramLong > f) {
        return b((int)paramLong, paramArrayOfChar, paramInt);
      }
      if (paramLong == Long.MIN_VALUE)
      {
        n = h.length();
        h.getChars(0, n, paramArrayOfChar, paramInt);
        return paramInt + n;
      }
      paramArrayOfChar[paramInt] = '-';
      l1 = -paramLong;
      n = paramInt + 1;
    }
    else
    {
      l1 = paramLong;
      n = paramInt;
      if (paramLong <= g) {
        return b((int)paramLong, paramArrayOfChar, paramInt);
      }
    }
    int i2 = a(l1) + n;
    paramInt = i2;
    while (l1 > g)
    {
      paramInt -= 3;
      long l2 = e;
      paramLong = l1 / l2;
      a((int)(l1 - l2 * paramLong), paramArrayOfChar, paramInt);
      l1 = paramLong;
    }
    int i3;
    for (int i1 = (int)l1; i1 >= 1000; i1 = i3)
    {
      paramInt -= 3;
      i3 = i1 / 1000;
      a(i1 - i3 * 1000, paramArrayOfChar, paramInt);
    }
    c(i1, paramArrayOfChar, n);
    return i2;
  }
  
  public static String a(double paramDouble)
  {
    return Double.toString(paramDouble);
  }
  
  public static String a(int paramInt)
  {
    String[] arrayOfString = l;
    if (paramInt < arrayOfString.length)
    {
      if (paramInt >= 0) {
        return arrayOfString[paramInt];
      }
      int n = -paramInt - 1;
      arrayOfString = m;
      if (n < arrayOfString.length) {
        return arrayOfString[n];
      }
    }
    return Integer.toString(paramInt);
  }
  
  public static int b(int paramInt1, byte[] paramArrayOfByte, int paramInt2)
  {
    int i1 = paramInt1;
    int n = paramInt2;
    if (paramInt1 < 0)
    {
      if (paramInt1 == Integer.MIN_VALUE) {
        return a(paramInt1, paramArrayOfByte, paramInt2);
      }
      paramArrayOfByte[paramInt2] = 45;
      i1 = -paramInt1;
      n = paramInt2 + 1;
    }
    if (i1 < b)
    {
      if (i1 < 1000)
      {
        if (i1 < 10)
        {
          paramArrayOfByte[n] = ((byte)(i1 + 48));
          return n + 1;
        }
        return c(i1, paramArrayOfByte, n);
      }
      paramInt1 = i1 / 1000;
      return a(i1 - paramInt1 * 1000, paramArrayOfByte, c(paramInt1, paramArrayOfByte, n));
    }
    if (i1 >= c) {
      paramInt2 = 1;
    } else {
      paramInt2 = 0;
    }
    if (paramInt2 != 0)
    {
      paramInt1 = c;
      i1 -= paramInt1;
      if (i1 >= paramInt1)
      {
        i1 -= paramInt1;
        paramInt1 = n + 1;
        paramArrayOfByte[n] = 50;
      }
      else
      {
        paramInt1 = n + 1;
        paramArrayOfByte[n] = 49;
      }
    }
    else
    {
      paramInt1 = n;
    }
    n = i1 / 1000;
    int i2 = n / 1000;
    if (paramInt2 != 0) {
      paramInt1 = a(i2, paramArrayOfByte, paramInt1);
    } else {
      paramInt1 = c(i2, paramArrayOfByte, paramInt1);
    }
    return a(i1 - n * 1000, paramArrayOfByte, a(n - i2 * 1000, paramArrayOfByte, paramInt1));
  }
  
  public static int b(int paramInt1, char[] paramArrayOfChar, int paramInt2)
  {
    int i1 = paramInt1;
    int n = paramInt2;
    if (paramInt1 < 0)
    {
      if (paramInt1 == Integer.MIN_VALUE) {
        return a(paramInt1, paramArrayOfChar, paramInt2);
      }
      paramArrayOfChar[paramInt2] = '-';
      i1 = -paramInt1;
      n = paramInt2 + 1;
    }
    if (i1 < b)
    {
      if (i1 < 1000)
      {
        if (i1 < 10)
        {
          paramArrayOfChar[n] = ((char)(i1 + 48));
          return n + 1;
        }
        return c(i1, paramArrayOfChar, n);
      }
      paramInt1 = i1 / 1000;
      return a(i1 - paramInt1 * 1000, paramArrayOfChar, c(paramInt1, paramArrayOfChar, n));
    }
    if (i1 >= c) {
      paramInt2 = 1;
    } else {
      paramInt2 = 0;
    }
    if (paramInt2 != 0)
    {
      paramInt1 = c;
      i1 -= paramInt1;
      if (i1 >= paramInt1)
      {
        i1 -= paramInt1;
        paramInt1 = n + 1;
        paramArrayOfChar[n] = '2';
      }
      else
      {
        paramInt1 = n + 1;
        paramArrayOfChar[n] = '1';
      }
    }
    else
    {
      paramInt1 = n;
    }
    n = i1 / 1000;
    int i2 = n / 1000;
    if (paramInt2 != 0) {
      paramInt1 = a(i2, paramArrayOfChar, paramInt1);
    } else {
      paramInt1 = c(i2, paramArrayOfChar, paramInt1);
    }
    return a(i1 - n * 1000, paramArrayOfChar, a(n - i2 * 1000, paramArrayOfChar, paramInt1));
  }
  
  public static String b(long paramLong)
  {
    if ((paramLong <= 2147483647L) && (paramLong >= -2147483648L)) {
      return a((int)paramLong);
    }
    return Long.toString(paramLong);
  }
  
  public static int c(int paramInt1, byte[] paramArrayOfByte, int paramInt2)
  {
    paramInt1 <<= 2;
    char[] arrayOfChar = i;
    int n = paramInt1 + 1;
    int i1 = arrayOfChar[paramInt1];
    paramInt1 = paramInt2;
    if (i1 != 0)
    {
      paramArrayOfByte[paramInt2] = ((byte)i1);
      paramInt1 = paramInt2 + 1;
    }
    i1 = i[n];
    paramInt2 = paramInt1;
    if (i1 != 0)
    {
      paramArrayOfByte[paramInt1] = ((byte)i1);
      paramInt2 = paramInt1 + 1;
    }
    paramArrayOfByte[paramInt2] = ((byte)i[(n + 1)]);
    return paramInt2 + 1;
  }
  
  public static int c(int paramInt1, char[] paramArrayOfChar, int paramInt2)
  {
    paramInt1 <<= 2;
    char[] arrayOfChar = i;
    int i1 = paramInt1 + 1;
    int n = arrayOfChar[paramInt1];
    paramInt1 = paramInt2;
    if (n != 0)
    {
      paramArrayOfChar[paramInt2] = n;
      paramInt1 = paramInt2 + 1;
    }
    n = i[i1];
    paramInt2 = paramInt1;
    if (n != 0)
    {
      paramArrayOfChar[paramInt1] = n;
      paramInt2 = paramInt1 + 1;
    }
    paramArrayOfChar[paramInt2] = i[(i1 + 1)];
    return paramInt2 + 1;
  }
}
