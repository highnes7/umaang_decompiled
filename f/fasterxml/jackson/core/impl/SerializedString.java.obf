package f.d.a.a.c;

import f.d.a.a.q;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.Serializable;
import java.nio.ByteBuffer;

public class l
  implements q, Serializable
{
  public final String a;
  public byte[] b;
  public byte[] c;
  public char[] d;
  public transient String e;
  
  public l(String paramString)
  {
    if (paramString != null)
    {
      a = paramString;
      return;
    }
    throw new IllegalStateException("Null String illegal for SerializedString");
  }
  
  private void a(ObjectInputStream paramObjectInputStream)
    throws IOException
  {
    e = paramObjectInputStream.readUTF();
  }
  
  private void a(ObjectOutputStream paramObjectOutputStream)
    throws IOException
  {
    paramObjectOutputStream.writeUTF(a);
  }
  
  public final int a()
  {
    return a.length();
  }
  
  public int a(OutputStream paramOutputStream)
    throws IOException
  {
    byte[] arrayOfByte2 = b;
    byte[] arrayOfByte1 = arrayOfByte2;
    if (arrayOfByte2 == null)
    {
      arrayOfByte1 = f.a().c(a);
      b = arrayOfByte1;
    }
    int i = arrayOfByte1.length;
    paramOutputStream.write(arrayOfByte1, 0, i);
    return i;
  }
  
  public int a(ByteBuffer paramByteBuffer)
  {
    byte[] arrayOfByte2 = b;
    byte[] arrayOfByte1 = arrayOfByte2;
    if (arrayOfByte2 == null)
    {
      arrayOfByte1 = f.a().c(a);
      b = arrayOfByte1;
    }
    int i = arrayOfByte1.length;
    if (i > paramByteBuffer.remaining()) {
      return -1;
    }
    paramByteBuffer.put(arrayOfByte1, 0, i);
    return i;
  }
  
  public int a(byte[] paramArrayOfByte, int paramInt)
  {
    byte[] arrayOfByte2 = b;
    byte[] arrayOfByte1 = arrayOfByte2;
    if (arrayOfByte2 == null)
    {
      arrayOfByte1 = f.a().c(a);
      b = arrayOfByte1;
    }
    int i = arrayOfByte1.length;
    if (paramInt + i > paramArrayOfByte.length) {
      return -1;
    }
    System.arraycopy(arrayOfByte1, 0, paramArrayOfByte, paramInt, i);
    return i;
  }
  
  public int a(char[] paramArrayOfChar, int paramInt)
  {
    char[] arrayOfChar2 = d;
    char[] arrayOfChar1 = arrayOfChar2;
    if (arrayOfChar2 == null)
    {
      arrayOfChar1 = f.a().b(a);
      d = arrayOfChar1;
    }
    int i = arrayOfChar1.length;
    if (paramInt + i > paramArrayOfChar.length) {
      return -1;
    }
    System.arraycopy(arrayOfChar1, 0, paramArrayOfChar, paramInt, i);
    return i;
  }
  
  public int b(OutputStream paramOutputStream)
    throws IOException
  {
    byte[] arrayOfByte2 = c;
    byte[] arrayOfByte1 = arrayOfByte2;
    if (arrayOfByte2 == null)
    {
      arrayOfByte1 = f.a().a(a);
      c = arrayOfByte1;
    }
    int i = arrayOfByte1.length;
    paramOutputStream.write(arrayOfByte1, 0, i);
    return i;
  }
  
  public int b(ByteBuffer paramByteBuffer)
  {
    byte[] arrayOfByte2 = c;
    byte[] arrayOfByte1 = arrayOfByte2;
    if (arrayOfByte2 == null)
    {
      arrayOfByte1 = f.a().a(a);
      c = arrayOfByte1;
    }
    int i = arrayOfByte1.length;
    if (i > paramByteBuffer.remaining()) {
      return -1;
    }
    paramByteBuffer.put(arrayOfByte1, 0, i);
    return i;
  }
  
  public int b(byte[] paramArrayOfByte, int paramInt)
  {
    byte[] arrayOfByte2 = c;
    byte[] arrayOfByte1 = arrayOfByte2;
    if (arrayOfByte2 == null)
    {
      arrayOfByte1 = f.a().a(a);
      c = arrayOfByte1;
    }
    int i = arrayOfByte1.length;
    if (paramInt + i > paramArrayOfByte.length) {
      return -1;
    }
    System.arraycopy(arrayOfByte1, 0, paramArrayOfByte, paramInt, i);
    return i;
  }
  
  public int b(char[] paramArrayOfChar, int paramInt)
  {
    String str = a;
    int i = str.length();
    if (paramInt + i > paramArrayOfChar.length) {
      return -1;
    }
    str.getChars(0, i, paramArrayOfChar, paramInt);
    return i;
  }
  
  public final char[] b()
  {
    char[] arrayOfChar2 = d;
    char[] arrayOfChar1 = arrayOfChar2;
    if (arrayOfChar2 == null)
    {
      arrayOfChar1 = f.a().b(a);
      d = arrayOfChar1;
    }
    return arrayOfChar1;
  }
  
  public final byte[] c()
  {
    byte[] arrayOfByte2 = b;
    byte[] arrayOfByte1 = arrayOfByte2;
    if (arrayOfByte2 == null)
    {
      arrayOfByte1 = f.a().c(a);
      b = arrayOfByte1;
    }
    return arrayOfByte1;
  }
  
  public final byte[] d()
  {
    byte[] arrayOfByte2 = c;
    byte[] arrayOfByte1 = arrayOfByte2;
    if (arrayOfByte2 == null)
    {
      arrayOfByte1 = f.a().a(a);
      c = arrayOfByte1;
    }
    return arrayOfByte1;
  }
  
  public Object e()
  {
    return new l(e);
  }
  
  public final boolean equals(Object paramObject)
  {
    if (paramObject == this) {
      return true;
    }
    if ((paramObject != null) && (paramObject.getClass() == l.class))
    {
      paramObject = (l)paramObject;
      return a.equals(a);
    }
    return false;
  }
  
  public final String getValue()
  {
    return a;
  }
  
  public final int hashCode()
  {
    return a.hashCode();
  }
  
  public final String toString()
  {
    return a;
  }
}
